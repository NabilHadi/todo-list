(()=>{var e={346:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,'/***\n    The new CSS reset - version 1.8.4 (last updated 14.2.2023)\n    GitHub page: https://github.com/elad2412/the-new-css-reset\n***/\n\n/*\n    Remove all the styles of the "User-Agent-Stylesheet", except for the \'display\' property\n    - The "symbol *" part is to solve Firefox SVG sprite bug\n */\n*:where(:not(html, iframe, canvas, img, svg, video, audio):not(svg *, symbol *)) {\n    all: unset;\n    display: revert;\n}\n\n/* Preferred box-sizing value */\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n}\n\n/* Reapply the pointer cursor for anchor tags */\na, button {\n    cursor: revert;\n}\n\n/* Remove list styles (bullets/numbers) */\nol, ul, menu {\n    list-style: none;\n}\n\n/* For images to not be able to exceed their container */\nimg {\n    max-inline-size: 100%;\n    max-block-size: 100%;\n}\n\n/* removes spacing between cells in tables */\ntable {\n    border-collapse: collapse;\n}\n\n/* Safari - solving issue when using user-select:none on the <body> text input doesn\'t working */\ninput, textarea {\n    -webkit-user-select: auto;\n}\n\n/* revert the \'white-space\' property for textarea elements on Safari */\ntextarea {\n    white-space: revert;\n}\n\n/* minimum style to allow to style meter element */\nmeter {\n    -webkit-appearance: revert;\n    appearance: revert;\n}\n\n/* preformatted text - use only for this feature */\n:where(pre) {\n    all: revert;\n}\n\n/* reset default text opacity of input placeholder */\n::placeholder {\n    color: unset;\n}\n\n/* remove default dot (•) sign */\n::marker {\n    content: initial;\n}\n\n/* fix the feature of \'hidden\' attribute.\n   display:revert; revert to element instead of attribute */\n:where([hidden]) {\n    display: none;\n}\n\n/* revert for bug in Chromium browsers\n   - fix for the content editable attribute will work properly.\n   - webkit-user-select: auto; added for Safari in case of using user-select:none on wrapper element*/\n:where([contenteditable]:not([contenteditable="false"])) {\n    -moz-user-modify: read-write;\n    -webkit-user-modify: read-write;\n    overflow-wrap: break-word;\n    -webkit-line-break: after-white-space;\n    -webkit-user-select: auto;\n}\n\n/* apply back the draggable feature - exist only in Chromium and Safari */\n:where([draggable="true"]) {\n    -webkit-user-drag: element;\n}\n\n/* Revert Modal native behavior */\n:where(dialog:modal) {\n    all: revert;\n}',"",{version:3,sources:["webpack://./node_modules/the-new-css-reset/css/reset.css"],names:[],mappings:"AAAA;;;GAGG;;AAEH;;;EAGE;AACF;IACI,UAAU;IACV,eAAe;AACnB;;AAEA,+BAA+B;AAC/B;;;IAGI,sBAAsB;AAC1B;;AAEA,+CAA+C;AAC/C;IACI,cAAc;AAClB;;AAEA,yCAAyC;AACzC;IACI,gBAAgB;AACpB;;AAEA,wDAAwD;AACxD;IACI,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA,4CAA4C;AAC5C;IACI,yBAAyB;AAC7B;;AAEA,gGAAgG;AAChG;IACI,yBAAyB;AAC7B;;AAEA,sEAAsE;AACtE;IACI,mBAAmB;AACvB;;AAEA,kDAAkD;AAClD;IACI,0BAA0B;IAC1B,kBAAkB;AACtB;;AAEA,kDAAkD;AAClD;IACI,WAAW;AACf;;AAEA,oDAAoD;AACpD;IACI,YAAY;AAChB;;AAEA,gCAAgC;AAChC;IACI,gBAAgB;AACpB;;AAEA;2DAC2D;AAC3D;IACI,aAAa;AACjB;;AAEA;;qGAEqG;AACrG;IACI,4BAA4B;IAC5B,+BAA+B;IAC/B,yBAAyB;IACzB,qCAAqC;IACrC,yBAAyB;AAC7B;;AAEA,yEAAyE;AACzE;IACI,0BAA0B;AAC9B;;AAEA,iCAAiC;AACjC;IACI,WAAW;AACf",sourcesContent:['/***\n    The new CSS reset - version 1.8.4 (last updated 14.2.2023)\n    GitHub page: https://github.com/elad2412/the-new-css-reset\n***/\n\n/*\n    Remove all the styles of the "User-Agent-Stylesheet", except for the \'display\' property\n    - The "symbol *" part is to solve Firefox SVG sprite bug\n */\n*:where(:not(html, iframe, canvas, img, svg, video, audio):not(svg *, symbol *)) {\n    all: unset;\n    display: revert;\n}\n\n/* Preferred box-sizing value */\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n}\n\n/* Reapply the pointer cursor for anchor tags */\na, button {\n    cursor: revert;\n}\n\n/* Remove list styles (bullets/numbers) */\nol, ul, menu {\n    list-style: none;\n}\n\n/* For images to not be able to exceed their container */\nimg {\n    max-inline-size: 100%;\n    max-block-size: 100%;\n}\n\n/* removes spacing between cells in tables */\ntable {\n    border-collapse: collapse;\n}\n\n/* Safari - solving issue when using user-select:none on the <body> text input doesn\'t working */\ninput, textarea {\n    -webkit-user-select: auto;\n}\n\n/* revert the \'white-space\' property for textarea elements on Safari */\ntextarea {\n    white-space: revert;\n}\n\n/* minimum style to allow to style meter element */\nmeter {\n    -webkit-appearance: revert;\n    appearance: revert;\n}\n\n/* preformatted text - use only for this feature */\n:where(pre) {\n    all: revert;\n}\n\n/* reset default text opacity of input placeholder */\n::placeholder {\n    color: unset;\n}\n\n/* remove default dot (•) sign */\n::marker {\n    content: initial;\n}\n\n/* fix the feature of \'hidden\' attribute.\n   display:revert; revert to element instead of attribute */\n:where([hidden]) {\n    display: none;\n}\n\n/* revert for bug in Chromium browsers\n   - fix for the content editable attribute will work properly.\n   - webkit-user-select: auto; added for Safari in case of using user-select:none on wrapper element*/\n:where([contenteditable]:not([contenteditable="false"])) {\n    -moz-user-modify: read-write;\n    -webkit-user-modify: read-write;\n    overflow-wrap: break-word;\n    -webkit-line-break: after-white-space;\n    -webkit-user-select: auto;\n}\n\n/* apply back the draggable feature - exist only in Chromium and Safari */\n:where([draggable="true"]) {\n    -webkit-user-drag: element;\n}\n\n/* Revert Modal native behavior */\n:where(dialog:modal) {\n    all: revert;\n}'],sourceRoot:""}]);const s=a},426:(e,n,t)=>{"use strict";t.d(n,{Z:()=>A});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),s=t(667),l=t.n(s),c=new URL(t(390),t.b),d=a()(r()),u=l()(c);d.push([e.id,'@font-face {\n  font-family: "Roboto";\n  src: url('+u+') format("truetype");\n  font-weight: 400;\n  font-style: normal;\n}\n\n:root {\n  --ff-primary: "Roboto", sans-serif;\n}\n\nbody {\n  font-family: var(--ff-primary);\n}\n\nhtml,\nbody {\n  height: 100%;\n}\n\n#content {\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  align-items: center;\n  justify-content: center;\n  background-color: aliceblue;\n}\n\n.btn {\n  cursor: pointer;\n  user-select: none;\n  text-align: center;\n  padding: 5px;\n}\n\n.btn-round {\n  border-radius: 20px;\n}\n\n.btn:active {\n  cursor: default;\n  opacity: 0.8;\n}\n\n.priority-1 {\n  background-color: white;\n}\n\n.priority-2 {\n  background-color: hsl(240, 61%, 93%);\n}\n\n.priority-3 {\n  background-color: hsl(108, 58%, 80%);\n}\n\n.priority-4 {\n  background-color: hsl(66, 59%, 65%);\n}\n\n.priority-5 {\n  background-color: hsl(0, 59%, 55%);\n}\n\n.priority-1,\n.priority-2,\n.priority-3,\n.priority-4,\n.priority-5 {\n  position: relative;\n}\n\n.priority-1::before,\n.priority-2::before,\n.priority-3::before,\n.priority-4::before,\n.priority-5::before {\n  position: absolute;\n  font-size: large;\n  top: -20%;\n  left: 0;\n  padding: 5px;\n  border: 1px solid black;\n  border-radius: 50% 50%;\n  background-color: inherit;\n}\n\n.priority-1::before {\n  content: "P1";\n}\n\n.priority-2::before {\n  content: "P2";\n}\n\n.priority-3::before {\n  content: "P3";\n}\n\n.priority-4::before {\n  content: "P4";\n}\n\n.priority-5::before {\n  content: "P5";\n}\n\nmain {\n  text-align: center;\n  margin-top: 2rem;\n}\n\nh1 {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.new-btns-container {\n  display: flex;\n  justify-content: space-between;\n  padding: 1rem;\n}\n\n.new-todo-btn,\n.new-project-btn {\n  background-color: white;\n  padding: 1rem;\n}\n\n.projects-list-container {\n  padding: 1rem;\n}\n\n.projects-list {\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n  justify-content: center;\n}\n\n.projects-list li {\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid;\n}\n\n.projects-list li .project-item {\n  width: 100%;\n  padding: 10px;\n}\n\n.projects-list li .project-edit-btn,\n.projects-list li .project-delete-btn {\n  flex: 1;\n  background-color: #888;\n}\n\n.projects-list li:not(:last-child) button {\n  border-right: none;\n}\n\n.projects-list li .current-project {\n  background-color: white;\n}\n\n.todos-list-container {\n  padding: 1rem;\n}\n\n.todos-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.todos-list li {\n  display: flex;\n  border: 1px solid;\n}\n\n.todo-item {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 1rem 2rem;\n}\n\n.todo-complete {\n  opacity: 0.5;\n}\n\n.delete-btn {\n  flex-shrink: 1;\n  flex-grow: 0;\n  padding: 3px;\n  border-left: none;\n}\n\n.modal {\n  display: none;\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0, 0, 0); /* Fallback color */\n  background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n}\n\n.modal > * {\n  position: relative;\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%; /* Could be more or less, depending on screen size */\n}\n\n.show {\n  display: block;\n}\n\n/* The Close Button */\n.close {\n  position: absolute;\n  right: 10px;\n  top: 5px;\n  color: #aaa;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\nform {\n  border: 3px solid antiquewhite;\n  border-radius: 10px;\n  margin-top: 1rem;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\nlabel {\n  font-weight: 600;\n  font-size: 1.2rem;\n}\n\ninput:not([type="checkbox"]),\ntextarea {\n  min-height: 2rem;\n  border-radius: 5px;\n  border: none;\n  background-color: rgba(0, 0, 0, 0.048);\n  font-size: 1.5rem;\n  padding: 5px;\n}\n\ninput[type="checkbox"] {\n  all: revert;\n}\n\nselect {\n  all: revert;\n}\n\nform button {\n  background-color: white;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@font-face {\n  font-family: "Roboto";\n  src: url("./assests/Roboto-Regular.ttf") format("truetype");\n  font-weight: 400;\n  font-style: normal;\n}\n\n:root {\n  --ff-primary: "Roboto", sans-serif;\n}\n\nbody {\n  font-family: var(--ff-primary);\n}\n\nhtml,\nbody {\n  height: 100%;\n}\n\n#content {\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  align-items: center;\n  justify-content: center;\n  background-color: aliceblue;\n}\n\n.btn {\n  cursor: pointer;\n  user-select: none;\n  text-align: center;\n  padding: 5px;\n}\n\n.btn-round {\n  border-radius: 20px;\n}\n\n.btn:active {\n  cursor: default;\n  opacity: 0.8;\n}\n\n.priority-1 {\n  background-color: white;\n}\n\n.priority-2 {\n  background-color: hsl(240, 61%, 93%);\n}\n\n.priority-3 {\n  background-color: hsl(108, 58%, 80%);\n}\n\n.priority-4 {\n  background-color: hsl(66, 59%, 65%);\n}\n\n.priority-5 {\n  background-color: hsl(0, 59%, 55%);\n}\n\n.priority-1,\n.priority-2,\n.priority-3,\n.priority-4,\n.priority-5 {\n  position: relative;\n}\n\n.priority-1::before,\n.priority-2::before,\n.priority-3::before,\n.priority-4::before,\n.priority-5::before {\n  position: absolute;\n  font-size: large;\n  top: -20%;\n  left: 0;\n  padding: 5px;\n  border: 1px solid black;\n  border-radius: 50% 50%;\n  background-color: inherit;\n}\n\n.priority-1::before {\n  content: "P1";\n}\n\n.priority-2::before {\n  content: "P2";\n}\n\n.priority-3::before {\n  content: "P3";\n}\n\n.priority-4::before {\n  content: "P4";\n}\n\n.priority-5::before {\n  content: "P5";\n}\n\nmain {\n  text-align: center;\n  margin-top: 2rem;\n}\n\nh1 {\n  font-size: 2rem;\n  font-weight: bold;\n}\n\n.new-btns-container {\n  display: flex;\n  justify-content: space-between;\n  padding: 1rem;\n}\n\n.new-todo-btn,\n.new-project-btn {\n  background-color: white;\n  padding: 1rem;\n}\n\n.projects-list-container {\n  padding: 1rem;\n}\n\n.projects-list {\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n  justify-content: center;\n}\n\n.projects-list li {\n  display: flex;\n  flex-wrap: wrap;\n  border: 1px solid;\n}\n\n.projects-list li .project-item {\n  width: 100%;\n  padding: 10px;\n}\n\n.projects-list li .project-edit-btn,\n.projects-list li .project-delete-btn {\n  flex: 1;\n  background-color: #888;\n}\n\n.projects-list li:not(:last-child) button {\n  border-right: none;\n}\n\n.projects-list li .current-project {\n  background-color: white;\n}\n\n.todos-list-container {\n  padding: 1rem;\n}\n\n.todos-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.todos-list li {\n  display: flex;\n  border: 1px solid;\n}\n\n.todo-item {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 1rem 2rem;\n}\n\n.todo-complete {\n  opacity: 0.5;\n}\n\n.delete-btn {\n  flex-shrink: 1;\n  flex-grow: 0;\n  padding: 3px;\n  border-left: none;\n}\n\n.modal {\n  display: none;\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0, 0, 0); /* Fallback color */\n  background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n}\n\n.modal > * {\n  position: relative;\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%; /* Could be more or less, depending on screen size */\n}\n\n.show {\n  display: block;\n}\n\n/* The Close Button */\n.close {\n  position: absolute;\n  right: 10px;\n  top: 5px;\n  color: #aaa;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\nform {\n  border: 3px solid antiquewhite;\n  border-radius: 10px;\n  margin-top: 1rem;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\nlabel {\n  font-weight: 600;\n  font-size: 1.2rem;\n}\n\ninput:not([type="checkbox"]),\ntextarea {\n  min-height: 2rem;\n  border-radius: 5px;\n  border: none;\n  background-color: rgba(0, 0, 0, 0.048);\n  font-size: 1.5rem;\n  padding: 5px;\n}\n\ninput[type="checkbox"] {\n  all: revert;\n}\n\nselect {\n  all: revert;\n}\n\nform button {\n  background-color: white;\n}\n'],sourceRoot:""}]);const A=d},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},377:(e,n,t)=>{var o=t(832),r=t(652),i=t(801),a=t(30),s=t(618),l=t(49),c=t(971);c.alea=o,c.xor128=r,c.xorwow=i,c.xorshift7=a,c.xor4096=s,c.tychei=l,e.exports=c},832:function(e,n,t){var o;!function(e,r,i){function a(e){var n,t=this,o=(n=4022871197,function(e){e=String(e);for(var t=0;t<e.length;t++){var o=.02519603282416938*(n+=e.charCodeAt(t));o-=n=o>>>0,n=(o*=n)>>>0,n+=4294967296*(o-=n)}return 2.3283064365386963e-10*(n>>>0)});t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=o(" "),t.s1=o(" "),t.s2=o(" "),t.s0-=o(e),t.s0<0&&(t.s0+=1),t.s1-=o(e),t.s1<0&&(t.s1+=1),t.s2-=o(e),t.s2<0&&(t.s2+=1),o=null}function s(e,n){return n.c=e.c,n.s0=e.s0,n.s1=e.s1,n.s2=e.s2,n}function l(e,n){var t=new a(e),o=n&&n.state,r=t.next;return r.int32=function(){return 4294967296*t.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,o&&("object"==typeof o&&s(o,t),r.state=function(){return s(t,{})}),r}r&&r.exports?r.exports=l:t.amdD&&t.amdO?void 0===(o=function(){return l}.call(n,t,n,r))||(r.exports=o):this.alea=l}(0,e=t.nmd(e),t.amdD)},49:function(e,n,t){var o;!function(e,r,i){function a(e){var n=this,t="";n.next=function(){var e=n.b,t=n.c,o=n.d,r=n.a;return e=e<<25^e>>>7^t,t=t-o|0,o=o<<24^o>>>8^r,r=r-e|0,n.b=e=e<<20^e>>>12^t,n.c=t=t-o|0,n.d=o<<16^t>>>16^r,n.a=r-e|0},n.a=0,n.b=0,n.c=-1640531527,n.d=1367130551,e===Math.floor(e)?(n.a=e/4294967296|0,n.b=0|e):t+=e;for(var o=0;o<t.length+20;o++)n.b^=0|t.charCodeAt(o),n.next()}function s(e,n){return n.a=e.a,n.b=e.b,n.c=e.c,n.d=e.d,n}function l(e,n){var t=new a(e),o=n&&n.state,r=function(){return(t.next()>>>0)/4294967296};return r.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=t.next,r.quick=r,o&&("object"==typeof o&&s(o,t),r.state=function(){return s(t,{})}),r}r&&r.exports?r.exports=l:t.amdD&&t.amdO?void 0===(o=function(){return l}.call(n,t,n,r))||(r.exports=o):this.tychei=l}(0,e=t.nmd(e),t.amdD)},652:function(e,n,t){var o;!function(e,r,i){function a(e){var n=this,t="";n.x=0,n.y=0,n.z=0,n.w=0,n.next=function(){var e=n.x^n.x<<11;return n.x=n.y,n.y=n.z,n.z=n.w,n.w^=n.w>>>19^e^e>>>8},e===(0|e)?n.x=e:t+=e;for(var o=0;o<t.length+64;o++)n.x^=0|t.charCodeAt(o),n.next()}function s(e,n){return n.x=e.x,n.y=e.y,n.z=e.z,n.w=e.w,n}function l(e,n){var t=new a(e),o=n&&n.state,r=function(){return(t.next()>>>0)/4294967296};return r.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=t.next,r.quick=r,o&&("object"==typeof o&&s(o,t),r.state=function(){return s(t,{})}),r}r&&r.exports?r.exports=l:t.amdD&&t.amdO?void 0===(o=function(){return l}.call(n,t,n,r))||(r.exports=o):this.xor128=l}(0,e=t.nmd(e),t.amdD)},618:function(e,n,t){var o;!function(e,r,i){function a(e){var n=this;n.next=function(){var e,t,o=n.w,r=n.X,i=n.i;return n.w=o=o+1640531527|0,t=r[i+34&127],e=r[i=i+1&127],t^=t<<13,e^=e<<17,t^=t>>>15,e^=e>>>12,t=r[i]=t^e,n.i=i,t+(o^o>>>16)|0},function(e,n){var t,o,r,i,a,s=[],l=128;for(n===(0|n)?(o=n,n=null):(n+="\0",o=0,l=Math.max(l,n.length)),r=0,i=-32;i<l;++i)n&&(o^=n.charCodeAt((i+32)%n.length)),0===i&&(a=o),o^=o<<10,o^=o>>>15,o^=o<<4,o^=o>>>13,i>=0&&(a=a+1640531527|0,r=0==(t=s[127&i]^=o+a)?r+1:0);for(r>=128&&(s[127&(n&&n.length||0)]=-1),r=127,i=512;i>0;--i)o=s[r+34&127],t=s[r=r+1&127],o^=o<<13,t^=t<<17,o^=o>>>15,t^=t>>>12,s[r]=o^t;e.w=a,e.X=s,e.i=r}(n,e)}function s(e,n){return n.i=e.i,n.w=e.w,n.X=e.X.slice(),n}function l(e,n){null==e&&(e=+new Date);var t=new a(e),o=n&&n.state,r=function(){return(t.next()>>>0)/4294967296};return r.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=t.next,r.quick=r,o&&(o.X&&s(o,t),r.state=function(){return s(t,{})}),r}r&&r.exports?r.exports=l:t.amdD&&t.amdO?void 0===(o=function(){return l}.call(n,t,n,r))||(r.exports=o):this.xor4096=l}(0,e=t.nmd(e),t.amdD)},30:function(e,n,t){var o;!function(e,r,i){function a(e){var n=this;n.next=function(){var e,t,o=n.x,r=n.i;return e=o[r],t=(e^=e>>>7)^e<<24,t^=(e=o[r+1&7])^e>>>10,t^=(e=o[r+3&7])^e>>>3,t^=(e=o[r+4&7])^e<<7,e=o[r+7&7],t^=(e^=e<<13)^e<<9,o[r]=t,n.i=r+1&7,t},function(e,n){var t,o=[];if(n===(0|n))o[0]=n;else for(n=""+n,t=0;t<n.length;++t)o[7&t]=o[7&t]<<15^n.charCodeAt(t)+o[t+1&7]<<13;for(;o.length<8;)o.push(0);for(t=0;t<8&&0===o[t];++t);for(8==t?o[7]=-1:o[t],e.x=o,e.i=0,t=256;t>0;--t)e.next()}(n,e)}function s(e,n){return n.x=e.x.slice(),n.i=e.i,n}function l(e,n){null==e&&(e=+new Date);var t=new a(e),o=n&&n.state,r=function(){return(t.next()>>>0)/4294967296};return r.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=t.next,r.quick=r,o&&(o.x&&s(o,t),r.state=function(){return s(t,{})}),r}r&&r.exports?r.exports=l:t.amdD&&t.amdO?void 0===(o=function(){return l}.call(n,t,n,r))||(r.exports=o):this.xorshift7=l}(0,e=t.nmd(e),t.amdD)},801:function(e,n,t){var o;!function(e,r,i){function a(e){var n=this,t="";n.next=function(){var e=n.x^n.x>>>2;return n.x=n.y,n.y=n.z,n.z=n.w,n.w=n.v,(n.d=n.d+362437|0)+(n.v=n.v^n.v<<4^e^e<<1)|0},n.x=0,n.y=0,n.z=0,n.w=0,n.v=0,e===(0|e)?n.x=e:t+=e;for(var o=0;o<t.length+64;o++)n.x^=0|t.charCodeAt(o),o==t.length&&(n.d=n.x<<10^n.x>>>4),n.next()}function s(e,n){return n.x=e.x,n.y=e.y,n.z=e.z,n.w=e.w,n.v=e.v,n.d=e.d,n}function l(e,n){var t=new a(e),o=n&&n.state,r=function(){return(t.next()>>>0)/4294967296};return r.double=function(){do{var e=((t.next()>>>11)+(t.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=t.next,r.quick=r,o&&("object"==typeof o&&s(o,t),r.state=function(){return s(t,{})}),r}r&&r.exports?r.exports=l:t.amdD&&t.amdO?void 0===(o=function(){return l}.call(n,t,n,r))||(r.exports=o):this.xorwow=l}(0,e=t.nmd(e),t.amdD)},971:function(e,n,t){var o;!function(r,i,a){var s,l=256,c=6,d="random",u=a.pow(l,c),A=a.pow(2,52),p=2*A,m=l-1;function h(e,n,t){var o=[],m=C(b((n=1==n?{entropy:!0}:n||{}).entropy?[e,y(i)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(l):(e=new Uint8Array(l),(r.crypto||r.msCrypto).getRandomValues(e)),y(e)}catch(e){var n=r.navigator,t=n&&n.plugins;return[+new Date,r,t,r.screen,y(i)]}}():e,3),o),h=new f(o),v=function(){for(var e=h.g(c),n=u,t=0;e<A;)e=(e+t)*l,n*=l,t=h.g(1);for(;e>=p;)e/=2,n/=2,t>>>=1;return(e+t)/n};return v.int32=function(){return 0|h.g(4)},v.quick=function(){return h.g(4)/4294967296},v.double=v,C(y(h.S),i),(n.pass||t||function(e,n,t,o){return o&&(o.S&&g(o,h),e.state=function(){return g(h,{})}),t?(a[d]=e,n):e})(v,m,"global"in n?n.global:this==a,n.state)}function f(e){var n,t=e.length,o=this,r=0,i=o.i=o.j=0,a=o.S=[];for(t||(e=[t++]);r<l;)a[r]=r++;for(r=0;r<l;r++)a[r]=a[i=m&i+e[r%t]+(n=a[r])],a[i]=n;(o.g=function(e){for(var n,t=0,r=o.i,i=o.j,a=o.S;e--;)n=a[r=m&r+1],t=t*l+a[m&(a[r]=a[i=m&i+n])+(a[i]=n)];return o.i=r,o.j=i,t})(l)}function g(e,n){return n.i=e.i,n.j=e.j,n.S=e.S.slice(),n}function b(e,n){var t,o=[],r=typeof e;if(n&&"object"==r)for(t in e)try{o.push(b(e[t],n-1))}catch(e){}return o.length?o:"string"==r?e:e+"\0"}function C(e,n){for(var t,o=e+"",r=0;r<o.length;)n[m&r]=m&(t^=19*n[m&r])+o.charCodeAt(r++);return y(n)}function y(e){return String.fromCharCode.apply(0,e)}if(C(a.random(),i),e.exports){e.exports=h;try{s=t(42)}catch(e){}}else void 0===(o=function(){return h}.call(n,t,n,e))||(e.exports=o)}("undefined"!=typeof self?self:this,[],Math)},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=o.base?l[0]+o.base:l[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var A=t(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var m=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=o(e,r),c=0;c<i.length;c++){var d=t(i[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=l}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},390:(e,n,t)=>{"use strict";e.exports=t.p+"a8d6ac03c7b96b7acb62.ttf"},42:()=>{}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,loaded:!1,exports:{}};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}t.m=e,t.amdD=function(){throw new Error("define cannot be used indirect")},t.amdO={},t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{"use strict";var e={};t.r(e),t.d(e,{Project:()=>O,Todo:()=>U,addNewProject:()=>Y,addNewTodo:()=>$,changeTodoProject:()=>X,editProject:()=>V,editTodo:()=>Z,getProjectTodos:()=>le,getProjects:()=>se,getTodoById:()=>ce,subToProjctAdd:()=>Q,subToProjctEdit:()=>te,subToTodoAdd:()=>ee,subToTodoEdit:()=>re,unSubFromProjectAdd:()=>J,unSubFromProjectEdit:()=>oe,unSubFromTodoAdd:()=>ne,unSubFromTodoEdit:()=>ie});var n=t(379),o=t.n(n),r=t(795),i=t.n(r),a=t(569),s=t.n(a),l=t(565),c=t.n(l),d=t(216),u=t.n(d),A=t(589),p=t.n(A),m=t(346),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=u(),o()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;var f=t(426),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u(),o()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;class b{constructor(){this._view={todoClickListeners:[],todoDeleteBtnListeners:[],init(){this.todoListCotnainer=document.querySelector(".todos-list-container"),this.todoListUL=this.todoListCotnainer.querySelector(".todos-list"),this.todoListUL.addEventListener("click",(e=>{const n=e.target.dataset.id;n&&(e.target.classList.contains("delete-btn")?this.todoDeleteBtnListeners.forEach((e=>e(n))):this.todoClickListeners.forEach((e=>e(n))))}))},render(e){const n=e.sort(((e,n)=>n.priority-e.priority)).reduce(((e,n)=>e+this.todoTemplate(n)),"");this.todoListUL.innerHTML=n},todoTemplate:e=>`<li><button class="todo-item priority-${e.priority} btn  ${e.isComplete?"todo-complete":""}" data-id="${e.id}">${e.title}<span class="todo-duedate">${e.dueDate}</span></button> <button class="btn delete-btn" data-id="${e.id}">DEL</button></li>`,addTodoClickListener(e){this.todoClickListeners.push(e)},addTodoDeleteClickListener(e){this.todoDeleteBtnListeners.push(e)}},this._model={todos:[],changeListeners:[],addChangeListener(e){this.changeListeners.push(e)},removeChangeListener(e){this.changeListeners=this.changeListeners.filter((n=>n!==e))},triggerChange(){this.changeListeners.forEach((e=>{e(this.todos)}))},getTodos(){return this.todos},setTodos(e){this.todos=e,this.triggerChange()}},this._view.init(),this.modelChangeHandler=this.modelChangeHandler.bind(this),this._model.addChangeListener(this.modelChangeHandler)}modelChangeHandler(e){this._view.render(e)}setTodos(e){this._model.setTodos(e)}addTodoClickLisetner(e){this._view.addTodoClickListener(e)}addTodoDeleteClickListener(e){this._view.addTodoDeleteClickListener(e)}}var C=t(377);let y=t.n(C)()();function v(){return y()}function E(e,n){const t=Array.isArray(e)?()=>function(e){return e[Math.floor(v()*e.length)]}(e):e;return void 0===(null==n?void 0:n.length)?t(0):Array.from({length:n.length},((e,n)=>t(n)))}function w(e){return null==e}function B(e){const n={min:w(null==e?void 0:e.min)?0:e.min,max:w(null==e?void 0:e.max)?999999:e.max,precision:null==e?void 0:e.precision,fraction:null==e?void 0:e.fraction};return E((()=>{if(n.min===n.max)return n.min;const e=function({min:e=1,max:n=9999.99,fraction:t=0}={}){if(n<e)throw new Error("Max must be bigger than min");return Number((v()*(n-e)+e).toFixed(t))}(n);return void 0!==n.precision?Math.floor(e/n.precision)*n.precision:e}),e)}"abcdefghijklmnopqrstuvwxyz".toUpperCase();var k=["Persevering encompassing middleware","Multi-layered zero administration system engine","Digitized attitude-oriented implementation","Multi-lateral zero defect throughput","Profit-focused coherent application","Decentralized human-resource system engine","Right-sized client-driven firmware","Cloned incremental structure","Streamlined impactful alliance","Visionary fresh-thinking instruction set","Networked exuding monitoring","Organized contextually-based function","Enterprise-wide directional orchestration","Universal empowering product","Reduced regional frame","Monitored bottom-line productivity","Reduced multi-tasking encoding","Enhanced responsive software","Multi-tiered exuding approach","Balanced stable knowledge user","Re-engineered neutral database","Versatile national time-frame","Exclusive fresh-thinking workforce","Virtual background paradigm","Upgradable cohesive knowledge user","De-engineered needs-based hardware","Networked mobile moratorium","Inverse contextually-based portal","De-engineered full-range extranet","Advanced transitional support","Business-focused stable framework","Reactive 4th generation info-mediaries","Switchable upward-trending array","Integrated regional open architecture","Reactive local implementation","Focused asymmetric contingency","Synergized 4th generation success","Mandatory regional complexity","Proactive client-server access","Implemented well-modulated task-force","Pre-emptive clear-thinking groupware","Balanced radical archive","Managed explicit installation","Switchable next generation intranet","Quality-focused coherent groupware","Customizable client-driven encoding","Centralized impactful contingency","Streamlined executive Graphic Interface","Seamless bi-directional capacity","Synchronised 24 hour emulation","Robust heuristic installation","Face to face 6th generation complexity","Vision-oriented holistic protocol","Ameliorated asynchronous pricing structure","Profit-focused executive core","Multi-channelled zero tolerance core","Customizable global open system","Robust foreground synergy","Up-sized eco-centric pricing structure","Upgradable stable strategy","Synergized client-server architecture","Focused logistical definition","Secured holistic architecture","Adaptive asymmetric infrastructure","Digitized clear-thinking firmware","De-engineered eco-centric installation","Stand-alone next generation task-force","User-centric optimizing implementation","Re-contextualized grid-enabled portal","Extended asynchronous system engine","Reactive neutral moderator","Expanded 4th generation Graphic Interface","Optimized contextually-based toolset","Operative bi-directional protocol","De-engineered dynamic frame","User-friendly disintermediate alliance","Fundamental client-server data-warehouse","Ameliorated multimedia groupware","Secured methodical frame","Organized maximized firmware","User-centric executive knowledge user","Configurable global help-desk","Realigned empowering monitoring","Enterprise-wide 24 hour info-mediaries","Expanded didactic methodology","Configurable zero administration projection","Fundamental multi-tasking standardization","Future-proofed leading edge secured line","Polarised global open system","Re-engineered upward-trending standardization","Stand-alone needs-based pricing structure","Synergistic responsive service-desk","Re-engineered 24/7 paradigm","Compatible fresh-thinking success","Innovative background attitude","Automated modular access","Distributed heuristic archive","Cloned human-resource knowledge base","User-friendly impactful utilisation","Reactive motivating data-warehouse"];var x;function S(e){var n;const t=null!=(n=null==e?void 0:e.years)?n:1;if(t<=0)throw new Error("Years must be positive, use past() instead");const o=365*t*24*60*60*1e3,r=new Date,i=new Date(r.getTime()+o);return E((()=>function(e){const n=new Date(e.from).getTime(),t=new Date(e.to).getTime();if(n>=t)throw new Error("From must be before to");return E((()=>new Date(B({min:n,max:t}))),e)}({from:r,to:i})),e)}null==(x=Object.keys({china:["Peking roasted duck","Kung pao chicken","Sweet and sour pork","Hot pot","Dim sum","Dumplings","Ma po tofu","Char siu","Chicken chow mein","Beef chow mein","vegetable chow mein","Chicken fried rice","Beef fried rice","Vegetable fried Rice","Special fried Rice","Sichuan pork","Xiaolongbao","Zhajiangmian","Wonton soup","Sweet and sour pork","Duck spring Rolls","Vegetable spring Rolls","Wonton","Peking duck","Lamb hot pot","Spicy crayfish","Guilin rice noodles","Lanzhou hand-pulled noodles","Steamed crab","Shredded pork with garlic sauce","Red braised pork","Sweet and sour Ribs","Xinjiang","Braised pork with vermicelli"],italy:["Butternut squash risotto","Mushroom risotto","Beetroot risotto","Courgette risotto","Pizza","Gnocchi","Spaghetti bolognese","Spaghetti carbonara","Pesto alla Genovese","Beef lasagne","Vegetable lasagne","Gelato","Prosciutto di Parma","Ribollita","Bagna cauda","Polenta","Tortelli and ravioli","Focaccia","Garlic bread","Arancini","Il tartufo","Panzerotto fritto","Fiorentina","Minestrone","Frico","Arrosticini","Olive ascolante","Fritto misto piemontes","Tiramisù"],india:["Biryani","Dosa","Tandoori chicken","Samosas","Chaat","Plain naan","Garlic naan","Pilau rice","Steamed rice","Chicken madras","Vegetable madras","Chicken vindaloo","Chicken jalfrezi","Chicken roghan josh","Lamb roghan josh","Beef roghan josh","Butter chicken","Dosa","Gulab jamun","Chicken korma","Mutter paneer","Papadum","Paratha","Raita","Saag paneer","Tandoori chicken","Chicken tikka masala","Pakora","Dal","Chapati","Pasanda","Aloo gobi","Kofta","Chicken makhani","Paneer naan","Chana Aloo Curry"],mexico:["Chilaquiles","Pozole","Tacos al pastor","Tostadas","Chiles en nogada","Elote","Enchiladas","Mole","Guacamole","Tamales","Huevos rancheros","Machaca","Discada","Beef Burrito","Chicken Burrito","Pozole de pollo o duajolote","Menudo","Cochinita pibil","Tamale","Quesadilla","Frijoles puercos","Chile en nogada","Esquites","Alegria de amaranto","Pipián","Aguachile","Ceviche","Pescado zarandeado","Camarones a la diabla","Birria de chivo","Tlayuda","Guacamole con chapulines","Flautas","Torta Ahogada","Carnitas","Caldo Azteca","Gorditas de Nata"],japan:["Sushi","Udon","Tofu","Tempura","Yakitori","Sashimi","Ramen","Donburi","Natto","Oden","Tamagoyaki","Soba","Tonkatsu","Kashipan","Sukiyaki","Miso soup","Okonomiyaki","Mentaiko","Nikujaga","Unagi no kabayaki","Shabu Shabu","Onigiri","Gyoza","Takoyaki","aiseki ryori","Edamame","Yakisoba","Chawanmushi","Wagashi"],france:["Foie gras","Huîtres","Cassoulet","Poulet basquaise","Escargots au beurre persillé","Mouclade charentaise","Galettes bretonnes","Flemish carbonnade","Quiche lorraine","Raclette","Cheese fondue","Beef fondue","Gratin dauphinois","Tartiflette","Bouillabaisse","Ratatouille","Boeuf bourguignon","Blanquette de veau","Pot-au-feu","Coq-au-vin","Hachis parmentier","Steak tartare","Choucroute","Soufflé au fromage","Cuisses de grenouilles","Soupe à l’oignon","Baguette","Croissant","French cheeses","Fondant au chocolat","Tarte tatin","Macarons","Crème brûlée","Île flottante","Profiteroles","Pain au chocolat"],lebanon:["Kibbeh","Kafta","Kanafeh","Hummus","Rice pilaf","Fattoush","Manakish","Tabbouleh","Sfeeha","Fattoush","Labneh","Muhammara","Lahm bi ajin","Kaak","Chanklich","Mssabaha","Shawarma","Kebbe","Falafel","Halewit el jeben","Namoura","Maamoul","Foul mdammas","Balila","Kawarma","Fattouch"],thailand:["Pad kra pao moo","Tom kha gai","Khao Pad","Chicken pad Thai","Vegetable pad Thai","Moo satay","Tom yum goong","Khao niew mamuang","Kai yad sai","Khao soi","Pad see ew","Laab moo","Gaeng panang","Gai pad med ma muang","Som tam","Poh pia tod","Gaeng massaman","Pla kapung nueng manao","Tod mun pla","Gaeng ped","Gaeng garee","Gaeng keow wan","Moo ping","Durian","Sai ooah","Hoy tod","Kuay teow reua","Mu kratha","Kao ka moo","Yam nua"],greece:["Moussaka","Papoutsakia","Pastitsio","Souvlaki","Soutzoukakia","Stifado","Tomatokeftedes","Tzatziki","Kolokithokeftedes","Giouvetsi","Choriatiki","Kleftiko","Gemista","Fasolada","Bougatsa","Tiropita","Spanakopita","Feta Cheese with Honey","Horta","Tirokroketes","Briam","Saganaki","Gigantes","Dolmades","Fasolatha","Koulouri","Loukoumades","Gyros","Galaktoboureko","Baklava"],turkey:["Şiş kebap","Döner","Köfte","Pide","Kumpir","Meze","Mantı","Lahmacun","Menemen","Şiş kebap","İskender kebab","Corba","Kuzu tandir","Çiğ Köfte","Pilav","Yaprak sarma","Dolma","İmam bayıldı","Borek","Durum","Kumpir","Balik ekmek","Simit","Kunefe","Baklava","Lokum","Halva","Mozzaik pasta","Güllaç","Mercimek Köftesi","Haydari","Tursu suyu","Kahvalti","Kazan dibi","Hunkar begendi","Islak burgers","Salep","Yogurtlu kebab"],spain:["Tortilla de patatas","Fabada asturiana","Calçots","Boquerones al vinagre","Empanada gallega","Paella","Gazpacho","Gachas","Migas","Bocadillo de calamares","Pulpo a feira","Caldo gallego","Lentejas con chorizo","Cocido madrileño","Cachopo","Caracoles"],venezuela:["Pabellón criollo","Arepa","Mondongo","Empanadas","Quesillo","Chicha andina","Tequeños","Cachapa","Hallaca","Perico","Pasticho","Mandocas","Caraotas negras","Patacones","Dulce de leche","Pan de Jamón"],chile:["Humitas","Empanadas","Porotos con riendas","Completos","Manjar","Cordero al palo","Pastel de choclo","Mote con huesillos","Sopaipillas","Curanto"],argentina:["Milanesas","Empanadas","Pizza fugazeta","Asado","Choripan","Bondiola","Bife de chorizo"],colombia:["Bandeja paisa","Chuleta valluna","Sancocho trifásico","Empanada valluna","Salpicon de frutas","Pastel de garbanzo","Ajiaco","Arepas","Arroz de lisa","Sancocho","Pan de bono","Cuchuco","Oblea","Cazuela de mariscos","Pan de yuca","Bollo Limpio","Almojábana","Empanadas","Arroz con Coco","Sopa de mondongo","Cazuela de Mariscos","Arroz con Pollo","Arepa de Huevo","Mote de Queso"],ecuador:["Encebollado","Ceviche","Tigrillo","Bolon de verde","Llapingacho","Mote pillo","Locro de papa","Churrasco"],peru:["Ceviche","Arroz con pollo","Aji de gallina","Llunca de gallina"],"el salvador":["Pupusa","Sopa de patas","Rigua","Flor de izote con huevo","Gallo en chicha"],romania:["Sarmale","Mici","Pomana porcului","Ciorbă de fasole cu ciolan","Ciorbă de burtă","Ciorbă rădăuțeană","Plăcintă cu brânză","Ciorbă de potroace","Mămăligă cu brânză și smântână","Tochitură","Piftie","Iahnie de fasole","Slănină afumată","Cârnați afumați","Varză a la Cluj","Gulaș de cartofi cu afumătură","Cozonac de casă","Ciorbă ardelenească de porc","Mucenici moldovenești","Salată de boeuf","Dovleac copt","Papanași cu brânză de vacă și afine","Drob de miel","Pârjoale moldovenești","Zacuscă de vinete","Zacuscă de fasole","Turtă dulce","Clătitele cu gem","Clătitele cu brânza de vacă","Balmoș","Cozonac","Chiftele"]}))||x.length;var j=["Internal Quality Coordinator","Legacy Marketing Planner","Investor Configuration Specialist","Human Directives Engineer","District Quality Technician","Central Mobility Liaison","International Interactions Orchestrator","Central Implementation Producer","Forward Configuration Facilitator","Internal Solutions Coordinator","Global Web Agent","International Brand Associate","Regional Applications Strategist","Direct Brand Analyst","Investor Mobility Consultant","Principal Division Supervisor","Chief Interactions Administrator","District Web Facilitator","Investor Metrics Consultant","Corporate Applications Director","Corporate Group Planner","Global Functionality Manager","Principal Web Engineer","National Directives Executive","Dynamic Factors Officer","Principal Identity Supervisor","Dynamic Solutions Administrator","Corporate Interactions Analyst","Senior Configuration Consultant","Human Web Consultant","Customer Metrics Technician","Senior Solutions Producer","Central Operations Technician","Product Security Producer","Forward Security Executive","Dynamic Assurance Architect","Internal Integration Representative","Lead Web Developer","Human Directives Assistant","Internal Operations Representative","Chief Communications Associate","Principal Branding Strategist","International Paradigm Specialist","Regional Security Administrator","Forward Operations Architect","Product Mobility Orchestrator","Lead Functionality Orchestrator","Lead Solutions Consultant","Human Markets Strategist","International Infrastructure Engineer","Dynamic Response Officer","Dynamic Quality Engineer","National Creative Strategist","Principal Security Representative","Internal Usability Executive","Product Usability Coordinator","Global Optimization Associate","Global Configuration Executive","Global Research Engineer","Regional Accounts Associate","Central Identity Agent","Principal Program Officer","Senior Group Developer","Forward Research Coordinator","Legacy Identity Developer","Central Interactions Developer","Direct Research Technician","Chief Web Planner","Investor Program Architect","National Intranet Architect","Principal Operations Administrator","Legacy Security Associate","Global Communications Architect","Forward Configuration Analyst","Customer Program Representative","Dynamic Communications Director","Dynamic Division Architect","Customer Security Manager","Dynamic Branding Analyst","Internal Configuration Agent","Principal Program Liaison","Regional Research Administrator","Dynamic Functionality Coordinator","Investor Configuration Producer","Direct Web Engineer","Central Implementation Orchestrator","Investor Tactics Strategist","National Creative Agent","Central Intranet Specialist","Future Creative Strategist","Product Intranet Liaison","Dynamic Markets Consultant","Global Infrastructure Administrator","Lead Interactions Supervisor","Future Usability Designer","Principal Research Producer","International Quality Facilitator","Legacy Data Director","Dynamic Infrastructure Representative","Direct Paradigm Analyst"];var P=["Bostons most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles","The Football Is Good For Training And Recreational Purposes","New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016","The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive","The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J","The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality","Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals","The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design","Carbonite web goalkeeper gloves are ergonomically designed to give easy fit","Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support","New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart","The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients"];function T(e){return E(P,e)}var D;function I({tag:e="div",classNames:n=[],textContent:t,dataset:o={},attributes:r={},eventHandlers:i={},children:a=[]}={}){const s=document.createElement(e);n.forEach((e=>{""!==e&&s.classList.add(e)})),t&&(s.textContent=t);for(const e in o)s.dataset[e]=o[e];for(const e in r)s.setAttribute(e,r[e]);for(const e in i)s.addEventListener(e,i[e]);for(const e of a)s.appendChild(e);return s}function L(e){const n=[];for(let o=0;o<e;o++)n.push({title:(t=void 0,E(k,t)),description:T(),dueDate:S(),priority:B({min:1,max:5})});var t;return n}null==(D=Object.keys({olympic:["Archery","Artistic Gymnastics","Artistic Swimming","Athletics","Badminton","Baseball Softball","Basketball","Beach Volleyball","BMX Freestyle","BMX Racing","Boxing","Kayak Flatwater","Kayak Slalom","Diving","Equestrian","Fencing","Football","Golf","Handball","Hockey","Judo","Karate","Marathon Swimming","Modern Pentathlon","Mountain Bike","Rhythmic Gymnastics","Road Cycling","Rowing","Rugby","Sailing","Shooting","Skateboarding","Sport Climbing","Surfing","Swimming","Table Tennis","Taekwondo","Tennis","Track Cycling","Trampoline","Triathlon","Volleyball","Water Polo","Weightlifting","Wrestling"],winterOlympic:["Alpine Skiing","Biathlon","Bobsleigh","Cross-Country Skiing","Curling","Figure Skating","Freestyle Skiing","Ice Hockey","Luge","Nordic Combined","Short Track Speed Skating","Skeleton","Ski Jumping","Snowboard","Speed Skating"],outdoor:["Archery","Athletics","Badminton","Baseball","Basketball","Bowling","Boxing","Camping","Canoeing","Climbing","Cricket","Curling","Cycling","Equestrian","Fencing","Football","Golf","Gymnastics","Handball","Hang Gliding","High Jumping","Hockey","Ice Hockey","Judo","Karate","Kite Flying","Monkey Bars","Motorsports","Netball","Rowing","Rugby","Running","Sailing","Skateboarding","Slide","Snow Skiing","Soccer","Street Hockey","Surfing","Swimming","Table Tennis","Tennis","Trekking","Triathlon","Volleyball","Weightlifting","Wrestling"]}))||D.length;const z={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let M;const F=new Uint8Array(16);function R(){if(!M&&(M="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!M))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return M(F)}const G=[];for(let e=0;e<256;++e)G.push((e+256).toString(16).slice(1));const q=function(e,n,t){if(z.randomUUID&&!n&&!e)return z.randomUUID();const o=(e=e||{}).random||(e.rng||R)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n){t=t||0;for(let e=0;e<16;++e)n[t+e]=o[e];return n}return function(e,n=0){return(G[e[n+0]]+G[e[n+1]]+G[e[n+2]]+G[e[n+3]]+"-"+G[e[n+4]]+G[e[n+5]]+"-"+G[e[n+6]]+G[e[n+7]]+"-"+G[e[n+8]]+G[e[n+9]]+"-"+G[e[n+10]]+G[e[n+11]]+G[e[n+12]]+G[e[n+13]]+G[e[n+14]]+G[e[n+15]]).toLowerCase()}(o)};class O{constructor({name:e="",todos:n=[]}){this.id=q(),this.name=e,this.todos=n}}class U{constructor({title:e="",description:n="",dueDate:t="",priority:o=0,isComplete:r=!1}){this.id=q(),this.title=e,this.description=n,this.dueDate=new Date(t),this.priority=o,this.isComplete=r}}let H=[],N=[],K=[],W=[],_=[];function Y({name:e="",todos:n=[]}){const t=new O({name:e,todos:n});H.push(t),N.forEach((e=>e({projectId:t.id})))}function $({title:e="",description:n="",dueDate:t="",priority:o=0,isComplete:r=!1},i){const a=H.find((e=>e.id===i));if(!a)return;const s=new U({title:e,description:n,dueDate:t,priority:o,isComplete:r});a.todos.push(s),K.forEach((e=>e({todoId:s.id,projectId:i}))),W.forEach((e=>e({todoId:s.id,projectId:i})))}function V(e,n={},t=!1){const o=H.find((n=>n.id===e));o&&(t?H=H.filter((e=>e.id!==o.id)):Object.assign(o,n),W.forEach((e=>e({projectId:o.id,isDelete:t}))))}function Z(e,n={},t=!1){const o=ae(e);o.todo&&(t?o.project.todos=o.project.todos.filter((e=>e.id!==o.todo.id)):Object.assign(o.todo,n),_.forEach((e=>e({todoId:o.todo.id}))),W.forEach((e=>e({projectId:o.project.id,todoId:o.todo.id,isDelete:t}))))}function X(e,n){const t=ae(e);if(!t.todo)return;if(t.project.id===n)return;Z(e,null,!0);const o=H.find((e=>e.id===n));o&&$(t.todo,o.id)}function Q(e){N.push(e)}function J(e){N=N.filter((n=>n!==e))}function ee(e){K.push(e)}function ne(e){K=K.filter((n=>n!==e))}function te(e){W.push(e)}function oe(e){W=W.filter((n=>n!==e))}function re(e){_.push(e)}function ie(e){_=_.filter((n=>n!==e))}function ae(e){let n=null,t=H.find((t=>t.todos.find((t=>{if(t.id===e)return n=t,!0}))));return{todo:n,project:t}}function se(){return H.map((e=>({id:e.id,name:e.name,todos:le(e.id)})))}function le(e){const n=H.find((n=>n.id===e));return n?n.todos.map((e=>({...e}))):null}function ce(e){const n=ae(e);return n.todo?{...n.todo}:null}function de(){localStorage.setItem("projects",JSON.stringify(H))}!function(){let e=JSON.parse(localStorage.getItem("projects"));e||(e=function(e){const n=[];for(let e=0;e<5;e++)n.push({name:(t=void 0,E(j,t)),todos:[...L(5)]});var t;return n}()),H=e.map((e=>{const n=new O({name:e.name,todos:e.todos.map((e=>{const n=new U({...e});return e.id&&(n.id=e.id),n}))});return e.id&&(n.id=e.id),n}))}(),Q(de),te(de);class ue{constructor(){this._view=function(){const e={},n=document.querySelector(".todo-form"),t=n.querySelector("#todo__title"),o=n.querySelector("#todo__description"),r=n.querySelector("#todo__dueDate"),i=n.querySelector("#todo__priority"),a=n.querySelector("#todo__project"),s=n.querySelector("#todo__isComplete"),l=n.querySelector("button");e.form=n;let c=[];return e.addSubmitListener=e=>{c.push(e)},e.removeSubmitListener=e=>{c=c.filter((n=>n!==e))},e.renderAddingForm=(e,s)=>{n.dataset.todoId="",n.dataset.edit="false",t.value="",o.value="",r.valueAsDate=new Date,i.innerHTML=[1,2,3,4,5].map((e=>`<option value="${e}">${e}</option>`)),l.textContent="Add Todo",a.innerHTML=e.map((e=>`<option value="${e.id}" ${s==e.id?"selected":""}>${e.name}</option>`))},e.renderEditingForm=(e,s,c)=>{n.dataset.edit="true",n.dataset.todoId=e.id,t.value=e.title,o.value=e.description,r.valueAsDate=e.dueDate,i.innerHTML=[1,2,3,4,5].map((n=>`<option value="${n}" ${n==e.priority?"selected":""}>${n}</option>`)),l.textContent="Edit Todo",a.innerHTML=c.map((e=>`<option value="${e.id}" ${s===e.id?"selected":""}>${e.name}</option>`))},e.getInputValues=()=>({title:t.value,description:o.value,dueDate:r.valueAsDate,priority:i.value,isComplete:s.checked,projectId:a.value}),n.addEventListener("submit",(function(e){c.forEach((n=>n(e)))})),e}(),this.newTodoEventListeners=[],this.editTodoEventListeners=[],this.formSubmitListener=e=>{e.preventDefault();let n=this._view.getInputValues();if(console.log(n,e.target.dataset.edit),"true"===e.target.dataset.edit){console.log("Here");const t=e.target.dataset.todoId;this.editTodoEventListeners.forEach((e=>e(t,n)))}else console.log("there"),this.newTodoEventListeners.forEach((e=>e(n)))},this._view.addSubmitListener(this.formSubmitListener)}subToNewTodoEvent(e){this.newTodoEventListeners.push(e)}subToEditTodoEvent(e){this.editTodoEventListeners.push(e)}setFormAsNewTodo(e,n){this._view.renderAddingForm(n,e)}setFormAsEditTodo(e,n,t){this._view.renderEditingForm(e,n,t)}}const Ae=function(){const e={},n=document.querySelector(".project-form"),t=n.querySelector("#project__name"),o=n.querySelector("button");let r=[],i=[];return e.addNewProjectListener=e=>{r.push(e)},e.removeNewProjectListener=e=>{r=r.filter((n=>n!==e))},e.addEditProjectListener=e=>{i.push(e)},e.removeEditProjectListener=e=>{i=i.filter((n=>n!==e))},e.renderAddingForm=()=>{n.dataset.edit="false",n.dataset.projectId="",t.value="",o.text="Add New Project"},e.renderEditingForm=e=>{n.dataset.edit="true",n.dataset.projectId=e.id,t.value=e.name,o.textContent="Edit Project"},n.addEventListener("submit",(e=>{if(e.preventDefault(),"true"===e.target.dataset.edit){const n=e.target.dataset.projectId;i.forEach((e=>e(n,t.value)))}else r.forEach((e=>e(t.value)))})),e}();class pe{constructor(){this.newTodoBtn=document.querySelector(".new-todo-btn"),this.newProjectBtn=document.querySelector(".new-project-btn"),this.projectsUL=document.querySelector(".projects-list"),this.projectFormModal=document.querySelector(".project-modal"),this.todoFormModal=document.querySelector(".todo-modal"),this.currentProjectId=se()[0].id,this.newProjectBtn.addEventListener("click",(()=>{Ae.renderAddingForm(),this.projectFormModal.classList.add("show")})),Ae.addNewProjectListener((e=>{Y({name:e}),this.projectFormModal.classList.remove("show")})),Ae.addEditProjectListener(((e,n)=>{V(e,{name:n},!1)})),this.todoFormComponent=new ue,this.newTodoBtn.addEventListener("click",(()=>{this.todoFormComponent.setFormAsNewTodo(this.currentProjectId,se()),this.todoFormModal.classList.add("show")})),this.todoFormComponent.subToNewTodoEvent((e=>{$({title:e.title,description:e.description,dueDate:e.dueDate,priority:e.priority,isComplete:e.isComplete},e.projectId),this.todoFormModal.classList.remove("show")})),this.todoFormComponent.subToEditTodoEvent(((e,n)=>{Z(e,{title:n.title,description:n.description,dueDate:n.dueDate,priority:n.priority,isComplete:n.isComplete},!1),n.projectId!==this.currentProjectId&&X(e,n.projectId)})),this.todoListComponent=new b,this.todoListComponent.setTodos(le(this.currentProjectId)),this.todoListComponent.addTodoClickLisetner((e=>{this.todoFormComponent.setFormAsEditTodo(ce(e),this.currentProjectId,se())})),this.todoListComponent.addTodoDeleteClickListener((e=>{Z(e,null,!0)})),te((e=>{e.projectId===this.currentProjectId&&this.todoListComponent.setTodos(le(this.currentProjectId))})),Q((()=>{this.renderProjectsList(se())})),te((()=>{this.renderProjectsList(se())})),this.handleProjectItemClick=this.handleProjectItemClick.bind(this),this.projectsUL.addEventListener("click",this.handleProjectItemClick),window.addEventListener("click",(e=>{e.target==this.projectFormModal?this.projectFormModal.classList.remove("show"):e.target==this.todoFormModal&&this.todoFormModal.classList.remove("show")}))}handleProjectItemClick(e){const n=e.target.dataset.id;if(n)if(e.target.classList.contains("project-edit-btn")){const e=se().find((e=>e.id===n));if(!e)return;Ae.renderEditingForm(e)}else if(e.target.classList.contains("project-delete-btn")){const e=se().find((e=>e.id===n));V(e.id,null,!0)}else{const e=le(n);if(!e)return;if(this.currentProjectId===n)return;this.currentProjectId=n,this.renderProjectsList(se()),this.todoListComponent.setTodos(e)}}renderProjectsList(e=[]){const n=e.map((e=>I({tag:"li",children:[I({tag:"button",classNames:["project-item","btn",e.id===this.currentProjectId?"current-project":""],textContent:`${e.name}`,dataset:{id:`${e.id}`}}),I({tag:"button",classNames:["btn","project-edit-btn"],textContent:"Edit",dataset:{id:`${e.id}`}}),I({tag:"button",classNames:["btn","project-delete-btn"],textContent:"Delete",dataset:{id:`${e.id}`}})]})));this.projectsUL.innerHTML="",this.projectsUL.append(...n)}}const me=se();window.addEventListener("DOMContentLoaded",(()=>{(new pe).renderProjectsList(me)})),globalThis.Model=e})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUksR0FBR2tQLEVBQUVsUCxhQU1uQlEsS0FBS29iLFdBQVc5SyxVQUFZLEdBQzVCdFEsS0FBS29iLFdBQVdRLFVBQVUvTCxFQUM1QixFQy9LRixNQUFNLEdBQVcsS0FFakI1RSxPQUFPbUUsaUJBQWlCLG9CQUFvQixNQUMvQixJQUFJNkwsSUFFWlEsbUJBQW1CLEdBQVMsSUFHakNoTyxXQUFXb08sTUFBUSxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3RoZS1uZXctY3NzLXJlc2V0L2Nzcy9yZXNldC5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL2FsZWEuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3R5Y2hlaS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yMTI4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3I0MDk2LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3JzaGlmdDcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcndvdy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9zZWVkcmFuZG9tLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvYW1kIGRlZmluZSIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2FtZCBvcHRpb25zIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3RoZS1uZXctY3NzLXJlc2V0L2Nzcy9yZXNldC5jc3M/MDA5ZiIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0xpc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL0BuZ25lYXQvZmFsc28vaW5kZXguZXNtLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL3V0aWxzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvTW9kZWwuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0Zvcm1Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdEZvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvRGlzcGxheUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qKipcXG4gICAgVGhlIG5ldyBDU1MgcmVzZXQgLSB2ZXJzaW9uIDEuOC40IChsYXN0IHVwZGF0ZWQgMTQuMi4yMDIzKVxcbiAgICBHaXRIdWIgcGFnZTogaHR0cHM6Ly9naXRodWIuY29tL2VsYWQyNDEyL3RoZS1uZXctY3NzLXJlc2V0XFxuKioqL1xcblxcbi8qXFxuICAgIFJlbW92ZSBhbGwgdGhlIHN0eWxlcyBvZiB0aGUgXFxcIlVzZXItQWdlbnQtU3R5bGVzaGVldFxcXCIsIGV4Y2VwdCBmb3IgdGhlICdkaXNwbGF5JyBwcm9wZXJ0eVxcbiAgICAtIFRoZSBcXFwic3ltYm9sICpcXFwiIHBhcnQgaXMgdG8gc29sdmUgRmlyZWZveCBTVkcgc3ByaXRlIGJ1Z1xcbiAqL1xcbio6d2hlcmUoOm5vdChodG1sLCBpZnJhbWUsIGNhbnZhcywgaW1nLCBzdmcsIHZpZGVvLCBhdWRpbyk6bm90KHN2ZyAqLCBzeW1ib2wgKikpIHtcXG4gICAgYWxsOiB1bnNldDtcXG4gICAgZGlzcGxheTogcmV2ZXJ0O1xcbn1cXG5cXG4vKiBQcmVmZXJyZWQgYm94LXNpemluZyB2YWx1ZSAqL1xcbiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLyogUmVhcHBseSB0aGUgcG9pbnRlciBjdXJzb3IgZm9yIGFuY2hvciB0YWdzICovXFxuYSwgYnV0dG9uIHtcXG4gICAgY3Vyc29yOiByZXZlcnQ7XFxufVxcblxcbi8qIFJlbW92ZSBsaXN0IHN0eWxlcyAoYnVsbGV0cy9udW1iZXJzKSAqL1xcbm9sLCB1bCwgbWVudSB7XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbi8qIEZvciBpbWFnZXMgdG8gbm90IGJlIGFibGUgdG8gZXhjZWVkIHRoZWlyIGNvbnRhaW5lciAqL1xcbmltZyB7XFxuICAgIG1heC1pbmxpbmUtc2l6ZTogMTAwJTtcXG4gICAgbWF4LWJsb2NrLXNpemU6IDEwMCU7XFxufVxcblxcbi8qIHJlbW92ZXMgc3BhY2luZyBiZXR3ZWVuIGNlbGxzIGluIHRhYmxlcyAqL1xcbnRhYmxlIHtcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxuXFxuLyogU2FmYXJpIC0gc29sdmluZyBpc3N1ZSB3aGVuIHVzaW5nIHVzZXItc2VsZWN0Om5vbmUgb24gdGhlIDxib2R5PiB0ZXh0IGlucHV0IGRvZXNuJ3Qgd29ya2luZyAqL1xcbmlucHV0LCB0ZXh0YXJlYSB7XFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IGF1dG87XFxufVxcblxcbi8qIHJldmVydCB0aGUgJ3doaXRlLXNwYWNlJyBwcm9wZXJ0eSBmb3IgdGV4dGFyZWEgZWxlbWVudHMgb24gU2FmYXJpICovXFxudGV4dGFyZWEge1xcbiAgICB3aGl0ZS1zcGFjZTogcmV2ZXJ0O1xcbn1cXG5cXG4vKiBtaW5pbXVtIHN0eWxlIHRvIGFsbG93IHRvIHN0eWxlIG1ldGVyIGVsZW1lbnQgKi9cXG5tZXRlciB7XFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogcmV2ZXJ0O1xcbiAgICBhcHBlYXJhbmNlOiByZXZlcnQ7XFxufVxcblxcbi8qIHByZWZvcm1hdHRlZCB0ZXh0IC0gdXNlIG9ubHkgZm9yIHRoaXMgZmVhdHVyZSAqL1xcbjp3aGVyZShwcmUpIHtcXG4gICAgYWxsOiByZXZlcnQ7XFxufVxcblxcbi8qIHJlc2V0IGRlZmF1bHQgdGV4dCBvcGFjaXR5IG9mIGlucHV0IHBsYWNlaG9sZGVyICovXFxuOjpwbGFjZWhvbGRlciB7XFxuICAgIGNvbG9yOiB1bnNldDtcXG59XFxuXFxuLyogcmVtb3ZlIGRlZmF1bHQgZG90ICjigKIpIHNpZ24gKi9cXG46Om1hcmtlciB7XFxuICAgIGNvbnRlbnQ6IGluaXRpYWw7XFxufVxcblxcbi8qIGZpeCB0aGUgZmVhdHVyZSBvZiAnaGlkZGVuJyBhdHRyaWJ1dGUuXFxuICAgZGlzcGxheTpyZXZlcnQ7IHJldmVydCB0byBlbGVtZW50IGluc3RlYWQgb2YgYXR0cmlidXRlICovXFxuOndoZXJlKFtoaWRkZW5dKSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi8qIHJldmVydCBmb3IgYnVnIGluIENocm9taXVtIGJyb3dzZXJzXFxuICAgLSBmaXggZm9yIHRoZSBjb250ZW50IGVkaXRhYmxlIGF0dHJpYnV0ZSB3aWxsIHdvcmsgcHJvcGVybHkuXFxuICAgLSB3ZWJraXQtdXNlci1zZWxlY3Q6IGF1dG87IGFkZGVkIGZvciBTYWZhcmkgaW4gY2FzZSBvZiB1c2luZyB1c2VyLXNlbGVjdDpub25lIG9uIHdyYXBwZXIgZWxlbWVudCovXFxuOndoZXJlKFtjb250ZW50ZWRpdGFibGVdOm5vdChbY29udGVudGVkaXRhYmxlPVxcXCJmYWxzZVxcXCJdKSkge1xcbiAgICAtbW96LXVzZXItbW9kaWZ5OiByZWFkLXdyaXRlO1xcbiAgICAtd2Via2l0LXVzZXItbW9kaWZ5OiByZWFkLXdyaXRlO1xcbiAgICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xcbiAgICAtd2Via2l0LWxpbmUtYnJlYWs6IGFmdGVyLXdoaXRlLXNwYWNlO1xcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBhdXRvO1xcbn1cXG5cXG4vKiBhcHBseSBiYWNrIHRoZSBkcmFnZ2FibGUgZmVhdHVyZSAtIGV4aXN0IG9ubHkgaW4gQ2hyb21pdW0gYW5kIFNhZmFyaSAqL1xcbjp3aGVyZShbZHJhZ2dhYmxlPVxcXCJ0cnVlXFxcIl0pIHtcXG4gICAgLXdlYmtpdC11c2VyLWRyYWc6IGVsZW1lbnQ7XFxufVxcblxcbi8qIFJldmVydCBNb2RhbCBuYXRpdmUgYmVoYXZpb3IgKi9cXG46d2hlcmUoZGlhbG9nOm1vZGFsKSB7XFxuICAgIGFsbDogcmV2ZXJ0O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvdGhlLW5ldy1jc3MtcmVzZXQvY3NzL3Jlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7O0dBR0c7O0FBRUg7OztFQUdFO0FBQ0Y7SUFDSSxVQUFVO0lBQ1YsZUFBZTtBQUNuQjs7QUFFQSwrQkFBK0I7QUFDL0I7OztJQUdJLHNCQUFzQjtBQUMxQjs7QUFFQSwrQ0FBK0M7QUFDL0M7SUFDSSxjQUFjO0FBQ2xCOztBQUVBLHlDQUF5QztBQUN6QztJQUNJLGdCQUFnQjtBQUNwQjs7QUFFQSx3REFBd0Q7QUFDeEQ7SUFDSSxxQkFBcUI7SUFDckIsb0JBQW9CO0FBQ3hCOztBQUVBLDRDQUE0QztBQUM1QztJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQSxnR0FBZ0c7QUFDaEc7SUFDSSx5QkFBeUI7QUFDN0I7O0FBRUEsc0VBQXNFO0FBQ3RFO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBLGtEQUFrRDtBQUNsRDtJQUNJLDBCQUEwQjtJQUMxQixrQkFBa0I7QUFDdEI7O0FBRUEsa0RBQWtEO0FBQ2xEO0lBQ0ksV0FBVztBQUNmOztBQUVBLG9EQUFvRDtBQUNwRDtJQUNJLFlBQVk7QUFDaEI7O0FBRUEsZ0NBQWdDO0FBQ2hDO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBOzJEQUMyRDtBQUMzRDtJQUNJLGFBQWE7QUFDakI7O0FBRUE7O3FHQUVxRztBQUNyRztJQUNJLDRCQUE0QjtJQUM1QiwrQkFBK0I7SUFDL0IseUJBQXlCO0lBQ3pCLHFDQUFxQztJQUNyQyx5QkFBeUI7QUFDN0I7O0FBRUEseUVBQXlFO0FBQ3pFO0lBQ0ksMEJBQTBCO0FBQzlCOztBQUVBLGlDQUFpQztBQUNqQztJQUNJLFdBQVc7QUFDZlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKioqXFxuICAgIFRoZSBuZXcgQ1NTIHJlc2V0IC0gdmVyc2lvbiAxLjguNCAobGFzdCB1cGRhdGVkIDE0LjIuMjAyMylcXG4gICAgR2l0SHViIHBhZ2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbGFkMjQxMi90aGUtbmV3LWNzcy1yZXNldFxcbioqKi9cXG5cXG4vKlxcbiAgICBSZW1vdmUgYWxsIHRoZSBzdHlsZXMgb2YgdGhlIFxcXCJVc2VyLUFnZW50LVN0eWxlc2hlZXRcXFwiLCBleGNlcHQgZm9yIHRoZSAnZGlzcGxheScgcHJvcGVydHlcXG4gICAgLSBUaGUgXFxcInN5bWJvbCAqXFxcIiBwYXJ0IGlzIHRvIHNvbHZlIEZpcmVmb3ggU1ZHIHNwcml0ZSBidWdcXG4gKi9cXG4qOndoZXJlKDpub3QoaHRtbCwgaWZyYW1lLCBjYW52YXMsIGltZywgc3ZnLCB2aWRlbywgYXVkaW8pOm5vdChzdmcgKiwgc3ltYm9sICopKSB7XFxuICAgIGFsbDogdW5zZXQ7XFxuICAgIGRpc3BsYXk6IHJldmVydDtcXG59XFxuXFxuLyogUHJlZmVycmVkIGJveC1zaXppbmcgdmFsdWUgKi9cXG4qLFxcbio6OmJlZm9yZSxcXG4qOjphZnRlciB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi8qIFJlYXBwbHkgdGhlIHBvaW50ZXIgY3Vyc29yIGZvciBhbmNob3IgdGFncyAqL1xcbmEsIGJ1dHRvbiB7XFxuICAgIGN1cnNvcjogcmV2ZXJ0O1xcbn1cXG5cXG4vKiBSZW1vdmUgbGlzdCBzdHlsZXMgKGJ1bGxldHMvbnVtYmVycykgKi9cXG5vbCwgdWwsIG1lbnUge1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4vKiBGb3IgaW1hZ2VzIHRvIG5vdCBiZSBhYmxlIHRvIGV4Y2VlZCB0aGVpciBjb250YWluZXIgKi9cXG5pbWcge1xcbiAgICBtYXgtaW5saW5lLXNpemU6IDEwMCU7XFxuICAgIG1heC1ibG9jay1zaXplOiAxMDAlO1xcbn1cXG5cXG4vKiByZW1vdmVzIHNwYWNpbmcgYmV0d2VlbiBjZWxscyBpbiB0YWJsZXMgKi9cXG50YWJsZSB7XFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcblxcbi8qIFNhZmFyaSAtIHNvbHZpbmcgaXNzdWUgd2hlbiB1c2luZyB1c2VyLXNlbGVjdDpub25lIG9uIHRoZSA8Ym9keT4gdGV4dCBpbnB1dCBkb2Vzbid0IHdvcmtpbmcgKi9cXG5pbnB1dCwgdGV4dGFyZWEge1xcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBhdXRvO1xcbn1cXG5cXG4vKiByZXZlcnQgdGhlICd3aGl0ZS1zcGFjZScgcHJvcGVydHkgZm9yIHRleHRhcmVhIGVsZW1lbnRzIG9uIFNhZmFyaSAqL1xcbnRleHRhcmVhIHtcXG4gICAgd2hpdGUtc3BhY2U6IHJldmVydDtcXG59XFxuXFxuLyogbWluaW11bSBzdHlsZSB0byBhbGxvdyB0byBzdHlsZSBtZXRlciBlbGVtZW50ICovXFxubWV0ZXIge1xcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHJldmVydDtcXG4gICAgYXBwZWFyYW5jZTogcmV2ZXJ0O1xcbn1cXG5cXG4vKiBwcmVmb3JtYXR0ZWQgdGV4dCAtIHVzZSBvbmx5IGZvciB0aGlzIGZlYXR1cmUgKi9cXG46d2hlcmUocHJlKSB7XFxuICAgIGFsbDogcmV2ZXJ0O1xcbn1cXG5cXG4vKiByZXNldCBkZWZhdWx0IHRleHQgb3BhY2l0eSBvZiBpbnB1dCBwbGFjZWhvbGRlciAqL1xcbjo6cGxhY2Vob2xkZXIge1xcbiAgICBjb2xvcjogdW5zZXQ7XFxufVxcblxcbi8qIHJlbW92ZSBkZWZhdWx0IGRvdCAo4oCiKSBzaWduICovXFxuOjptYXJrZXIge1xcbiAgICBjb250ZW50OiBpbml0aWFsO1xcbn1cXG5cXG4vKiBmaXggdGhlIGZlYXR1cmUgb2YgJ2hpZGRlbicgYXR0cmlidXRlLlxcbiAgIGRpc3BsYXk6cmV2ZXJ0OyByZXZlcnQgdG8gZWxlbWVudCBpbnN0ZWFkIG9mIGF0dHJpYnV0ZSAqL1xcbjp3aGVyZShbaGlkZGVuXSkge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4vKiByZXZlcnQgZm9yIGJ1ZyBpbiBDaHJvbWl1bSBicm93c2Vyc1xcbiAgIC0gZml4IGZvciB0aGUgY29udGVudCBlZGl0YWJsZSBhdHRyaWJ1dGUgd2lsbCB3b3JrIHByb3Blcmx5LlxcbiAgIC0gd2Via2l0LXVzZXItc2VsZWN0OiBhdXRvOyBhZGRlZCBmb3IgU2FmYXJpIGluIGNhc2Ugb2YgdXNpbmcgdXNlci1zZWxlY3Q6bm9uZSBvbiB3cmFwcGVyIGVsZW1lbnQqL1xcbjp3aGVyZShbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cXFwiZmFsc2VcXFwiXSkpIHtcXG4gICAgLW1vei11c2VyLW1vZGlmeTogcmVhZC13cml0ZTtcXG4gICAgLXdlYmtpdC11c2VyLW1vZGlmeTogcmVhZC13cml0ZTtcXG4gICAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcXG4gICAgLXdlYmtpdC1saW5lLWJyZWFrOiBhZnRlci13aGl0ZS1zcGFjZTtcXG4gICAgLXdlYmtpdC11c2VyLXNlbGVjdDogYXV0bztcXG59XFxuXFxuLyogYXBwbHkgYmFjayB0aGUgZHJhZ2dhYmxlIGZlYXR1cmUgLSBleGlzdCBvbmx5IGluIENocm9taXVtIGFuZCBTYWZhcmkgKi9cXG46d2hlcmUoW2RyYWdnYWJsZT1cXFwidHJ1ZVxcXCJdKSB7XFxuICAgIC13ZWJraXQtdXNlci1kcmFnOiBlbGVtZW50O1xcbn1cXG5cXG4vKiBSZXZlcnQgTW9kYWwgbmF0aXZlIGJlaGF2aW9yICovXFxuOndoZXJlKGRpYWxvZzptb2RhbCkge1xcbiAgICBhbGw6IHJldmVydDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2VzdHMvUm9ib3RvLVJlZ3VsYXIudHRmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG59XFxuXFxuOnJvb3Qge1xcbiAgLS1mZi1wcmltYXJ5OiBcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtcXG59XFxuXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogdmFyKC0tZmYtcHJpbWFyeSk7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbiNjb250ZW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IGFsaWNlYmx1ZTtcXG59XFxuXFxuLmJ0biB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuLmJ0bi1yb3VuZCB7XFxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbn1cXG5cXG4uYnRuOmFjdGl2ZSB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBvcGFjaXR5OiAwLjg7XFxufVxcblxcbi5wcmlvcml0eS0xIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ucHJpb3JpdHktMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjQwLCA2MSUsIDkzJSk7XFxufVxcblxcbi5wcmlvcml0eS0zIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxMDgsIDU4JSwgODAlKTtcXG59XFxuXFxuLnByaW9yaXR5LTQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDY2LCA1OSUsIDY1JSk7XFxufVxcblxcbi5wcmlvcml0eS01IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCA1OSUsIDU1JSk7XFxufVxcblxcbi5wcmlvcml0eS0xLFxcbi5wcmlvcml0eS0yLFxcbi5wcmlvcml0eS0zLFxcbi5wcmlvcml0eS00LFxcbi5wcmlvcml0eS01IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLnByaW9yaXR5LTE6OmJlZm9yZSxcXG4ucHJpb3JpdHktMjo6YmVmb3JlLFxcbi5wcmlvcml0eS0zOjpiZWZvcmUsXFxuLnByaW9yaXR5LTQ6OmJlZm9yZSxcXG4ucHJpb3JpdHktNTo6YmVmb3JlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XFxuICB0b3A6IC0yMCU7XFxuICBsZWZ0OiAwO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmFkaXVzOiA1MCUgNTAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuLnByaW9yaXR5LTE6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiUDFcXFwiO1xcbn1cXG5cXG4ucHJpb3JpdHktMjo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJQMlxcXCI7XFxufVxcblxcbi5wcmlvcml0eS0zOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlAzXFxcIjtcXG59XFxuXFxuLnByaW9yaXR5LTQ6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiUDRcXFwiO1xcbn1cXG5cXG4ucHJpb3JpdHktNTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJQNVxcXCI7XFxufVxcblxcbm1haW4ge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luLXRvcDogMnJlbTtcXG59XFxuXFxuaDEge1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5uZXctYnRucy1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcblxcbi5uZXctdG9kby1idG4sXFxuLm5ldy1wcm9qZWN0LWJ0biB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcblxcbi5wcm9qZWN0cy1saXN0LWNvbnRhaW5lciB7XFxuICBwYWRkaW5nOiAxcmVtO1xcbn1cXG5cXG4ucHJvamVjdHMtbGlzdCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4ucHJvamVjdHMtbGlzdCBsaSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgYm9yZGVyOiAxcHggc29saWQ7XFxufVxcblxcbi5wcm9qZWN0cy1saXN0IGxpIC5wcm9qZWN0LWl0ZW0ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG4ucHJvamVjdHMtbGlzdCBsaSAucHJvamVjdC1lZGl0LWJ0bixcXG4ucHJvamVjdHMtbGlzdCBsaSAucHJvamVjdC1kZWxldGUtYnRuIHtcXG4gIGZsZXg6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODg4O1xcbn1cXG5cXG4ucHJvamVjdHMtbGlzdCBsaTpub3QoOmxhc3QtY2hpbGQpIGJ1dHRvbiB7XFxuICBib3JkZXItcmlnaHQ6IG5vbmU7XFxufVxcblxcbi5wcm9qZWN0cy1saXN0IGxpIC5jdXJyZW50LXByb2plY3Qge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbi50b2Rvcy1saXN0LWNvbnRhaW5lciB7XFxuICBwYWRkaW5nOiAxcmVtO1xcbn1cXG5cXG4udG9kb3MtbGlzdCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMXJlbTtcXG59XFxuXFxuLnRvZG9zLWxpc3QgbGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkO1xcbn1cXG5cXG4udG9kby1pdGVtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDFyZW0gMnJlbTtcXG59XFxuXFxuLnRvZG8tY29tcGxldGUge1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG4uZGVsZXRlLWJ0biB7XFxuICBmbGV4LXNocmluazogMTtcXG4gIGZsZXgtZ3JvdzogMDtcXG4gIHBhZGRpbmc6IDNweDtcXG4gIGJvcmRlci1sZWZ0OiBub25lO1xcbn1cXG5cXG4ubW9kYWwge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiBmaXhlZDsgLyogU3RheSBpbiBwbGFjZSAqL1xcbiAgei1pbmRleDogMTsgLyogU2l0IG9uIHRvcCAqL1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIHdpZHRoOiAxMDAlOyAvKiBGdWxsIHdpZHRoICovXFxuICBoZWlnaHQ6IDEwMCU7IC8qIEZ1bGwgaGVpZ2h0ICovXFxuICBvdmVyZmxvdzogYXV0bzsgLyogRW5hYmxlIHNjcm9sbCBpZiBuZWVkZWQgKi9cXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAwLCAwKTsgLyogRmFsbGJhY2sgY29sb3IgKi9cXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTsgLyogQmxhY2sgdy8gb3BhY2l0eSAqL1xcbn1cXG5cXG4ubW9kYWwgPiAqIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZWZlZmU7XFxuICBtYXJnaW46IDE1JSBhdXRvOyAvKiAxNSUgZnJvbSB0aGUgdG9wIGFuZCBjZW50ZXJlZCAqL1xcbiAgcGFkZGluZzogMjBweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICM4ODg7XFxuICB3aWR0aDogODAlOyAvKiBDb3VsZCBiZSBtb3JlIG9yIGxlc3MsIGRlcGVuZGluZyBvbiBzY3JlZW4gc2l6ZSAqL1xcbn1cXG5cXG4uc2hvdyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLyogVGhlIENsb3NlIEJ1dHRvbiAqL1xcbi5jbG9zZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIHRvcDogNXB4O1xcbiAgY29sb3I6ICNhYWE7XFxuICBmb250LXNpemU6IDI4cHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLmNsb3NlOmhvdmVyLFxcbi5jbG9zZTpmb2N1cyB7XFxuICBjb2xvcjogYmxhY2s7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmZvcm0ge1xcbiAgYm9yZGVyOiAzcHggc29saWQgYW50aXF1ZXdoaXRlO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIG1hcmdpbi10b3A6IDFyZW07XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDFyZW07XFxufVxcblxcbmxhYmVsIHtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG59XFxuXFxuaW5wdXQ6bm90KFt0eXBlPVxcXCJjaGVja2JveFxcXCJdKSxcXG50ZXh0YXJlYSB7XFxuICBtaW4taGVpZ2h0OiAycmVtO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA0OCk7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICBhbGw6IHJldmVydDtcXG59XFxuXFxuc2VsZWN0IHtcXG4gIGFsbDogcmV2ZXJ0O1xcbn1cXG5cXG5mb3JtIGJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQiwrREFBMkQ7RUFDM0QsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGtDQUFrQztBQUNwQzs7QUFFQTtFQUNFLDhCQUE4QjtBQUNoQzs7QUFFQTs7RUFFRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxtQ0FBbUM7QUFDckM7O0FBRUE7RUFDRSxrQ0FBa0M7QUFDcEM7O0FBRUE7Ozs7O0VBS0Usa0JBQWtCO0FBQ3BCOztBQUVBOzs7OztFQUtFLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsU0FBUztFQUNULE9BQU87RUFDUCxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLHNCQUFzQjtFQUN0Qix5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsYUFBYTtBQUNmOztBQUVBOztFQUVFLHVCQUF1QjtFQUN2QixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG9CQUFvQjtFQUNwQix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZUFBZTtFQUNmLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0FBQ2Y7O0FBRUE7O0VBRUUsT0FBTztFQUNQLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsU0FBUztBQUNYOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsV0FBVztFQUNYLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGNBQWM7RUFDZCxZQUFZO0VBQ1osWUFBWTtFQUNaLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixlQUFlLEVBQUUsa0JBQWtCO0VBQ25DLFVBQVUsRUFBRSxlQUFlO0VBQzNCLE9BQU87RUFDUCxNQUFNO0VBQ04sV0FBVyxFQUFFLGVBQWU7RUFDNUIsWUFBWSxFQUFFLGdCQUFnQjtFQUM5QixjQUFjLEVBQUUsNEJBQTRCO0VBQzVDLDhCQUE4QixFQUFFLG1CQUFtQjtFQUNuRCxvQ0FBb0MsRUFBRSxxQkFBcUI7QUFDN0Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIseUJBQXlCO0VBQ3pCLGdCQUFnQixFQUFFLGtDQUFrQztFQUNwRCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFVBQVUsRUFBRSxvREFBb0Q7QUFDbEU7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBLHFCQUFxQjtBQUNyQjtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsUUFBUTtFQUNSLFdBQVc7RUFDWCxlQUFlO0VBQ2YsaUJBQWlCO0FBQ25COztBQUVBOztFQUVFLFlBQVk7RUFDWixxQkFBcUI7RUFDckIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7O0FBRUE7O0VBRUUsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osc0NBQXNDO0VBQ3RDLGlCQUFpQjtFQUNqQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYm90b1xcXCI7XFxuICBzcmM6IHVybChcXFwiLi9hc3Nlc3RzL1JvYm90by1SZWd1bGFyLnR0ZlxcXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxufVxcblxcbjpyb290IHtcXG4gIC0tZmYtcHJpbWFyeTogXFxcIlJvYm90b1xcXCIsIHNhbnMtc2VyaWY7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWZmLXByaW1hcnkpO1xcbn1cXG5cXG5odG1sLFxcbmJvZHkge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4jY29udGVudCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbGljZWJsdWU7XFxufVxcblxcbi5idG4ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiA1cHg7XFxufVxcblxcbi5idG4tcm91bmQge1xcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG59XFxuXFxuLmJ0bjphY3RpdmUge1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgb3BhY2l0eTogMC44O1xcbn1cXG5cXG4ucHJpb3JpdHktMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLnByaW9yaXR5LTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDI0MCwgNjElLCA5MyUpO1xcbn1cXG5cXG4ucHJpb3JpdHktMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTA4LCA1OCUsIDgwJSk7XFxufVxcblxcbi5wcmlvcml0eS00IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCg2NiwgNTklLCA2NSUpO1xcbn1cXG5cXG4ucHJpb3JpdHktNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgNTklLCA1NSUpO1xcbn1cXG5cXG4ucHJpb3JpdHktMSxcXG4ucHJpb3JpdHktMixcXG4ucHJpb3JpdHktMyxcXG4ucHJpb3JpdHktNCxcXG4ucHJpb3JpdHktNSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5wcmlvcml0eS0xOjpiZWZvcmUsXFxuLnByaW9yaXR5LTI6OmJlZm9yZSxcXG4ucHJpb3JpdHktMzo6YmVmb3JlLFxcbi5wcmlvcml0eS00OjpiZWZvcmUsXFxuLnByaW9yaXR5LTU6OmJlZm9yZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBmb250LXNpemU6IGxhcmdlO1xcbiAgdG9wOiAtMjAlO1xcbiAgbGVmdDogMDtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlIDUwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbi5wcmlvcml0eS0xOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlAxXFxcIjtcXG59XFxuXFxuLnByaW9yaXR5LTI6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiUDJcXFwiO1xcbn1cXG5cXG4ucHJpb3JpdHktMzo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJQM1xcXCI7XFxufVxcblxcbi5wcmlvcml0eS00OjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlA0XFxcIjtcXG59XFxuXFxuLnByaW9yaXR5LTU6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiUDVcXFwiO1xcbn1cXG5cXG5tYWluIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG1hcmdpbi10b3A6IDJyZW07XFxufVxcblxcbmgxIHtcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ubmV3LWJ0bnMtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nOiAxcmVtO1xcbn1cXG5cXG4ubmV3LXRvZG8tYnRuLFxcbi5uZXctcHJvamVjdC1idG4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nOiAxcmVtO1xcbn1cXG5cXG4ucHJvamVjdHMtbGlzdC1jb250YWluZXIge1xcbiAgcGFkZGluZzogMXJlbTtcXG59XFxuXFxuLnByb2plY3RzLWxpc3Qge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuLnByb2plY3RzLWxpc3QgbGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkO1xcbn1cXG5cXG4ucHJvamVjdHMtbGlzdCBsaSAucHJvamVjdC1pdGVtIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMTBweDtcXG59XFxuXFxuLnByb2plY3RzLWxpc3QgbGkgLnByb2plY3QtZWRpdC1idG4sXFxuLnByb2plY3RzLWxpc3QgbGkgLnByb2plY3QtZGVsZXRlLWJ0biB7XFxuICBmbGV4OiAxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODtcXG59XFxuXFxuLnByb2plY3RzLWxpc3QgbGk6bm90KDpsYXN0LWNoaWxkKSBidXR0b24ge1xcbiAgYm9yZGVyLXJpZ2h0OiBub25lO1xcbn1cXG5cXG4ucHJvamVjdHMtbGlzdCBsaSAuY3VycmVudC1wcm9qZWN0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4udG9kb3MtbGlzdC1jb250YWluZXIge1xcbiAgcGFkZGluZzogMXJlbTtcXG59XFxuXFxuLnRvZG9zLWxpc3Qge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDFyZW07XFxufVxcblxcbi50b2Rvcy1saXN0IGxpIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3JkZXI6IDFweCBzb2xpZDtcXG59XFxuXFxuLnRvZG8taXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxcmVtIDJyZW07XFxufVxcblxcbi50b2RvLWNvbXBsZXRlIHtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuXFxuLmRlbGV0ZS1idG4ge1xcbiAgZmxleC1zaHJpbms6IDE7XFxuICBmbGV4LWdyb3c6IDA7XFxuICBwYWRkaW5nOiAzcHg7XFxuICBib3JkZXItbGVmdDogbm9uZTtcXG59XFxuXFxuLm1vZGFsIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBwb3NpdGlvbjogZml4ZWQ7IC8qIFN0YXkgaW4gcGxhY2UgKi9cXG4gIHotaW5kZXg6IDE7IC8qIFNpdCBvbiB0b3AgKi9cXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxuICB3aWR0aDogMTAwJTsgLyogRnVsbCB3aWR0aCAqL1xcbiAgaGVpZ2h0OiAxMDAlOyAvKiBGdWxsIGhlaWdodCAqL1xcbiAgb3ZlcmZsb3c6IGF1dG87IC8qIEVuYWJsZSBzY3JvbGwgaWYgbmVlZGVkICovXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMCwgMCk7IC8qIEZhbGxiYWNrIGNvbG9yICovXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNCk7IC8qIEJsYWNrIHcvIG9wYWNpdHkgKi9cXG59XFxuXFxuLm1vZGFsID4gKiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmZWZlO1xcbiAgbWFyZ2luOiAxNSUgYXV0bzsgLyogMTUlIGZyb20gdGhlIHRvcCBhbmQgY2VudGVyZWQgKi9cXG4gIHBhZGRpbmc6IDIwcHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjODg4O1xcbiAgd2lkdGg6IDgwJTsgLyogQ291bGQgYmUgbW9yZSBvciBsZXNzLCBkZXBlbmRpbmcgb24gc2NyZWVuIHNpemUgKi9cXG59XFxuXFxuLnNob3cge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi8qIFRoZSBDbG9zZSBCdXR0b24gKi9cXG4uY2xvc2Uge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICB0b3A6IDVweDtcXG4gIGNvbG9yOiAjYWFhO1xcbiAgZm9udC1zaXplOiAyOHB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5jbG9zZTpob3ZlcixcXG4uY2xvc2U6Zm9jdXMge1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5mb3JtIHtcXG4gIGJvcmRlcjogM3B4IHNvbGlkIGFudGlxdWV3aGl0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBtYXJnaW4tdG9wOiAxcmVtO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAxcmVtO1xcbn1cXG5cXG5sYWJlbCB7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxufVxcblxcbmlucHV0Om5vdChbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSksXFxudGV4dGFyZWEge1xcbiAgbWluLWhlaWdodDogMnJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNDgpO1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBwYWRkaW5nOiA1cHg7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgYWxsOiByZXZlcnQ7XFxufVxcblxcbnNlbGVjdCB7XFxuICBhbGw6IHJldmVydDtcXG59XFxuXFxuZm9ybSBidXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8vIEEgbGlicmFyeSBvZiBzZWVkYWJsZSBSTkdzIGltcGxlbWVudGVkIGluIEphdmFzY3JpcHQuXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHNlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG4vLyB2YXIgcmFuZG9tID0gc2VlZHJhbmRvbSgxKTsgLy8gb3IgYW55IHNlZWQuXG4vLyB2YXIgeCA9IHJhbmRvbSgpOyAgICAgICAvLyAwIDw9IHggPCAxLiAgRXZlcnkgYml0IGlzIHJhbmRvbS5cbi8vIHZhciB4ID0gcmFuZG9tLnF1aWNrKCk7IC8vIDAgPD0geCA8IDEuICAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXG5cbi8vIGFsZWEsIGEgNTMtYml0IG11bHRpcGx5LXdpdGgtY2FycnkgZ2VuZXJhdG9yIGJ5IEpvaGFubmVzIEJhYWfDuGUuXG4vLyBQZXJpb2Q6IH4yXjExNlxuLy8gUmVwb3J0ZWQgdG8gcGFzcyBhbGwgQmlnQ3J1c2ggdGVzdHMuXG52YXIgYWxlYSA9IHJlcXVpcmUoJy4vbGliL2FsZWEnKTtcblxuLy8geG9yMTI4LCBhIHB1cmUgeG9yLXNoaWZ0IGdlbmVyYXRvciBieSBHZW9yZ2UgTWFyc2FnbGlhLlxuLy8gUGVyaW9kOiAyXjEyOC0xLlxuLy8gUmVwb3J0ZWQgdG8gZmFpbDogTWF0cml4UmFuayBhbmQgTGluZWFyQ29tcC5cbnZhciB4b3IxMjggPSByZXF1aXJlKCcuL2xpYi94b3IxMjgnKTtcblxuLy8geG9yd293LCBHZW9yZ2UgTWFyc2FnbGlhJ3MgMTYwLWJpdCB4b3Itc2hpZnQgY29tYmluZWQgcGx1cyB3ZXlsLlxuLy8gUGVyaW9kOiAyXjE5Mi0yXjMyXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBDb2xsaXNpb25PdmVyLCBTaW1wUG9rZXIsIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcndvdyA9IHJlcXVpcmUoJy4vbGliL3hvcndvdycpO1xuXG4vLyB4b3JzaGlmdDcsIGJ5IEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyLCB0YWtlc1xuLy8gYSBkaWZmZXJlbnQgYXBwcm9hY2g6IGl0IGFkZHMgcm9idXN0bmVzcyBieSBhbGxvd2luZyBtb3JlIHNoaWZ0c1xuLy8gdGhhbiBNYXJzYWdsaWEncyBvcmlnaW5hbCB0aHJlZS4gIEl0IGlzIGEgNy1zaGlmdCBnZW5lcmF0b3Jcbi8vIHdpdGggMjU2IGJpdHMsIHRoYXQgcGFzc2VzIEJpZ0NydXNoIHdpdGggbm8gc3lzdG1hdGljIGZhaWx1cmVzLlxuLy8gUGVyaW9kIDJeMjU2LTEuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcnNoaWZ0NyA9IHJlcXVpcmUoJy4vbGliL3hvcnNoaWZ0NycpO1xuXG4vLyB4b3I0MDk2LCBieSBSaWNoYXJkIEJyZW50LCBpcyBhIDQwOTYtYml0IHhvci1zaGlmdCB3aXRoIGFcbi8vIHZlcnkgbG9uZyBwZXJpb2QgdGhhdCBhbHNvIGFkZHMgYSBXZXlsIGdlbmVyYXRvci4gSXQgYWxzbyBwYXNzZXNcbi8vIEJpZ0NydXNoIHdpdGggbm8gc3lzdGVtYXRpYyBmYWlsdXJlcy4gIEl0cyBsb25nIHBlcmlvZCBtYXlcbi8vIGJlIHVzZWZ1bCBpZiB5b3UgaGF2ZSBtYW55IGdlbmVyYXRvcnMgYW5kIG5lZWQgdG8gYXZvaWRcbi8vIGNvbGxpc2lvbnMuXG4vLyBQZXJpb2Q6IDJeNDEyOC0yXjMyLlxuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB4b3I0MDk2ID0gcmVxdWlyZSgnLi9saWIveG9yNDA5NicpO1xuXG4vLyBUeWNoZS1pLCBieSBTYW11ZWwgTmV2ZXMgYW5kIEZpbGlwZSBBcmF1am8sIGlzIGEgYml0LXNoaWZ0aW5nIHJhbmRvbVxuLy8gbnVtYmVyIGdlbmVyYXRvciBkZXJpdmVkIGZyb20gQ2hhQ2hhLCBhIG1vZGVybiBzdHJlYW0gY2lwaGVyLlxuLy8gaHR0cHM6Ly9lZGVuLmRlaS51Yy5wdC9+c25ldmVzL3B1YnMvMjAxMS1zbmZhMi5wZGZcbi8vIFBlcmlvZDogfjJeMTI3XG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHR5Y2hlaSA9IHJlcXVpcmUoJy4vbGliL3R5Y2hlaScpO1xuXG4vLyBUaGUgb3JpZ2luYWwgQVJDNC1iYXNlZCBwcm5nIGluY2x1ZGVkIGluIHRoaXMgbGlicmFyeS5cbi8vIFBlcmlvZDogfjJeMTYwMFxudmFyIHNyID0gcmVxdWlyZSgnLi9zZWVkcmFuZG9tJyk7XG5cbnNyLmFsZWEgPSBhbGVhO1xuc3IueG9yMTI4ID0geG9yMTI4O1xuc3IueG9yd293ID0geG9yd293O1xuc3IueG9yc2hpZnQ3ID0geG9yc2hpZnQ3O1xuc3IueG9yNDA5NiA9IHhvcjQwOTY7XG5zci50eWNoZWkgPSB0eWNoZWk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3I7XG4iLCIvLyBBIHBvcnQgb2YgYW4gYWxnb3JpdGhtIGJ5IEpvaGFubmVzIEJhYWfDuGUgPGJhYWdvZUBiYWFnb2UuY29tPiwgMjAxMFxuLy8gaHR0cDovL2JhYWdvZS5jb20vZW4vUmFuZG9tTXVzaW5ncy9qYXZhc2NyaXB0L1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25xdWlubGFuL2JldHRlci1yYW5kb20tbnVtYmVycy1mb3ItamF2YXNjcmlwdC1taXJyb3Jcbi8vIE9yaWdpbmFsIHdvcmsgaXMgdW5kZXIgTUlUIGxpY2Vuc2UgLVxuXG4vLyBDb3B5cmlnaHQgKEMpIDIwMTAgYnkgSm9oYW5uZXMgQmFhZ8O4ZSA8YmFhZ29lQGJhYWdvZS5vcmc+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIEFsZWEoc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBtYXNoID0gTWFzaCgpO1xuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IDIwOTE2MzkgKiBtZS5zMCArIG1lLmMgKiAyLjMyODMwNjQzNjUzODY5NjNlLTEwOyAvLyAyXi0zMlxuICAgIG1lLnMwID0gbWUuczE7XG4gICAgbWUuczEgPSBtZS5zMjtcbiAgICByZXR1cm4gbWUuczIgPSB0IC0gKG1lLmMgPSB0IHwgMCk7XG4gIH07XG5cbiAgLy8gQXBwbHkgdGhlIHNlZWRpbmcgYWxnb3JpdGhtIGZyb20gQmFhZ29lLlxuICBtZS5jID0gMTtcbiAgbWUuczAgPSBtYXNoKCcgJyk7XG4gIG1lLnMxID0gbWFzaCgnICcpO1xuICBtZS5zMiA9IG1hc2goJyAnKTtcbiAgbWUuczAgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMwIDwgMCkgeyBtZS5zMCArPSAxOyB9XG4gIG1lLnMxIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMSA8IDApIHsgbWUuczEgKz0gMTsgfVxuICBtZS5zMiAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczIgPCAwKSB7IG1lLnMyICs9IDE7IH1cbiAgbWFzaCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmMgPSBmLmM7XG4gIHQuczAgPSBmLnMwO1xuICB0LnMxID0gZi5zMTtcbiAgdC5zMiA9IGYuczI7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IEFsZWEoc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSB4Zy5uZXh0O1xuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpICogMHgxMDAwMDAwMDApIHwgMDsgfVxuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwcm5nKCkgKyAocHJuZygpICogMHgyMDAwMDAgfCAwKSAqIDEuMTEwMjIzMDI0NjI1MTU2NWUtMTY7IC8vIDJeLTUzXG4gIH07XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5mdW5jdGlvbiBNYXNoKCkge1xuICB2YXIgbiA9IDB4ZWZjODI0OWQ7XG5cbiAgdmFyIG1hc2ggPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgZGF0YSA9IFN0cmluZyhkYXRhKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG4gKz0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGggPSAwLjAyNTE5NjAzMjgyNDE2OTM4ICogbjtcbiAgICAgIG4gPSBoID4+PiAwO1xuICAgICAgaCAtPSBuO1xuICAgICAgaCAqPSBuO1xuICAgICAgbiA9IGggPj4+IDA7XG4gICAgICBoIC09IG47XG4gICAgICBuICs9IGggKiAweDEwMDAwMDAwMDsgLy8gMl4zMlxuICAgIH1cbiAgICByZXR1cm4gKG4gPj4+IDApICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLy8gMl4tMzJcbiAgfTtcblxuICByZXR1cm4gbWFzaDtcbn1cblxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLmFsZWEgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcIlR5Y2hlLWlcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gU2FtdWVsIE5ldmVzIGFuZCBGaWxpcGUgQXJhdWpvLlxuLy8gU2VlIGh0dHBzOi8vZWRlbi5kZWkudWMucHQvfnNuZXZlcy9wdWJzLzIwMTEtc25mYTIucGRmXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQsIGEgPSBtZS5hO1xuICAgIGIgPSAoYiA8PCAyNSkgXiAoYiA+Pj4gNykgXiBjO1xuICAgIGMgPSAoYyAtIGQpIHwgMDtcbiAgICBkID0gKGQgPDwgMjQpIF4gKGQgPj4+IDgpIF4gYTtcbiAgICBhID0gKGEgLSBiKSB8IDA7XG4gICAgbWUuYiA9IGIgPSAoYiA8PCAyMCkgXiAoYiA+Pj4gMTIpIF4gYztcbiAgICBtZS5jID0gYyA9IChjIC0gZCkgfCAwO1xuICAgIG1lLmQgPSAoZCA8PCAxNikgXiAoYyA+Pj4gMTYpIF4gYTtcbiAgICByZXR1cm4gbWUuYSA9IChhIC0gYikgfCAwO1xuICB9O1xuXG4gIC8qIFRoZSBmb2xsb3dpbmcgaXMgbm9uLWludmVydGVkIHR5Y2hlLCB3aGljaCBoYXMgYmV0dGVyIGludGVybmFsXG4gICAqIGJpdCBkaWZmdXNpb24sIGJ1dCB3aGljaCBpcyBhYm91dCAyNSUgc2xvd2VyIHRoYW4gdHljaGUtaSBpbiBKUy5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gbWUuYSwgYiA9IG1lLmIsIGMgPSBtZS5jLCBkID0gbWUuZDtcbiAgICBhID0gKG1lLmEgKyBtZS5iIHwgMCkgPj4+IDA7XG4gICAgZCA9IG1lLmQgXiBhOyBkID0gZCA8PCAxNiBeIGQgPj4+IDE2O1xuICAgIGMgPSBtZS5jICsgZCB8IDA7XG4gICAgYiA9IG1lLmIgXiBjOyBiID0gYiA8PCAxMiBeIGQgPj4+IDIwO1xuICAgIG1lLmEgPSBhID0gYSArIGIgfCAwO1xuICAgIGQgPSBkIF4gYTsgbWUuZCA9IGQgPSBkIDw8IDggXiBkID4+PiAyNDtcbiAgICBtZS5jID0gYyA9IGMgKyBkIHwgMDtcbiAgICBiID0gYiBeIGM7XG4gICAgcmV0dXJuIG1lLmIgPSAoYiA8PCA3IF4gYiA+Pj4gMjUpO1xuICB9XG4gICovXG5cbiAgbWUuYSA9IDA7XG4gIG1lLmIgPSAwO1xuICBtZS5jID0gMjY1NDQzNTc2OSB8IDA7XG4gIG1lLmQgPSAxMzY3MTMwNTUxO1xuXG4gIGlmIChzZWVkID09PSBNYXRoLmZsb29yKHNlZWQpKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLmEgPSAoc2VlZCAvIDB4MTAwMDAwMDAwKSB8IDA7XG4gICAgbWUuYiA9IHNlZWQgfCAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgMjA7IGsrKykge1xuICAgIG1lLmIgXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuYSA9IGYuYTtcbiAgdC5iID0gZi5iO1xuICB0LmMgPSBmLmM7XG4gIHQuZCA9IGYuZDtcbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnR5Y2hlaSA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yMTI4XCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIEdlb3JnZSBNYXJzYWdsaWEuICBTZWUgaHR0cDovL3d3dy5qc3RhdHNvZnQub3JnL3YwOC9pMTQvcGFwZXJcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIG1lLnggPSAwO1xuICBtZS55ID0gMDtcbiAgbWUueiA9IDA7XG4gIG1lLncgPSAwO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IG1lLnggXiAobWUueCA8PCAxMSk7XG4gICAgbWUueCA9IG1lLnk7XG4gICAgbWUueSA9IG1lLno7XG4gICAgbWUueiA9IG1lLnc7XG4gICAgcmV0dXJuIG1lLncgXj0gKG1lLncgPj4+IDE5KSBeIHQgXiAodCA+Pj4gOCk7XG4gIH07XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3IxMjggPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIFJpY2hhcmQgQnJlbnQncyBYb3JnZW5zIHhvcjQwOTYgYWxnb3JpdGhtLlxuLy9cbi8vIFRoaXMgZmFzdCBub24tY3J5cHRvZ3JhcGhpYyByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBpcyBkZXNpZ25lZCBmb3Jcbi8vIHVzZSBpbiBNb250ZS1DYXJsbyBhbGdvcml0aG1zLiBJdCBjb21iaW5lcyBhIGxvbmctcGVyaW9kIHhvcnNoaWZ0XG4vLyBnZW5lcmF0b3Igd2l0aCBhIFdleWwgZ2VuZXJhdG9yLCBhbmQgaXQgcGFzc2VzIGFsbCBjb21tb24gYmF0dGVyaWVzXG4vLyBvZiBzdGFzdGljaWFsIHRlc3RzIGZvciByYW5kb21uZXNzIHdoaWxlIGNvbnN1bWluZyBvbmx5IGEgZmV3IG5hbm9zZWNvbmRzXG4vLyBmb3IgZWFjaCBwcm5nIGdlbmVyYXRlZC4gIEZvciBiYWNrZ3JvdW5kIG9uIHRoZSBnZW5lcmF0b3IsIHNlZSBCcmVudCdzXG4vLyBwYXBlcjogXCJTb21lIGxvbmctcGVyaW9kIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9ycyB1c2luZyBzaGlmdHMgYW5kIHhvcnMuXCJcbi8vIGh0dHA6Ly9hcnhpdi5vcmcvcGRmLzEwMDQuMzExNXYxLnBkZlxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIHZhciB4b3I0MDk2ID0gcmVxdWlyZSgneG9yNDA5NicpO1xuLy8gcmFuZG9tID0geG9yNDA5NigxKTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWVkIHdpdGggaW50MzIgb3Igc3RyaW5nLlxuLy8gYXNzZXJ0LmVxdWFsKHJhbmRvbSgpLCAwLjE1MjA0MzY0NTA1Mzg1NDcpOyAvLyAoMCwgMSkgcmFuZ2UsIDUzIGJpdHMuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tLmludDMyKCksIDE4MDY1MzQ4OTcpOyAgIC8vIHNpZ25lZCBpbnQzMiwgMzIgYml0cy5cbi8vXG4vLyBGb3Igbm9uemVybyBudW1lcmljIGtleXMsIHRoaXMgaW1wZWxlbWVudGF0aW9uIHByb3ZpZGVzIGEgc2VxdWVuY2Vcbi8vIGlkZW50aWNhbCB0byB0aGF0IGJ5IEJyZW50J3MgeG9yZ2VucyAzIGltcGxlbWVudGFpb24gaW4gQy4gIFRoaXNcbi8vIGltcGxlbWVudGF0aW9uIGFsc28gcHJvdmlkZXMgZm9yIGluaXRhbGl6aW5nIHRoZSBnZW5lcmF0b3Igd2l0aFxuLy8gc3RyaW5nIHNlZWRzLCBvciBmb3Igc2F2aW5nIGFuZCByZXN0b3JpbmcgdGhlIHN0YXRlIG9mIHRoZSBnZW5lcmF0b3IuXG4vL1xuLy8gT24gQ2hyb21lLCB0aGlzIHBybmcgYmVuY2htYXJrcyBhYm91dCAyLjEgdGltZXMgc2xvd2VyIHRoYW5cbi8vIEphdmFzY3JpcHQncyBidWlsdC1pbiBNYXRoLnJhbmRvbSgpLlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdyA9IG1lLncsXG4gICAgICAgIFggPSBtZS5YLCBpID0gbWUuaSwgdCwgdjtcbiAgICAvLyBVcGRhdGUgV2V5bCBnZW5lcmF0b3IuXG4gICAgbWUudyA9IHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2ID0gWFsoaSArIDM0KSAmIDEyN107XG4gICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgdiBePSB2IDw8IDEzO1xuICAgIHQgXj0gdCA8PCAxNztcbiAgICB2IF49IHYgPj4+IDE1O1xuICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgLy8gVXBkYXRlIFhvciBnZW5lcmF0b3IgYXJyYXkgc3RhdGUuXG4gICAgdiA9IFhbaV0gPSB2IF4gdDtcbiAgICBtZS5pID0gaTtcbiAgICAvLyBSZXN1bHQgaXMgdGhlIGNvbWJpbmF0aW9uLlxuICAgIHJldHVybiAodiArICh3IF4gKHcgPj4+IDE2KSkpIHwgMDtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIHQsIHYsIGksIGosIHcsIFggPSBbXSwgbGltaXQgPSAxMjg7XG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIE51bWVyaWMgc2VlZHMgaW5pdGlhbGl6ZSB2LCB3aGljaCBpcyB1c2VkIHRvIGdlbmVyYXRlcyBYLlxuICAgICAgdiA9IHNlZWQ7XG4gICAgICBzZWVkID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RyaW5nIHNlZWRzIGFyZSBtaXhlZCBpbnRvIHYgYW5kIFggb25lIGNoYXJhY3RlciBhdCBhIHRpbWUuXG4gICAgICBzZWVkID0gc2VlZCArICdcXDAnO1xuICAgICAgdiA9IDA7XG4gICAgICBsaW1pdCA9IE1hdGgubWF4KGxpbWl0LCBzZWVkLmxlbmd0aCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgY2lyY3VsYXIgYXJyYXkgYW5kIHdleWwgdmFsdWUuXG4gICAgZm9yIChpID0gMCwgaiA9IC0zMjsgaiA8IGxpbWl0OyArK2opIHtcbiAgICAgIC8vIFB1dCB0aGUgdW5pY29kZSBjaGFyYWN0ZXJzIGludG8gdGhlIGFycmF5LCBhbmQgc2h1ZmZsZSB0aGVtLlxuICAgICAgaWYgKHNlZWQpIHYgXj0gc2VlZC5jaGFyQ29kZUF0KChqICsgMzIpICUgc2VlZC5sZW5ndGgpO1xuICAgICAgLy8gQWZ0ZXIgMzIgc2h1ZmZsZXMsIHRha2UgdiBhcyB0aGUgc3RhcnRpbmcgdyB2YWx1ZS5cbiAgICAgIGlmIChqID09PSAwKSB3ID0gdjtcbiAgICAgIHYgXj0gdiA8PCAxMDtcbiAgICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgICB2IF49IHYgPDwgNDtcbiAgICAgIHYgXj0gdiA+Pj4gMTM7XG4gICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgIHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDsgICAgIC8vIFdleWwuXG4gICAgICAgIHQgPSAoWFtqICYgMTI3XSBePSAodiArIHcpKTsgIC8vIENvbWJpbmUgeG9yIGFuZCB3ZXlsIHRvIGluaXQgYXJyYXkuXG4gICAgICAgIGkgPSAoMCA9PSB0KSA/IGkgKyAxIDogMDsgICAgIC8vIENvdW50IHplcm9lcy5cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBkZXRlY3RlZCBhbGwgemVyb2VzOyBtYWtlIHRoZSBrZXkgbm9uemVyby5cbiAgICBpZiAoaSA+PSAxMjgpIHtcbiAgICAgIFhbKHNlZWQgJiYgc2VlZC5sZW5ndGggfHwgMCkgJiAxMjddID0gLTE7XG4gICAgfVxuICAgIC8vIFJ1biB0aGUgZ2VuZXJhdG9yIDUxMiB0aW1lcyB0byBmdXJ0aGVyIG1peCB0aGUgc3RhdGUgYmVmb3JlIHVzaW5nIGl0LlxuICAgIC8vIEZhY3RvcmluZyB0aGlzIGFzIGEgZnVuY3Rpb24gc2xvd3MgdGhlIG1haW4gZ2VuZXJhdG9yLCBzbyBpdCBpcyBqdXN0XG4gICAgLy8gdW5yb2xsZWQgaGVyZS4gIFRoZSB3ZXlsIGdlbmVyYXRvciBpcyBub3QgYWR2YW5jZWQgd2hpbGUgd2FybWluZyB1cC5cbiAgICBpID0gMTI3O1xuICAgIGZvciAoaiA9IDQgKiAxMjg7IGogPiAwOyAtLWopIHtcbiAgICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICAgIHQgPSBYW2kgPSAoKGkgKyAxKSAmIDEyNyldO1xuICAgICAgdiBePSB2IDw8IDEzO1xuICAgICAgdCBePSB0IDw8IDE3O1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgICBYW2ldID0gdiBeIHQ7XG4gICAgfVxuICAgIC8vIFN0b3Jpbmcgc3RhdGUgYXMgb2JqZWN0IG1lbWJlcnMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY2xvc3VyZSB2YXJpYWJsZXMuXG4gICAgbWUudyA9IHc7XG4gICAgbWUuWCA9IFg7XG4gICAgbWUuaSA9IGk7XG4gIH1cblxuICBpbml0KG1lLCBzZWVkKTtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuaSA9IGYuaTtcbiAgdC53ID0gZi53O1xuICB0LlggPSBmLlguc2xpY2UoKTtcbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgaWYgKHNlZWQgPT0gbnVsbCkgc2VlZCA9ICsobmV3IERhdGUpO1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5YKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yNDA5NiA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cgb2JqZWN0IG9yIGdsb2JhbFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3JzaGlmdDdcIiBhbGdvcml0aG0gYnlcbi8vIEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyOlxuLy8gXCJPbiB0aGUgWG9yZ3NoaWZ0IFJhbmRvbSBOdW1iZXIgR2VuZXJhdG9yc1wiXG4vLyBodHRwOi8vc2FsdWMuZW5nci51Y29ubi5lZHUvcmVmcy9jcnlwdG8vcm5nL3Bhbm5ldG9uMDVvbnRoZXhvcnNoaWZ0LnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2YXIgWCA9IG1lLngsIGkgPSBtZS5pLCB0LCB2LCB3O1xuICAgIHQgPSBYW2ldOyB0IF49ICh0ID4+PiA3KTsgdiA9IHQgXiAodCA8PCAyNCk7XG4gICAgdCA9IFhbKGkgKyAxKSAmIDddOyB2IF49IHQgXiAodCA+Pj4gMTApO1xuICAgIHQgPSBYWyhpICsgMykgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDMpO1xuICAgIHQgPSBYWyhpICsgNCkgJiA3XTsgdiBePSB0IF4gKHQgPDwgNyk7XG4gICAgdCA9IFhbKGkgKyA3KSAmIDddOyB0ID0gdCBeICh0IDw8IDEzKTsgdiBePSB0IF4gKHQgPDwgOSk7XG4gICAgWFtpXSA9IHY7XG4gICAgbWUuaSA9IChpICsgMSkgJiA3O1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgaiwgdywgWCA9IFtdO1xuXG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgYXJyYXkgdXNpbmcgYSAzMi1iaXQgaW50ZWdlci5cbiAgICAgIHcgPSBYWzBdID0gc2VlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VlZCBzdGF0ZSB1c2luZyBhIHN0cmluZy5cbiAgICAgIHNlZWQgPSAnJyArIHNlZWQ7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgc2VlZC5sZW5ndGg7ICsraikge1xuICAgICAgICBYW2ogJiA3XSA9IChYW2ogJiA3XSA8PCAxNSkgXlxuICAgICAgICAgICAgKHNlZWQuY2hhckNvZGVBdChqKSArIFhbKGogKyAxKSAmIDddIDw8IDEzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRW5mb3JjZSBhbiBhcnJheSBsZW5ndGggb2YgOCwgbm90IGFsbCB6ZXJvZXMuXG4gICAgd2hpbGUgKFgubGVuZ3RoIDwgOCkgWC5wdXNoKDApO1xuICAgIGZvciAoaiA9IDA7IGogPCA4ICYmIFhbal0gPT09IDA7ICsraik7XG4gICAgaWYgKGogPT0gOCkgdyA9IFhbN10gPSAtMTsgZWxzZSB3ID0gWFtqXTtcblxuICAgIG1lLnggPSBYO1xuICAgIG1lLmkgPSAwO1xuXG4gICAgLy8gRGlzY2FyZCBhbiBpbml0aWFsIDI1NiB2YWx1ZXMuXG4gICAgZm9yIChqID0gMjU2OyBqID4gMDsgLS1qKSB7XG4gICAgICBtZS5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdChtZSwgc2VlZCk7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLnguc2xpY2UoKTtcbiAgdC5pID0gZi5pO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIGlmIChzZWVkID09IG51bGwpIHNlZWQgPSArKG5ldyBEYXRlKTtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUueCkgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcnNoaWZ0NyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcndvd1wiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBHZW9yZ2UgTWFyc2FnbGlhLiAgU2VlIGh0dHA6Ly93d3cuanN0YXRzb2Z0Lm9yZy92MDgvaTE0L3BhcGVyXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSAobWUueCBeIChtZS54ID4+PiAyKSk7XG4gICAgbWUueCA9IG1lLnk7IG1lLnkgPSBtZS56OyBtZS56ID0gbWUudzsgbWUudyA9IG1lLnY7XG4gICAgcmV0dXJuIChtZS5kID0gKG1lLmQgKyAzNjI0MzcgfCAwKSkgK1xuICAgICAgIChtZS52ID0gKG1lLnYgXiAobWUudiA8PCA0KSkgXiAodCBeICh0IDw8IDEpKSkgfCAwO1xuICB9O1xuXG4gIG1lLnggPSAwO1xuICBtZS55ID0gMDtcbiAgbWUueiA9IDA7XG4gIG1lLncgPSAwO1xuICBtZS52ID0gMDtcblxuICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS54ID0gc2VlZDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDY0OyBrKyspIHtcbiAgICBtZS54IF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgaWYgKGsgPT0gc3Ryc2VlZC5sZW5ndGgpIHtcbiAgICAgIG1lLmQgPSBtZS54IDw8IDEwIF4gbWUueCA+Pj4gNDtcbiAgICB9XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLng7XG4gIHQueSA9IGYueTtcbiAgdC56ID0gZi56O1xuICB0LncgPSBmLnc7XG4gIHQudiA9IGYudjtcbiAgdC5kID0gZi5kO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3J3b3cgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOSBEYXZpZCBCYXUuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbkNMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBwb29sLCBtYXRoKSB7XG4vL1xuLy8gVGhlIGZvbGxvd2luZyBjb25zdGFudHMgYXJlIHJlbGF0ZWQgdG8gSUVFRSA3NTQgbGltaXRzLlxuLy9cblxudmFyIHdpZHRoID0gMjU2LCAgICAgICAgLy8gZWFjaCBSQzQgb3V0cHV0IGlzIDAgPD0geCA8IDI1NlxuICAgIGNodW5rcyA9IDYsICAgICAgICAgLy8gYXQgbGVhc3Qgc2l4IFJDNCBvdXRwdXRzIGZvciBlYWNoIGRvdWJsZVxuICAgIGRpZ2l0cyA9IDUyLCAgICAgICAgLy8gdGhlcmUgYXJlIDUyIHNpZ25pZmljYW50IGRpZ2l0cyBpbiBhIGRvdWJsZVxuICAgIHJuZ25hbWUgPSAncmFuZG9tJywgLy8gcm5nbmFtZTogbmFtZSBmb3IgTWF0aC5yYW5kb20gYW5kIE1hdGguc2VlZHJhbmRvbVxuICAgIHN0YXJ0ZGVub20gPSBtYXRoLnBvdyh3aWR0aCwgY2h1bmtzKSxcbiAgICBzaWduaWZpY2FuY2UgPSBtYXRoLnBvdygyLCBkaWdpdHMpLFxuICAgIG92ZXJmbG93ID0gc2lnbmlmaWNhbmNlICogMixcbiAgICBtYXNrID0gd2lkdGggLSAxLFxuICAgIG5vZGVjcnlwdG87ICAgICAgICAgLy8gbm9kZS5qcyBjcnlwdG8gbW9kdWxlLCBpbml0aWFsaXplZCBhdCB0aGUgYm90dG9tLlxuXG4vL1xuLy8gc2VlZHJhbmRvbSgpXG4vLyBUaGlzIGlzIHRoZSBzZWVkcmFuZG9tIGZ1bmN0aW9uIGRlc2NyaWJlZCBhYm92ZS5cbi8vXG5mdW5jdGlvbiBzZWVkcmFuZG9tKHNlZWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBrZXkgPSBbXTtcbiAgb3B0aW9ucyA9IChvcHRpb25zID09IHRydWUpID8geyBlbnRyb3B5OiB0cnVlIH0gOiAob3B0aW9ucyB8fCB7fSk7XG5cbiAgLy8gRmxhdHRlbiB0aGUgc2VlZCBzdHJpbmcgb3IgYnVpbGQgb25lIGZyb20gbG9jYWwgZW50cm9weSBpZiBuZWVkZWQuXG4gIHZhciBzaG9ydHNlZWQgPSBtaXhrZXkoZmxhdHRlbihcbiAgICBvcHRpb25zLmVudHJvcHkgPyBbc2VlZCwgdG9zdHJpbmcocG9vbCldIDpcbiAgICAoc2VlZCA9PSBudWxsKSA/IGF1dG9zZWVkKCkgOiBzZWVkLCAzKSwga2V5KTtcblxuICAvLyBVc2UgdGhlIHNlZWQgdG8gaW5pdGlhbGl6ZSBhbiBBUkM0IGdlbmVyYXRvci5cbiAgdmFyIGFyYzQgPSBuZXcgQVJDNChrZXkpO1xuXG4gIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJhbmRvbSBkb3VibGUgaW4gWzAsIDEpIHRoYXQgY29udGFpbnNcbiAgLy8gcmFuZG9tbmVzcyBpbiBldmVyeSBiaXQgb2YgdGhlIG1hbnRpc3NhIG9mIHRoZSBJRUVFIDc1NCB2YWx1ZS5cbiAgdmFyIHBybmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA9IGFyYzQuZyhjaHVua3MpLCAgICAgICAgICAgICAvLyBTdGFydCB3aXRoIGEgbnVtZXJhdG9yIG4gPCAyIF4gNDhcbiAgICAgICAgZCA9IHN0YXJ0ZGVub20sICAgICAgICAgICAgICAgICAvLyAgIGFuZCBkZW5vbWluYXRvciBkID0gMiBeIDQ4LlxuICAgICAgICB4ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYW5kIG5vICdleHRyYSBsYXN0IGJ5dGUnLlxuICAgIHdoaWxlIChuIDwgc2lnbmlmaWNhbmNlKSB7ICAgICAgICAgIC8vIEZpbGwgdXAgYWxsIHNpZ25pZmljYW50IGRpZ2l0cyBieVxuICAgICAgbiA9IChuICsgeCkgKiB3aWR0aDsgICAgICAgICAgICAgIC8vICAgc2hpZnRpbmcgbnVtZXJhdG9yIGFuZFxuICAgICAgZCAqPSB3aWR0aDsgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZGVub21pbmF0b3IgYW5kIGdlbmVyYXRpbmcgYVxuICAgICAgeCA9IGFyYzQuZygxKTsgICAgICAgICAgICAgICAgICAgIC8vICAgbmV3IGxlYXN0LXNpZ25pZmljYW50LWJ5dGUuXG4gICAgfVxuICAgIHdoaWxlIChuID49IG92ZXJmbG93KSB7ICAgICAgICAgICAgIC8vIFRvIGF2b2lkIHJvdW5kaW5nIHVwLCBiZWZvcmUgYWRkaW5nXG4gICAgICBuIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBsYXN0IGJ5dGUsIHNoaWZ0IGV2ZXJ5dGhpbmdcbiAgICAgIGQgLz0gMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHJpZ2h0IHVzaW5nIGludGVnZXIgbWF0aCB1bnRpbFxuICAgICAgeCA+Pj49IDE7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgd2UgaGF2ZSBleGFjdGx5IHRoZSBkZXNpcmVkIGJpdHMuXG4gICAgfVxuICAgIHJldHVybiAobiArIHgpIC8gZDsgICAgICAgICAgICAgICAgIC8vIEZvcm0gdGhlIG51bWJlciB3aXRoaW4gWzAsIDEpLlxuICB9O1xuXG4gIHBybmcuaW50MzIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSB8IDA7IH1cbiAgcHJuZy5xdWljayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJjNC5nKDQpIC8gMHgxMDAwMDAwMDA7IH1cbiAgcHJuZy5kb3VibGUgPSBwcm5nO1xuXG4gIC8vIE1peCB0aGUgcmFuZG9tbmVzcyBpbnRvIGFjY3VtdWxhdGVkIGVudHJvcHkuXG4gIG1peGtleSh0b3N0cmluZyhhcmM0LlMpLCBwb29sKTtcblxuICAvLyBDYWxsaW5nIGNvbnZlbnRpb246IHdoYXQgdG8gcmV0dXJuIGFzIGEgZnVuY3Rpb24gb2YgcHJuZywgc2VlZCwgaXNfbWF0aC5cbiAgcmV0dXJuIChvcHRpb25zLnBhc3MgfHwgY2FsbGJhY2sgfHxcbiAgICAgIGZ1bmN0aW9uKHBybmcsIHNlZWQsIGlzX21hdGhfY2FsbCwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgLy8gTG9hZCB0aGUgYXJjNCBzdGF0ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBpZiBpdCBoYXMgYW4gUyBhcnJheS5cbiAgICAgICAgICBpZiAoc3RhdGUuUykgeyBjb3B5KHN0YXRlLCBhcmM0KTsgfVxuICAgICAgICAgIC8vIE9ubHkgcHJvdmlkZSB0aGUgLnN0YXRlIG1ldGhvZCBpZiByZXF1ZXN0ZWQgdmlhIG9wdGlvbnMuc3RhdGUuXG4gICAgICAgICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weShhcmM0LCB7fSk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGNhbGxlZCBhcyBhIG1ldGhvZCBvZiBNYXRoIChNYXRoLnNlZWRyYW5kb20oKSksIG11dGF0ZVxuICAgICAgICAvLyBNYXRoLnJhbmRvbSBiZWNhdXNlIHRoYXQgaXMgaG93IHNlZWRyYW5kb20uanMgaGFzIHdvcmtlZCBzaW5jZSB2MS4wLlxuICAgICAgICBpZiAoaXNfbWF0aF9jYWxsKSB7IG1hdGhbcm5nbmFtZV0gPSBwcm5nOyByZXR1cm4gc2VlZDsgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgaXQgaXMgYSBuZXdlciBjYWxsaW5nIGNvbnZlbnRpb24sIHNvIHJldHVybiB0aGVcbiAgICAgICAgLy8gcHJuZyBkaXJlY3RseS5cbiAgICAgICAgZWxzZSByZXR1cm4gcHJuZztcbiAgICAgIH0pKFxuICBwcm5nLFxuICBzaG9ydHNlZWQsXG4gICdnbG9iYWwnIGluIG9wdGlvbnMgPyBvcHRpb25zLmdsb2JhbCA6ICh0aGlzID09IG1hdGgpLFxuICBvcHRpb25zLnN0YXRlKTtcbn1cblxuLy9cbi8vIEFSQzRcbi8vXG4vLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4vLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbi8vXG4vLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuLy8gdGhhdCBpcyBpbiB0aGUgcmFuZ2UgMCA8PSB4IDwgKHdpZHRoIF4gY291bnQpLlxuLy9cbmZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gIHZhciB0LCBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgbWUgPSB0aGlzLCBpID0gMCwgaiA9IG1lLmkgPSBtZS5qID0gMCwgcyA9IG1lLlMgPSBbXTtcblxuICAvLyBUaGUgZW1wdHkga2V5IFtdIGlzIHRyZWF0ZWQgYXMgWzBdLlxuICBpZiAoIWtleWxlbikgeyBrZXkgPSBba2V5bGVuKytdOyB9XG5cbiAgLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cbiAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgIHNbaV0gPSBpKys7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcbiAgICBzW2ldID0gc1tqID0gbWFzayAmIChqICsga2V5W2kgJSBrZXlsZW5dICsgKHQgPSBzW2ldKSldO1xuICAgIHNbal0gPSB0O1xuICB9XG5cbiAgLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuICAobWUuZyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgdmFyIHQsIHIgPSAwLFxuICAgICAgICBpID0gbWUuaSwgaiA9IG1lLmosIHMgPSBtZS5TO1xuICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICB0ID0gc1tpID0gbWFzayAmIChpICsgMSldO1xuICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmICgoc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIHQpXSkgKyAoc1tqXSA9IHQpKV07XG4gICAgfVxuICAgIG1lLmkgPSBpOyBtZS5qID0gajtcbiAgICByZXR1cm4gcjtcbiAgICAvLyBGb3Igcm9idXN0IHVucHJlZGljdGFiaWxpdHksIHRoZSBmdW5jdGlvbiBjYWxsIGJlbG93IGF1dG9tYXRpY2FsbHlcbiAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgfSkod2lkdGgpO1xufVxuXG4vL1xuLy8gY29weSgpXG4vLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmkgPSBmLmk7XG4gIHQuaiA9IGYuajtcbiAgdC5TID0gZi5TLnNsaWNlKCk7XG4gIHJldHVybiB0O1xufTtcblxuLy9cbi8vIGZsYXR0ZW4oKVxuLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuLy9cbmZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICB2YXIgcmVzdWx0ID0gW10sIHR5cCA9ICh0eXBlb2Ygb2JqKSwgcHJvcDtcbiAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIHRyeSB7IHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTsgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbiAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCcpO1xufVxuXG4vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgdmFyIHN0cmluZ3NlZWQgPSBzZWVkICsgJycsIHNtZWFyLCBqID0gMDtcbiAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgIGtleVttYXNrICYgal0gPVxuICAgICAgbWFzayAmICgoc21lYXIgXj0ga2V5W21hc2sgJiBqXSAqIDE5KSArIHN0cmluZ3NlZWQuY2hhckNvZGVBdChqKyspKTtcbiAgfVxuICByZXR1cm4gdG9zdHJpbmcoa2V5KTtcbn1cblxuLy9cbi8vIGF1dG9zZWVkKClcbi8vIFJldHVybnMgYW4gb2JqZWN0IGZvciBhdXRvc2VlZGluZywgdXNpbmcgd2luZG93LmNyeXB0byBhbmQgTm9kZSBjcnlwdG9cbi8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4vL1xuZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gIHRyeSB7XG4gICAgdmFyIG91dDtcbiAgICBpZiAobm9kZWNyeXB0byAmJiAob3V0ID0gbm9kZWNyeXB0by5yYW5kb21CeXRlcykpIHtcbiAgICAgIC8vIFRoZSB1c2Ugb2YgJ291dCcgdG8gcmVtZW1iZXIgcmFuZG9tQnl0ZXMgbWFrZXMgdGlnaHQgbWluaWZpZWQgY29kZS5cbiAgICAgIG91dCA9IG91dCh3aWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KHdpZHRoKTtcbiAgICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgfVxuICAgIHJldHVybiB0b3N0cmluZyhvdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGJyb3dzZXIgPSBnbG9iYWwubmF2aWdhdG9yLFxuICAgICAgICBwbHVnaW5zID0gYnJvd3NlciAmJiBicm93c2VyLnBsdWdpbnM7XG4gICAgcmV0dXJuIFsrbmV3IERhdGUsIGdsb2JhbCwgcGx1Z2lucywgZ2xvYmFsLnNjcmVlbiwgdG9zdHJpbmcocG9vbCldO1xuICB9XG59XG5cbi8vXG4vLyB0b3N0cmluZygpXG4vLyBDb252ZXJ0cyBhbiBhcnJheSBvZiBjaGFyY29kZXMgdG8gYSBzdHJpbmdcbi8vXG5mdW5jdGlvbiB0b3N0cmluZyhhKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsIGEpO1xufVxuXG4vL1xuLy8gV2hlbiBzZWVkcmFuZG9tLmpzIGlzIGxvYWRlZCwgd2UgaW1tZWRpYXRlbHkgbWl4IGEgZmV3IGJpdHNcbi8vIGZyb20gdGhlIGJ1aWx0LWluIFJORyBpbnRvIHRoZSBlbnRyb3B5IHBvb2wuICBCZWNhdXNlIHdlIGRvXG4vLyBub3Qgd2FudCB0byBpbnRlcmZlcmUgd2l0aCBkZXRlcm1pbmlzdGljIFBSTkcgc3RhdGUgbGF0ZXIsXG4vLyBzZWVkcmFuZG9tIHdpbGwgbm90IGNhbGwgbWF0aC5yYW5kb20gb24gaXRzIG93biBhZ2FpbiBhZnRlclxuLy8gaW5pdGlhbGl6YXRpb24uXG4vL1xubWl4a2V5KG1hdGgucmFuZG9tKCksIHBvb2wpO1xuXG4vL1xuLy8gTm9kZWpzIGFuZCBBTUQgc3VwcG9ydDogZXhwb3J0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBhIG1vZHVsZSB1c2luZ1xuLy8gZWl0aGVyIGNvbnZlbnRpb24uXG4vL1xuaWYgKCh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHNlZWRyYW5kb207XG4gIC8vIFdoZW4gaW4gbm9kZS5qcywgdHJ5IHVzaW5nIGNyeXB0byBwYWNrYWdlIGZvciBhdXRvc2VlZGluZy5cbiAgdHJ5IHtcbiAgICBub2RlY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gIH0gY2F0Y2ggKGV4KSB7fVxufSBlbHNlIGlmICgodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIHNlZWRyYW5kb207IH0pO1xufSBlbHNlIHtcbiAgLy8gV2hlbiBpbmNsdWRlZCBhcyBhIHBsYWluIHNjcmlwdCwgc2V0IHVwIE1hdGguc2VlZHJhbmRvbSBnbG9iYWwuXG4gIG1hdGhbJ3NlZWQnICsgcm5nbmFtZV0gPSBzZWVkcmFuZG9tO1xufVxuXG5cbi8vIEVuZCBhbm9ueW1vdXMgc2NvcGUsIGFuZCBwYXNzIGluaXRpYWwgdmFsdWVzLlxufSkoXG4gIC8vIGdsb2JhbDogYHNlbGZgIGluIGJyb3dzZXJzIChpbmNsdWRpbmcgc3RyaWN0IG1vZGUgYW5kIHdlYiB3b3JrZXJzKSxcbiAgLy8gb3RoZXJ3aXNlIGB0aGlzYCBpbiBOb2RlIGFuZCBvdGhlciBlbnZpcm9ubWVudHNcbiAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgPyBzZWxmIDogdGhpcyxcbiAgW10sICAgICAvLyBwb29sOiBlbnRyb3B5IHBvb2wgc3RhcnRzIGVtcHR5XG4gIE1hdGggICAgLy8gbWF0aDogcGFja2FnZSBjb250YWluaW5nIHJhbmRvbSwgcG93LCBhbmQgc2VlZHJhbmRvbVxuKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5hbWREID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ2RlZmluZSBjYW5ub3QgYmUgdXNlZCBpbmRpcmVjdCcpO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmFtZE8gPSB7fTsiLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUb2RvTGlzdENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3ZpZXcgPSB7XG4gICAgICB0b2RvQ2xpY2tMaXN0ZW5lcnM6IFtdLFxuICAgICAgdG9kb0RlbGV0ZUJ0bkxpc3RlbmVyczogW10sXG4gICAgICBpbml0KCkge1xuICAgICAgICB0aGlzLnRvZG9MaXN0Q290bmFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBcIi50b2Rvcy1saXN0LWNvbnRhaW5lclwiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMudG9kb0xpc3RVTCA9IHRoaXMudG9kb0xpc3RDb3RuYWluZXIucXVlcnlTZWxlY3RvcihcIi50b2Rvcy1saXN0XCIpO1xuXG4gICAgICAgIHRoaXMudG9kb0xpc3RVTC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgICBjb25zdCB0b2RvSWQgPSBlLnRhcmdldC5kYXRhc2V0LmlkO1xuICAgICAgICAgIGlmICghdG9kb0lkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImRlbGV0ZS1idG5cIikpIHtcbiAgICAgICAgICAgIHRoaXMudG9kb0RlbGV0ZUJ0bkxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIodG9kb0lkKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9kb0NsaWNrTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiBsaXN0ZW5lcih0b2RvSWQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgcmVuZGVyKHRvZG9zKSB7XG4gICAgICAgIGNvbnN0IGxpc3RJdGVtcyA9IHRvZG9zXG4gICAgICAgICAgLnNvcnQoKHQxLCB0MikgPT4gdDIucHJpb3JpdHkgLSB0MS5wcmlvcml0eSlcbiAgICAgICAgICAucmVkdWNlKChodG1sLCB0b2RvKSA9PiBodG1sICsgdGhpcy50b2RvVGVtcGxhdGUodG9kbyksIGBgKTtcbiAgICAgICAgdGhpcy50b2RvTGlzdFVMLmlubmVySFRNTCA9IGxpc3RJdGVtcztcbiAgICAgIH0sXG5cbiAgICAgIHRvZG9UZW1wbGF0ZSh0b2RvKSB7XG4gICAgICAgIHJldHVybiBgPGxpPjxidXR0b24gY2xhc3M9XCJ0b2RvLWl0ZW0gcHJpb3JpdHktJHt0b2RvLnByaW9yaXR5fSBidG4gICR7XG4gICAgICAgICAgdG9kby5pc0NvbXBsZXRlID8gXCJ0b2RvLWNvbXBsZXRlXCIgOiBcIlwiXG4gICAgICAgIH1cIiBkYXRhLWlkPVwiJHt0b2RvLmlkfVwiPiR7dG9kby50aXRsZX08c3BhbiBjbGFzcz1cInRvZG8tZHVlZGF0ZVwiPiR7XG4gICAgICAgICAgdG9kby5kdWVEYXRlXG4gICAgICAgIH08L3NwYW4+PC9idXR0b24+IDxidXR0b24gY2xhc3M9XCJidG4gZGVsZXRlLWJ0blwiIGRhdGEtaWQ9XCIke1xuICAgICAgICAgIHRvZG8uaWRcbiAgICAgICAgfVwiPkRFTDwvYnV0dG9uPjwvbGk+YDtcbiAgICAgIH0sXG5cbiAgICAgIGFkZFRvZG9DbGlja0xpc3RlbmVyKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy50b2RvQ2xpY2tMaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbiAgICAgIH0sXG5cbiAgICAgIGFkZFRvZG9EZWxldGVDbGlja0xpc3RlbmVyKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy50b2RvRGVsZXRlQnRuTGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB0aGlzLl9tb2RlbCA9IHtcbiAgICAgIHRvZG9zOiBbXSxcbiAgICAgIGNoYW5nZUxpc3RlbmVyczogW10sXG5cbiAgICAgIGFkZENoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VMaXN0ZW5lcnMgPSB0aGlzLmNoYW5nZUxpc3RlbmVycy5maWx0ZXIoXG4gICAgICAgICAgKGwpID0+IGwgIT09IGxpc3RlbmVyXG4gICAgICAgICk7XG4gICAgICB9LFxuXG4gICAgICB0cmlnZ2VyQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgIGxpc3RlbmVyKHRoaXMudG9kb3MpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIGdldFRvZG9zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2RvcztcbiAgICAgIH0sXG5cbiAgICAgIHNldFRvZG9zKHRvZG9zKSB7XG4gICAgICAgIHRoaXMudG9kb3MgPSB0b2RvcztcbiAgICAgICAgdGhpcy50cmlnZ2VyQ2hhbmdlKCk7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICB0aGlzLl92aWV3LmluaXQoKTtcblxuICAgIHRoaXMubW9kZWxDaGFuZ2VIYW5kbGVyID0gdGhpcy5tb2RlbENoYW5nZUhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9tb2RlbC5hZGRDaGFuZ2VMaXN0ZW5lcih0aGlzLm1vZGVsQ2hhbmdlSGFuZGxlcik7XG4gIH1cblxuICBtb2RlbENoYW5nZUhhbmRsZXIodG9kb3MpIHtcbiAgICB0aGlzLl92aWV3LnJlbmRlcih0b2Rvcyk7XG4gIH1cblxuICBzZXRUb2Rvcyh0b2Rvcykge1xuICAgIHRoaXMuX21vZGVsLnNldFRvZG9zKHRvZG9zKTtcbiAgfVxuXG4gIGFkZFRvZG9DbGlja0xpc2V0bmVyKGhhbmRsZXIpIHtcbiAgICB0aGlzLl92aWV3LmFkZFRvZG9DbGlja0xpc3RlbmVyKGhhbmRsZXIpO1xuICB9XG5cbiAgYWRkVG9kb0RlbGV0ZUNsaWNrTGlzdGVuZXIoaGFuZGxlcikge1xuICAgIHRoaXMuX3ZpZXcuYWRkVG9kb0RlbGV0ZUNsaWNrTGlzdGVuZXIoaGFuZGxlcik7XG4gIH1cbn1cbiIsImltcG9ydCBlIGZyb21cInNlZWRyYW5kb21cIjtpbXBvcnR7djQgYXMgYX1mcm9tXCJ1dWlkXCI7bGV0IHQ9ZSgpO2Z1bmN0aW9uIG8oKXtyZXR1cm4gdCgpfWZ1bmN0aW9uIGkoYSl7dD1lKGEpfWZ1bmN0aW9uIG4oZSxhKXtjb25zdCB0PUFycmF5LmlzQXJyYXkoZSk/KCk9PnIoZSk6ZTtyZXR1cm4gdm9pZCAwPT09KG51bGw9PWE/dm9pZCAwOmEubGVuZ3RoKT90KDApOkFycmF5LmZyb20oe2xlbmd0aDphLmxlbmd0aH0sKChlLGEpPT50KGEpKSl9ZnVuY3Rpb24gcihlKXtyZXR1cm4gZVtNYXRoLmZsb29yKG8oKSplLmxlbmd0aCldfWZ1bmN0aW9uIHMoe21pbjplPTEsbWF4OmE9OTk5OS45OSxmcmFjdGlvbjp0PTB9PXt9KXtpZihhPGUpdGhyb3cgbmV3IEVycm9yKFwiTWF4IG11c3QgYmUgYmlnZ2VyIHRoYW4gbWluXCIpO3JldHVybiBOdW1iZXIoKG8oKSooYS1lKStlKS50b0ZpeGVkKHQpKX12YXIgbD1bXCJTQ1NJXCIsXCJTTVRQXCIsXCJBRFBcIixcIlRDUFwiLFwiUE5HXCIsXCJFWEVcIixcIkFJXCIsXCJSQU1cIixcIlJTU1wiLFwiR0JcIixcIlNTTFwiLFwiQ1NTXCIsXCJTQVNcIixcIlNERFwiLFwiUENJXCIsXCJJQlwiLFwiU1FMXCIsXCJYTUxcIixcIlRIWFwiLFwiQUdQXCIsXCJIVFRQXCIsXCJTTVNcIixcIkZUUFwiLFwiSkJPRFwiLFwiWFNTXCIsXCJIRERcIixcIkpTT05cIixcIkNPTVwiXTtmdW5jdGlvbiB1KGUpe3JldHVybiBuKGwsZSl9dmFyIGM9W1wiRmFzaGlvbiBhY2Nlc3NvcnlcIixcIkFpZ3VpbGxldHRlXCIsXCJBcm1iYW5kXCIsXCJBdXRvZ3JhcGhlclwiLFwiQmFieSBzbGluZ1wiLFwiQmFzZWJhbGwgY2FwXCIsXCJCZWFuaWVcIixcIkJvdXRvbm5pw6hyZVwiLFwiQnJlYXN0IG1pbGsgamV3ZWxyeVwiLFwiQnJldG9uXCIsXCJUaG9tYXMgQnJpZ2cgJiBTb25zXCIsXCJCdW0gZmxhcFwiLFwiQnV0dG9uXCIsXCJDYXB1bGFuYVwiLFwiQ2FyZCBlbmNsb3N1cmVcIixcIkNhcnR3aGVlbCBoYXRcIixcIkNhdWxcIixcIkNoYXRlbGFpbmVcIixcIkNoZW1pc2V0dGVcIixcIkNoZW9wamlcIixcIkNoaW5lc2UgaGFpcnBpblwiLFwiQ2lnYXJldHRlIGNhc2VcIixcIkNpZ2FyZXR0ZSBob2xkZXJcIixcIkNvaW4gcHVyc2VcIixcIkNvbGxhciBwaW5cIixcIkNvbXBhY3RcIixcIkNvcnNhZ2VcIixcIkN1ZmZsaW5rXCIsXCJDdW1tZXJidW5kXCIsXCJEYWVuZ2dpXCIsXCJEZWVwIEJsdWUgU2VhXCIsXCJEb2xsIGhhdFwiLFwiRHJhcGVkIHR1cmJhblwiLFwiRHJlc3MgaG9va1wiLFwiRHVzaC10b2hcIixcIkVwYXVsZXR0ZVwiLFwiRXZlbmluZyBnbG92ZVwiLFwiQm9hXCIsXCJGbG93ZXIgYm91cXVldFwiLFwiRmx1ZmZ5XCIsXCJGb2xkaW5nIGNsYXNwXCIsXCJGcmlzZXR0ZVwiLFwiR2FydGVyXCIsXCJHcmVhdCBHcmVlbmxhbmQgRnVyaG91c2VcIixcIkhhaXIgZHJvcFwiLFwiSGFpciBzdGlja1wiLFwiSGFpcm5ldFwiLFwiSGFsZiBoYXRcIixcIkhhbG8gaGF0XCIsXCJIYW1iaWxpeWFcIixcIkhhbmQgY29vbGVyXCIsXCJIYW5kIGZhblwiLFwiSGFuZGJhZ1wiLFwiSGFuZGtlcmNoaWVmXCIsXCJIaWRlc2lnblwiLFwiSW5yb1wiLFwiSXJvbi1vblwiLFwiSXQgYmFnXCIsXCJKZWdnaW5nc1wiLFwiSmV3ZWxsZXJ5XCIsXCJIZXJiZXJ0IEpvaG5zb25cIixcIktpdHRpc29sXCIsXCJMYW1wc2hhZGUgaGF0XCIsXCJMYXBlbCBwaW5cIixcIk1ldGFsIGNsYXlcIixcIk1ldGFsIGNvdXR1cmVcIixcIk1pbmF1ZGnDqHJlXCIsXCJNb2JpbGUgcGhvbmUgY2hhcm1cIixcIk1vbmV5IGNsaXBcIixcIk11ZmZcIixcIk11c2V1bSBvZiBCYWdzIGFuZCBQdXJzZXNcIixcIk11c2hyb29tIGhhdFwiLFwiTm9yaWdhZVwiLFwiTm9zZWdheVwiLFwiT2JpXCIsXCJPamltZVwiLFwiUGFwd29ydGggSW5kdXN0cmllc1wiLFwiUGFydGxldFwiLFwiUGVhY2ggYmFza2V0IGhhdFwiLFwiUGljdHVyZSBoYXRcIixcIlBpbiB0cmFkaW5nXCIsXCJQaW4tYmFjayBidXR0b25cIixcIlBvY2tldCBwcm90ZWN0b3JcIixcIlByZXNpZGVudGlhbCBzYXNoXCIsXCJQdXJzZSBhY2Nlc3Nvcmllc1wiLFwiUHVyc2UgaG9va1wiLFwiUmVpbWlyb1wiLFwiU2FmZXR5IHJlZmxlY3RvclwiLFwiU2FzaFwiLFwiU2NydW5jaGllXCIsXCJTaGlsbGVsYWdoXCIsXCJTaHViaVwiLFwiU2tpcnQgbGlmdGVyXCIsXCJTbm9vZFwiLFwiU251ZmYgYm90dGxlXCIsXCJTb2xhciB2aWV3ZXJcIixcIlNwb3JyYW5cIixcIlN1bmdsYXNzZXNcIixcIlN1c3BlbmRlcnNcIixcIlN1dHRvbiBIb28gcHVyc2UtbGlkXCIsXCJUYXN1a2lcIixcIlRpZSBjaGFpblwiLFwiVGllIGNsaXBcIixcIlRpZSBwaW5cIixcIlRvdXDDqWVcIixcIlR1YW5zaGFuXCIsXCJVbWJyZWxsYVwiLFwiV2Fsa2luZyBzdGlja1wiLFwiV2FsbGV0XCIsXCJXYXRjaCBzdHJhcFwiLFwiV2VhcmFibGUgYXJ0XCIsXCJXZWFyYWJsZSBjb21wdXRlclwiLFwiV2VhcmFibGUgdGVjaG5vbG9neVwiLFwiV2lnXCIsXCJXcmlzdCBjbGFzcFwiLFwiWmliZWxsaW5vXCIsXCJBcHJvblwiLFwiTmVja2xhY2VcIixcIldhdGNoXCIsXCJTb2Nrc1wiLFwiVGllXCIsXCJCb3cgdGllXCIsXCJQdXJzZVwiLFwiUmluZ1wiLFwiR2xvdmVzXCIsXCJTY2FyZlwiLFwiQm9vdHNcIixcIk1pdHRlbnNcIixcIlN0b2NraW5nc1wiLFwiRWFybXVmZnNcIixcIkhhaXIgY2xpcFwiLFwiQm9iYnkgcGluXCIsXCJIYWlyIGJhbmRcIixcIlNhZmV0eSBwaW5cIixcIlBvY2tldCB3YXRjaFwiLFwiQmVhbmllXCIsXCJDYXBcIixcIkJlcmV0XCIsXCJTdHJhdyBoYXRcIixcIkRlcmJ5IGhhdFwiLFwiSGVsbWV0XCIsXCJUb3AgaGF0XCIsXCJNb3J0YXIgYm9hcmRcIl07ZnVuY3Rpb24gZChlKXtyZXR1cm4gbihjLGUpfWZ1bmN0aW9uIGgoZSl7dmFyIGE7Y29uc3QgdD1udWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLmFjY291bnRMZW5ndGgpP2E6OTtyZXR1cm4gbigoKCk9PkFycmF5KHQpLmZpbGwoXCIjXCIpLmpvaW4oXCJcIikucmVwbGFjZSgvIy9nLCgoKT0+cyh7bWluOjAsbWF4Ojl9KS50b1N0cmluZygpKSkpLGUpfWNvbnN0IG09XCIwMTIzNDU2Nzg5XCIscD1cImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCIseT1gJHttfSR7cH0ke3AudG9VcHBlckNhc2UoKX1gO2Z1bmN0aW9uIGcoZT04LGE9eSl7bGV0IHQ9XCJcIjtmb3IobGV0IGk9ZTtpPjA7LS1pKXQrPWFbTWF0aC5mbG9vcihvKCkqYS5sZW5ndGgpXTtyZXR1cm4gdH1mdW5jdGlvbiBmKGUpe2lmKG51bGw9PWV8fCFlLmNoYXJUeXBlfHxudWxsIT1lJiZlLmNoYXJzKXJldHVybiBuKCgoKT0+ZyhudWxsPT1lP3ZvaWQgMDplLnNpemUsbnVsbD09ZT92b2lkIDA6ZS5jaGFycykpLGUpO3N3aXRjaChlLmNoYXJUeXBlKXtjYXNlXCJhbHBoYVwiOnJldHVybiBuKCgoKT0+ZyhudWxsPT1lP3ZvaWQgMDplLnNpemUsYCR7cH0ke3AudG9VcHBlckNhc2UoKX1gKSksZSk7Y2FzZVwiYWxwaGFOdW1lcmljXCI6cmV0dXJuIG4oKCgpPT5nKG51bGw9PWU/dm9pZCAwOmUuc2l6ZSx5KSksZSk7Y2FzZVwibnVtZXJpY1wiOnJldHVybiBuKCgoKT0+ZyhudWxsPT1lP3ZvaWQgMDplLnNpemUsbSkpLGUpO2Nhc2VcInNwZWNpYWxcIjpyZXR1cm4gbigoKCk9PmcobnVsbD09ZT92b2lkIDA6ZS5zaXplLFwiPD5AISMkJV4mKigpXytbXXt9Pzo7fCdcXFwiXFxcXCwuL35gLT1cIikpLGUpO2RlZmF1bHQ6cmV0dXJuIGZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihgeW91IGRpZG4ndCBhbGwgY29uZGl0aW9uICR7ZX1gKX0oZS5jaGFyVHlwZSl9fWZ1bmN0aW9uIGIoZSl7cmV0dXJuIG4ocC5zcGxpdChcIlwiKSxlKX1mdW5jdGlvbiB2KGUpe3JldHVybiBuKCgoKT0+cihbITAsITFdKSksZSl9ZnVuY3Rpb24gdyhlKXtyZXR1cm4gbnVsbD09ZX1jb25zdCBrPWU9Pntjb25zdCBhPWUucmVwbGFjZSgvIC9nLFwiXCIpO2lmKDExIT09YS5sZW5ndGgpcmV0dXJuITE7Y29uc3QgdD1bMTAsMSwzLDUsNyw5LDExLDEzLDE1LDE3LDE5XTtsZXQgbz0wO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKW8rPShOdW1iZXIoU3RyaW5nKGFbZV0pKS0oMD09ZT8xOjApKSp0W2VdO3JldHVybiBvJTg5PT0wfTtmdW5jdGlvbiBTKGUpe2NvbnN0IGE9e21pbjp3KG51bGw9PWU/dm9pZCAwOmUubWluKT8wOmUubWluLG1heDp3KG51bGw9PWU/dm9pZCAwOmUubWF4KT85OTk5OTk6ZS5tYXgscHJlY2lzaW9uOm51bGw9PWU/dm9pZCAwOmUucHJlY2lzaW9uLGZyYWN0aW9uOm51bGw9PWU/dm9pZCAwOmUuZnJhY3Rpb259O3JldHVybiBuKCgoKT0+e2lmKGEubWluPT09YS5tYXgpcmV0dXJuIGEubWluO2NvbnN0IGU9cyhhKTtyZXR1cm4gdm9pZCAwIT09YS5wcmVjaXNpb24/TWF0aC5mbG9vcihlL2EucHJlY2lzaW9uKSphLnByZWNpc2lvbjplfSksZSl9ZnVuY3Rpb24gQyhlKXtyZXR1cm4gbigoKCk9PnYoKT9iKCk6Uyh7bWluOjAsbWF4Ojl9KSksZSl9dmFyIEE9W1wiQXJpem9uYSBDYXJkaW5hbHNcIixcIkF0bGFudGEgRmFsY29uc1wiLFwiQmFsdGltb3JlIFJhdmVuc1wiLFwiQnVmZmFsbyBCaWxsc1wiLFwiQ2Fyb2xpbmEgUGFudGhlcnNcIixcIkNoaWNhZ28gQmVhcnNcIixcIkNpbmNpbm5hdGkgQmVuZ2Fsc1wiLFwiQ2xldmVsYW5kIEJyb3duc1wiLFwiRGFsbGFzIENvd2JveXNcIixcIkRlbnZlciBCcm9uY29zXCIsXCJEZXRyb2l0IExpb25zXCIsXCJHcmVlbiBCYXkgUGFja2Vyc1wiLFwiSG91c3RvbiBUZXhhbnNcIixcIkluZGlhbmFwb2xpcyBDb2x0c1wiLFwiSmFja3NvbnZpbGxlIEphZ3VhcnNcIixcIkthbnNhcyBDaXR5IENoaWVmc1wiLFwiTGFzIFZlZ2FzIFJhaWRlcnNcIixcIkxvcyBBbmdlbGVzIENoYXJnZXJzXCIsXCJMb3MgQW5nZWxlcyBSYW1zXCIsXCJNaWFtaSBEb2xwaGluc1wiLFwiTWlubmVzb3RhIFZpa2luZ3NcIixcIk5ldyBFbmdsYW5kIFBhdHJpb3RzXCIsXCJOZXcgT3JsZWFucyBTYWludHNcIixcIk5ldyBZb3JrIEdpYW50c1wiLFwiTmV3IFlvcmsgSmV0c1wiLFwiUGhpbGFkZWxwaGlhIEVhZ2xlc1wiLFwiUGl0dHNidXJnaCBTdGVlbGVyc1wiLFwiU2FuIEZyYW5jaXNjbyA0OWVyc1wiLFwiU2VhdHRsZSBTZWFoYXdrc1wiLFwiVGFtcGEgQmF5IEJ1Y2NhbmVlcnNcIixcIlRlbm5lc3NlZSBUaXRhbnNcIl07ZnVuY3Rpb24gTShlKXtyZXR1cm4gbihBLGUpfWZ1bmN0aW9uIFQoZSl7dmFyIGEsdDtjb25zdCBvPU9iamVjdC5hc3NpZ24oe30sZSx7ZnJhY3Rpb246bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS5mcmFjdGlvbik/YToyfSksaT1udWxsIT0odD1udWxsPT1lP3ZvaWQgMDplLnN5bWJvbCk/dDpcIlwiO3JldHVybiBuKCgoKT0+e2NvbnN0IGU9cyhvKTtyZXR1cm4gaT9gJHtpfSR7ZX1gOmV9KSxlKX12YXIgQj1bXCJiaXJkXCIsXCJjZXRhY2VhblwiLFwicmFiYml0XCIsXCJiZWFyXCIsXCJjYXRcIixcInNuYWtlXCIsXCJjb3dcIixcImluc2VjdFwiLFwiY3JvY29kaWxlXCIsXCJob3JzZVwiLFwiZmlzaFwiLFwiZG9nXCIsXCJsaW9uXCJdO2Z1bmN0aW9uIEkoZSl7cmV0dXJuIG4oQixlKX12YXIgUD1bXCJBYXJkdmFya1wiLFwiQWFyZHdvbGZcIixcIkFieXNzaW5pYW5cIixcIkFieXNzaW5pYW4gR3VpbmVhIFBpZ1wiLFwiQWNhZGlhbiBGbHljYXRjaGVyXCIsXCJBY2hyaW9wdGVyYSBNYW5nYVwiLFwiQWNraWUgTW9uaXRvclwiLFwiQWRkYXhcIixcIkFkZWxpZSBQZW5ndWluXCIsXCJBZXNjdWxhcGlhbiBzbmFrZVwiLFwiQWZmZW5waW5zY2hlclwiLFwiQWZnaGFuIEhvdW5kXCIsXCJBZnJpY2FuIEJ1bGxmcm9nXCIsXCJBZnJpY2FuIEJ1c2ggRWxlcGhhbnRcIixcIkFmcmljYW4gQ2l2ZXRcIixcIkFmcmljYW4gQ2xhd2VkIEZyb2dcIixcIkFmcmljYW4gRmlzaCBFYWdsZVwiLFwiQWZyaWNhbiBGb3Jlc3QgRWxlcGhhbnRcIixcIkFmcmljYW4gR29sZGVuIENhdFwiLFwiQWZyaWNhbiBHcmV5IFBhcnJvdFwiLFwiQWZyaWNhbiBKYWNhbmFcIixcIkFmcmljYW4gUGFsbSBDaXZldFwiLFwiQWZyaWNhbiBQZW5ndWluXCIsXCJBZnJpY2FuIFRyZWUgVG9hZFwiLFwiQWZyaWNhbiBXaWxkIERvZ1wiLFwiQWZyaWNhbml6ZWQgYmVlXCIsXCJBZ2FtYSBMaXphcmRcIixcIkFpZGlcIixcIkFpbnVcIixcIkFpcmVkYWxlIFRlcnJpZXJcIixcIkFpcmVkb29kbGVcIixcIkFrYmFzaFwiLFwiQWtpdGFcIixcIkFraXRhIFNoZXBoZXJkXCIsXCJBbGFiYWlcIixcIkFsYXNrYW4gSHVza3lcIixcIkFsYXNrYW4gS2xlZSBLYWlcIixcIkFsYXNrYW4gTWFsYW11dGVcIixcIkFsYXNrYW4gUG9sbG9ja1wiLFwiQWxhc2thbiBTaGVwaGVyZFwiLFwiQWxiYWNvcmUgVHVuYVwiLFwiQWxiYXRyb3NzXCIsXCJBbGJlcnRvbmVjdGVzXCIsXCJBbGJpbm8gQ29ybiBTbmFrZVwiLFwiQWxkYWJyYSBHaWFudCBUb3J0b2lzZVwiLFwiQWxsaWdhdG9yIEdhclwiLFwiQWxsb3NhdXJ1c1wiLFwiQWxwYWNhXCIsXCJBbHBpbmUgRGFjaHNicmFja2VcIixcIkFscGluZSBHb2F0XCIsXCJBbHVza3lcIixcIkFtYW5vIFNocmltcFwiLFwiQW1hcmdhc2F1cnVzXCIsXCJBbWF6b24gUGFycm90XCIsXCJBbWF6b24gUml2ZXIgRG9scGhpblwiLFwiQW1hem9uIFRyZWUgQm9hXCIsXCJBbWF6b25pYW4gUm95YWwgRmx5Y2F0Y2hlclwiLFwiQW1icm9zaWEgQmVldGxlXCIsXCJBbWVyaWNhbiBBbGxpZ2F0b3JcIixcIkFtZXJpY2FuIEFsc2F0aWFuXCIsXCJBbWVyaWNhbiBCdWxsZG9nXCIsXCJBbWVyaWNhbiBCdWxseVwiLFwiQW1lcmljYW4gQ29ja2VyIFNwYW5pZWxcIixcIkFtZXJpY2FuIENvY2tyb2FjaFwiLFwiQW1lcmljYW4gQ29vbmhvdW5kXCIsXCJBbWVyaWNhbiBEb2cgVGlja1wiLFwiQW1lcmljYW4gRWVsXCIsXCJBbWVyaWNhbiBFc2tpbW8gRG9nXCIsXCJBbWVyaWNhbiBGb3hob3VuZFwiLFwiQW1lcmljYW4gSGFpcmxlc3MgVGVycmllclwiLFwiQW1lcmljYW4gTGVvcGFyZCBIb3VuZFwiLFwiQW1lcmljYW4gUGFkZGxlZmlzaFwiLFwiQW1lcmljYW4gUGl0IEJ1bGwgVGVycmllclwiLFwiQW1lcmljYW4gUHVnYWJ1bGxcIixcIkFtZXJpY2FuIFB5Z215IEdvYXRcIixcIkFtZXJpY2FuIFJvYmluXCIsXCJBbWVyaWNhbiBTdGFmZm9yZHNoaXJlIFRlcnJpZXJcIixcIkFtZXJpY2FuIFRvYWRcIixcIkFtZXJpY2FuIFdhdGVyIFNwYW5pZWxcIixcIkFtZXJpY2FuIFdpcmVoYWlyXCIsXCJBbWV0aHlzdGluZSBQeXRob25cIixcIkFtcGhpY29lbGlhcyBGcmFnaWxsaW11c1wiLFwiQW11ciBMZW9wYXJkXCIsXCJBbmFjb25kYVwiLFwiQW5hdG9saWFuIFNoZXBoZXJkIERvZ1wiLFwiQW5jaG92aWVzXCIsXCJBbmRyZXdzYXJjaHVzXCIsXCJBbmdlbGZpc2hcIixcIkFuZ2Vsc2hhcmtcIixcIkFuZ2xlZCBTdW5iZWFtIENhdGVycGlsbGFyXCIsXCJBbmdsZXJmaXNoXCIsXCJBbmdvcmEgRmVycmV0XCIsXCJBbmdvcmEgR29hdFwiLFwiQW5oaW5nYVwiLFwiQW5uYeKAmXMgSHVtbWluZ2JpcmRcIixcIkFub2xlIExpemFyZFwiLFwiQW5vbWFsb2NhcmlzXCIsXCJBbnRcIixcIkFudGFyY3RpYyBzY2FsZSB3b3JtXCIsXCJBbnRlYXRlclwiLFwiQW50ZWxvcGVcIixcIkFudGVvc2F1cnVzXCIsXCJBcGVcIixcIkFwZW5uaW5lIFdvbGZcIixcIkFwcGVuemVsbGVyIERvZ1wiLFwiQXBwbGUgSGVhZCBDaGlodWFodWFcIixcIkFwcGxlIE1vdGhcIixcIkFyYWJpYW4gQ29icmFcIixcIkFyYWJpYW4gV29sZlwiLFwiQXJhZnVyYSBGaWxlIFNuYWtlXCIsXCJBcmFtYm91cmdpYW5pYVwiLFwiQXJhcGFpbWFcIixcIkFyY2hhZW9pbmRyaXNcIixcIkFyY2hhZW9wdGVyeXhcIixcIkFyY2hhZW90aGVyaXVtXCIsXCJBcmNoZWxvbiBUdXJ0bGVcIixcIkFyY2hlcmZpc2hcIixcIkFyY3RpYyBDaGFyXCIsXCJBcmN0aWMgRm94XCIsXCJBcmN0aWMgSGFyZVwiLFwiQXJjdGljIFdvbGZcIixcIkFyY3RvZHVzXCIsXCJBcmN0b3RoZXJpdW1cIixcIkFyZ2VudGF2aXMgTWFnbmlmaWNlbnNcIixcIkFyZ2VudGlub3NhdXJ1c1wiLFwiQXJpem9uYSBCYXJrIFNjb3JwaW9uXCIsXCJBcml6b25hIEJsYWNrIFJhdHRsZXNuYWtlXCIsXCJBcml6b25hIEJsb25kZSBUYXJhbnR1bGFcIixcIkFyaXpvbmEgQ29yYWwgU25ha2VcIixcIkFybWFkaWxsb1wiLFwiQXJtYWRpbGxvIExpemFyZFwiLFwiQXJtZW5pYW4gR2FtcHJcIixcIkFybW9yZWQgQ2F0ZmlzaFwiLFwiQXJteXdvcm1cIixcIkFyc2lub2l0aGVyaXVtXCIsXCJBcnRocm9wbGV1cmFcIixcIkFydWJhIFJhdHRsZXNuYWtlXCIsXCJBc2lhbiBBcm93YW5hXCIsXCJBc2lhbiBDYXJwXCIsXCJBc2lhbiBDb2Nrcm9hY2hcIixcIkFzaWFuIEVsZXBoYW50XCIsXCJBc2lhbiBHaWFudCBIb3JuZXRcIixcIkFzaWFuIExhZHkgQmVldGxlXCIsXCJBc2lhbiBMb25naG9ybiBCZWV0bGVcIixcIkFzaWFuIFBhbG0gQ2l2ZXRcIixcIkFzaWFuIFZpbmUgU25ha2VcIixcIkFzaWFuIFdhdGVyIE1vbml0b3JcIixcIkFzaWF0aWMgQmxhY2sgQmVhclwiLFwiQXNwXCIsXCJBc3Nhc3NpbiBCdWdcIixcIkFzc2Fzc2luIFNuYWlsXCIsXCJBdGxhbnRpYyBTYWxtb25cIixcIkF0bGFudGljIFN0dXJnZW9uXCIsXCJBdGxhcyBCZWV0bGVcIixcIkF0bGFzIE1vdGhcIixcIkF1cm9jaHNcIixcIkF1c3NpZWRvb2RsZVwiLFwiQXVzc2llZG9yXCIsXCJBdXNzaWVwb21cIixcIkF1c3RyYWxpYW4gQnVsbGRvZ1wiLFwiQXVzdHJhbGlhbiBDYXR0bGUgRG9nXCIsXCJBdXN0cmFsaWFuIENvY2tyb2FjaFwiLFwiQXVzdHJhbGlhbiBGbGF0aGVhZCBQZXJjaFwiLFwiQXVzdHJhbGlhbiBHZWNrb1wiLFwiQXVzdHJhbGlhbiBLZWxwaWUgRG9nXCIsXCJBdXN0cmFsaWFuIExhYnJhZG9vZGxlXCIsXCJBdXN0cmFsaWFuIE1pc3RcIixcIkF1c3RyYWxpYW4gUmV0cmlldmVyXCIsXCJBdXN0cmFsaWFuIFNoZXBoZXJkXCIsXCJBdXN0cmFsaWFuIFRlcnJpZXJcIixcIkF1c3RyYWxvcGl0aGVjdXNcIixcIkF2b2NldFwiLFwiQXhhbnRoaWMgQmFsbCBQeXRob25cIixcIkF4b2xvdGxcIixcIkF5YW0gQ2VtYW5pXCIsXCJBeWUtYXllXCIsXCJBemF3YWtoXCIsXCJCYWJpcnVzYVwiLFwiQmFib29uXCIsXCJCYWN0cmlhbiBDYW1lbFwiLFwiQmFkZ2VyXCIsXCJCYWlqaVwiLFwiQmFpcmTigJlzIFJhdCBTbmFrZVwiLFwiQmFsZCBFYWdsZVwiLFwiQmFsZWVuIFdoYWxlXCIsXCJCYWxpbmVzZVwiLFwiQmFsa2FuIEx5bnhcIixcIkJhbGwgUHl0aG9uXCIsXCJCYW1ib28gV29ybXNcIixcIkJhbmFuYSBCYWxsIFB5dGhvblwiLFwiQmFuYW5hIENpbm5hbW9uIEJhbGwgUHl0aG9uXCIsXCJCYW5hbmEgRWVsXCIsXCJCYW5hbmEgU3BpZGVyXCIsXCJCYW5kZWQgS3JhaXRcIixcIkJhbmRlZCBQYWxtIENpdmV0XCIsXCJCYW5kZWQgV2F0ZXIgU25ha2VcIixcIkJhbmRpY29vdFwiLFwiQmFuam8gQ2F0ZmlzaFwiLFwiQmFyYlwiLFwiQmFyYmV0XCIsXCJCYXJpbmFzdWNodXNcIixcIkJhcmsgQmVldGxlXCIsXCJCYXJrIFNjb3JwaW9uXCIsXCJCYXJuIE93bFwiLFwiQmFybiBTd2FsbG93XCIsXCJCYXJuYWNsZVwiLFwiQmFyb3NhdXJ1c1wiLFwiQmFycmFjdWRhXCIsXCJCYXJyYW11bmRpIEZpc2hcIixcIkJhcnJlZCBPd2xcIixcIkJhcnJlbGV5ZSBGaXNoXCIsXCJCYXJ5bGFtYmRhXCIsXCJCYXNlbmppIERvZ1wiLFwiQmFzaWxpc2sgTGl6YXJkXCIsXCJCYXNpbG9zYXVydXNcIixcIkJhc2tpbmcgU2hhcmtcIixcIkJhc3NcIixcIkJhc3NhZG9yXCIsXCJCYXNzZXQgRmF1dmUgZGUgQnJldGFnbmVcIixcIkJhc3NldCBIb3VuZFwiLFwiQmFzc2V0b29kbGVcIixcIkJhdFwiLFwiQmF0LUVhcmVkIEZveFwiLFwiQmF0ZmlzaFwiLFwiQmF2YXJpYW4gTW91bnRhaW4gSG91bmRcIixcIkJheWFcIixcIkJlYS1UenVcIixcIkJlYWJ1bGxcIixcIkJlYWdhZG9yXCIsXCJCZWFnbGVcIixcIkJlYWdsZSBTaGVwaGVyZFwiLFwiQmVhZ2xpZXJcIixcIkJlYWdvXCIsXCJCZWFyXCIsXCJCZWFyZGVkIENvbGxpZVwiLFwiQmVhcmRlZCBEcmFnb25cIixcIkJlYXJkZWQgRmlyZXdvcm1cIixcIkJlYXJkZWQgVnVsdHVyZVwiLFwiQmVhc2tpXCIsXCJCZWF1Y2Vyb25cIixcIkJlYXV0eSByYXQgc25ha2VcIixcIkJlYXZlclwiLFwiQmVkIEJ1Z3NcIixcIkJlZGxpbmd0b24gVGVycmllclwiLFwiQmVlXCIsXCJCZWUtRWF0ZXJcIixcIkJlZWZhbG9cIixcIkJlZXRsZVwiLFwiQmVsZ2lhbiBDYW5hcnlcIixcIkJlbGdpYW4gTGFla2Vub2lzXCIsXCJCZWxnaWFuIE1hbGlub2lzXCIsXCJCZWxnaWFuIFNoZWVwZG9nXCIsXCJCZWxnaWFuIFNoZXBoZXJkXCIsXCJCZWxnaWFuIFRlcnZ1cmVuXCIsXCJCZWx0ZWQgS2luZ2Zpc2hlclwiLFwiQmVsdWdhIFN0dXJnZW9uXCIsXCJCZW5nYWwgVGlnZXJcIixcIkJlcmdhbWFzY29cIixcIkJlcmdlciBCbGFuYyBTdWlzc2VcIixcIkJlcmdlciBQaWNhcmRcIixcIkJlcm5lZG9vZGxlXCIsXCJCZXJuZXNlIE1vdW50YWluIERvZ1wiLFwiQmVybmVzZSBTaGVwaGVyZFwiLFwiQmV0dGEgRmlzaFwiLFwiQmh1dGFuIFRha2luXCIsXCJCaWNoaXJcIixcIkJpY2hvbiBGcmlzZVwiLFwiQmljaHBvb1wiLFwiQmlld2VyIFRlcnJpZXJcIixcIkJpZ2ZpbiBSZWVmIFNxdWlkwqBcIixcIkJpZ2hvcm4gU2hlZXBcIixcIkJpbGJ5XCIsXCJCaW50dXJvbmdcIixcIkJpcmRcIixcIkJpcmQgT2YgUGFyYWRpc2VcIixcIkJpcmQgU25ha2VcIixcIkJpcm1hblwiLFwiQmlzY3VpdCBCZWV0bGVcIixcIkJpc21hcmNrIFJpbmdlZCBQeXRob25cIixcIkJpc29uXCIsXCJCbGFjayBBbmQgVGFuIENvb25ob3VuZFwiLFwiQmxhY2sgYW5kIFdoaXRlIFdhcmJsZXJcIixcIkJsYWNrIERyYWdvbiBMaXphcmRcIixcIkJsYWNrIE1hbWJhXCIsXCJCbGFjayBNYXJsaW5cIixcIkJsYWNrIE1vdXRoIEN1clwiLFwiQmxhY2sgUGFzdGVsIEJhbGwgUHl0aG9uXCIsXCJCbGFjayBSYXQgU25ha2VcIixcIkJsYWNrIFJoaW5vY2Vyb3NcIixcIkJsYWNrIFJ1c3NpYW4gVGVycmllclwiLFwiQmxhY2sgVGFyYW50dWxhXCIsXCJCbGFjayBUaHJvYXQgTW9uaXRvclwiLFwiQmxhY2sgV2FzcFwiLFwiQmxhY2sgV2lkb3cgU3BpZGVyXCIsXCJCbGFjayBXaXRjaCBNb3RoXCIsXCJCbGFjay1CZWxsaWVkIFdoaXN0bGluZyBEdWNrXCIsXCJCbGFjay1DYXBwZWQgQ2hpY2thZGVlXCIsXCJCbGFjay1Gb290ZWQgRmVycmV0XCIsXCJCbGFjay1oZWFkZWQgcHl0aG9uXCIsXCJCbGFja25vc2UgU2hhcmtcIixcIkJsYWNrcG9sbCBXYXJibGVyXCIsXCJCbGFja3RpcCBSZWVmIFNoYXJrXCIsXCJCbGFkZWZpbiBCYXNzbGV0XCIsXCJCbGFua2V0IE9jdG9wdXNcIixcIkJsaW5kIFNuYWtlXCIsXCJCbGlzdGVyIEJlZXRsZVwiLFwiQmxvYmZpc2hcIixcIkJsb29kIFB5dGhvblwiLFwiQmxvb2Rob3VuZFwiLFwiQmx1ZSBCZWxseSBMaXphcmRcIixcIkJsdWUgQ2F0ZmlzaFwiLFwiQmx1ZSBEZWF0aCBGZWlnbmluZyBCZWV0bGVcIixcIkJsdWUgRXllZCBQbGVjb1wiLFwiQmx1ZSBHcmF5IEduYXRjYXRjaGVyXCIsXCJCbHVlIGdyb3NiZWFrXCIsXCJCbHVlIElndWFuYVwiLFwiQmx1ZSBKYXlcIixcIkJsdWUgTGFjeSBEb2dcIixcIkJsdWUgUGljYXJkeSBTcGFuaWVsXCIsXCJCbHVlIFJhY2VyXCIsXCJCbHVlIFNoYXJrXCIsXCJCbHVlIFRhbmFnZXJcIixcIkJsdWUgVGl0XCIsXCJCbHVlIFdoYWxlXCIsXCJCbHVlLVJpbmdlZCBPY3RvcHVzXCIsXCJCbHVlZmluIFR1bmFcIixcIkJsdWVnaWxsXCIsXCJCbHVldGljayBDb29uaG91bmRcIixcIkJvYXNcIixcIkJvYmNhdFwiLFwiQm9ib2xpbmtcIixcIkJvZWxlbuKAmXMgcHl0aG9uXCIsXCJCb2VyYm9lbFwiLFwiQm9nZ2xlXCIsXCJCb2dsZW4gVGVycmllclwiLFwiQm9pZ2FcIixcIkJvbGl2aWFuIEFuYWNvbmRhXCIsXCJCb2xvZ25lc2UgRG9nXCIsXCJCb21iYXlcIixcIkJvbmdvXCIsXCJCb25pdG8gRmlzaFwiLFwiQm9ubmV0aGVhZCBTaGFya1wiLFwiQm9ub2JvXCIsXCJCb29ieVwiLFwiQm9vbXNsYW5nXCIsXCJCb3JhZG9yXCIsXCJCb3JkZXIgQ29sbGllXCIsXCJCb3JkZXIgVGVycmllclwiLFwiQm9yZG9vZGxlXCIsXCJCb3JraWVcIixcIkJvcm5lYW4gT3JhbmctdXRhblwiLFwiQm9ybmVvIEVsZXBoYW50XCIsXCJCb3N0b24gVGVycmllclwiLFwiQm90dGxlbm9zZSBEb2xwaGluXCIsXCJCb3V2aWVyIERlcyBGbGFuZHJlc1wiLFwiQm93ZmluXCIsXCJCb3doZWFkIFdoYWxlXCIsXCJCb3ggVHJlZSBNb3RoXCIsXCJCb3ggVHVydGxlXCIsXCJCb3hhY2hpXCIsXCJCb3hhZG9yXCIsXCJCb3hlciBEb2dcIixcIkJveGVyZG9vZGxlXCIsXCJCb3hmaXNoXCIsXCJCb3hza3lcIixcIkJveHdlaWxlclwiLFwiQm95a2luIFNwYW5pZWxcIixcIkJyYWNjbyBJdGFsaWFub1wiLFwiQnJhY2hpb3NhdXJ1c1wiLFwiQnJhaG1pbnkgQmxpbmRzbmFrZVwiLFwiQnJhcXVlIEZyYW5jYWlzXCIsXCJCcmF6aWxpYW4gQmxhY2sgVGFyYW50dWxhXCIsXCJCcmF6aWxpYW4gVGVycmllclwiLFwiQnJhemlsaWFuIFRyZWVob3BwZXJcIixcIkJyZWRs4oCZcyBQeXRob25cIixcIkJyaWFyZFwiLFwiQnJpdGlzaCBUaW1iZXJcIixcIkJyaXR0YW55XCIsXCJCcm9udG9zYXVydXNcIixcIkJyb256ZSBXaGFsZXIgU2hhcmtcIixcIkJyb256ZS13aW5nZWQgSmFjYW5hXCIsXCJCcm9vayBUcm91dFwiLFwiQnJvb2tlc2lhIE1pY3JhXCIsXCJCcm93biBCZWFyXCIsXCJCcm93biBEb2cgVGlja1wiLFwiQnJvd24gSGVhZGVkIENvd2JpcmRcIixcIkJyb3duIEh5ZW5hXCIsXCJCcm93biBTbmFrZVwiLFwiQnJvd24gVHJlZSBTbmFrZVwiLFwiQnJvd24gV2F0ZXIgU25ha2VcIixcIkJyb3duLWJhbmRlZCBDb2Nrcm9hY2hcIixcIkJydWdcIixcIkJydXNzZWxzIEdyaWZmb25cIixcIkJ1ZGdlcmlnYXJcIixcIkJ1ZmZhbG9cIixcIkJ1ZmZhbG8gRmlzaFwiLFwiQnVsbCBhbmQgVGVycmllclwiLFwiQnVsbCBTaGFya1wiLFwiQnVsbCBUZXJyaWVyXCIsXCJCdWxsIFRyb3V0XCIsXCJCdWxsZG9nXCIsXCJCdWxsZG9nIE1peFwiLFwiQnVsbGZyb2dcIixcIkJ1bGxtYXN0aWZmXCIsXCJCdWxsc25ha2VcIixcIkJ1bWJsZWJlZVwiLFwiQnVybWVzZVwiLFwiQnVybWVzZSBQeXRob25cIixcIkJ1cnJvd2luZyBGcm9nXCIsXCJCdXJyb3dpbmcgT3dsXCIsXCJCdXNoIEJhYnlcIixcIkJ1c2ggVmlwZXJcIixcIkJ1c2htYXN0ZXIgU25ha2VcIixcIkJ1dHRlcmZseVwiLFwiQnV0dGVyZmx5IEZpc2hcIixcIkNhYmJhZ2UgTW90aFwiLFwiQ2FjdHVzIE1vdGhcIixcIkNhY3R1cyBNb3VzZVwiLFwiQ2FjdHVzIFdyZW5cIixcIkNhZWNpbGlhblwiLFwiQ2FpbWFuXCIsXCJDYWltYW4gTGl6YXJkXCIsXCJDYWlybiBUZXJyaWVyXCIsXCJDYWxpZm9ybmlhIENvbmRvclwiLFwiQ2FsaWZvcm5pYSBLaW5nc25ha2VcIixcIkNhbGlmb3JuaWEgVGFyYW50dWxhXCIsXCJDYW1lbFwiLFwiQ2FtZWwgQ3JpY2tldFwiLFwiQ2FtZWwgU3BpZGVyXCIsXCJDYW5hYW4gRG9nXCIsXCJDYW5hZGEgTHlueFwiLFwiQ2FuYWRhIFdhcmJsZXJcIixcIkNhbmFkaWFuIEVza2ltbyBEb2dcIixcIkNhbmFkaWFuIEhvcnNlXCIsXCJDYW5lIENvcnNvXCIsXCJDYW50aWxcIixcIkNhcGUgTGlvblwiLFwiQ2FweWJhcmFcIixcIkNhcmFjYWxcIixcIkNhcmRpbmFsXCIsXCJDYXJpYmJlYW4gUmVlZiBTaGFya1wiLFwiQ2FyaWJvdVwiLFwiQ2Fyb2xpbmEgRG9nXCIsXCJDYXJvbGluYSBQYXJha2VldFwiLFwiQ2FycFwiLFwiQ2FycGVudGVyIEFudFwiLFwiQ2FycGV0IFB5dGhvblwiLFwiQ2FycGV0IFZpcGVyXCIsXCJDYXNjYWJlbFwiLFwiQ2FzaG1lcmUgR29hdFwiLFwiQ2Fzc293YXJ5XCIsXCJDYXRcIixcIkNhdCBTbmFrZVwiLFwiQ2F0LUV5ZWQgU25ha2VcIixcIkNhdGFob3VsYSBCdWxsZG9nXCIsXCJDYXRhaG91bGEgTGVvcGFyZFwiLFwiQ2F0YWxhbiBTaGVlcGRvZ1wiLFwiQ2F0ZXJwaWxsYXJcIixcIkNhdGZpc2hcIixcIkNhdWNhc2lhbiBNb3VudGFpbiBEb2dcIixcIkNhdWNhc2lhbiBTaGVwaGVyZFwiLFwiQ2F2YSBUenVcIixcIkNhdmFkb3JcIixcIkNhdmFsaWVyIEtpbmcgQ2hhcmxlcyBTcGFuaWVsXCIsXCJDYXZhcG9vXCIsXCJDYXZlIEJlYXJcIixcIkNhdmUgTGlvblwiLFwiQ2Vjcm9waWEgTW90aFwiLFwiQ2VkYXIgV2F4d2luZ1wiLFwiQ2VudGlwZWRlXCIsXCJDZW50cmFsIFJhbmdlcyBUYWlwYW5cIixcIkNlcGhhbGFzcGlzXCIsXCJDZXJhdG9zYXVydXNcIixcIkNlcnZhbGNlcyBsYXRpZnJvbnNcIixcIkNlc2t5IEZvdXNla1wiLFwiQ2Vza3kgVGVycmllclwiLFwiQ2hhbWVsZW9uXCIsXCJDaGFtb2lzXCIsXCJDaGFydHJldXhcIixcIkNoZWFnbGVcIixcIkNoZWNrZXJlZCBHYXJ0ZXIgU25ha2VcIixcIkNoZWV0YWhcIixcIkNoZXNhcGVha2UgQmF5IFJldHJpZXZlclwiLFwiQ2hlc3RudXQtU2lkZWQgV2FyYmxlclwiLFwiQ2hpIENoaVwiLFwiQ2hpY2thZGVlXCIsXCJDaGlja2VuXCIsXCJDaGlja2VuIFNuYWtlXCIsXCJDaGlnZ2VyXCIsXCJDaGlodWFodWFcIixcIkNoaWxkcmVu4oCZcyBweXRob25cIixcIkNoaWxlYW4gUm9zZSBUYXJhbnR1bGFcIixcIkNoaW1hZXJhXCIsXCJDaGltcGFuemVlXCIsXCJDaGluY2hpbGxhXCIsXCJDaGluZXNlIEFsbGlnYXRvclwiLFwiQ2hpbmVzZSBDb2JyYVwiLFwiQ2hpbmVzZSBDcmVzdGVkIERvZ1wiLFwiQ2hpbmVzZSBHZWVzZVwiLFwiQ2hpbmVzZSBQYWRkbGVmaXNoXCIsXCJDaGluZXNlIFNoYXItUGVpXCIsXCJDaGluZXNlIFdhdGVyIERlZXJcIixcIkNoaW5vb2tcIixcIkNoaW5vb2sgU2FsbW9uXCIsXCJDaGluc3RyYXAgUGVuZ3VpblwiLFwiQ2hpcGl0XCIsXCJDaGlwbXVua1wiLFwiQ2hpcG9vXCIsXCJDaGlwcGluZyBTcGFycm93XCIsXCJDaGl0b25cIixcIkNoaXdlZW5pZVwiLFwiQ2hvcmtpZVwiLFwiQ2hvdyBDaG93XCIsXCJDaG93IFBvbVwiLFwiQ2hvdyBTaGVwaGVyZFwiLFwiQ2hyaXN0bWFzIEJlZXRsZVwiLFwiQ2hyaXN0bWFzIElzbGFuZCBSZWQgQ3JhYlwiLFwiQ2h1c2t5XCIsXCJDaWNhZGFcIixcIkNpY2hsaWRcIixcIkNpbmVyZW91cyBWdWx0dXJlXCIsXCJDaW5uYW1vbiBCYWxsIFB5dGhvblwiLFwiQ2lubmFtb24gQmVhclwiLFwiQ2lubmFtb24gRmVycmV0XCIsXCJDbGFya+KAmXMgR3JlYmVcIixcIkNsaWNrIEJlZXRsZVwiLFwiQ2xvY2sgU3BpZGVyXCIsXCJDbG90aGVzIE1vdGhcIixcIkNsb3VkZWQgTGVvcGFyZFwiLFwiQ2xvd25maXNoXCIsXCJDbHVtYmVyIFNwYW5pZWxcIixcIkNvYWNod2hpcCBTbmFrZVwiLFwiQ29hc3RhbCBDYXJwZXQgUHl0aG9uXCIsXCJDb2FzdGFsIFRhaXBhblwiLFwiQ29hdGlcIixcIkNvYmlhIEZpc2hcIixcIkNvYnJhc1wiLFwiQ29ja2FsaWVyXCIsXCJDb2NrYXBvb1wiLFwiQ29ja2F0aWVsXCIsXCJDb2NrYXRvb1wiLFwiQ29ja2VyIFNwYW5pZWxcIixcIkNvY2tsZVwiLFwiQ29ja3JvYWNoXCIsXCJDb2RmaXNoXCIsXCJDb2RsaW5nIE1vdGhcIixcIkNvZWxhY2FudGhcIixcIkNvbGxhcmVkIFBlY2NhcnlcIixcIkNvbGxldHTigJlzIFNuYWtlXCIsXCJDb2xsaWVcIixcIkNvbG9zc2FsIFNxdWlkXCIsXCJDb21iIEplbGx5ZmlzaFwiLFwiQ29tYi1jcmVzdGVkIEphY2FuYVwiLFwiQ29tZXQgTW90aFwiLFwiQ29tZm9ydCBSZXRyaWV2ZXJcIixcIkNvbW1vbiBCdXp6YXJkXCIsXCJDb21tb24gQ2FycFwiLFwiQ29tbW9uIEV1cm9wZWFuIEFkZGVyXCIsXCJDb21tb24gRnJvZ1wiLFwiQ29tbW9uIEZ1cm5pdHVyZSBCZWV0bGVcIixcIkNvbW1vbiBHcmFja2xlXCIsXCJDb21tb24gR3JlZW4gTWFncGllXCIsXCJDb21tb24gSG91c2UgU3BpZGVyXCIsXCJDb21tb24gTG9vblwiLFwiQ29tbW9uIFJhdmVuXCIsXCJDb21tb24gVG9hZFwiLFwiQ29tbW9uIFllbGxvd3Rocm9hdFwiLFwiQ29tcHNvZ25hdGh1c1wiLFwiQ29uZSBTbmFpbFwiLFwiQ29uZ2VyIEVlbFwiLFwiQ29uZ28gU25ha2VcIixcIkNvbnVyZVwiLFwiQ29va2llY3V0dGVyIFNoYXJrXCIsXCJDb29wZXLigJlzIEhhd2tcIixcIkNvcHBlcmhlYWRcIixcIkNvcmFsXCIsXCJDb3JhbCBTbmFrZVwiLFwiQ29yZWxsYVwiLFwiQ29yZ2lkb3JcIixcIkNvcmdpcG9vXCIsXCJDb3JraWVcIixcIkNvcm1hbiBTaGVwaGVyZFwiLFwiQ29ybiBSZXggQ2F0XCIsXCJDb3JuIFNuYWtlXCIsXCJDb3J5IENhdGZpc2hcIixcIkNvcnlwaG9kb25cIixcIkNvc3Rh4oCZcyBIdW1taW5nYmlyZFwiLFwiQ290b24gZGUgVHVsZWFyXCIsXCJDb3R0b24tdG9wIFRhbWFyaW5cIixcIkNvdHRvbm1vdXRoXCIsXCJDb3VnYXJcIixcIkNvd1wiLFwiQ295b3RlXCIsXCJDcmFiXCIsXCJDcmFiIFNwaWRlclwiLFwiQ3JhYi1FYXRpbmcgTWFjYXF1ZVwiLFwiQ3JhYmVhdGVyIFNlYWxcIixcIkNyYW5lXCIsXCJDcmFwcGllIEZpc2hcIixcIkNyYXlmaXNoXCIsXCJDcmVzdGVkIEdlY2tvXCIsXCJDcmVzdGVkIFBlbmd1aW5cIixcIkNyaWNrZXRcIixcIkNyb2F0aWFuIFNoZWVwZG9nXCIsXCJDcm9jb2RpbGVcIixcIkNyb2NvZGlsZSBNb25pdG9yXCIsXCJDcm9zcyBGb3hcIixcIkNyb3NzIFJpdmVyIEdvcmlsbGFcIixcIkNyb3dcIixcIkNydWNpYW4gQ2FycFwiLFwiQ3J5b2xvcGhvc2F1cnVzXCIsXCJDdWJhbiBCb2FcIixcIkN1YmFuIENvY2tyb2FjaFwiLFwiQ3Vja29vXCIsXCJDdXJseSBDb2F0ZWQgUmV0cmlldmVyXCIsXCJDdXJseSBIYWlyIFRhcmFudHVsYVwiLFwiQ3VzY3VzXCIsXCJDdXR0bGVmaXNoXCIsXCJDemVjaG9zbG92YWtpYW4gV29sZmRvZ1wiLFwiRGFjaHNhZG9yXCIsXCJEYWNoc2h1bmRcIixcIkRhZW9kb25cIixcIkRhbG1hZG9vZGxlXCIsXCJEYWxtYWRvclwiLFwiRGFsbWF0aWFuXCIsXCJEYW5kaWUgRGlubW9udCBUZXJyaWVyXCIsXCJEYW5pZmZcIixcIkRhbmlvc1wiLFwiRGFuaXNoIFN3ZWRpc2ggRmFybWRvZ1wiLFwiRGFwcGxlIERhY2hzaHVuZFwiLFwiRGFyay1FeWVkIEp1bmNvXCIsXCJEYXJrbGluZyBCZWV0bGVcIixcIkRhcndpbuKAmXMgZm94XCIsXCJEYXJ3aW7igJlzIEZyb2dcIixcIkRhdWdcIixcIkRlIEJyYXp6YeKAmXMgTW9ua2V5XCIsXCJEZSBLYXnigJlzIEJyb3duIFNuYWtlXCIsXCJEZWF0aCBBZGRlclwiLFwiRGVhdGjigJlzIEhlYWQgQ29ja3JvYWNoXCIsXCJEZWF0aHdhdGNoIEJlZXRsZVwiLFwiRGVjb3JhdG9yIENyYWJcIixcIkRlZXJcIixcIkRlZXIgSGVhZCBDaGlodWFodWFcIixcIkRlZXIgVGlja1wiLFwiRGVpbm9jaGVpcnVzXCIsXCJEZWlub3N1Y2h1c1wiLFwiRGVzZXJ0IEdob3N0IEJhbGwgUHl0aG9uXCIsXCJEZXNlcnQgS2luZ3NuYWtlXCIsXCJEZXNlcnQgTG9jdXN0XCIsXCJEZXNlcnQgUmFpbiBGcm9nXCIsXCJEZXNlcnQgVG9ydG9pc2VcIixcIkRlc2VydCBXb2xmXCIsXCJEZXNtb3N0eWx1c1wiLFwiRGV1dHNjaGUgQnJhY2tlXCIsXCJEZXZpbOKAmXMgQ29hY2ggSG9yc2UgQmVldGxlXCIsXCJEZXZvbiBSZXhcIixcIkRob2xlXCIsXCJEaWFtb25kIHB5dGhvblwiLFwiRGlhbW9uZGJhY2sgTW90aFwiLFwiRGlja2luc29uaWFcIixcIkRpay1EaWtcIixcIkRpbG9waG9zYXVydXNcIixcIkRpbWV0cm9kb25cIixcIkRpbmdvXCIsXCJEaW5vY3JvY3V0YVwiLFwiRGlub2ZlbGlzXCIsXCJEaW5vcGl0aGVjdXNcIixcIkRpbm9zYXVyIFNocmltcFwiLFwiRGlub3NhdXJzXCIsXCJEaXBsb2RvY3VzXCIsXCJEaXByb3RvZG9uXCIsXCJEaXJlIFdvbGZcIixcIkRpc2N1c1wiLFwiRG9iZXJtYW4gUGluc2NoZXJcIixcIkRvYnNvbmZseVwiLFwiRG9kb1wiLFwiRG9lZGljdXJ1c1wiLFwiRG9nXCIsXCJEb2cgVGlja1wiLFwiRG9nbyBBcmdlbnRpbm9cIixcIkRvZ3VlIERlIEJvcmRlYXV4XCIsXCJEb2xwaGluXCIsXCJEb25rZXlcIixcIkRvcmdpXCIsXCJEb3JraWVcIixcIkRvcm1vdXNlXCIsXCJEb3VibGUgRG9vZGxlXCIsXCJEb3VjXCIsXCJEb3dueSBXb29kcGVja2VyXCIsXCJEb3hpZXBvb1wiLFwiRG94bGVcIixcIkRyYWNvIFZvbGFucyBMaXphcmRcIixcIkRyYWdvbiBFZWxcIixcIkRyYWdvbmZpc2hcIixcIkRyYWdvbmZseVwiLFwiRHJlYWRub3VnaHR1c1wiLFwiRHJldmVyXCIsXCJEcnVtIEZpc2hcIixcIkR1YmlhIENvY2tyb2FjaFwiLFwiRHVja1wiLFwiRHVnb25nXCIsXCJEdW1lcmls4oCZcyBCb2FcIixcIkR1bmcgQmVldGxlXCIsXCJEdW5nZW5lc3MgQ3JhYlwiLFwiRHVua2VyXCIsXCJEdW5rbGVvc3RldXNcIixcIkR1bm5vY2tcIixcIkR1c2t5IERvbHBoaW5cIixcIkR1c2t5IFNoYXJrXCIsXCJEdXRjaCBSYWJiaXRcIixcIkR1dGNoIFNoZXBoZXJkXCIsXCJEd2FyZiBCb2FcIixcIkR3YXJmIENyb2NvZGlsZVwiLFwiRHdhcmYgSGFtc3RlclwiLFwiRWFnbGVcIixcIkVhZ2xlIFJheVwiLFwiRWFyZWQgR3JlYmVcIixcIkVhcmxlc3MgTW9uaXRvciBMaXphcmRcIixcIkVhcnRod29ybVwiLFwiRWFyd2lnXCIsXCJFYXN0IFNpYmVyaWFuIExhaWthXCIsXCJFYXN0ZXJuIEJhcnJlZCBCYW5kaWNvb3RcIixcIkVhc3Rlcm4gQmx1ZWJpcmRcIixcIkVhc3Rlcm4gQm94IFR1cnRsZVwiLFwiRWFzdGVybiBCcm93biBTbmFrZVwiLFwiRWFzdGVybiBDaGlwbXVua1wiLFwiRWFzdGVybiBDb3JhbCBTbmFrZVwiLFwiRWFzdGVybiBEaWFtb25kYmFjayBSYXR0bGVzbmFrZVwiLFwiRWFzdGVybiBEb2Jzb25mbHlcIixcIkVhc3Rlcm4gRmVuY2UgTGl6YXJkXCIsXCJFYXN0ZXJuIEdsYXNzIExpemFyZFwiLFwiRWFzdGVybiBHb3JpbGxhXCIsXCJFYXN0ZXJuIEdyYXkgU3F1aXJyZWxcIixcIkVhc3Rlcm4gR3JlZW4gTWFtYmFcIixcIkVhc3Rlcm4gSG9nbm9zZSBTbmFrZVwiLFwiRWFzdGVybiBJbmRpZ28gU25ha2VcIixcIkVhc3Rlcm4gS2luZ2JpcmRcIixcIkVhc3Rlcm4gTG93bGFuZCBHb3JpbGxhXCIsXCJFYXN0ZXJuIE1lYWRvd2xhcmtcIixcIkVhc3Rlcm4gUGhvZWJlXCIsXCJFYXN0ZXJuIFJhY2VyXCIsXCJFYXN0ZXJuIFJhdCBzbmFrZVwiLFwiRWFzdGVybiBUaWdlciBTbmFrZVwiLFwiRWFzdGVybiBUdXJrZXlcIixcIkVhc3Rlcm4gV29vZHJhdFwiLFwiRWNoaWRuYVwiLFwiRWNsZWN0dXMgUGFycm90XCIsXCJFZGlibGUgRnJvZ1wiLFwiRWVsXCIsXCJFZWwgY2F0ZmlzaFwiLFwiRWdyZXRcIixcIkVneXB0aWFuIENvYnJhXCIsXCJFZ3lwdGlhbiBHb29zZVwiLFwiRWd5cHRpYW4gTWF1XCIsXCJFZ3lwdGlhbiBUb3J0b2lzZVwiLFwiRWd5cHRpYW4gVnVsdHVyZVwiLFwiRWlkZXJcIixcIkVsYW5kXCIsXCJFbGFzbW9zYXVydXNcIixcIkVsYXNtb3RoZXJpdW1cIixcIkVsZWN0cmljIENhdGZpc2hcIixcIkVsZWN0cmljIEVlbFwiLFwiRWxlZ2FudCBUZXJuXCIsXCJFbGVwaGFudFwiLFwiRWxlcGhhbnQgQmVldGxlXCIsXCJFbGVwaGFudCBCaXJkXCIsXCJFbGVwaGFudCBGaXNoXCIsXCJFbGVwaGFudCBTZWFsXCIsXCJFbGVwaGFudCBTaHJld1wiLFwiRWxmIE93bFwiLFwiRWxrXCIsXCJFbWJlciBUZXRyYVwiLFwiRW1ib2xvdGhlcml1bVwiLFwiRW1lcmFsZCBUb3VjYW5ldFwiLFwiRW1lcmFsZCBUcmVlIEJvYVwiLFwiRW1lcmFsZCBUcmVlIE1vbml0b3JcIixcIkVtcGVyb3IgQW5nZWxmaXNoXCIsXCJFbXBlcm9yIEdvb3NlXCIsXCJFbXBlcm9yIFBlbmd1aW5cIixcIkVtcGVyb3IgVGFtYXJpblwiLFwiRW11XCIsXCJFbmNoaSBCYWxsIFB5dGhvblwiLFwiRW5nbGlzaCBCdWxsZG9nXCIsXCJFbmdsaXNoIENvY2tlciBTcGFuaWVsXCIsXCJFbmdsaXNoIENyZWFtIEdvbGRlbiBSZXRyaWV2ZXJcIixcIkVuZ2xpc2ggQ3Jlc3RlZCBHdWluZWEgUGlnXCIsXCJFbmdsaXNoIEZveGhvdW5kXCIsXCJFbmdsaXNoIExvbmdob3JuIENhdHRsZVwiLFwiRW5nbGlzaCBQb2ludGVyXCIsXCJFbmdsaXNoIFNldHRlclwiLFwiRW5nbGlzaCBTaGVwaGVyZFwiLFwiRW5nbGlzaCBTcHJpbmdlciBTcGFuaWVsXCIsXCJFbmdsaXNoIFRveSBUZXJyaWVyXCIsXCJFbnRsZWJ1Y2hlciBNb3VudGFpbiBEb2dcIixcIkVwYWduZXVsIFBvbnQgQXVkZW1lclwiLFwiRXBpY3lvbiBoYXlkZW5pXCIsXCJFcGlkZXhpcHRlcnl4XCIsXCJFcXVhdG9yaWFsIFNwaXR0aW5nIENvYnJhXCIsXCJFcXV1cyBnaWdhbnRldXNcIixcIkVybWluZVwiLFwiRXJ5b3BzXCIsXCJFc2NvbGFyXCIsXCJFc2tpbW8gRG9nXCIsXCJFc2tpcG9vXCIsXCJFc3RyZWxhIE1vdW50YWluIERvZ1wiLFwiRXVvcGxvY2VwaGFsdXNcIixcIkV1cmFzaWFuIEJlYXZlclwiLFwiRXVyYXNpYW4gQnVsbGZpbmNoXCIsXCJFdXJhc2lhbiBDb2xsYXJlZCBEb3ZlXCIsXCJFdXJhc2lhbiBKYXlcIixcIkV1cmFzaWFuIEx5bnhcIixcIkV1cmFzaWFuIE51dGhhdGNoXCIsXCJFdXJhc2lhbiBTcGFycm93aGF3a1wiLFwiRXVyYXNpYW4gV29sZlwiLFwiRXVyYXNpZXJcIixcIkV1cm9wZWFuIEJlZS1FYXRlclwiLFwiRXVyb3BlYW4gQ29ybiBCb3JlclwiLFwiRXVyb3BlYW4gR29sZGZpbmNoXCIsXCJFdXJvcGVhbiBQb2xlY2F0XCIsXCJFdXJvcGVhbiBSb2JpblwiLFwiRXVyb3BlYW4gU3RhcmxpbmdcIixcIkV1cm9wZWFuIFdpbGRjYXRcIixcIkV1cnlwdGVydXNcIixcIkV2ZW5pbmcgQmF0XCIsXCJFdmVuaW5nIEdyb3NiZWFrXCIsXCJFeGVjdXRpb25lciBXYXNwwqBcIixcIkV5ZWxhc2ggVmlwZXJcIixcIkZhaXJ5LVdyZW5cIixcIkZhbGNvblwiLFwiRmFsbG93IGRlZXJcIixcIkZhbHNlIENvYnJhXCIsXCJGYWxzZSBjb3JhbCBzbmFrZVwiLFwiRmFsc2UgS2lsbGVyIFdoYWxlXCIsXCJGYWxzZSBXYXRlciBDb2JyYVwiLFwiRmFsc2UgV2lkb3cgU3BpZGVyXCIsXCJGYW5ndG9vdGhcIixcIkZlaXN0XCIsXCJGZW5uZWMgRm94XCIsXCJGZXItZGUtbGFuY2UgU25ha2VcIixcIkZlcnJldFwiLFwiRmVycnVnaW5vdXMgSGF3a1wiLFwiRmlkZGxlciBDcmFiXCIsXCJGaWVsZCBTcGFuaWVsXCIsXCJGaWVyY2UgU25ha2VcIixcIkZpZ2VhdGVyIEJlZXRsZVwiLFwiRmlsYSBCcmFzaWxlaXJvXCIsXCJGaW4gV2hhbGVcIixcIkZpbm5pc2ggTGFwcGh1bmRcIixcIkZpbm5pc2ggU3BpdHpcIixcIkZpcmUgQmFsbCBQeXRob25cIixcIkZpcmUgRWVsXCIsXCJGaXJlIHNhbGFtYW5kZXJcIixcIkZpcmUtQmVsbGllZCBUb2FkXCIsXCJGaXJlZmx5XCIsXCJGaXJlZmx5IEJhbGwgUHl0aG9uXCIsXCJGaXNoXCIsXCJGaXNoZXIgQ2F0XCIsXCJGaXNoaW5nIENhdFwiLFwiRmxhbWluZ29cIixcIkZsYXQtQ29hdGVkIFJldHJpZXZlclwiLFwiRmxhdGhlYWQgQ2F0ZmlzaFwiLFwiRmxlYVwiLFwiRmxlYSBCZWV0bGVcIixcIkZsZWNrdmllaCBDYXR0bGVcIixcIkZsb3JpZGEgR2FyXCIsXCJGbG9yaWRhIFBhbnRoZXJcIixcIkZsb3JpZGEgV29vZHMgQ29ja3JvYWNoXCIsXCJGbG91bmRlclwiLFwiRmxvdW5kZXIgRmlzaFwiLFwiRmxvdXIgQmVldGxlXCIsXCJGbG93ZXJob3JuIEZpc2hcIixcIkZsdWtlIEZpc2hcIixcIkZseVwiLFwiRmx5Y2F0Y2hlclwiLFwiRmx5aW5nIEZpc2hcIixcIkZseWluZyBMZW11clwiLFwiRmx5aW5nIFNuYWtlXCIsXCJGbHlpbmcgU3F1aXJyZWxcIixcIkZvb3RiYWxsIEZpc2hcIixcIkZvcmVzdCBDb2JyYVwiLFwiRm9ybW9zYW4gTW91bnRhaW4gRG9nXCIsXCJGb3NzYVwiLFwiRm94XCIsXCJGb3ggU25ha2VzXCIsXCJGb3ggU3F1aXJyZWxcIixcIkZveCBUZXJyaWVyXCIsXCJGcmVld2F5IEJhbGwgUHl0aG9uXCIsXCJGcmVuY2ggQnVsbGRvZ1wiLFwiRnJlbmNoIExvcFwiLFwiRnJlbmNodG9uXCIsXCJGcmVuZ2xlXCIsXCJGcmVzaHdhdGVyIENyb2NvZGlsZVwiLFwiRnJlc2h3YXRlciBFZWxcIixcIkZyZXNod2F0ZXIgSmVsbHlmaXNoXCIsXCJGcmVzaHdhdGVyIFN1bmZpc2hcIixcIkZyaWdhdGViaXJkXCIsXCJGcmlsbGVkIExpemFyZFwiLFwiRnJpbGxlZCBTaGFya1wiLFwiRnJpdGlsbGFyeSBCdXR0ZXJmbHlcIixcIkZyb2dcIixcIkZyb2dmaXNoXCIsXCJGcnVnXCIsXCJGcnVpdCBCYXRcIixcIkZydWl0IEZseVwiLFwiRnVsdm91cyBXaGlzdGxpbmcgRHVja1wiLFwiRnVyIFNlYWxcIixcIkdhYm9vbiBWaXBlclwiLFwiR2FsYXBhZ29zIFBlbmd1aW5cIixcIkdhbGFwYWdvcyBTaGFya1wiLFwiR2FsYXBhZ29zIFRvcnRvaXNlXCIsXCJHYXJcIixcIkdhcmRlbiBFZWxcIixcIkdhcmRlbiBTcGlkZXJcIixcIkdhcmdveWxlIEdlY2tvXCIsXCJHYXJ0ZXIgU25ha2VcIixcIkdhc3Rvcm5pc1wiLFwiR2F6ZWxsZVwiLFwiR2Vja29cIixcIkdlbmV0XCIsXCJHZW50b28gUGVuZ3VpblwiLFwiR2VvZmZyb3lzIFRhbWFyaW5cIixcIkdlcmJlcmlhbiBTaGVwc2t5XCIsXCJHZXJiaWxcIixcIkdlcm1hbiBDb2Nrcm9hY2hcIixcIkdlcm1hbiBMb25naGFpcmVkIFBvaW50ZXJcIixcIkdlcm1hbiBQaW5zY2hlclwiLFwiR2VybWFuIFNoZXBoZXJkIEd1aWRlXCIsXCJHZXJtYW4gU2hlcHBpdFwiLFwiR2VybWFuIFNoZXByYWRvclwiLFwiR2VybWFuIFNob3J0aGFpcmVkIFBvaW50ZXJcIixcIkdlcm1hbiBTcGl0elwiLFwiR2VybWFuIFdpcmVoYWlyZWQgUG9pbnRlclwiLFwiR2hhcmlhbFwiLFwiR2hvc3QgQ2F0ZmlzaFwiLFwiR2hvc3QgQ3JhYlwiLFwiR2lhbnQgQWZyaWNhbiBMYW5kIFNuYWlsXCIsXCJHaWFudCBBcm1hZGlsbG9cIixcIkdpYW50IEJlYXZlclwiLFwiR2lhbnQgQ2xhbVwiLFwiR2lhbnQgRGVzZXJ0IENlbnRpcGVkZVwiLFwiR2lhbnQgSG91c2UgU3BpZGVyXCIsXCJHaWFudCBJc29wb2RcIixcIkdpYW50IExlb3BhcmQgTW90aFwiLFwiR2lhbnQgUGFuZGEgQmVhclwiLFwiR2lhbnQgU2FsYW1hbmRlclwiLFwiR2lhbnQgU2NobmF1emVyXCIsXCJHaWFudCBTY2hub29kbGVcIixcIkdpYW50IFdldGFcIixcIkdpYmJvblwiLFwiR2lnYW50b3BpdGhlY3VzXCIsXCJHaWxhIE1vbnN0ZXJcIixcIkdpcmFmZmVcIixcIkdsYXNzIEZyb2dcIixcIkdsYXNzIExpemFyZFwiLFwiR2xlY2hvblwiLFwiR2xlbiBPZiBJbWFhbCBUZXJyaWVyXCIsXCJHbG93IFdvcm1cIixcIkduYXRcIixcIkdvYXRcIixcIkdvYmVyaWFuXCIsXCJHb2JsaW4gU2hhcmtcIixcIkdvYnkgRmlzaFwiLFwiR29sZGFkb3JcIixcIkdvbGRjcmVzdFwiLFwiR29sZGVuIERveFwiLFwiR29sZGVuIEVhZ2xlXCIsXCJHb2xkZW4gSXJpc2hcIixcIkdvbGRlbiBMYW5jZWhlYWRcIixcIkdvbGRlbiBMaW9uIFRhbWFyaW5cIixcIkdvbGRlbiBNYXNrZWQgT3dsXCIsXCJHb2xkZW4gTmV3ZmllXCIsXCJHb2xkZW4gT3Jpb2xlXCIsXCJHb2xkZW4gUHlyZW5lZXNcIixcIkdvbGRlbiBSZXRyaWV2ZXJcIixcIkdvbGRlbiBTYWludFwiLFwiR29sZGVuIFNoZXBoZXJkXCIsXCJHb2xkZW4gVG9ydG9pc2UgQmVldGxlXCIsXCJHb2xkZW4tQ3Jvd25lZCBGbHlpbmcgRm94XCIsXCJHb2xkZW4tQ3Jvd25lZCBLaW5nbGV0XCIsXCJHb2xkZW5kb29kbGVcIixcIkdvbGRmaXNoXCIsXCJHb2xpYXRoIEJlZXRsZVwiLFwiR29saWF0aCBGcm9nXCIsXCJHb2xpYXRoIFRpZ2VyZmlzaFwiLFwiR29sbGllXCIsXCJHb21waG90aGVyaXVtXCIsXCJHb29uY2ggQ2F0ZmlzaFwiLFwiR29vc2VcIixcIkdvb3R5IFNhcHBoaXJlIFRhcmFudHVsYVwiLFwiR29waGVyXCIsXCJHb3BoZXIgU25ha2VcIixcIkdvcGhlciBUb3J0b2lzZVwiLFwiR29yZG9uIFNldHRlclwiLFwiR29yZ29zYXVydXNcIixcIkdvcmlsbGFcIixcIkdvc2hhd2tcIixcIkdvdWxkaWFuIEZpbmNoXCIsXCJHcmFwZXZpbmUgQmVldGxlXCIsXCJHcmFzcyBDYXJwXCIsXCJHcmFzcyBTbmFrZVwiLFwiR3Jhc3MgU3BpZGVyXCIsXCJHcmFzc2hvcHBlclwiLFwiR3Jhc3Nob3BwZXIgTW91c2VcIixcIkdyYXkgQ2F0YmlyZFwiLFwiR3JheSBGb3hcIixcIkdyYXkgVHJlZSBGcm9nXCIsXCJHcmVhdCBCbHVlIEhlcm9uXCIsXCJHcmVhdCBDcmVzdGVkIEZseWNhdGNoZXJcIixcIkdyZWF0IERhbmVcIixcIkdyZWF0IERhbm9vZGxlXCIsXCJHcmVhdCBFZ3JldFwiLFwiR3JlYXQgSGFtbWVyaGVhZCBTaGFya1wiLFwiR3JlYXQgS2lza2FkZWVcIixcIkdyZWF0IFBsYWlucyBSYXQgU25ha2VcIixcIkdyZWF0IFBvdG9vIEJpcmRcIixcIkdyZWF0IFB5cmVuZWVzXCIsXCJHcmVhdCBXaGl0ZSBTaGFya1wiLFwiR3JlYXRlciBTd2lzcyBNb3VudGFpbiBEb2dcIixcIkdyZWJlXCIsXCJHcmVlbiBBbmFjb25kYVwiLFwiR3JlZW4gQW5vbGVcIixcIkdyZWVuIEFwaGlkc1wiLFwiR3JlZW4gQmVlLUVhdGVyXCIsXCJHcmVlbiBCb3R0bGUgQmx1ZSBUYXJhbnR1bGFcIixcIkdyZWVuIEZyb2dcIixcIkdyZWVuIEhlcm9uXCIsXCJHcmVlbiBNYW1iYVwiLFwiR3JlZW4gUmF0IFNuYWtlXCIsXCJHcmVlbiBTbmFrZVwiLFwiR3JlZW4gU3VuZmlzaFwiLFwiR3JlZW4gVHJlZSBGcm9nXCIsXCJHcmVlbiBUcmVlIFB5dGhvblwiLFwiR3JlZW5sYW5kIERvZ1wiLFwiR3JlZW5sYW5kIFNoYXJrXCIsXCJHcmV5IEhlcm9uXCIsXCJHcmV5IE1vdXNlIExlbXVyXCIsXCJHcmV5IFJlZWYgU2hhcmtcIixcIkdyZXkgU2VhbFwiLFwiR3JleWhvdW5kXCIsXCJHcmlmZm9uIFZ1bHR1cmVcIixcIkdyaWZmb25zaGlyZVwiLFwiR3JpenpseSBCZWFyXCIsXCJHcm9lbmVuZGFlbFwiLFwiR3JvdW5kIFNuYWtlXCIsXCJHcm91bmRob2dcIixcIkdyb3VwZXJcIixcIkdyb3VzZVwiLFwiR3VpbmVhIEZvd2xcIixcIkd1aW5lYSBQaWdcIixcIkd1bHBlciBDYXRmaXNowqBcIixcIkd1bHBlciBFZWzCoFwiLFwiR3VwcHlcIixcIkd5cHN5IE1vdGhcIixcIkhhYXN04oCZcyBFYWdsZVwiLFwiSGFidSBTbmFrZVwiLFwiSGFkZG9ja1wiLFwiSGFnZmlzaFwiLFwiSGFpa291aWNodGh5c1wiLFwiSGFpbm9zYXVydXNcIixcIkhhaXJ5IEZyb2dmaXNoXCIsXCJIYWlyeSBXb29kcGVja2VyXCIsXCJIYWxpYnV0XCIsXCJIYWxsdWNpZ2VuaWFcIixcIkhhbWJ1cmcgQ2hpY2tlblwiLFwiSGFtbWVyaGVhZCBTaGFya1wiLFwiSGFtc3RlclwiLFwiSGFyYm9yIFNlYWxcIixcIkhhcmRoZWFkIENhdGZpc2hcIixcIkhhcmVcIixcIkhhcmxlcXVpbiBSYWJiaXRcIixcIkhhcmxlcXVpbiBTbmFrZVwiLFwiSGFycCBTZWFsXCIsXCJIYXJweSBFYWdsZVwiLFwiSGFycmllclwiLFwiSGFycmlzIEhhd2tcIixcIkhhdHplZ29wdGVyeXhcIixcIkhhdmFtYWx0XCIsXCJIYXZhbmVzZVwiLFwiSGF2YXBvb1wiLFwiSGF2YXNoaXJlXCIsXCJIYXZhc2h1XCIsXCJIYXdhaWlhbiBDcm93XCIsXCJIYXdhaWlhbiBHb29zZVwiLFwiSGF3YWlpYW4gTW9uayBTZWFsXCIsXCJIYXdrXCIsXCJIYXdrIE1vdGggQ2F0ZXJwaWxsYXJcIixcIkhlZGdlaG9nXCIsXCJIZWxpY29wcmlvblwiLFwiSGVsbGJlbmRlclwiLFwiSGVwYXRpYyBUYW5hZ2VyXCIsXCJIZXJjdWxlcyBCZWV0bGVcIixcIkhlcmN1bGVzIE1vdGhcIixcIkhlcm1pdCBDcmFiXCIsXCJIZXJvblwiLFwiSGVycmVyYXNhdXJ1c1wiLFwiSGVycmluZ1wiLFwiSGVycmluZyBHdWxsXCIsXCJIaWdobGFuZCBDYXR0bGVcIixcIkhpbWFsYXlhblwiLFwiSGlwcG9wb3RhbXVzXCIsXCJIaXBwb3BvdGFtdXMgZ29yZ29wc1wiLFwiSG9hcnkgQmF0XCIsXCJIb2JvIFNwaWRlclwiLFwiSG9nbm9zZSBzbmFrZVwiLFwiSG9ra2FpZG9cIixcIkhvbHkgQ3Jvc3MgRnJvZ1wiLFwiSG9uZHVyYW4gV2hpdGUgQmF0XCIsXCJIb25leSBCYWRnZXJcIixcIkhvbmV5IEJlZVwiLFwiSG9uZXkgQnV6emFyZFwiLFwiSG9vZGVkIE9yaW9sZVwiLFwiSG9vZGVkIFNlYWxcIixcIkhvb2stTm9zZWQgU2VhIFNuYWtlXCIsXCJIb29wb2VcIixcIkhvcmdpXCIsXCJIb3JuIFNoYXJrXCIsXCJIb3JuYmlsbFwiLFwiSG9ybmVkIEFkZGVyXCIsXCJIb3JuZWQgQmVldGxlXCIsXCJIb3JuZWQgRnJvZ1wiLFwiSG9ybmVkIEdyZWJlXCIsXCJIb3JuZWQgTGl6YXJkXCIsXCJIb3JuZWQgVmlwZXJcIixcIkhvcm5ldFwiLFwiSG9yc2VcIixcIkhvcnNlIE1hY2tlcmVsXCIsXCJIb3JzZWZseVwiLFwiSG9yc2VzaG9lIENyYWJcIixcIkhvdWRhbiBDaGlja2VuXCIsXCJIb3VzZSBGaW5jaFwiLFwiSG91c2UgU3BhcnJvd1wiLFwiSG91c2Ugd3JlblwiLFwiSG91c2VmbHlcIixcIkhvdmFzYXVydXNcIixcIkhvdmF3YXJ0XCIsXCJIb3dsZXIgTW9ua2V5XCIsXCJIdW1hblwiLFwiSHVtYm9sZHQgUGVuZ3VpblwiLFwiSHVtYm9sZHQgU3F1aWRcIixcIkh1bW1pbmdiaXJkXCIsXCJIdW1taW5nYmlyZCBIYXdrLU1vdGhcIixcIkh1bXBiYWNrIFdoYWxlXCIsXCJIdW50YXdheVwiLFwiSHVudHNtYW4gU3BpZGVyXCIsXCJIdXNrYWRvclwiLFwiSHVza2l0YVwiLFwiSHVza3lcIixcIkh1c2t5IEphY2tcIixcIkh1c2t5ZG9vZGxlXCIsXCJIeWFjaW50aCBNYWNhd1wiLFwiSHlhZW5vZG9uXCIsXCJIeWVuYVwiLFwiSWJleFwiLFwiSWJpc1wiLFwiSWJpemFuIEhvdW5kXCIsXCJJY2FkeXB0ZXNcIixcIkljZWxhbmRpYyBTaGVlcGRvZ1wiLFwiSWNodGh5b3NhdXJ1c1wiLFwiSWNodGh5b3N0ZWdhXCIsXCJJZ3VhbmFcIixcIklndWFub2RvblwiLFwiSU1HIEJvYSBDb25zdHJpY3RvclwiLFwiSW1tb3J0YWwgSmVsbHlmaXNoXCIsXCJJbXBhbGFcIixcIkltcGVyaWFsIE1vdGhcIixcIkluZGlhbiBDb2JyYVwiLFwiSW5kaWFuIEVsZXBoYW50XCIsXCJJbmRpYW4gR2lhbnQgU3F1aXJyZWxcIixcIkluZGlhbiBQYWxtIFNxdWlycmVsXCIsXCJJbmRpYW4gcHl0aG9uXCIsXCJJbmRpYW4gUmhpbm9jZXJvc1wiLFwiSW5kaWFuIFN0YXIgVG9ydG9pc2VcIixcIkluZGlhbm1lYWwgTW90aFwiLFwiSW5kaWdvIFNuYWtlXCIsXCJJbmRvY2hpbmVzZSBUaWdlclwiLFwiSW5kcmlcIixcIklubGFuZCBUYWlwYW5cIixcIkluc2VjdFwiLFwiSW5zZWN0c1wiLFwiSU8gTW90aFwiLFwiSXJpc2ggRG9vZGxlXCIsXCJJcmlzaCBFbGtcIixcIklyaXNoIFNldHRlclwiLFwiSXJpc2ggVGVycmllclwiLFwiSXJpc2ggV2F0ZXIgU3BhbmllbFwiLFwiSXJpc2ggV29sZkhvdW5kXCIsXCJJdGFsaWFuIEdyZXlob3VuZFwiLFwiSXZvcnktYmlsbGVkIHdvb2RwZWNrZXJcIixcIkphYmlydVwiLFwiSmFjYW5hXCIsXCJKYWNrIFJ1c3NlbGxcIixcIkphY2stQ2hpXCIsXCJKYWNrYWJlZVwiLFwiSmFja2FsXCIsXCJKYWNrZGF3XCIsXCJKYWNrcmFiYml0XCIsXCJKYWNrc29u4oCZcyBDaGFtZWxlb25cIixcIkphZ2R0ZXJyaWVyXCIsXCJKYWd1YXJcIixcIkphZ3VhcnVuZGkgQ2F0XCIsXCJKYW1haWNhbiBCb2FcIixcIkphbWFpY2FuIElndWFuYVwiLFwiSmFwYW5lc2UgQmFudGFtIENoaWNrZW5cIixcIkphcGFuZXNlIEJlZXRsZVwiLFwiSmFwYW5lc2UgQ2hpblwiLFwiSmFwYW5lc2UgTWFjYXF1ZVwiLFwiSmFwYW5lc2UgcmF0IHNuYWtlXCIsXCJKYXBhbmVzZSBTcGl0elwiLFwiSmFwYW5lc2UgU3F1aXJyZWxcIixcIkphcGFuZXNlIFRlcnJpZXJcIixcIkphdmFuIExlb3BhcmRcIixcIkphdmFuIFJoaW5vY2Vyb3NcIixcIkphdmFuZXNlXCIsXCJKZWxseWZpc2hcIixcIkplcmJvYVwiLFwiSmV3ZWwgQmVldGxlwqBcIixcIkpvaG4gRG9yeVwiLFwiSm9uYWggQ3JhYlwiLFwiSm9ybyBTcGlkZXJcIixcIkpvc2VwaG9hcnRpZ2FzaWEgbW9uZXNpXCIsXCJKdW1waW5nIFNwaWRlclwiLFwiSnVuZ2xlIENhcnBldCBQeXRob25cIixcIkp1bmdsZWZvd2xcIixcIkthZ3VcIixcIkthaSBLZW5cIixcIktha2Fwb1wiLFwiS2FsdWdhIFN0dXJnZW9uXCIsXCJLYW5nYWwgU2hlcGFyZCBEb2dcIixcIkthbmdhcm9vXCIsXCJLYW5nYXJvbyBNb3VzZVwiLFwiS2FuZ2Fyb28gUmF0XCIsXCJLYXR5ZGlkXCIsXCJLYXVh4oCZaSDigJjFjOKAmMWNXCIsXCJLZWFcIixcIktlYWdsZVwiLFwiS2VlbC1CaWxsZWQgVG91Y2FuXCIsXCJLZWVsYmFja1wiLFwiS2Vlc2hvbmRcIixcIktlbHAgR3JlZW5saW5nXCIsXCJLZW50dWNreSBXYXJibGVyXCIsXCJLZW55YW4gU2FuZCBCb2FcIixcIktlcm1vZGUgQmVhclwiLFwiS2VycnkgQmx1ZSBUZXJyaWVyXCIsXCJLZXN0cmVsXCIsXCJLZXRhIFNhbG1vblwiLFwiS2V5IERlZXJcIixcIktoYW8gTWFuZWVcIixcIktpa28gR29hdFwiLFwiS2lsbGRlZXJcIixcIktpbGxlciBDbG93biBCYWxsIFB5dGhvblwiLFwiS2lsbGVyIFdoYWxlXCIsXCJLaWxsaWZpc2hcIixcIktpbmFiYWx1IEdpYW50IFJlZCBMZWVjaFwiLFwiS2luZGVyIEdvYXRcIixcIktpbmcgQ29icmFcIixcIktpbmcgQ3JhYlwiLFwiS2luZyBFaWRlclwiLFwiS2luZyBQZW5ndWluXCIsXCJLaW5nIFF1YWlsXCIsXCJLaW5nIFJhdCBTbmFrZVwiLFwiS2luZyBTYWxtb25cIixcIktpbmcgU2hlcGhlcmRcIixcIktpbmcgU25ha2VcIixcIktpbmcgVnVsdHVyZVwiLFwiS2luZ2Zpc2hlclwiLFwiS2lua2Fqb3VcIixcIktpcnRsYW5k4oCZcyBzbmFrZVwiLFwiS2lzaHVcIixcIktpc3NpbmcgQnVnc1wiLFwiS2l0IEZveFwiLFwiS2l0ZWZpbiBTaGFya1wiLFwiS2l3aVwiLFwiS2xpcHNwcmluZ2VyXCIsXCJLbmlmZWZpc2hcIixcIktuaWdodCBBbm9sZVwiLFwiS29hbGFcIixcIktvZGlhayBCZWFyXCIsXCJLb2Rrb2RcIixcIktvaSBGaXNoXCIsXCJLb2thbmVlIFNhbG1vblwiLFwiS29tb2RvIERyYWdvblwiLFwiS29tb25kb3JcIixcIktvb2lrZXJob25kamVcIixcIktvb2thYnVycmFcIixcIktvb2xpZVwiLFwiS29yZWFuIEppbmRvXCIsXCJLb3JpIEJ1c3RhcmRcIixcIktvdXByZXlcIixcIktvd2FyaVwiLFwiS3JhaXRcIixcIktyaWxsXCIsXCJLdWR1XCIsXCJLdWR6dSBCdWdcIixcIkt1dmFzelwiLFwiTGFiYWhvdWxhXCIsXCJMYWJtYXJhbmVyXCIsXCJMYWJvdXTigJlzIEZhaXJ5IFdyYXNzZVwiLFwiTGFicmFidWxsXCIsXCJMYWJyYWRhbmVcIixcIkxhYnJhZG9vZGxlXCIsXCJMYWJyYWRvciBSZXRyaWV2ZXJcIixcIkxhYnJhaGVlbGVyXCIsXCJMYWJyb3R0aWVcIixcIkxhY2UgQnVnXCIsXCJMYWNlIE1vbml0b3JcIixcIkxhZHlidWdcIixcIkxhZHlmaXNoXCIsXCJMYWdvdHRvIFJvbWFnbm9sb1wiLFwiTGFrZSBTdHVyZ2VvblwiLFwiTGFrZWxhbmQgVGVycmllclwiLFwiTGFNYW5jaGEgR29hdFwiLFwiTGFtcHJleVwiLFwiTGFuY2FzaGlyZSBIZWVsZXJcIixcIkxhbmNldGZpc2hcIixcIkxhbmRzZWVyIE5ld2ZvdW5kbGFuZFwiLFwiTGFwcGV0LWZhY2VkIFZ1bHR1cmVcIixcIkxhcHBvbmlhbiBIZXJkZXJcIixcIkxhcmRlciBCZWV0bGVcIixcIkxhcmdlIE11bnN0ZXJsYW5kZXJcIixcIkxhdmVuZGVyIEFsYmlubyBCYWxsIFB5dGhvblwiLFwiTGF3bm1vd2VyIEJsZW5ueVwiLFwiTGF6YXJ1cyBMaXphcmRcIixcIkxlYWYtVGFpbGVkIEdlY2tvXCIsXCJMZWF0aGVyYmFjayBTZWEgVHVydGxlXCIsXCJMZWVjaFwiLFwiTGVlZHNpY2h0aHlzXCIsXCJMZWljaGhhcmR04oCZcyBHcmFzc2hvcHBlclwiLFwiTGVtbWluZ1wiLFwiTGVtb24gQmxhc3QgQmFsbCBQeXRob25cIixcIkxlbW9uIFNoYXJrXCIsXCJMZW11clwiLFwiTGVvbmJlcmdlclwiLFwiTGVvcGFyZFwiLFwiTGVvcGFyZCBDYXRcIixcIkxlb3BhcmQgRnJvZ1wiLFwiTGVvcGFyZCBHZWNrb1wiLFwiTGVvcGFyZCBMaXphcmRcIixcIkxlb3BhcmQgU2VhbFwiLFwiTGVvcGFyZCBTaGFya1wiLFwiTGVvcGFyZCBUb3J0b2lzZVwiLFwiTGVwdG9jZXBoYWx1c1wiLFwiTGVzc2VyIEphY2FuYVwiLFwiTGhhc2EgQXBzb1wiLFwiTGhhc2Fwb29cIixcIkxpZ2VyXCIsXCJMaW1wZXRcIixcIkxpbmViYWNrIENhdHRsZVwiLFwiTGlubmV0XCIsXCJMaW9uXCIsXCJMaW9u4oCZcyBNYW5lIEplbGx5ZmlzaFwiLFwiTGlvbmZpc2hcIixcIkxpb3BsZXVyb2RvblwiLFwiTGl0dGxlIEJyb3duIEJhdFwiLFwiTGl0dGxlIFBlbmd1aW5cIixcIkxpdnlhdGFuXCIsXCJMaXphcmRcIixcIkxpemFyZGZpc2hcIixcIkxsYW1hXCIsXCJMb2FjaFwiLFwiTG9ic3RlclwiLFwiTG9jdXN0XCIsXCJMb25lIFN0YXIgVGlja1wiLFwiTG9uZy1FYXJlZCBPd2xcIixcIkxvbmctSGFpcmVkIFJvdHR3ZWlsZXJcIixcIkxvbmctVGFpbGVkIFRpdFwiLFwiTG9uZ2ZpbiBNYWtvIFNoYXJrXCIsXCJMb25nbm9zZSBHYXJcIixcIkxvcmlrZWV0XCIsXCJMb3Jpc1wiLFwiTG93Y2hlblwiLFwiTHVtcGZpc2hcIixcIkx1bmdmaXNoXCIsXCJMdXJjaGVyXCIsXCJMeWtvaSBDYXRcIixcIkx5bnhcIixcIkx5cmViaXJkXCIsXCJMeXN0cm9zYXVydXNcIixcIk1hY2FxdWVcIixcIk1hY2Fyb25pIFBlbmd1aW5cIixcIk1hY2F3XCIsXCJNYWNoYWVyb2lkZXNcIixcIk1hY2tlbnppZSBXb2xmXCIsXCJNYWNyYXVjaGVuaWFcIixcIk1hZGFnYXNjYXIgSGlzc2luZyBDb2Nrcm9hY2hcIixcIk1hZGFnYXNjYXIgSmFjYW5hXCIsXCJNYWRhZ2FzY2FyIFRyZWUgQm9hXCIsXCJNYWRvcmEgTW90aFwiLFwiTWFnZWxsYW5pYyBQZW5ndWluXCIsXCJNYWdnb3RcIixcIk1hZ25vbGlhIFdhcmJsZXJcIixcIk1hZ3BpZVwiLFwiTWFneWFyb3NhdXJ1c1wiLFwiTWFoaSBNYWhpXCIsXCJNYWlhc2F1cmFcIixcIk1haW5lIENvb25cIixcIk1hbCBTaGlcIixcIk1hbGF5YW4gQ2l2ZXRcIixcIk1hbGF5YW4gS3JhaXRcIixcIk1hbGF5YW4gVGlnZXJcIixcIk1hbGNoaVwiLFwiTWFsbGFyZFwiLFwiTWFsdGVhZ2xlXCIsXCJNYWx0ZXNlXCIsXCJNYWx0ZXNlIFNoaWggVHp1XCIsXCJNYWx0aXBvbVwiLFwiTWFsdGlwb29cIixcIk1hbWJhXCIsXCJNYW11c2hpIFNuYWtlXCIsXCJNYW4gb2YgV2FyIEplbGx5ZmlzaFwiLFwiTWFuYXRlZVwiLFwiTWFuY2hlc3RlciBUZXJyaWVyXCIsXCJNYW5kYXJpbiBSYXQgU25ha2VcIixcIk1hbmRyaWxsXCIsXCJNYW5lZCBXb2xmXCIsXCJNYW5ncm92ZSBTbmFrZVwiLFwiTWFudGEgUmF5XCIsXCJNYW50ZWxsYSBGcm9nXCIsXCJNYXJhYm91IFN0b3JrXCIsXCJNYXJibGUgRm94XCIsXCJNYXJlbW1hIFNoZWVwZG9nXCIsXCJNYXJpbmUgSWd1YW5hXCIsXCJNYXJpbmUgVG9hZFwiLFwiTWFya2hvclwiLFwiTWFybW9zZXRcIixcIk1hcm1vdFwiLFwiTWFyc2ggRnJvZ1wiLFwiTWFyc2ljYW4gQnJvd24gQmVhclwiLFwiTWFzaWFrYXNhdXJ1c1wiLFwiTWFza2VkIEFuZ2VsZmlzaFwiLFwiTWFza2VkIFBhbG0gQ2l2ZXRcIixcIk1hc3Nhc2F1Z2FcIixcIk1hc3RhZG9yXCIsXCJNYXN0aWZmXCIsXCJNYXV6ZXJcIixcIk1heSBCZWV0bGVcIixcIk1heWZseVwiLFwiTWVhZ2xlXCIsXCJNZWFsd29ybSBCZWV0bGVcIixcIk1lYWx5YnVnXCIsXCJNZWVya2F0XCIsXCJNZWdhbGFuaWFcIixcIk1lZ2Fsb2NoZWx5c1wiLFwiTWVnYWxvZG9uXCIsXCJNZWdhbW91dGggU2hhcmtcIixcIk1lZ2FuZXVyYVwiLFwiTWVnYXRoZXJpdW1cIixcIk1laW9sYW5pYVwiLFwiTWVrb25nIEdpYW50IENhdGZpc2hcIixcIk1lcmdhbnNlclwiLFwiTWV4aWNhbiBBbGxpZ2F0b3IgTGl6YXJkXCIsXCJNZXhpY2FuIEJsYWNrIEtpbmdzbmFrZVwiLFwiTWV4aWNhbiBFYWdsZVwiLFwiTWV4aWNhbiBGaXJlbGVnIFRhcmFudHVsYVwiLFwiTWV4aWNhbiBGcmVlLVRhaWxlZCBCYXRcIixcIk1leGljYW4gTW9sZSBMaXphcmRcIixcIk1pY3JvcmFwdG9yXCIsXCJNaWRnZXQgRmFkZWQgUmF0dGxlc25ha2VcIixcIk1pa2lcIixcIk1pbGsgU25ha2VcIixcIk1pbGtmaXNoXCIsXCJNaWxsaXBlZGVcIixcIk1pbmkgTGFicmFkb29kbGVcIixcIk1pbmkgTG9wXCIsXCJNaW5pYXR1cmUgQnVsbCBUZXJyaWVyXCIsXCJNaW5pYXR1cmUgSHVza3lcIixcIk1pbmlhdHVyZSBQaW5zY2hlclwiLFwiTWlua1wiLFwiTWlua2UgV2hhbGVcIixcIk1pc3Npc3NpcHBpIEtpdGVcIixcIk1vY2Nhc2luIFNuYWtlXCIsXCJNb2Rlcm4gR2FtZSBDaGlja2VuXCIsXCJNb2phcnJhXCIsXCJNb2phdmUgQmFsbCBQeXRob25cIixcIk1vamF2ZSBSYXR0bGVzbmFrZVwiLFwiTW9sYSBtb2xhXCIsXCJNb2xlXCIsXCJNb2xlIENyYWJcIixcIk1vbGUgQ3JpY2tldFwiLFwiTW9sZSBTbmFrZVwiLFwiTW9sbHlcIixcIk1vbmFyY2ggQnV0dGVyZmx5XCIsXCJNb25nb29zZVwiLFwiTW9uZ3JlbFwiLFwiTW9uaXRvciBMaXphcmRcIixcIk1vbmtleVwiLFwiTW9ua2Zpc2hcIixcIk1vbm9jbGVkIENvYnJhXCIsXCJNb250ZSBJYmVyaWEgRWxldXRoXCIsXCJNb29uIEplbGx5ZmlzaFwiLFwiTW9vbmdsb3cgQm9hXCIsXCJNb29yaGVuXCIsXCJNb29zZVwiLFwiTW9yYXkgRWVsXCIsXCJNb3JraWVcIixcIk1vc2FzYXVydXNcIixcIk1vc2NvdyBXYXRjaGRvZ1wiLFwiTW9zcXVpdG9cIixcIk1vdGhcIixcIk1vdW50YWluIEJsdWViaXJkXCIsXCJNb3VudGFpbiBDdXJcIixcIk1vdW50YWluIEZlaXN0XCIsXCJNb3VudGFpbiBHb3JpbGxhXCIsXCJNb3VudGFpbiBMaW9uXCIsXCJNb3VybmluZyBEb3ZlXCIsXCJNb3VzZVwiLFwiTW96YW1iaXF1ZSBTcGl0dGluZyBDb2JyYVwiLFwiTXVkIFNuYWtlXCIsXCJNdWRpXCIsXCJNdWRwdXBweVwiLFwiTXVsZVwiLFwiTXVsZSBEZWVyXCIsXCJNdWxnYSBTbmFrZVwiLFwiTXVsbGV0IEZpc2hcIixcIk11bnRqYWNcIixcIk11c2NvdnkgRHVja1wiLFwiTXVzayBEZWVyXCIsXCJNdXNrb3hcIixcIk11c2tyYXRcIixcIk11c3N1cmFuYSBTbmFrZVwiLFwiTXV0dGFidXJyYXNhdXJ1c1wiLFwiTXluYSBCaXJkXCIsXCJOYWJhcmxla1wiLFwiTmFlZ2xlcmlhXCIsXCJOYWtlZCBNb2xlIFJhdFwiLFwiTmFyd2hhbFwiLFwiTmF0dGVyamFja1wiLFwiTmF1dGlsdXNcIixcIk5lYW5kZXJ0aGFsXCIsXCJOZWFwb2xpdGFuIE1hc3RpZmZcIixcIk5lYmVsdW5nXCIsXCJOZWVkbGVmaXNoXCIsXCJOZWxvcmUgQ2F0dGxlXCIsXCJOZW9uIFRldHJhXCIsXCJOZXB0dW5lIEdyb3VwZXJcIixcIk5ld2ZvdW5kbGFuZFwiLFwiTmV3Znlwb29cIixcIk5ld3RcIixcIk5ndW5pIENhdHRsZVwiLFwiTmljb2JhciBwaWdlb25cIixcIk5pZ2VyaWFuIEdvYXRcIixcIk5pZ2h0IEFkZGVyXCIsXCJOaWdodCBIZXJvblwiLFwiTmlnaHQgU25ha2VcIixcIk5pZ2h0aW5nYWxlXCIsXCJOaWdodGphclwiLFwiTmlsZSBDcm9jb2RpbGVcIixcIk5pbGdhaVwiLFwiTm8gU2VlIFVtc1wiLFwiTm9yZm9sayBUZXJyaWVyXCIsXCJOb3JyYm90dGVuc3BldHNcIixcIk5vcnRoIEFtZXJpY2FuIEJsYWNrIEJlYXJcIixcIk5vcnRoZXJuIEFsbGlnYXRvciBMaXphcmRcIixcIk5vcnRoZXJuIENhcmRpbmFsXCIsXCJOb3J0aGVybiBGbGlja2VyXCIsXCJOb3J0aGVybiBGdXIgU2VhbFwiLFwiTm9ydGhlcm4gSGFycmllclwiLFwiTm9ydGhlcm4gSW51aXQgRG9nXCIsXCJOb3J0aGVybiBKYWNhbmFcIixcIk5vcnRoZXJuIFBhcnVsYVwiLFwiTm9ydGhlcm4gUG90b29cIixcIk5vcnRoZXJuIFNjcmVhbWVyXCIsXCJOb3J0aGVybiBXYXRlciBTbmFrZVwiLFwiTm9yd2F5IFJhdFwiLFwiTm9yd2VnaWFuIEJ1aHVuZFwiLFwiTm9yd2VnaWFuIEVsa2hvdW5kXCIsXCJOb3J3ZWdpYW4gRm9yZXN0XCIsXCJOb3J3ZWdpYW4gTHVuZGVodW5kXCIsXCJOb3J3aWNoIFRlcnJpZXJcIixcIk5vc2UtaG9ybmVkIHZpcGVyXCIsXCJOb3ZhIFNjb3RpYSBEdWNrIFRvbGxpbmcgUmV0cmlldmVyXCIsXCJOdWJpYW4gR29hdFwiLFwiTnVkaWJyYW5jaFwiLFwiTnVtYmF0XCIsXCJOdXJhbGFndXNcIixcIk51cnNlIFNoYXJrXCIsXCJOdXQgV2VldmlsXCIsXCJOdXRoYXRjaFwiLFwiTnV0cmlhXCIsXCJOeWFsYVwiLFwiT2FrIFRvYWRcIixcIk9hcmZpc2hcIixcIk9jZWFuIFdoaXRlZmlzaFwiLFwiT2NlYW5pYyBXaGl0ZXRpcCBTaGFya1wiLFwiT2NlbGxhdGVkIFR1cmtleVwiLFwiT2NlbG90XCIsXCJPY3RvcHVzXCIsXCJPZW5wZWxsaSBweXRob25cIixcIk9rYXBpXCIsXCJPbGQgRW5nbGlzaCBTaGVlcGRvZ1wiLFwiT2xkIEhvdXNlIEJvcmVyXCIsXCJPbGVhbmRlciBIYXdrIE1vdGhcIixcIk9saW5nb1wiLFwiT2xpdmUgQmFib29uXCIsXCJPbGl2ZSBweXRob25cIixcIk9saXZlIFNlYSBTbmFrZVwiLFwiT2xtXCIsXCJPbmFnYWRvcmkgQ2hpY2tlblwiLFwiT25hZ2VyXCIsXCJPcGFiaW5pYVwiLFwiT3BhaFwiLFwiT3Bvc3N1bVwiLFwiT3JhbmRhIEdvbGRmaXNoXCIsXCJPcmFuZy11dGFuXCIsXCJPcmFuZ2UgQmFib29uIFRhcmFudHVsYVwiLFwiT3JhbmdlIERyZWFtIEJhbGwgUHl0aG9uXCIsXCJPcmFuZ2UgUm91Z2h5wqBcIixcIk9yYW5nZSBUYW5hZ2VyXCIsXCJPcmFuZ2UtQ3Jvd25lZCBXYXJibGVyXCIsXCJPcmIgV2VhdmVyXCIsXCJPcmNoYXJkIE9yaW9sZVwiLFwiT3JlZ29uIFNwb3R0ZWQgRnJvZ1wiLFwiT3JpLVBlaVwiLFwiT3JpYmlcIixcIk9yaWVudGFsIENvY2tyb2FjaFwiLFwiT3JpZW50YWwgRHdhcmYgS2luZ2Zpc2hlclwiLFwiT3Jpbm9jbyBDcm9jb2RpbGVcIixcIk9ybmF0ZSBCb3ggVHVydGxlXCIsXCJPcm5pdGhvY2hlaXJ1c1wiLFwiT3JuaXRob21pbXVzXCIsXCJPcnRvbGFuIEJ1bnRpbmdcIixcIk9zY2FyIEZpc2hcIixcIk9zcHJleVwiLFwiT3N0cmFjb2RcIixcIk9zdHJpY2hcIixcIk90dGVyXCIsXCJPdHRlcmhvdW5kXCIsXCJPdmVuYmlyZFwiLFwiT3ZpcmFwdG9yXCIsXCJPd2xcIixcIk93bCBCdXR0ZXJmbHlcIixcIk94XCIsXCJPeHBlY2tlclwiLFwiT3lzdGVyXCIsXCJPeXN0ZXIgVG9hZGZpc2hcIixcIk96YXJrIEJhc3NcIixcIlBhY2h5Y2VwaGFsb3NhdXJ1c1wiLFwiUGFjaWZpYyBTbGVlcGVyIFNoYXJrXCIsXCJQYWRkbGVmaXNoXCIsXCJQYWRlbWVsb25cIixcIlBhaW50ZWQgVHVydGxlXCIsXCJQYWxhZW9sb3hvZG9uIG5hbWFkaWN1c1wiLFwiUGFsZW9wYXJhZG94aWFcIixcIlBhbG0gUmF0XCIsXCJQYWxvIFZlcmRlIEJlZXRsZVwiLFwiUGFuZGEgUGllZCBCYWxsIFB5dGhvblwiLFwiUGFuZ29saW5cIixcIlBhbnRoZXJcIixcIlBhbnRoZXJhIGF0cm94XCIsXCJQYXBpbGxvblwiLFwiUGFyYWRpc2UgRmx5aW5nIFNuYWtlXCIsXCJQYXJha2VldFwiLFwiUGFyYXNhdXJvbG9waHVzXCIsXCJQYXJyb3RcIixcIlBhcnJvdCBTbmFrZVwiLFwiUGFycm90ZmlzaFwiLFwiUGFycm90bGV0XCIsXCJQYXJzb24gUnVzc2VsbCBUZXJyaWVyXCIsXCJQYXJ0aSBTY2huYXV6ZXJcIixcIlBhcnRyaWRnZVwiLFwiUGF0YWdvdGl0YW5cIixcIlBhdGFzIE1vbmtleVwiLFwiUGF0dGVyZGFsZSBUZXJyaWVyXCIsXCJQZWEgUHVmZmVyXCIsXCJQZWFjb2NrXCIsXCJQZWFjb2NrIEJ1dHRlcmZseVwiLFwiUGVhY29jayBTcGlkZXJcIixcIlBlYWdsZVwiLFwiUGVla2Fwb29cIixcIlBla2luZ2VzZVwiLFwiUGVsYWdvcm5pc1wiLFwiUGVsYWdvcm5pdGhpZGFlXCIsXCJQZWxpY2FuXCIsXCJQZWx5Y29zYXVyc1wiLFwiUGVtYnJva2UgV2Vsc2ggQ29yZ2lcIixcIlBlbmd1aW5cIixcIlBlbm5zeWx2YW5pYSBXb29kIENvY2tyb2FjaFwiLFwiUGVwcGVyZWQgTW90aFwiLFwiUGVwcGVybWludCBBbmdlbGZpc2hcIixcIlBlcmNoIEZpc2hcIixcIlBlcmUgRGF2aWRzIERlZXJcIixcIlBlcmVncmluZSBGYWxjb25cIixcIlBlcmluZ3VleeKAmXMgQWRkZXJcIixcIlBlcnJvIERlIFByZXNhIENhbmFyaW9cIixcIlBlcnNpYW5cIixcIlBlcnV2aWFuIEd1aW5lYSBQaWdcIixcIlBlcnV2aWFuIEluY2EgT3JjaGlkXCIsXCJQZXNxdWV04oCZcyBQYXJyb3RcIixcIlBldGl0IEJhc3NldCBHcmlmZm9uIFZlbmTDqWVuXCIsXCJQZXRpdGUgR29sZGVuZG9vZGxlXCIsXCJQaGFyYW9oIEhvdW5kXCIsXCJQaGVhc2FudFwiLFwiUGhlYXNhbnQtdGFpbGVkIEphY2FuYVwiLFwiUGhpbGlwcGluZSBDb2JyYVwiLFwiUGhvZW5peCBDaGlja2VuXCIsXCJQaG9ydXNyaGFjb3NcIixcIlBoeXRvc2F1cnNcIixcIlBpY2FyZHkgU3BhbmllbFwiLFwiUGljdHVzIENhdGZpc2hcIixcIlBpZWJhbGQgRGFjaHNodW5kXCIsXCJQaWVkIEJhbGwgUHl0aG9uXCIsXCJQaWVkIFRhbWFyaW5cIixcIlBpZWQtQmlsbGVkIEdyZWJlXCIsXCJQaWdcIixcIlBpZ2VvblwiLFwiUGlrYVwiLFwiUGlrZSBGaXNoXCIsXCJQaWxlYXRlZCBXb29kcGVja2VyXCIsXCJQaW5hY2F0ZSBCZWV0bGVcIixcIlBpbmUgQmVldGxlXCIsXCJQaW5lIE1hcnRlblwiLFwiUGluZSBTaXNraW5cIixcIlBpbmUgU25ha2VcIixcIlBpbmsgRmFpcnkgQXJtYWRpbGxvXCIsXCJQaW5rIFNhbG1vblwiLFwiUGluayBUb2VkIFRhcmFudHVsYVwiLFwiUGluay1OZWNrZWQgR3JlZW4gUGlnZW9uXCIsXCJQaXBlIFNuYWtlXCIsXCJQaXBlZmlzaFwiLFwiUGlyYW5oYVwiLFwiUGl0IEJ1bGxcIixcIlBpdCBWaXBlclwiLFwiUGl0YWRvclwiLFwiUGl0c2t5XCIsXCJQbGFpbnMgSG9nbm9zZSBTbmFrZVwiLFwiUGxhdGludW0gQXJvd2FuYVwiLFwiUGxhdHliZWxvZG9uXCIsXCJQbGF0eXB1c1wiLFwiUGxlc2lvc2F1clwiLFwiUGxpb3NhdXJcIixcIlBsb3R0IEhvdW5kc1wiLFwiUG9ja2V0IEJlYWdsZVwiLFwiUG9ja2V0IFBpdGJ1bGxcIixcIlBvZGVuY28gQ2FuYXJpb1wiLFwiUG9pbnRlclwiLFwiUG9pc29uIERhcnQgRnJvZ1wiLFwiUG9sYWNhbnRodXNcIixcIlBvbGFyIEJlYXJcIixcIlBvbGVjYXRcIixcIlBvbGlzaCBMb3dsYW5kIFNoZWVwZG9nXCIsXCJQb2xpc2ggVGF0cmEgU2hlZXBkb2dcIixcIlBvbGthIERvdCBTdGluZ3JheVwiLFwiUG9sbG9jayBGaXNoXCIsXCJQb2x5cGhlbXVzIG1vdGhcIixcIlBvbWFwb29cIixcIlBvbWNoaVwiLFwiUG9tZWFnbGVcIixcIlBvbWVyYW5pYW5cIixcIlBvbXNreVwiLFwiUG9uZCBTa2F0ZXJcIixcIlBvb2Nob25cIixcIlBvb2RsZVwiLFwiUG9vZ2xlXCIsXCJQb29sIEZyb2dcIixcIlBvcmJlYWdsZSBTaGFya1wiLFwiUG9yY3VwaW5lXCIsXCJQb3Jwb2lzZVwiLFwiUG9ydHVndWVzZSBQb2RlbmdvXCIsXCJQb3NzdW1cIixcIlBvdG9vXCIsXCJQb3Rvcm9vXCIsXCJQb3dkZXJwb3N0IEJlZXRsZVwiLFwiUHJhaXJpZSBDaGlja2VuXCIsXCJQcmFpcmllIERvZ1wiLFwiUHJhaXJpZSBSYXR0bGVzbmFrZVwiLFwiUHJhd25cIixcIlByYXlpbmcgTWFudGlzXCIsXCJQcm9ib3NjaXMgTW9ua2V5XCIsXCJQcm9jb3B0b2RvblwiLFwiUHJvbmdob3JuXCIsXCJQc2l0dGFjb3NhdXJ1c1wiLFwiUHRlcmFub2RvblwiLFwiUHRlcm9kYWN0eWxcIixcIlB1ZGVscG9pbnRlclwiLFwiUHVmZiBBZGRlclwiLFwiUHVmZmVyZmlzaFwiLFwiUHVmZmluXCIsXCJQdWdcIixcIlB1Z2Fwb29cIixcIlB1Z2dsZVwiLFwiUHVnc2hpcmVcIixcIlB1bGlcIixcIlB1bWFcIixcIlB1bWlcIixcIlB1bXBraW4gUGF0Y2ggVGFyYW50dWxhXCIsXCJQdXJwbGUgRW1wZXJvciBCdXR0ZXJmbHlcIixcIlB1cnBsZSBGaW5jaFwiLFwiUHVycGxlIEdhbGxpbnVsZVwiLFwiUHVycGxlIFRhcmFudHVsYVwiLFwiUHVydXNzYXVydXNcIixcIlB1c3MgTW90aFwiLFwiUHlnbXkgSGlwcG9wb3RhbXVzXCIsXCJQeWdteSBNYXJtb3NldFwiLFwiUHlnbXkgcHl0aG9uXCIsXCJQeWdteSBTaGFya1wiLFwiUHlnb3JhIEdvYXRcIixcIlB5amFtYSBTaGFya1wiLFwiUHlyYWRvclwiLFwiUHlyZWRvb2RsZVwiLFwiUHlyZW5lYW4gTWFzdGlmZlwiLFwiUHlyZW5lYW4gU2hlcGhlcmRcIixcIlB5dGhvblwiLFwiUXVhZ2dhXCIsXCJRdWFpbFwiLFwiUXVlZW4gc25ha2VcIixcIlF1ZXR6YWxcIixcIlF1ZXR6YWxjb2F0bHVzIG5vcnRocm9waVwiLFwiUXVva2thXCIsXCJRdW9sbFwiLFwiUmFiYml0XCIsXCJSYWNjb29uXCIsXCJSYWNjb29uIERvZ1wiLFwiUmFjZXIgU25ha2VcIixcIlJhZGlhdGVkIFRvcnRvaXNlXCIsXCJSYWdhbXVmZmluXCIsXCJSYWdkb2xsXCIsXCJSYWdnbGVcIixcIlJhaW5ib3cgQm9hXCIsXCJSYWluYm93IEtyaWJzXCIsXCJSYWluYm93IFNoYXJrXCIsXCJSYXRcIixcIlJhdCBTbmFrZXNcIixcIlJhdCBUZXJyaWVyXCIsXCJSYXR0bGVzbmFrZVwiLFwiUmVkIEFja2llIE1vbml0b3JcIixcIlJlZCBBcGhpZHNcIixcIlJlZCBEZWVyXCIsXCJSZWQgRGlhbW9uZGJhY2sgUmF0dGxlc25ha2VcIixcIlJlZCBGaW5jaFwiLFwiUmVkIEZveFwiLFwiUmVkIEtpdGVcIixcIlJlZCBLbmVlIFRhcmFudHVsYVwiLFwiUmVkIFBhbmRhXCIsXCJSZWQgUGFwZXIgV2FzcFwiLFwiUmVkIFJhY2VyIFNuYWtlXCIsXCJSZWQgU3BpdHRpbmcgQ29icmFcIixcIlJlZCBTcXVpcnJlbFwiLFwiUmVkIFRhaWwgQm9hXCIsXCJSZWQgV29sZlwiLFwiUmVkLUJlbGxpZWQgQmxhY2sgU25ha2VcIixcIlJlZC1CZWxsaWVkIFdvb2RwZWNrZXJcIixcIlJlZC1CaWxsZWQgUXVlbGVhIEJpcmRcIixcIlJlZC1FYXJlZCBTbGlkZXJcIixcIlJlZC1FeWVkIFRyZWUgRnJvZ1wiLFwiUmVkLUZvb3RlZCBUb3J0b2lzZVwiLFwiUmVkLWhhbmRlZCBUYW1hcmluXCIsXCJSZWQtSGVhZGVkIFZ1bHR1cmVcIixcIlJlZC1MaXBwZWQgQmF0ZmlzaFwiLFwiUmVkLVNob3VsZGVyZWQgSGF3a1wiLFwiUmVkLXdpbmdlZCBibGFja2JpcmRcIixcIlJlZGJhY2sgU3BpZGVyXCIsXCJSZWRib25lIENvb25ob3VuZFwiLFwiUmVkaHVtcCBFYXJ0aGVhdGVyXCIsXCJSZWRzdGFydFwiLFwiUmVkdGFpbCBDYXRmaXNoXCIsXCJSZWVmIFNoYXJrXCIsXCJSZWluZGVlclwiLFwiUmVwZW5vbWFtdXNcIixcIlJldGljdWxhdGVkIHB5dGhvblwiLFwiUmV4IFJhYmJpdFwiLFwiUmhhbXBob3N1Y2h1c1wiLFwiUmhlYVwiLFwiUmhlc3VzIE1hY2FxdWVcIixcIlJoaW5vIEJlZXRsZVwiLFwiUmhpbm8gVmlwZXJcIixcIlJoaW5vY2Vyb3NcIixcIlJob2Rlc2lhbiBSaWRnZWJhY2tcIixcIlJob21iaWMgRWdnLUVhdGVyIFNuYWtlXCIsXCJSaWJib24gRWVsXCIsXCJSaWJib24gU25ha2VcIixcIlJpbSBSb2NrIENyb3duZWQgU25ha2VcIixcIlJpbmctYmlsbGVkIEd1bGxcIixcIlJpbmdlZCBLaW5nZmlzaGVyXCIsXCJSaW5raGFscyBTbmFrZVwiLFwiUml2ZXIgT3R0ZXJcIixcIlJpdmVyIFR1cnRsZVwiLFwiUm9hZHJ1bm5lclwiLFwiUm9iYmVyIEZsaWVzXCIsXCJSb2JpblwiLFwiUm9jayBDcmFiXCIsXCJSb2NrIEh5cmF4XCIsXCJSb2NrIFB5dGhvblwiLFwiUm9ja2Zpc2hcIixcIlJvY2tob3BwZXIgUGVuZ3VpblwiLFwiUm9kZW50c1wiLFwiUm9lIERlZXJcIixcIlJvb3N0ZXJcIixcIlJvb3QgQXBoaWRzXCIsXCJSb3NlLWJyZWFzdGVkIEdyb3NiZWFrXCIsXCJSb3NlYXRlIFNwb29uYmlsbFwiLFwiUm9zeSBCb2FcIixcIlJvdHRlcm1hblwiLFwiUm90dHNreVwiLFwiUm90dHdlaWxlclwiLFwiUm91Z2ggRWFydGggU25ha2VcIixcIlJvdWdoIEdyZWVuIFNuYWtlXCIsXCJSb3VnaC1MZWdnZWQgSGF3a1wiLFwiUm92ZSBCZWV0bGVcIixcIlJveWFsIFBlbmd1aW5cIixcIlJ1YmJlciBCb2FcIixcIlJ1YnktQ3Jvd25lZCBLaW5nbGV0XCIsXCJSdWJ5LVRocm9hdGVkIEh1bW1pbmdiaXJkXCIsXCJSdWRkeSBUdXJuc3RvbmVcIixcIlJ1Zm91cyBIdW1taW5nYmlyZFwiLFwiUnVzc2Vs4oCZcyBWaXBlclwiLFwiUnVzc2VsbCBUZXJyaWVyXCIsXCJSdXNzaWFuIEJlYXIgRG9nXCIsXCJSdXNzaWFuIEJsdWVcIixcIlJ1c3NpYW4gVG9ydG9pc2VcIixcIlNhYW5lbiBHb2F0XCIsXCJTYWFybG9vcyBXb2xmZG9nXCIsXCJTYWJlci1Ub290aGVkIFRpZ2VyXCIsXCJTYWJsZVwiLFwiU2FibGUgQmxhY2sgR2VybWFuIFNoZXBoZXJkXCIsXCJTYWJsZSBGZXJyZXRcIixcIlNhZGRsZWJhY2sgQ2F0ZXJwaWxsYXJcIixcIlNhaWdhXCIsXCJTYWludCBCZXJkb29kbGVcIixcIlNhaW50IEJlcm5hcmRcIixcIlNhaW50IFNoZXBoZXJkXCIsXCJTYWxhbWFuZGVyXCIsXCJTYWxtb25cIixcIlNhbG1vbiBTaGFya1wiLFwiU2FsdWtpXCIsXCJTYW1iYXJcIixcIlNhbW95ZWRcIixcIlNhbiBGcmFuY2lzY28gR2FydGVyIFNuYWtlXCIsXCJTYW5kIENhdFwiLFwiU2FuZCBDcmFiXCIsXCJTYW5kIERvbGxhclwiLFwiU2FuZCBMaXphcmRcIixcIlNhbmQgVGlnZXIgU2hhcmtcIixcIlNhbmQgVmlwZXJcIixcIlNhbmRoaWxsIENyYW5lXCIsXCJTYW9sYVwiLFwiU2Fwc2FsaVwiLFwiU2FyY29zdWNodXNcIixcIlNhcmRpbmVzXCIsXCJTYXJrYXN0b2RvblwiLFwiU2FycGxhbmluYWNcIixcIlNhcnVzIENyYW5lXCIsXCJTYXRhbmljIGxlYWYtdGFpbGVkIGdlY2tvXCIsXCJTYXR1cm5paWRhZSBNb3RoXCIsXCJTYXVyb3BvZGFcIixcIlNhdmFubmEgR29hdFwiLFwiU2F2YW5uYWggTW9uaXRvclwiLFwiU2F2YW5uYWggU3BhcnJvd1wiLFwiU2F2dSBQeXRob25cIixcIlNhdy1zY2FsZWQgdmlwZXJcIixcIlNhd2Zpc2hcIixcIlNjYWxsb3BzXCIsXCJTY2FyYWIgQmVldGxlXCIsXCJTY2FybGV0IEtpbmdzbmFrZVwiLFwiU2NhcmxldCBNYWNhd1wiLFwiU2NhcmxldCBUYW5hZ2VyXCIsXCJTY2hhcGVuZG9lc1wiLFwiU2NoaXBwZXJrZVwiLFwiU2NobmVhZ2xlXCIsXCJTY2hub29kbGVcIixcIlNjaW1pdGFyLWhvcm5lZCBPcnl4XCIsXCJTY29ycGlvblwiLFwiU2NvcnBpb24gRmlzaFwiLFwiU2NvdGNoIENvbGxpZVwiLFwiU2NvdHRpc2ggRGVlcmhvdW5kXCIsXCJTY290dGlzaCBGb2xkIENhdFwiLFwiU2NvdHRpc2ggVGVycmllclwiLFwiU2Nyb3R1bSBGcm9nXCIsXCJTY3VscGluXCIsXCJTY3V0b3NhdXJ1c1wiLFwiU2VhIEFuZW1vbmVcIixcIlNlYSBEcmFnb25cIixcIlNlYSBFYWdsZVwiLFwiU2VhIExpb25cIixcIlNlYSBPdHRlclwiLFwiU2VhIFJvYWNoXCIsXCJTZWEgU2x1Z1wiLFwiU2VhIFNuYWtlXCIsXCJTZWEgU3F1aXJ0XCIsXCJTZWEgVHVydGxlXCIsXCJTZWEgVXJjaGluXCIsXCJTZWFndWxsXCIsXCJTZWFob3JzZVwiLFwiU2VhbFwiLFwiU2VhbHloYW0gVGVycmllclwiLFwiU2VkZ2UgV2FyYmxlclwiLFwiU2VpIFdoYWxlXCIsXCJTZW5lZ2FsIFBhcnJvdFwiLFwiU2VuZXBvbCBDYXR0bGVcIixcIlNlcXVpbmVkIFNwaWRlclwiLFwiU2VydmFsXCIsXCJTZXltb3VyaWFcIixcIlNoYXJrXCIsXCJTaGFycC1TaGlubmVkIEhhd2tcIixcIlNoYXJwLVRhaWxlZCBTbmFrZVwiLFwiU2hhc3Rhc2F1cnVzXCIsXCJTaGVlcFwiLFwiU2hlZXBhZG9vZGxlXCIsXCJTaGVlcHNoZWFkIEZpc2hcIixcIlNoZXBhZG9vZGxlXCIsXCJTaGVwa2l0YVwiLFwiU2hlcHdlaWxlclwiLFwiU2hldGxhbmQgU2hlZXBkb2dcIixcIlNoaWJhIEludVwiLFwiU2hpY2hpXCIsXCJTaGloIFBvb1wiLFwiU2hpaCBUenVcIixcIlNoaWtva3VcIixcIlNoaWxvaCBTaGVwaGVyZFwiLFwiU2hpcmFuaWFuXCIsXCJTaG9lYmlsbCBTdG9ya1wiLFwiU2hvbGxpZVwiLFwiU2hvcnQtRWFyZWQgT3dsXCIsXCJTaG9ydC1GYWNlZCBCZWFyXCIsXCJTaG9ydGZpbiBNYWtvIFNoYXJrXCIsXCJTaHJld1wiLFwiU2hyaW1wXCIsXCJTaWFtZXNlXCIsXCJTaWJlcmlhblwiLFwiU2liZXJpYW4gSHVza3lcIixcIlNpYmVyaWFuIEliZXhcIixcIlNpYmVyaWFuIFJldHJpZXZlclwiLFwiU2liZXJpYW4gVGlnZXJcIixcIlNpYmVycG9vXCIsXCJTaWRld2luZGVyXCIsXCJTaWthIERlZXJcIixcIlNpbGtlbiBXaW5kaG91bmRcIixcIlNpbGtpZSBDaGlja2VuXCIsXCJTaWxreSBTaGFya1wiLFwiU2lsa3kgVGVycmllclwiLFwiU2lsdmVyIERvbGxhclwiLFwiU2lsdmVyIExhYnJhZG9yXCIsXCJTaW1iYWt1YndhXCIsXCJTaW5vc2F1cm9wdGVyeXhcIixcIlNpdmF0aGVyaXVtXCIsXCJTaXhnaWxsIHNoYXJrXCIsXCJTa2F0ZSBGaXNoXCIsXCJTa2VsZXRvbiBUYXJhbnR1bGFcIixcIlNraW5rIExpemFyZFwiLFwiU2tpcGphY2sgVHVuYVwiLFwiU2t1YVwiLFwiU2t1bmtcIixcIlNreWUgVGVycmllclwiLFwiU2xlZXBlciBTaGFya1wiLFwiU2xvdGhcIixcIlNsb3ZhayBDdXZhY1wiLFwiU2xvdyBXb3JtXCIsXCJTbHVnXCIsXCJTbWFsbG1vdXRoIEJhc3NcIixcIlNtaWxvc3VjaHVzXCIsXCJTbW9reWJyb3duIENvY2tyb2FjaFwiLFwiU21vb3RoIEVhcnRoc25ha2VcIixcIlNtb290aCBGb3ggVGVycmllclwiLFwiU21vb3RoIEdyZWVuIFNuYWtlXCIsXCJTbW9vdGggSGFtbWVyaGVhZCBTaGFya1wiLFwiU21vb3RoIFNuYWtlXCIsXCJTbmFpbFwiLFwiU25ha2VcIixcIlNuYXBwaW5nIFR1cnRsZVwiLFwiU25vb2sgRmlzaFwiLFwiU25vcmtpZVwiLFwiU25vdXRlZCBDb2JyYVwiLFwiU25vdyBCdW50aW5nXCIsXCJTbm93IENyYWJcIixcIlNub3cgTGVvcGFyZFwiLFwiU25vd2JlcnJ5IENsZWFyd2luZyBNb3RoXCIsXCJTbm93Zmxha2UgRWVsXCIsXCJTbm93c2hvZVwiLFwiU25vd3Nob2UgSGFyZVwiLFwiU25vd3kgT3dsXCIsXCJTb2NrZXllIFNhbG1vblwiLFwiU29sZGllciBCZWV0bGVcIixcIlNvbWFsaVwiLFwiU29uZyBTcGFycm93XCIsXCJTb25nIFRocnVzaFwiLFwiU291dGggQ2hpbmEgVGlnZXJcIixcIlNvdXRoZXJuIEJsYWNrIFJhY2VyXCIsXCJTb3V0aGVybiBIb2dub3NlIFNuYWtlXCIsXCJTb3V0aGVybiBQYWNpZmljIFJhdHRsZXNuYWtlXCIsXCJTcGFkZWZvb3QgVG9hZFwiLFwiU3BhbmFkb3JcIixcIlNwYW5pc2ggR29hdFwiLFwiU3BhbmlzaCBNYXN0aWZmXCIsXCJTcGFuaXNoIFdhdGVyIERvZ1wiLFwiU3BhcnJvd1wiLFwiU3BhcnJvd2hhd2tcIixcIlNwZWNrbGVkIEtpbmdzbmFrZVwiLFwiU3BlY3RhY2xlZCBCZWFyXCIsXCJTcGVybSBXaGFsZVwiLFwiU3BoeW54XCIsXCJTcGlkZXJcIixcIlNwaWRlciBCYWxsIFB5dGhvblwiLFwiU3BpZGVyIEJlZXRsZVwiLFwiU3BpZGVyIE1vbmtleVwiLFwiU3BpZGVyIFdhc3BcIixcIlNwaWRlci1UYWlsZWQgSG9ybmVkIFZpcGVyXCIsXCJTcGlubmVyIFNoYXJrXCIsXCJTcGlub25lIEl0YWxpYW5vXCIsXCJTcGlub3NhdXJ1c1wiLFwiU3BpbnkgYnVzaCB2aXBlclwiLFwiU3BpbnkgRG9nZmlzaFwiLFwiU3BpbnkgSGlsbCBUdXJ0bGVcIixcIlNwaXR0aW5nIENvYnJhXCIsXCJTcGl4cyBNYWNhd1wiLFwiU3BvbmdlXCIsXCJTcG9uZ3kgTW90aFwiLFwiU3BvdHRlZCBHYXJcIixcIlNwb3R0ZWQgTGFudGVybmZseVwiLFwiU3BvdHRlZCBweXRob25cIixcIlNwb3R0ZWQgU2t1bmtcIixcIlNwcmluZ2Fkb3JcIixcIlNwcmluZ2Jva1wiLFwiU3ByaW5nZXJkb29kbGVcIixcIlNxdWFzaCBCZWV0bGVcIixcIlNxdWlkXCIsXCJTcXVpcnJlbFwiLFwiU3F1aXJyZWwgTW9ua2V5XCIsXCJTcXVpcnJlbGZpc2hcIixcIlNyaSBMYW5rYW4gRWxlcGhhbnRcIixcIlN0YWJ5aG91blwiLFwiU3RhZmZvcmRzaGlyZSBCdWxsIFRlcnJpZXJcIixcIlN0YWcgQmVldGxlXCIsXCJTdGFuZGFyZCBTY2huYXV6ZXJcIixcIlN0YXItbm9zZWQgbW9sZVwiLFwiU3RhcmZpc2hcIixcIlN0YXJnYXplciBGaXNoXCIsXCJTdGVlbGhlYWQgU2FsbW9uXCIsXCJTdGVsbGVy4oCZcyBTZWEgQ293XCIsXCJTdGljayBJbnNlY3RcIixcIlN0aWxldHRvIFNuYWtlXCIsXCJTdGluZ3JheVwiLFwiU3RvYXRcIixcIlN0b25lIENyYWJcIixcIlN0b25lY2hhdFwiLFwiU3RvbmVmaXNoXCIsXCJTdG9wbGlnaHQgTG9vc2VqYXdcIixcIlN0b3JrXCIsXCJTdHJhd2JlcnJ5IEhlcm1pdCBDcmFiXCIsXCJTdHJpcGVkIEh5ZW5hXCIsXCJTdHJpcGVkIFJvY2tldCBGcm9nXCIsXCJTdHVwZW5kZW15c1wiLFwiU3R1cmdlb25cIixcIlN0eXJhY29zYXVydXNcIixcIlN1Y2hvbWltdXNcIixcIlN1Y2tlciBGaXNoXCIsXCJTdWdhciBHbGlkZXJcIixcIlN1bGNhdGEgVG9ydG9pc2VcIixcIlN1bWF0cmFuIEVsZXBoYW50XCIsXCJTdW1hdHJhbiBPcmFuZy11dGFuXCIsXCJTdW1hdHJhbiBSaGlub2Nlcm9zXCIsXCJTdW1hdHJhbiBUaWdlclwiLFwiU3VtbWVyIFRhbmFnZXJcIixcIlN1biBCZWFyXCIsXCJTdW5iZWFtIFNuYWtlXCIsXCJTdW5zZXQgQmFsbCBQeXRob25cIixcIlN1cGVyIFBhc3RlbCBCYWxsIFB5dGhvblwiLFwiU3VwZXJzYXVydXNcIixcIlN1cGVyd29ybVwiLFwiU3VyZ2VvbmZpc2hcIixcIlN3YWkgRmlzaFwiLFwiU3dhaW5zb27igJlzIEhhd2tcIixcIlN3YWxsb3dcIixcIlN3YW5cIixcIlN3ZWRpc2ggRWxraG91bmRcIixcIlN3ZWRpc2ggTGFwcGh1bmRcIixcIlN3ZWRpc2ggVmFsbGh1bmRcIixcIlN3b3JkZmlzaFwiLFwiU3lyaWFuIEhhbXN0ZXJcIixcIlRhY28gVGVycmllclwiLFwiVGFpbGxlc3MgV2hpcCBTY29ycGlvblwiLFwiVGFpcGFuXCIsXCJUYWtpblwiLFwiVGFtYXNrYW5cIixcIlRhbmdcIixcIlRhbmdlcmluZSBMZW9wYXJkIEdlY2tvXCIsXCJUYXBhbnVsaSBPcmFuZy11dGFuXCIsXCJUYXBpclwiLFwiVGFyYW50dWxhIEhhd2tcIixcIlRhcmJvc2F1cnVzXCIsXCJUYXJwb25cIixcIlRhcnNpZXJcIixcIlRhc21hbmlhbiBEZXZpbFwiLFwiVGFzbWFuaWFuIFRpZ2VyXCIsXCJUYXNtYW5pYW4gVGlnZXIgU25ha2VcIixcIlRhd255IEZyb2dtb3V0aFwiLFwiVGF3bnkgT3dsXCIsXCJUZWFjdXAgTWluaWF0dXJlIEhvcnNlXCIsXCJUZWRkeSBCZWFyIEhhbXN0ZXJcIixcIlRlZGR5IEd1aW5lYSBQaWdcIixcIlRlZGR5IFJvb3NldmVsdCBUZXJyaWVyXCIsXCJUZWxlc2NvcGUgRmlzaFwiLFwiVGVuLUxpbmVkIEp1bmUgQmVldGxlXCIsXCJUZW5uZXNzZWUgV2Fsa2luZyBIb3JzZVwiLFwiVGVudGFjbGVkIFNuYWtlXCIsXCJUZW50ZXJmaWVsZCBUZXJyaWVyXCIsXCJUZXJtaXRlXCIsXCJUZXJyaWVyXCIsXCJUZXJyb3IgQmlyZFwiLFwiVGV0cmFcIixcIlRleGFzIEJsaW5kIFNuYWtlXCIsXCJUZXhhcyBCcm93biBUYXJhbnR1bGFcIixcIlRleGFzIENvcmFsIFNuYWtlXCIsXCJUZXhhcyBHYXJ0ZXIgU25ha2VcIixcIlRleGFzIEhlZWxlclwiLFwiVGV4YXMgSW5kaWdvIFNuYWtlXCIsXCJUZXhhcyBOaWdodCBTbmFrZVwiLFwiVGV4YXMgUmF0IFNuYWtlXCIsXCJUZXhhcyBTcGlueSBMaXphcmRcIixcIlRoYWkgUmlkZ2ViYWNrXCIsXCJUaGFsYXNzb21lZG9uXCIsXCJUaGFuYXRvc2RyYWtvblwiLFwiVGhvcm5iYWNrIFJheVwiLFwiVGhvcm55IERldmlsXCIsXCJUaHJlc2hlciBTaGFya1wiLFwiVGhydXNoXCIsXCJUaHlsYWNvbGVvXCIsXCJUaHlsYWNvbGVvIGNhcm5pZmV4XCIsXCJUaHlsYWNvc21pbHVzXCIsXCJUaWJldGFuIEZveFwiLFwiVGliZXRhbiBNYXN0aWZmXCIsXCJUaWJldGFuIFNwYW5pZWxcIixcIlRpYmV0YW4gVGVycmllclwiLFwiVGlja1wiLFwiVGlmZmFueVwiLFwiVGlnZXJcIixcIlRpZ2VyIEJlZXRsZVwiLFwiVGlnZXIgTW90aFwiLFwiVGlnZXIgUmF0dGxlc25ha2VcIixcIlRpZ2VyIFNhbGFtYW5kZXJcIixcIlRpZ2VyIFNoYXJrXCIsXCJUaWdlciBzbmFrZVwiLFwiVGltYmVyIFJhdHRsZXNuYWtlXCIsXCJUaW1vciBweXRob25cIixcIlRpcmUgVHJhY2sgRWVsXCIsXCJUaXRhbiBCZWV0bGVcIixcIlRpdGFub2JvYVwiLFwiVG9hZGZpc2hcIixcIlRvbWF0byBIb3Jud29ybVwiLFwiVG9ya2llXCIsXCJUb3JuamFrXCIsXCJUb3J0b2lzZVwiLFwiVG9zYVwiLFwiVG91Y2FuXCIsXCJUb3doZWVcIixcIlRveG9kb25cIixcIlRveSBGb3ggVGVycmllclwiLFwiVG95IFBvb2RsZVwiLFwiVHJhbnN5bHZhbmlhbiBIb3VuZFwiLFwiVHJhcGRvb3Igc3BpZGVyXCIsXCJUcmVlIEZyb2dcIixcIlRyZWUgS2FuZ2Fyb29cIixcIlRyZWUgU25ha2VcIixcIlRyZWUgc3dhbGxvd1wiLFwiVHJlZSBWaXBlclwiLFwiVHJlZWNyZWVwZXJcIixcIlRyZWVpbmcgVGVubmVzc2VlIEJyaW5kbGVcIixcIlRyZWVpbmcgV2Fsa2VyIENvb25ob3VuZFwiLFwiVHJpZ2dlcmZpc2hcIixcIlRyb29kb25cIixcIlRyb3BpY2JpcmRcIixcIlRyb3V0XCIsXCJUc2V0c2UgRmx5XCIsXCJUdWF0YXJhXCIsXCJUdWZ0ZWQgQ29xdWV0dGVcIixcIlR1ZnRlZCBUaXRtb3VzZVwiLFwiVHVsbHkgTW9uc3RlclwiLFwiVHVuYVwiLFwiVHVyYWNvXCIsXCJUdXJrZXlcIixcIlR1cmtleSBWdWx0dXJlXCIsXCJUdXJraXNoIEFuZ29yYVwiLFwiVHVydGxlc1wiLFwiVHVzb3RldXRoaXNcIixcIlR3aWcgU25ha2VcIixcIlR5bG9zYXVydXNcIixcIlR5cmFubm9zYXVydXMgUmV4XCIsXCJVYWthcmlcIixcIlVndWlzdVwiLFwiVWludGEgR3JvdW5kIFNxdWlycmVsXCIsXCJVaW50YXRoZXJpdW1cIixcIlVtYnJlbGxhYmlyZFwiLFwiVW5hdVwiLFwiVW5kZXJ3aW5nIE1vdGhcIixcIlVwbGFuZCBTYW5kcGlwZXJcIixcIlVyYWwgb3dsXCIsXCJVcmVjaGlzIHVuaWNpbmN0dXNcIixcIlVyaWFsXCIsXCJVcm9tYXN0eXhcIixcIlVydXR1IFNuYWtlXCIsXCJVdG9uYWdhblwiLFwiVmFsbGV5IEJ1bGxkb2dcIixcIlZhbXBpcmUgQmF0XCIsXCJWYW1waXJlIENyYWLCoFwiLFwiVmFtcGlyZSBTcXVpZFwiLFwiVmFxdWl0YVwiLFwiVmVnYXZpc1wiLFwiVmVsb2NpcmFwdG9yXCIsXCJWZW51cyBGbHl0cmFwXCIsXCJWZXJtaWxpb24gRmx5Y2F0Y2hlclwiLFwiVmVydmV0IE1vbmtleVwiLFwiVmljdcOxYVwiLFwiVmluZSBTbmFrZVwiLFwiVmluZWdhcm9vblwiLFwiVmlwZXJcIixcIlZpcGVyIEJvYVwiLFwiVmlwZXIgU2hhcmtcIixcIlZpcGVyZmlzaFwiLFwiVmlyZ2luIElzbGFuZHMgRHdhcmYgR2Vja29cIixcIlZpenNsYVwiLFwiVm9sZVwiLFwiVm9scGlubyBJdGFsaWFub1wiLFwiVnVsdHVyZVwiLFwiV2Fob28gRmlzaFwiLFwiV2FpbWFudVwiLFwiV2Fsa2luZyBDYXRmaXNoXCIsXCJXYWxsYWJ5XCIsXCJXYWxsZXllIEZpc2hcIixcIldhbHJ1c1wiLFwiV2FuZGVyaW5nIEFsYmF0cm9zc1wiLFwiV2FyYmxlclwiLFwiV2FydGhvZ1wiLFwiV2FzcFwiLFwiV2F0ZXIgQmVldGxlXCIsXCJXYXRlciBCdWZmYWxvXCIsXCJXYXRlciBCdWdcIixcIldhdGVyIERyYWdvblwiLFwiV2F0ZXIgVm9sZVwiLFwiV2F0dGxlZCBKYWNhbmFcIixcIldheCBNb3RoXCIsXCJXZWFzZWxcIixcIldlYXZlciBCaXJkXCIsXCJXZWltYXJhbmVyXCIsXCJXZWltYXJkb29kbGVcIixcIldlbHMgQ2F0ZmlzaFwiLFwiV2Vsc2ggQmxhY2sgQ2F0dGxlXCIsXCJXZWxzaCBDb3JnaVwiLFwiV2Vsc2ggU3ByaW5nZXIgU3BhbmllbFwiLFwiV2Vsc2ggVGVycmllclwiLFwiV2VzdCBIaWdobGFuZCBUZXJyaWVyXCIsXCJXZXN0IFNpYmVyaWFuIExhaWthXCIsXCJXZXN0ZXJuIEJsaW5kIFNuYWtlXCIsXCJXZXN0ZXJuIERpYW1vbmRiYWNrIFJhdHRsZXNuYWtlXCIsXCJXZXN0ZXJuIEdvcmlsbGFcIixcIldlc3Rlcm4gR3JlZW4gTWFtYmFcIixcIldlc3Rlcm4gSG9nbm9zZSBTbmFrZVwiLFwiV2VzdGVybiBMb3dsYW5kIEdvcmlsbGFcIixcIldlc3Rlcm4gUmF0IFNuYWtlXCIsXCJXZXN0ZXJuIFRhbmFnZXJcIixcIldlc3RpZXBvb1wiLFwiV2hhbGUgU2hhcmtcIixcIldoZWF0ZW4gVGVycmllclwiLFwiV2hpbWJyZWxcIixcIldoaW5jaGF0XCIsXCJXaGlwcGV0XCIsXCJXaGlwdGFpbCBMaXphcmRcIixcIldoaXRlIEJ1dHRlcmZseVwiLFwiV2hpdGUgQ2F0ZmlzaFwiLFwiV2hpdGUgRmVycmV0IC8gQWxiaW5vIEZlcnJldHNcIixcIldoaXRlIFJoaW5vY2Vyb3NcIixcIldoaXRlIFNoYXJrXCIsXCJXaGl0ZSBTdHVyZ2VvbsKgXCIsXCJXaGl0ZSBUaWdlclwiLFwiV2hpdGUtQ3Jvd25lZCBTcGFycm93XCIsXCJXaGl0ZS1FeWVkIFZpcmVvXCIsXCJXaGl0ZS1GYWNlZCBDYXB1Y2hpblwiLFwiV2hpdGUtc2hvdWxkZXJlZCBIb3VzZSBNb3RoXCIsXCJXaGl0ZS10YWlsIGRlZXJcIixcIldoaXRlLVRhaWxlZCBFYWdsZVwiLFwiV2hpdGV0YWlsIERlZXJcIixcIldoaXRpbmdcIixcIldob29kbGVcIixcIldob29waW5nIENyYW5lXCIsXCJXaWxkIEJvYXJcIixcIldpbGRlYmVlc3RcIixcIldpbGxvdyBXYXJibGVyXCIsXCJXaW50ZXIgTW90aFwiLFwiV2lyZSBGb3ggVGVycmllclwiLFwiV2lyZWhhaXJlZCBQb2ludGluZyBHcmlmZm9uXCIsXCJXaXJlaGFpcmVkIFZpenNsYVwiLFwiV2l3YXhpYVwiLFwiV29sZlwiLFwiV29sZiBFZWxcIixcIldvbGYgU25ha2VcIixcIldvbGYgU3BpZGVyXCIsXCJXb2xmZmlzaFwiLFwiV29sdmVyaW5lXCIsXCJXb21hIHB5dGhvblwiLFwiV29tYmF0XCIsXCJXb29kIEJpc29uXCIsXCJXb29kIEZyb2dcIixcIldvb2QgVGlja1wiLFwiV29vZCBUdXJ0bGVcIixcIldvb2Rsb3VzZVwiLFwiV29vZGxvdXNlIFNwaWRlclwiLFwiV29vZHBlY2tlclwiLFwiV29vZHJhdFwiLFwiV29vbGx5IEFwaGlkc1wiLFwiV29vbGx5IE1hbW1vdGhcIixcIldvb2xseSBNb25rZXlcIixcIldvb2xseSBSaGlub2Nlcm9zXCIsXCJXb3JtXCIsXCJXb3JtIFNuYWtlXCIsXCJXcmFzc2VcIixcIldyaXRpbmcgU3BpZGVyXCIsXCJXcm91Z2h0IElyb24gQnV0dGVyZmx5ZmlzaFwiLFwiV3J5bmVja1wiLFwiV3lvbWluZyBUb2FkXCIsXCJYLVJheSBUZXRyYVwiLFwiWGVtZVwiLFwiWGVuYWNhbnRodXNcIixcIlhlbm9jZXJhdG9wc1wiLFwiWGVub3RhcnNvc2F1cnVzXCIsXCJYZXJ1c1wiLFwiWGlhb3NhdXJ1c1wiLFwiWGlhb3RpbmdpYVwiLFwiWGlwaGFjdGludXNcIixcIlhvbG9pdHpjdWludGxpXCIsXCJZYWtcIixcIllha3V0aWFuIExhaWthXCIsXCJZYXJhcmFcIixcIlllbGxvdyBBbmFjb25kYVwiLFwiWWVsbG93IEFwaGlkc1wiLFwiWWVsbG93IEJlbGxpZWQgU2Fwc3Vja2VyXCIsXCJZZWxsb3cgQmVsbHkgQmFsbCBQeXRob25cIixcIlllbGxvdyBDb2JyYVwiLFwiWWVsbG93IENyYXp5IEFudFwiLFwiWWVsbG93IFBlcmNoXCIsXCJZZWxsb3cgU2FjIFNwaWRlclwiLFwiWWVsbG93IFNwb3R0ZWQgTGl6YXJkXCIsXCJZZWxsb3cgVGFuYWdlclwiLFwiWWVsbG93IFRhbmdcIixcIlllbGxvdy1CZWxsaWVkIFNlYSBTbmFrZVwiLFwiWWVsbG93LUV5ZWQgUGVuZ3VpblwiLFwiWWVsbG93ZmluIFR1bmFcIixcIlllbGxvd2hhbW1lclwiLFwiWWVsbG93dGhyb2F0XCIsXCJZZXRpIENyYWJcIixcIllva29oYW1hIGNoaWNrZW5cIixcIllvcmFuaWFuXCIsXCJZb3JraWUgQmljaG9uXCIsXCJZb3JraWUtcG9vXCIsXCJZb3Jrc2hpcmUgVGVycmllclwiLFwiWmVicmFcIixcIlplYnJhIEZpbmNoXCIsXCJaZWJyYSBNdXNzZWxzXCIsXCJaZWJyYSBQbGVjb1wiLFwiWmVicmEgU2hhcmtcIixcIlplYnJhIFNuYWtlXCIsXCJaZWJyYSBTcGl0dGluZyBDb2JyYVwiLFwiWmVicmEgVGFyYW50dWxhXCIsXCJaZWJ1XCIsXCJab2tvclwiLFwiWm9ua2V5XCIsXCJab3JzZVwiLFwiWnVjaG9uXCJdO2Z1bmN0aW9uIHgoZSl7cmV0dXJuIG4oUCxlKX12YXIgRD1bXCJ1cy1lYXN0LTJcIixcInVzLWVhc3QtMVwiLFwidXMtd2VzdC0xXCIsXCJ1cy13ZXN0LTJcIixcImFmLXNvdXRoLTFcIixcImFwLWVhc3QtMVwiLFwiYXAtc291dGhlYXN0LTNcIixcImFwLXNvdXRoLTFcIixcImFwLW5vcnRoZWFzdC0zXCIsXCJhcC1ub3J0aGVhc3QtMlwiLFwiYXAtc291dGhlYXN0LTFcIixcImFwLXNvdXRoZWFzdC0yXCIsXCJhcC1ub3J0aGVhc3QtMVwiLFwiY2EtY2VudHJhbC0xXCIsXCJldS1jZW50cmFsLTFcIixcImV1LXdlc3QtMVwiLFwiZXUtd2VzdC0yXCIsXCJldS1zb3V0aC0xXCIsXCJldS13ZXN0LTNcIixcImV1LW5vcnRoLTFcIixcIm1lLXNvdXRoLTFcIixcInNhLWVhc3QtMVwiLFwidXMtZ292LWVhc3QtMVwiLFwidXMtZ292LXdlc3QtMVwiXTtmdW5jdGlvbiBxKGUpe3JldHVybiBuKEQsZSl9dmFyIEY9W1wiL3Vzci9YMTFSNlwiLFwiL3N5c1wiLFwiL21udFwiLFwiL05ldHdvcmtcIixcIi91c3IvbGliZGF0YVwiLFwiL0xpYnJhcnlcIixcIi9zYmluXCIsXCIvdG1wXCIsXCIvdXNyL2xvY2FsL3NyY1wiLFwiL2Jvb3QvZGVmYXVsdHNcIixcIi9ldGMvbWFpbFwiLFwiL2JpblwiLFwiL2Jvb3RcIixcIi92YXIvdG1wXCIsXCIvZXRjL25hbWVkYlwiLFwiL3ByaXZhdGUvdmFyXCIsXCIvdmFyL21haWxcIixcIi9vcHRcIixcIi9vcHQvbGliXCIsXCIvcHJvY1wiLFwiL3Vzci9pbmNsdWRlXCIsXCIvdXNyL3NyY1wiLFwiL2hvbWUvdXNlclwiLFwiL3NlbGludXhcIixcIi91c3IvbGliZXhlY1wiLFwiL2RldlwiLFwiL2V0Yy9kZWZhdWx0c1wiLFwiL3VzclwiLFwiL3Vzci9zaGFyZVwiLFwiL3Jlc2N1ZVwiLFwiL3ByaXZhdGVcIixcIi91c3Ivc2JpblwiLFwiL2hvbWUvdXNlci9kaXJcIixcIi9Vc2Vyc1wiLFwiL3ZhclwiLFwiL2xvc3QrZm91bmRcIixcIi91c3IvYmluXCIsXCIvZXRjL3BwcFwiLFwiL3Zhci9zcG9vbFwiLFwiL3Zhci95cFwiLFwiL3Vzci9wb3J0c1wiLFwiL3ByaXZhdGUvdG1wXCIsXCIvdXNyL29ialwiLFwiL2hvbWVcIixcIi9tZWRpYVwiXTtmdW5jdGlvbiBHKGUpe3JldHVybiBuKEYsZSl9dmFyIEw9W1wibWFya2V0c1wiLFwic29saWRfYmFja2luZ19zdHJhdGVnaXN0XCIsXCJncmFuaXRlXCIsXCJzeW50aGVzaXppbmdfZXhlY3V0aXZlX3NwZWNpYWxpc3RcIixcImVjdWFkb3JcIixcImNhbGN1bGF0ZV9pc2xhbmRcIixcIm5ldmFkYVwiLFwiZ2xvdmVzX21hbmF0X2RlbGF3YXJlXCIsXCJsb2FuX3NhaW50XCIsXCJjbGllbnRfc2VydmVyXCIsXCJrcm9vblwiLFwiaW52ZXN0b3JcIixcImR5bmFtaWNfcG9ydGFsXCIsXCJwaXhlbFwiLFwiY29uY3JldGVcIixcIm51ZXZvX2F2b25fbWFya2V0XCIsXCJwcm9kdWN0aXplX3dpdGhkcmF3YWxfb3ZlcnJpZGVcIixcIm9wZXJhdGl2ZV9zdW1fYnlwYXNzaW5nXCIsXCJ2aXNpb25hcnlfb25saW5lX2FjY291bnRcIixcImJhbGJvYVwiLFwic3FsX2Nvbm5lY3RpbmdcIixcImluY3JlZGlibGVfYXp1cmVfaW50ZXJmYWNlXCIsXCJvcGVuX3NvdXJjZV9uZXRoZXJsYW5kc19jb3B5aW5nXCIsXCJoYWNrX2hhcmRfdGhhaWxhbmRcIixcImJlcmtzaGlyZV9jYXJfbWljcm9uZXNpYVwiLFwicG91bmRfcHJvZ3JhbV9oYW5kbWFkZVwiLFwiaW1wbGVtZW50X25ldmFkYVwiLFwiaG9tZVwiLFwiYWdwXCIsXCJiZXJrc2hpcmVfaW52ZXN0bWVudF90YXN0eVwiLFwibGljZW5zZWRfcGlua19mdW5kYW1lbnRhbFwiLFwiY29uY3JldGVfZW5jb21wYXNzaW5nXCIsXCJob2xpc3RpY1wiLFwiYXBwbGljYXRpb25fc2FpbnRfaW5mcmFzdHJ1Y3R1cmVnXCIsXCJ2aXNpb25hcnlcIixcInRvd2Vsc192aXNpb25hcnlfZXJnb25vbWljXCIsXCJzY2FsYWJsZV9qZXdlbGVyeV9zdWRhblwiLFwicmV2b2x1dGlvbmFyeVwiLFwiZ2xvYmFsX2ZyZXNoX29wZW5fc291cmNlXCIsXCJwbmdfY2FwYWNpdG9yX3F1YW50aWZ5XCIsXCJhdXRvbW90aXZlXCIsXCJhY3Rpb25faXRlbXNcIixcInNvYXBfdW5icmFuZGVkXCIsXCJtdXNpY19wYXltZW50X3BheW1lbnRcIixcImNoaXBzX3RhaXdhblwiLFwicGF5bWVudFwiLFwiaW50ZWxsaWdlbnRfY29ubmVjdGluZ19hY2NvdW50XCIsXCJjYXBhY2l0b3JfYnlwYXNzXCIsXCJ0b29sc192YXR1XCIsXCJpbnRlcmZhY2VcIixcImVfbWFya2V0c1wiLFwidHJhbnNtaXRfYm9yZGVyc19pbnB1dFwiLFwiaW52b2ljZVwiLFwiYmFsbF9vcmFuZ2VcIixcIm1vcnBoX21hZ25ldGljXCIsXCJ0ZWFtX29yaWVudGVkX2l2b3J5XCIsXCJjb25jcmV0ZV9jb21wcmVzc1wiLFwibWFya2V0X2hhY2tcIixcIndpcmVsZXNzX2ZyaWN0aW9ubGVzc19jaGlja2VuXCIsXCJwbmdcIixcInR1cnF1b2lzZV90ZXJyaXRvcmllc19iZXJrc2hpcmVcIixcImJhY2tfZW5kXCIsXCJ3aXRoZHJhd2FsX3BhcmFkaWdtX21hdHJpeFwiLFwicGF5bWVudF9jb250ZXh0X3NlbnNpdGl2ZV93aXNjb25zaW5cIixcInVuYnJhbmRlZF9qc29uX3dvb2RlblwiLFwiaW52b2ljZV9zbGVla19jdXN0b21pemVkXCIsXCJzaWx2ZXJfY29weWluZ1wiLFwibGljZW5zZWRcIixcInBsdWdfYW5kX3BsYXlcIixcImN1bHRpdmF0ZV9vcmNoZXN0cmF0b3JcIixcInF1YW50aWZ5aW5nX3F1YW50aWZ5X25vcndheVwiLFwiYWNjb3VudF9ib3JkZXJzX2dvdXJkZVwiLFwicXVhbnRpZnlnXCIsXCJvcGVuX2FyY2hpdGVjdGVkX2NvbnRlbnRfYmFzZWRfcHJvdG9jb2xcIixcImFkbWluaXN0cmF0b3JcIixcInN5bnRoZXNpemluZ1wiLFwibWV0cmljc1wiLFwid2hpdGVfd2lyZWxlc3NfZ2FyZGVuXCIsXCJiZXJrc2hpcmVnXCIsXCJuZXBhbF92aWV3X3Byb3RvY29sXCIsXCJjYWxjdWxhdGluZ19zaGlydFwiLFwiZnVjaHNpYV9yZWludGVybWVkaWF0ZV9maXNoXCIsXCJleHRlbmRcIixcIm1hdHJpeFwiLFwicGVzb1wiLFwic3VwZXJzdHJ1Y3R1cmVfdmFsdWVfYWRkZWRfcmVkdW5kYW50XCIsXCJuYXRpb25hbF93b3JsZF9jbGFzc3ZcIixcInllbGxvd3ZcIixcIm1vcmF0b3JpdW1cIixcInZpZXdzXCIsXCJtZXRhbF9kcml2ZV9zcG9ydHNcIixcInBvcnRzX3Bpbmtfb3ZlcnJpZGluZ1wiLFwiYm9yZGVyc1wiLFwic3VwcGx5X2NoYWluc19jbGllbnRfZHJpdmVuX2R5bmFtaWNcIixcInNoaXJ0X21vcmF0b3JpdW1fcGxhY2VcIixcImNhbGN1bGF0ZVwiLFwicHJvdG9jb2xfZW5naW5lZXJfYXplcmJhaWphblwiLFwiY2hhaXJfcnNzXCIsXCJiMmJfYmVsYXJ1c3NpYW5cIixcImZpamlcIl07ZnVuY3Rpb24gUihlKXt2YXIgYTtjb25zdCB0PW51bGwhPShhPW51bGw9PWU/dm9pZCAwOmUuZXh0ZW5zaW9uKT9hOlwicGRmXCI7cmV0dXJuIG4oKCgpPT5gJHtyKEwpfS4ke3R9YCksZSl9Y29uc3QgSD1bXCJhd3NcIixcImF3cy1jblwiLFwiYXdzLXVzLWdvdlwiXSxFPVtcInMzXCIsXCJzcXNcIixcImxhbWJkYVwiLFwiaWFtXCJdLFc9e3MzOigpPT5gOjoke0coKX0vKmAsaWFtOigpPT5gOiR7aCgpfToke24oW1widXNlclwiLFwiZ3JvdXBcIl0pfS8qYCxzcXM6KCk9PmAke3EoKX06JHtoKCl9OnF1ZXVlJHtTKHttaW46MSxtYXg6MTB9KX1gLGxhbWJkYTooKT0+YCR7cSgpfToke2goKX06ZnVuY3Rpb246JHtSKCkucmVwbGFjZSgvXy9nLFwiLVwiKX1gfTtmdW5jdGlvbiBOKGUpe3JldHVybiBuKCgoKT0+e2NvbnN0IGU9bihIKSxhPW4oRSk7cmV0dXJuYGFybjoke2V9OiR7YX06JHtXW2FdKCl9YH0pLGUpfWZ1bmN0aW9uIHooZSl7dmFyIGE7Y29uc3QgdD1udWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLnNpemUpP2E6MTAwO3JldHVybiBuKCgoKT0+YGh0dHBzOi8vaS5wcmF2YXRhci5jYy8ke3R9YCksZSl9dmFyIEs9W1wiRUMyXCIsXCJSRFNcIixcIlMzXCIsXCJMYW1iZGFcIixcIkNsb3VkRnJvbnRcIixcIkdsYWNpZXJcIixcIlNOU1wiLFwiU1FTXCIsXCJFQlNcIixcIlZQQ1wiLFwiS2luZXNpc1wiLFwiS2luZXNpcyBEYXRhIEZpcmVob3NlXCIsXCJEeW5hbW8gREJcIixcIkVsYXN0aUNhY2hlXCIsXCJDbG91ZFdhdGNoXCIsXCJDb2duaXRvXCIsXCJBUEkgR2F0ZXdheVwiLFwiQXBwU3luY1wiLFwiQXRoZW5hXCJdO2Z1bmN0aW9uIE8oZSl7cmV0dXJuIG4oSyxlKX1mdW5jdGlvbiBKKGUpe3JldHVybiBuKCgoKT0+W0Moe2xlbmd0aDo4fSksQyh7bGVuZ3RoOjR9KSxDKHtsZW5ndGg6NH0pLEMoe2xlbmd0aDo0fSksQyh7bGVuZ3RoOjEyfSldLm1hcCgoZT0+ZS5qb2luKFwiXCIpKSkuam9pbihcIi1cIikpLGUpfXZhciBWPVtcIkFyaXpvbmEgRGlhbW9uZGJhY2tzXCIsXCJBdGxhbnRhIEJyYXZlc1wiLFwiQmFsdGltb3JlIE9yaW9sZXNcIixcIkJvc3RvbiBSZWQgU294XCIsXCJDaGljYWdvIEN1YnNcIixcIkNoaWNhZ28gV2hpdGUgU294XCIsXCJDaW5jaW5uYXRpIFJlZHNcIixcIkNsZXZlbGFuZCBHdWFyZGlhbnNcIixcIkNvbG9yYWRvIFJvY2tpZXNcIixcIkRldHJvaXQgVGlnZXJzXCIsXCJIb3VzdG9uIEFzdHJvc1wiLFwiS2Fuc2FzIENpdHkgUm95YWxzXCIsXCJMb3MgQW5nZWxlcyBBbmdlbHNcIixcIkxvcyBBbmdlbGVzIERvZGdlcnNcIixcIk1pYW1pIE1hcmxpbnNcIixcIk1pbHdhdWtlZSBCcmV3ZXJzXCIsXCJNaW5uZXNvdGEgVHdpbnNcIixcIk5ldyBZb3JrIE1ldHNcIixcIk5ldyBZb3JrIFlhbmtlZXNcIixcIk9ha2xhbmQgQXRobGV0aWNzXCIsXCJQaGlsYWRlbHBoaWEgUGhpbGxpZXNcIixcIlBpdHRzYnVyZ2ggUGlyYXRlc1wiLFwiU2FuIERpZWdvIFBhZHJlc1wiLFwiU2FuIEZyYW5jaXNjbyBHaWFudHNcIixcIlNlYXR0bGUgTWFyaW5lcnNcIixcIlN0LiBMb3VpcyBDYXJkaW5hbHNcIixcIlRhbXBhIEJheSBSYXlzXCIsXCJUZXhhcyBSYW5nZXJzXCIsXCJUb3JvbnRvIEJsdWUgSmF5c1wiLFwiV2FzaGluZ3RvbiBOYXRpb25hbHNcIl07ZnVuY3Rpb24gaihlKXtyZXR1cm4gbihWLGUpfXZhciBVPVtcIkF0bGFudGEgSGF3a3NcIixcIkJvc3RvbiBDZWx0aWNzXCIsXCJCcm9va2x5biBOZXRzXCIsXCJDaGFybG90dGUgSG9ybmV0c1wiLFwiQ2hpY2FnbyBCdWxsc1wiLFwiQ2xldmVsYW5kIENhdmFsaWVyc1wiLFwiRGFsbGFzIE1hdmVyaWNrc1wiLFwiRGVudmVyIE51Z2dldHNcIixcIkRldHJvaXQgUGlzdG9uc1wiLFwiR29sZGVuIFN0YXRlIFdhcnJpb3JzXCIsXCJIb3VzdG9uIFJvY2tldHNcIixcIkluZGlhbmEgUGFjZXJzXCIsXCJMQSBDbGlwcGVyc1wiLFwiTG9zIEFuZ2VsZXMgTGFrZXJzXCIsXCJNZW1waGlzIEdyaXp6bGllc1wiLFwiTWlhbWkgSGVhdFwiLFwiTWlsd2F1a2VlIEJ1Y2tzXCIsXCJNaW5uZXNvdGEgVGltYmVyd29sdmVzXCIsXCJOZXcgT3JsZWFucyBQZWxpY2Fuc1wiLFwiTmV3IFlvcmsgS25pY2tzXCIsXCJPa2xhaG9tYSBDaXR5IFRodW5kZXJcIixcIk9ybGFuZG8gTWFnaWNcIixcIlBoaWxhZGVscGhpYSA3NmVyc1wiLFwiUGhvZW5peCBTdW5zXCIsXCJQb3J0bGFuZCBUcmFpbCBCbGF6ZXJzXCIsXCJTYWNyYW1lbnRvIEtpbmdzXCIsXCJTYW4gQW50b25pbyBTcHVyc1wiLFwiVG9yb250byBSYXB0b3JzXCIsXCJVdGFoIEphenpcIixcIldhc2hpbmd0b24gV2l6YXJkc1wiXTtmdW5jdGlvbiBfKGUpe3JldHVybiBuKFUsZSl9dmFyIFk9W1wiU3BlY3RhY2xlZCBiZWFyXCIsXCJCcm93biBiZWFyXCIsXCJBc2lhbiBibGFjayBiZWFyXCIsXCJTdW4gYmVhclwiLFwiUG9sYXIgYmVhclwiLFwiR2lhbnQgcGFuZGFcIixcIlNsb3RoIGJlYXJcIixcIkFtZXJpY2FuIGJsYWNrIGJlYXJcIl07ZnVuY3Rpb24gUShlKXtyZXR1cm4gbihZLGUpfWZ1bmN0aW9uICQoZSl7Y29uc3QgYT1uZXcgRGF0ZShlLmZyb20pLmdldFRpbWUoKSx0PW5ldyBEYXRlKGUudG8pLmdldFRpbWUoKTtpZihhPj10KXRocm93IG5ldyBFcnJvcihcIkZyb20gbXVzdCBiZSBiZWZvcmUgdG9cIik7cmV0dXJuIG4oKCgpPT5uZXcgRGF0ZShTKHttaW46YSxtYXg6dH0pKSksZSl9dmFyIFg9W1wiTVNcIixcIlRXXCIsXCJMUlwiLFwiSFVcIixcIlBLXCIsXCJHUVwiLFwiR0dcIixcIlNaXCIsXCJNUVwiLFwiQVNcIixcIldTXCIsXCJCSlwiLFwiTlJcIixcIkZKXCIsXCJaTVwiLFwiQ1JcIixcIkJPXCIsXCJBV1wiLFwiQUlcIixcIkdXXCIsXCJQRlwiLFwiTU9cIixcIlBFXCIsXCJVWlwiLFwiSk1cIixcIktIXCIsXCJSV1wiLFwiR05cIixcIklOXCIsXCJNUlwiLFwiTUNcIixcIktHXCIsXCJTQVwiLFwiU1ZcIixcIlRaXCIsXCJNRVwiLFwiQkJcIixcIklFXCIsXCJMWVwiLFwiVE1cIixcIlNOXCIsXCJNQVwiLFwiQk5cIixcIk1MXCIsXCJMVlwiLFwiU01cIixcIkhUXCIsXCJORlwiLFwiVERcIixcIlVBXCIsXCJGTVwiLFwiS01cIixcIkNOXCIsXCJHRlwiLFwiTVRcIixcIlJPXCIsXCJQQVwiLFwiRklcIixcIkJHXCIsXCJLWlwiLFwiUE5cIixcIkJMXCIsXCJOT1wiLFwiSU1cIixcIkFRXCIsXCJNVlwiLFwiTEFcIixcIk5VXCIsXCJMU1wiLFwiQ1dcIixcIkNGXCIsXCJHVFwiLFwiVExcIixcIlJVXCIsXCJCUVwiLFwiR0JcIixcIkJWXCIsXCJUQ1wiLFwiRUNcIixcIk5HXCIsXCJBRFwiLFwiUkVcIixcIlNMXCIsXCJDTFwiLFwiRVJcIl07ZnVuY3Rpb24gWihlKXtyZXR1cm4gbihYLGUpfWZ1bmN0aW9uIGVlKGUpe3ZhciBhLHQsbyxpO2lmKG51bGwhPWUmJmUuYmFua0NvZGUmJjQhPT0obnVsbD09ZXx8bnVsbD09KGE9ZS5iYW5rQ29kZSk/dm9pZCAwOmEubGVuZ3RoKSl0aHJvdyBuZXcgRXJyb3IoXCJiYW5rIGNvZGUgc2hvdWxkIGJlIHZhbGlkIDQgbGV0dGVycy4gRm9yIGV4YW1wbGUgREVVVFwiKTtpZihudWxsIT1lJiZlLmNvdW50cnlDb2RlJiYyIT09KG51bGw9PWV8fG51bGw9PSh0PWUuY291bnRyeUNvZGUpP3ZvaWQgMDp0Lmxlbmd0aCkpdGhyb3cgbmV3IEVycm9yKFwiY291bnRyeSBjb2RlIHNob3VsZCBiZSB2YWxpZCBJU08gMzE2Ni0xIGFscGhhLTIgdHdvLWxldHRlciBjb3VudHJ5IGNvZGUsIGZvciBleGFtcGxlOiBERVwiKTtpZihudWxsIT1lJiZlLmxvY2F0aW9uQ29kZSYmMiE9PShudWxsPT1lfHxudWxsPT0obz1lLmxvY2F0aW9uQ29kZSk/dm9pZCAwOm8ubGVuZ3RoKSl0aHJvdyBuZXcgRXJyb3IoXCJsb2NhdGlvbiBjb2RlIHNob3VsZCBiZSB2YWxpZCAyIGNoYXJhY3RlcnMsIGxpa2UgRkYgb3IgTU1cIik7aWYobnVsbCE9ZSYmZS5icmFuY2hDb2RlJiYzIT09KG51bGw9PWV8fG51bGw9PShpPWUuYnJhbmNoQ29kZSk/dm9pZCAwOmkubGVuZ3RoKSl0aHJvdyBuZXcgRXJyb3IoXCJicmFuY2ggY29kZSBzaG91bGQgYmUgdmFsaWQgMyBhbHBoYSBudW1iZXJpYyBjaGFyYWN0ZXJzLCBsaWtlIFhYWCBvciAyNTBcIik7cmV0dXJuIG4oKCgpPT57dmFyIGEsdCxvLGk7Y29uc3Qgbj1udWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLmJhbmtDb2RlKT9hOlwiIyMjI1wiLnJlcGxhY2UoLyMvZywoKCk9PmIoKSkpLHI9bnVsbCE9KHQ9bnVsbD09ZT92b2lkIDA6ZS5jb3VudHJ5Q29kZSk/dDpaKCkscz1udWxsIT0obz1udWxsPT1lP3ZvaWQgMDplLmxvY2F0aW9uQ29kZSk/bzpcIiMjXCIucmVwbGFjZSgvIy9nLCgoKT0+YigpKSksbD1udWxsIT0oaT1udWxsPT1lP3ZvaWQgMDplLmJyYW5jaENvZGUpP2k6XCIjIyNcIi5yZXBsYWNlKC8jL2csKCgpPT5DKCkudG9TdHJpbmcoKSkpO3JldHVybmAke259JHtyfSR7c30ke251bGwhPWUmJmUuZmlsbEJyYW5jaENvZGU/XCJYWFhcIjpsfWAudG9VcHBlckNhc2UoKX0pLGUpfWZ1bmN0aW9uIGFlKGUpe2NvbnN0IGE9T2JqZWN0LmFzc2lnbih7fSxlLHtsZW5ndGg6dm9pZCAwfSk7cmV0dXJuIG4oKCgpPT5lZShhKS50b1N0cmluZygpKSxlKX1mdW5jdGlvbiB0ZShlKXtyZXR1cm4gbigoKCk9Pntjb25zdCBlPXMoe21pbjowLG1heDpOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixmcmFjdGlvbjowfSk7cmV0dXJuIEJpZ0ludChlLnRvU3RyaW5nKDIpKS50b1N0cmluZygpfSksZSl9dmFyIG9lPVtcIlJlZC1uZWNrZWQgUGhhbGFyb3BlXCIsXCJDbGlmZiBTd2FsbG93XCIsXCJMb2dnZXJoZWFkIEtpbmdiaXJkXCIsXCJBenRlYyBUaHJ1c2hcIixcIkhvb2RlZCBXYXJibGVyXCIsXCJDb21tb24gUG9jaGFyZFwiLFwiU2NvdHRzIE9yaW9sZVwiLFwiQmxhY2stYnJvd2VkIEFsYmF0cm9zc1wiLFwiTW9uayBQYXJha2VldFwiLFwiTWFnbmlmaWNlbnQgSHVtbWluZ2JpcmRcIixcIkJyb2FkLWJpbGxlZCBTYW5kcGlwZXJcIixcIkJ1c2h0aXRcIixcIk1leGljYW4gSmF5XCIsXCJIb29kZWQgTWVyZ2Fuc2VyXCIsXCJXb29kIFN0b3JrXCIsXCJSb3NzcyBHdWxsXCIsXCJHcmVlbiBTYW5kcGlwZXJcIixcIldob29waW5nIENyYW5lXCJdO2Z1bmN0aW9uIGllKGUpe3JldHVybiBuKG9lLGUpfWZ1bmN0aW9uIG5lKGUpe3JldHVybiBuKCgoKT0+Zih7c2l6ZTozM30pKSxlKX12YXIgcmU9W3t0aXRsZTpcIlRoZSBBZHZlbnR1cmVzIG9mIEF1Z2llIE1hcmNoXCIsYXV0aG9yOlwiU2F1bCBCZWxsb3dcIixjYXRlZ29yeTpcIkNvbWVkeVwifSx7dGl0bGU6XCJUaGUgVW5jb21tb24gUmVhZGVyXCIsYXV0aG9yOlwiQWxhbiBCZW5uZXR0XCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiRG9uIFF1aXhvdGVcIixhdXRob3I6XCJNaWd1ZWwgZGUgQ2VydmFudGVzXCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiVG9tIEpvbmVzXCIsYXV0aG9yOlwiSGVucnkgRmllbGRpbmdcIixjYXRlZ29yeTpcIkNvbWVkeVwifSx7dGl0bGU6XCJEZWFkIFNvdWxzXCIsYXV0aG9yOlwiTmlrb2xhaSBHb2dvbFwiLGNhdGVnb3J5OlwiQ29tZWR5XCJ9LHt0aXRsZTpcIlRoZSBXaW5kIGluIHRoZSBXaWxsb3dzXCIsYXV0aG9yOlwiS2VubmV0aCBHcmFoYW1lXCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiT3VyIE1hbiBpbiBIYXZhbmFcIixhdXRob3I6XCJHcmFoYW0gR3JlZW5lXCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiQ2F0Y2gtMjJcIixhdXRob3I6XCJKb3NlcGggSGVsbGVyXCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiSGlnaCBGaWRlbGl0eVwiLGF1dGhvcjpcIk5pY2sgSG9ybmJ5XCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiVGhyZWUgTWVuIGluIGEgQm9hdFwiLGF1dGhvcjpcIkplcm9tZSBLIEplcm9tZVwiLGNhdGVnb3J5OlwiQ29tZWR5XCJ9LHt0aXRsZTpcIkZpbm5lZ2FucyBXYWtlXCIsYXV0aG9yOlwiSmFtZXMgSm95Y2VcIixjYXRlZ29yeTpcIkNvbWVkeVwifSx7dGl0bGU6XCJQdWNrb29uXCIsYXV0aG9yOlwiU3Bpa2UgTWlsbGlnYW5cIixjYXRlZ29yeTpcIkNvbWVkeVwifSx7dGl0bGU6XCJQb3J0bm954oCZcyBDb21wbGFpbnRcIixhdXRob3I6XCJQaGlsaXAgUm90aFwiLGNhdGVnb3J5OlwiQ29tZWR5XCJ9LHt0aXRsZTpcIkdyZWF0IEFwZXNcIixhdXRob3I6XCJXaWxsIFNlbGZcIixjYXRlZ29yeTpcIkNvbWVkeVwifSx7dGl0bGU6XCJUaGUgTGlmZSBhbmQgT3BpbmlvbnMgb2YgVHJpc3RyYW0gU2hhbmR5LCBHZW50bGVtYW5cIixhdXRob3I6XCJMYXVyZW5jZSBTdGVybmVcIixjYXRlZ29yeTpcIkNvbWVkeVwifSx7dGl0bGU6XCJBIENvbmZlZGVyYWN5IG9mIER1bmNlc1wiLGF1dGhvcjpcIkpvaG4gS2VubmVkeSBUb29sZVwiLGNhdGVnb3J5OlwiQ29tZWR5XCJ9LHt0aXRsZTpcIkJyZWFrZmFzdCBvZiBDaGFtcGlvbnNcIixhdXRob3I6XCJLdXJ0IFZvbm5lZ3V0XCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiSW5maW5pdGUgSmVzdFwiLGF1dGhvcjpcIkRhdmlkIEZvc3RlciBXYWxsYWNlXCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiTW9sZXN3b3J0aFwiLGF1dGhvcjpcIkdlb2ZmcmV5IFdpbGxhbnMgYW5kIFJvbmFsZCBTZWFybGVcIixjYXRlZ29yeTpcIkNvbWVkeVwifSx7dGl0bGU6XCJUaGFuayBZb3UgSmVldmVzXCIsYXV0aG9yOlwiUEcgV29kZWhvdXNlXCIsY2F0ZWdvcnk6XCJDb21lZHlcIn0se3RpdGxlOlwiVGhlIFRoaXJ0eS1OaW5lIFN0ZXBzXCIsYXV0aG9yOlwiSm9obiBCdWNoYW5cIixjYXRlZ29yeTpcIkNyaW1lXCJ9LHt0aXRsZTpcIlRoZSBCaWcgU2xlZXBcIixhdXRob3I6XCJSYXltb25kIENoYW5kbGVyXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJBbmQgVGhlbiBUaGVyZSBXZXJlIE5vbmVcIixhdXRob3I6XCJBZ2F0aGEgQ2hyaXN0aWVcIixjYXRlZ29yeTpcIkNyaW1lXCJ9LHt0aXRsZTpcIlRoZSBIb3VuZCBvZiB0aGUgQmFza2VydmlsbGVzXCIsYXV0aG9yOlwiQXJ0aHVyIENvbmFuIERveWxlXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJUaGUgTWFuY2h1cmlhbiBDYW5kaWRhdGVcIixhdXRob3I6XCJSaWNoYXJkIENvbmRvblwiLGNhdGVnb3J5OlwiQ3JpbWVcIn0se3RpdGxlOlwiVGhlIEFuZHJvbWVkYSBTdHJhaW5cIixhdXRob3I6XCJNaWNoYWVsIENyaWNodG9uXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJUaGUgSXBjcmVzcyBGaWxlXCIsYXV0aG9yOlwiTGVuIERlaWdodG9uXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJDcmltZSBhbmQgUHVuaXNobWVudFwiLGF1dGhvcjpcIkZ5b2RvciBEb3N0b2V2c2t5XCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJUaGUgQ291bnQgb2YgTW9udGUgQ3Jpc3RvXCIsYXV0aG9yOlwiQWxleGFuZHJlIER1bWFzXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJUaGUgRGF5IG9mIHRoZSBKYWNrYWxcIixhdXRob3I6XCJGcmVkZXJpY2sgRm9yc3l0aFwiLGNhdGVnb3J5OlwiQ3JpbWVcIn0se3RpdGxlOlwiVGhlIFRoaXJkIE1hblwiLGF1dGhvcjpcIkdyYWhhbSBHcmVlbmVcIixjYXRlZ29yeTpcIkNyaW1lXCJ9LHt0aXRsZTpcIkEgVGltZSB0byBLaWxsXCIsYXV0aG9yOlwiSm9obiBHcmlzaGFtXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJUaGUgVGhpbiBNYW5cIixhdXRob3I6XCJEYXNoaWVsbCBIYW1tZXR0XCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJUaGUgVGFsZW50ZWQgTXIgUmlwbGV5XCIsYXV0aG9yOlwiUGF0cmljaWEgSGlnaHNtaXRoXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJUaW5rZXIsIFRhaWxvciwgU29sZGllciwgU3B5XCIsYXV0aG9yOlwiSm9obiBsZSBDYXJyZVwiLGNhdGVnb3J5OlwiQ3JpbWVcIn0se3RpdGxlOlwiVG8gS2lsbCBhIE1vY2tpbmdiaXJkXCIsYXV0aG9yOlwiSGFycGVyIExlZVwiLGNhdGVnb3J5OlwiQ3JpbWVcIn0se3RpdGxlOlwiTm8gQ291bnRyeSBmb3IgT2xkIE1lblwiLGF1dGhvcjpcIkNvcm1hYyBNY0NhcnRoeVwiLGNhdGVnb3J5OlwiQ3JpbWVcIn0se3RpdGxlOlwiVGhlIEdvZGZhdGhlclwiLGF1dGhvcjpcIk1hcmlvIFB1em9cIixjYXRlZ29yeTpcIkNyaW1lXCJ9LHt0aXRsZTpcIlRoZSBDcnlpbmcgb2YgTG90IDQ5XCIsYXV0aG9yOlwiVGhvbWFzIFB5bmNob25cIixjYXRlZ29yeTpcIkNyaW1lXCJ9LHt0aXRsZTpcIkp1ZGdtZW50IGluIFN0b25lXCIsYXV0aG9yOlwiUnV0aCBSZW5kZWxsXCIsY2F0ZWdvcnk6XCJDcmltZVwifSx7dGl0bGU6XCJMaXR0bGUgV29tZW5cIixhdXRob3I6XCJMb3Vpc2EgTWF5IEFsY290dFwiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIkxlIFBlcmUgR29yaW90XCIsYXV0aG9yOlwiSG9ub3JlIGRlIEJhbHphY1wiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlRoZSBPdXRzaWRlclwiLGF1dGhvcjpcIkFsYmVydCBDYW11c1wiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIkdyZWF0IEV4cGVjdGF0aW9uc1wiLGF1dGhvcjpcIkNoYXJsZXMgRGlja2Vuc1wiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlRoZSBTb3VuZCBhbmQgdGhlIEZ1cnlcIixhdXRob3I6XCJXaWxsaWFtIEZhdWxrbmVyXCIsY2F0ZWdvcnk6XCJGYW1pbHkgYW5kIFNlbGZcIn0se3RpdGxlOlwiSG93YXJkcyBFbmRcIixhdXRob3I6XCJFTSBGb3JzdGVyXCIsY2F0ZWdvcnk6XCJGYW1pbHkgYW5kIFNlbGZcIn0se3RpdGxlOlwiVGhlIFBvd2VyIGFuZCB0aGUgR2xvcnlcIixhdXRob3I6XCJHcmFoYW0gR3JlZW5lXCIsY2F0ZWdvcnk6XCJGYW1pbHkgYW5kIFNlbGZcIn0se3RpdGxlOlwiU3RlcHBlbndvbGZcIixhdXRob3I6XCJIZXJtYW4gSGVzc2VcIixjYXRlZ29yeTpcIkZhbWlseSBhbmQgU2VsZlwifSx7dGl0bGU6XCJBIFByYXllciBmb3IgT3dlbiBNZWFueVwiLGF1dGhvcjpcIkpvaG4gSXJ2aW5nXCIsY2F0ZWdvcnk6XCJGYW1pbHkgYW5kIFNlbGZcIn0se3RpdGxlOlwiVWx5c3Nlc1wiLGF1dGhvcjpcIkphbWVzIEpveWNlXCIsY2F0ZWdvcnk6XCJGYW1pbHkgYW5kIFNlbGZcIn0se3RpdGxlOlwiT25lIEZsZXcgT3ZlciB0aGUgQ3Vja29v4oCZcyBOZXN0XCIsYXV0aG9yOlwiS2VuIEtlc2V5XCIsY2F0ZWdvcnk6XCJGYW1pbHkgYW5kIFNlbGZcIn0se3RpdGxlOlwiSG93IEdyZWVuIHdhcyBNeSBWYWxsZXlcIixhdXRob3I6XCJSaWNoYXJkIExsZXdlbGx5blwiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlRoZSBCbHVlc3QgRXllXCIsYXV0aG9yOlwiVG9uaSBNb3JyaXNvblwiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIldobyBEbyBZb3UgVGhpbmsgWW91IEFyZT9cIixhdXRob3I6XCJBbGljZSBNdW5yb1wiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlRoZSBCZWxsIEphclwiLGF1dGhvcjpcIlN5bHZpYSBQbGF0aFwiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlJlbWVtYnJhbmNlIG9mIFRoaW5ncyBQYXN0XCIsYXV0aG9yOlwiTWFyY2VsIFByb3VzdFwiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlRoZSBDYXRjaGVyIGluIHRoZSBSeWVcIixhdXRob3I6XCJKRCBTYWxpbmdlclwiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlRoZSBDb2xvciBQdXJwbGVcIixhdXRob3I6XCJBbGljZSBXYWxrZXJcIixjYXRlZ29yeTpcIkZhbWlseSBhbmQgU2VsZlwifSx7dGl0bGU6XCJKaW1teSBDb3JyaWdhbiwgVGhlIFNtYXJlc3QgS2lkIG9uIEVhcnRoXCIsYXV0aG9yOlwiQ2hyaXMgV2FyZVwiLGNhdGVnb3J5OlwiRmFtaWx5IGFuZCBTZWxmXCJ9LHt0aXRsZTpcIlRoZSBQaWN0dXJlIG9mIERvcmlhbiBHcmF5XCIsYXV0aG9yOlwiT3NjYXIgV2lsZGVcIixjYXRlZ29yeTpcIkZhbWlseSBhbmQgU2VsZlwifSx7dGl0bGU6XCJQcmlkZSBhbmQgUHJlanVkaWNlXCIsYXV0aG9yOlwiSmFuZSBBdXN0ZW5cIixjYXRlZ29yeTpcIkxvdmVcIn0se3RpdGxlOlwiSmFuZSBFeXJlXCIsYXV0aG9yOlwiQ2hhcmxvdHRlIEJyb250ZVwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJXdXRoZXJpbmcgSGVpZ2h0c1wiLGF1dGhvcjpcIkVtaWx5IEJyb250ZVwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJCcmVha2Zhc3QgYXQgVGlmZmFueeKAmXNcIixhdXRob3I6XCJUcnVtYW4gQ2Fwb3RlXCIsY2F0ZWdvcnk6XCJMb3ZlXCJ9LHt0aXRsZTpcIlJlYmVjY2FcIixhdXRob3I6XCJEYXBobmUgZHUgTWF1cmllclwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJEYW5pZWwgRGVyb25kYVwiLGF1dGhvcjpcIkdlb3JnZSBFbGlvdFwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJUaGUgR3JlYXQgR2F0c2J5XCIsYXV0aG9yOlwiRiBTY290dCBGaXR6Z2VyYWxkXCIsY2F0ZWdvcnk6XCJMb3ZlXCJ9LHt0aXRsZTpcIk1hZGFtZSBCb3ZhcnlcIixhdXRob3I6XCJHdXN0YXZlIEZsYXViZXJ0XCIsY2F0ZWdvcnk6XCJMb3ZlXCJ9LHt0aXRsZTpcIkEgUm9vbSB3aXRoIGEgVmlld1wiLGF1dGhvcjpcIkVNIEZvcnN0ZXJcIixjYXRlZ29yeTpcIkxvdmVcIn0se3RpdGxlOlwiVGhlIFNvcnJvd3Mgb2YgWW91bmcgV2VydGhlclwiLGF1dGhvcjpcIkpvaGFubiBXb2xmZ2FuZyBHb2V0aGVcIixjYXRlZ29yeTpcIkxvdmVcIn0se3RpdGxlOlwiRmFyIEZyb20gdGhlIE1hZGRpbmcgQ3Jvd2RcIixhdXRob3I6XCJUaG9tYXMgSGFyZHlcIixjYXRlZ29yeTpcIkxvdmVcIn0se3RpdGxlOlwiVGhlIFNjYXJsZXQgTGV0dGVyXCIsYXV0aG9yOlwiTmF0aGFuaWVsIEhhd3Rob3JuZVwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJUaGUgUmVtYWlucyBvZiB0aGUgRGF5XCIsYXV0aG9yOlwiS2F6dW8gSXNoaWd1cm9cIixjYXRlZ29yeTpcIkxvdmVcIn0se3RpdGxlOlwiTGVzIExpYWlzb25zIERhbmdlcmV1c2VzXCIsYXV0aG9yOlwiUGllcnJlLUFtYnJvaXNlLUZyYW5jb2lzIENob2RlcmxvcyBkZSBMYWNsb3NcIixjYXRlZ29yeTpcIkxvdmVcIn0se3RpdGxlOlwiT2YgSHVtYW4gQm9uZGFnZVwiLGF1dGhvcjpcIlNvbWVyc2V0IE1hdWdoYW1cIixjYXRlZ29yeTpcIkxvdmVcIn0se3RpdGxlOlwiQXRvbmVtZW50XCIsYXV0aG9yOlwiSWFuIE1jRXdhblwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJHb25lIFdpdGggdGhlIFdpbmRcIixhdXRob3I6XCJNYXJnYXJldCBNaXRjaGVsbFwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJOb3J3ZWdpYW4gV29vZFwiLGF1dGhvcjpcIkhhcnVraSBNdXJha2FtaVwiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJEb2N0b3IgWmhpdmFnb1wiLGF1dGhvcjpcIkJvcmlzIFBhc3Rlcm5ha1wiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJXaWRlIFNhcmdhc3NvIFNlYVwiLGF1dGhvcjpcIkplYW4gUmh5c1wiLGNhdGVnb3J5OlwiTG92ZVwifSx7dGl0bGU6XCJUaGUgSGl0Y2hoaWtlcnMgR3VpZGUgdG8gdGhlIEdhbGF4eVwiLGF1dGhvcjpcIkRvdWdsYXMgQWRhbXNcIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJGb3VuZGF0aW9uXCIsYXV0aG9yOlwiSXNhYWMgQXNpbW92XCIsY2F0ZWdvcnk6XCJTY2llbmNlIEZpY3Rpb24gYW5kIEZhbnRhc3lcIn0se3RpdGxlOlwiRmFocmVuaGVpdCA0NTFcIixhdXRob3I6XCJSYXkgQnJhZGJ1cnlcIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJBbGljZeKAmXMgQWR2ZW50dXJlcyBpbiBXb25kZXJsYW5kXCIsYXV0aG9yOlwiTGV3aXMgQ2Fycm9sbFwiLGNhdGVnb3J5OlwiU2NpZW5jZSBGaWN0aW9uIGFuZCBGYW50YXN5XCJ9LHt0aXRsZTpcIlRoZSBNYW4gd2hvIHdhcyBUaHVyc2RheVwiLGF1dGhvcjpcIkdLIENoZXN0ZXJ0b25cIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJDaGlsZGhvb2TigJlzIEVuZFwiLGF1dGhvcjpcIkFydGh1ciBDIENsYXJrZVwiLGNhdGVnb3J5OlwiU2NpZW5jZSBGaWN0aW9uIGFuZCBGYW50YXN5XCJ9LHt0aXRsZTpcIkRvIEFuZHJvaWRzIERyZWFtIG9mIEVsZWN0cmljIFNoZWVwP1wiLGF1dGhvcjpcIlBoaWxpcCBLIERpY2tcIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJBbWVyaWNhbiBHb2RzXCIsYXV0aG9yOlwiTmVpbCBHYWltYW5cIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJOZXVyb21hbmNlclwiLGF1dGhvcjpcIldpbGxpYW0gR2lic29uXCIsY2F0ZWdvcnk6XCJTY2llbmNlIEZpY3Rpb24gYW5kIEZhbnRhc3lcIn0se3RpdGxlOlwiRHVuZVwiLGF1dGhvcjpcIkZyYW5rIEwgSGVyYmVydFwiLGNhdGVnb3J5OlwiU2NpZW5jZSBGaWN0aW9uIGFuZCBGYW50YXN5XCJ9LHt0aXRsZTpcIlRoZSBUdXJuIG9mIHRoZSBTY3Jld1wiLGF1dGhvcjpcIkhlbnJ5IEphbWVzXCIsY2F0ZWdvcnk6XCJTY2llbmNlIEZpY3Rpb24gYW5kIEZhbnRhc3lcIn0se3RpdGxlOlwiVGhlIFNoaW5pbmdcIixhdXRob3I6XCJTdGVwaGVuIEtpbmdcIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJUaGUgRWFydGhzZWEgU2VyaWVzXCIsYXV0aG9yOlwiVXJzdWxhIExlIEd1aW5cIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJUaGUgQ2hyb25pY2xlcyBvZiBOYXJuaWFcIixhdXRob3I6XCJDUyBMZXdpc1wiLGNhdGVnb3J5OlwiU2NpZW5jZSBGaWN0aW9uIGFuZCBGYW50YXN5XCJ9LHt0aXRsZTpcIk5pbmV0ZWVuIEVpZ2h0eS1Gb3VyXCIsYXV0aG9yOlwiR2VvcmdlIE9yd2VsbFwiLGNhdGVnb3J5OlwiU2NpZW5jZSBGaWN0aW9uIGFuZCBGYW50YXN5XCJ9LHt0aXRsZTpcIlRoZSBEaXNjd29ybGQgU2VyaWVzXCIsYXV0aG9yOlwiVGVycnkgUHJhdGNoZXR0XCIsY2F0ZWdvcnk6XCJTY2llbmNlIEZpY3Rpb24gYW5kIEZhbnRhc3lcIn0se3RpdGxlOlwiRnJhbmtlbnN0ZWluXCIsYXV0aG9yOlwiTWFyeSBTaGVsbGV5XCIsY2F0ZWdvcnk6XCJTY2llbmNlIEZpY3Rpb24gYW5kIEZhbnRhc3lcIn0se3RpdGxlOlwiVGhlIFN0cmFuZ2UgQ2FzZSBvZiBEciBKZWt5bGwgYW5kIE1yIEh5ZGVcIixhdXRob3I6XCJSb2JlcnQgTG91aXMgU3RldmVuc29uXCIsY2F0ZWdvcnk6XCJTY2llbmNlIEZpY3Rpb24gYW5kIEZhbnRhc3lcIn0se3RpdGxlOlwiRHJhY3VsYVwiLGF1dGhvcjpcIkJyYW0gU3Rva2VyXCIsY2F0ZWdvcnk6XCJTY2llbmNlIEZpY3Rpb24gYW5kIEZhbnRhc3lcIn0se3RpdGxlOlwiVGhlIExvcmQgb2YgdGhlIFJpbmdzXCIsYXV0aG9yOlwiSlJSIFRvbGtpZW5cIixjYXRlZ29yeTpcIlNjaWVuY2UgRmljdGlvbiBhbmQgRmFudGFzeVwifSx7dGl0bGU6XCJUaGluZ3MgRmFsbCBBcGFydFwiLGF1dGhvcjpcIkNoaW51YSBBY2hlYmVcIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiR28gVGVsbCBpdCBvbiB0aGUgTW91bnRhaW5cIixhdXRob3I6XCJKYW1lcyBCYWxkd2luXCIsY2F0ZWdvcnk6XCJTdGF0ZSBvZiB0aGUgTmF0aW9uXCJ9LHt0aXRsZTpcIlVuY2xlIFRvbeKAmXMgQ2FiaW5cIixhdXRob3I6XCJIYXJyaWV0IEJlZWNoZXIgU3Rvd2VcIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiTW9sbCBGbGFuZGVyc1wiLGF1dGhvcjpcIkRhbmllbCBEZWZvZVwiLGNhdGVnb3J5OlwiU3RhdGUgb2YgdGhlIE5hdGlvblwifSx7dGl0bGU6XCJBIFRhbGUgb2YgVHdvIENpdGllc1wiLGF1dGhvcjpcIkNoYXJsZXMgRGlja2Vuc1wiLGNhdGVnb3J5OlwiU3RhdGUgb2YgdGhlIE5hdGlvblwifSx7dGl0bGU6XCJOb3J0aCBhbmQgU291dGhcIixhdXRob3I6XCJFbGl6YWJldGggR2Fza2VsbFwiLGNhdGVnb3J5OlwiU3RhdGUgb2YgdGhlIE5hdGlvblwifSx7dGl0bGU6XCJMZXMgTWlzZXJhYmxlc1wiLGF1dGhvcjpcIlZpY3RvciBIdWdvXCIsY2F0ZWdvcnk6XCJTdGF0ZSBvZiB0aGUgTmF0aW9uXCJ9LHt0aXRsZTpcIkEgR2lybCBpbiBXaW50ZXJcIixhdXRob3I6XCJQaGlsaXAgTGFya2luXCIsY2F0ZWdvcnk6XCJTdGF0ZSBvZiB0aGUgTmF0aW9uXCJ9LHt0aXRsZTpcIlRoZSBNYWdpYyBNb3VudGFpblwiLGF1dGhvcjpcIlRob21hcyBNYW5uXCIsY2F0ZWdvcnk6XCJTdGF0ZSBvZiB0aGUgTmF0aW9uXCJ9LHt0aXRsZTpcIkJlbC1BbWlcIixhdXRob3I6XCJHdXkgZGUgTWF1cGFzc2FudFwiLGNhdGVnb3J5OlwiU3RhdGUgb2YgdGhlIE5hdGlvblwifSx7dGl0bGU6XCJBbmltYWwgRmFybVwiLGF1dGhvcjpcIkdlb3JnZSBPcndlbGxcIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiQ3J5LCB0aGUgQmVsb3ZlZCBDb3VudHJ5XCIsYXV0aG9yOlwiQWxhbiBQYXRvblwiLGNhdGVnb3J5OlwiU3RhdGUgb2YgdGhlIE5hdGlvblwifSx7dGl0bGU6XCJUaGUgSnVuZ2xlXCIsYXV0aG9yOlwiVXB0b24gU2luY2xhaXJcIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiV2hpdGUgVGVldGhcIixhdXRob3I6XCJaYWRpZSBTbWl0aFwiLGNhdGVnb3J5OlwiU3RhdGUgb2YgdGhlIE5hdGlvblwifSx7dGl0bGU6XCJUaGUgR3JhcGVzIG9mIFdyYXRoXCIsYXV0aG9yOlwiSm9obiBTdGVpbmJlY2tcIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiVmFuaXR5IEZhaXJcIixhdXRob3I6XCJXaWxsaWFtIE1ha2VwZWFjZSBUaGFja2VyYXlcIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiVGhlIFdheSBXZSBMaXZlIE5vd1wiLGF1dGhvcjpcIkFudGhvbnkgVHJvbGxvcGVcIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiVGhlIEFkdmVudHVyZXMgb2YgVG9tIFNhd3llclwiLGF1dGhvcjpcIk1hcmsgVHdhaW5cIixjYXRlZ29yeTpcIlN0YXRlIG9mIHRoZSBOYXRpb25cIn0se3RpdGxlOlwiVGhlIEJvbmZpcmUgb2YgdGhlIFZhbml0aWVzXCIsYXV0aG9yOlwiVG9tIFdvbGZlXCIsY2F0ZWdvcnk6XCJTdGF0ZSBvZiB0aGUgTmF0aW9uXCJ9LHt0aXRsZTpcIkdlcm1pbmFsXCIsYXV0aG9yOlwiRW1pbGUgWm9sYVwiLGNhdGVnb3J5OlwiU3RhdGUgb2YgdGhlIE5hdGlvblwifSx7dGl0bGU6XCJFbXBpcmUgb2YgdGhlIFN1blwiLGF1dGhvcjpcIkpHIEJhbGxhcmRcIixjYXRlZ29yeTpcIldhciBhbmQgVHJhdmVsXCJ9LHt0aXRsZTpcIkhlYXJ0IG9mIERhcmtuZXNzXCIsYXV0aG9yOlwiSm9zZXBoIENvbnJhZFwiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn0se3RpdGxlOlwiUm9iaW5zb24gQ3J1c29lXCIsYXV0aG9yOlwiRGFuaWVsIERlZm9lXCIsY2F0ZWdvcnk6XCJXYXIgYW5kIFRyYXZlbFwifSx7dGl0bGU6XCJUaGUgVGhyZWUgTXVza2V0ZWVyc1wiLGF1dGhvcjpcIkFsZXhhbmRyZSBEdW1hc1wiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn0se3RpdGxlOlwiS2luZyBTb2xvbW9u4oCZcyBNaW5lc1wiLGF1dGhvcjpcIkggUmlkZXIgSGFnZ2FyZFwiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn0se3RpdGxlOlwiRW5pZ21hXCIsYXV0aG9yOlwiUm9iZXJ0IEhhcnJpc1wiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn0se3RpdGxlOlwiVGhlIEdvb2QgU29sZGllciBTdmVqa1wiLGF1dGhvcjpcIkphcm9zbGF2IEhhc2VrXCIsY2F0ZWdvcnk6XCJXYXIgYW5kIFRyYXZlbFwifSx7dGl0bGU6XCJGb3IgV2hvbSB0aGUgQmVsbCBUb2xsc1wiLGF1dGhvcjpcIkVybmVzdCBIZW1pbmd3YXlcIixjYXRlZ29yeTpcIldhciBhbmQgVHJhdmVsXCJ9LHt0aXRsZTpcIk9uIHRoZSBSb2FkXCIsYXV0aG9yOlwiSmFjayBLZXJvdWFjXCIsY2F0ZWdvcnk6XCJXYXIgYW5kIFRyYXZlbFwifSx7dGl0bGU6XCJUaGUgQ2FsbCBvZiB0aGUgV2lsZFwiLGF1dGhvcjpcIkphY2sgTG9uZG9uXCIsY2F0ZWdvcnk6XCJXYXIgYW5kIFRyYXZlbFwifSx7dGl0bGU6XCJPbmUgSHVuZHJlZCBZZWFycyBvZiBTb2xpdHVkZVwiLGF1dGhvcjpcIkdhYnJpZWwgR2FyY2lhIE1hcnF1ZXpcIixjYXRlZ29yeTpcIldhciBhbmQgVHJhdmVsXCJ9LHt0aXRsZTpcIk1vYnktRGljayBvciwgVGhlIFdoYWxlXCIsYXV0aG9yOlwiSGVybWFuIE1lbHZpbGxlXCIsY2F0ZWdvcnk6XCJXYXIgYW5kIFRyYXZlbFwifSx7dGl0bGU6XCJaZW4gYW5kIHRoZSBBcnQgb2YgTW90b3JjeWNsZSBNYWludGVuYW5jZVwiLGF1dGhvcjpcIlJvYmVydCBQaXJzaWdcIixjYXRlZ29yeTpcIldhciBhbmQgVHJhdmVsXCJ9LHt0aXRsZTpcIkFsbCBRdWlldCBvbiB0aGUgV2VzdGVybiBGcm9udFwiLGF1dGhvcjpcIkVyaWNoIE1hcmlhIFJlbWFycXVlXCIsY2F0ZWdvcnk6XCJXYXIgYW5kIFRyYXZlbFwifSx7dGl0bGU6XCJJdmFuaG9lXCIsYXV0aG9yOlwiU2lyIFdhbHRlciBTY290dFwiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn0se3RpdGxlOlwiVHJlYXN1cmUgSXNsYW5kXCIsYXV0aG9yOlwiUm9iZXJ0IExvdWlzIFN0ZXZlbnNvblwiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn0se3RpdGxlOlwiR3VsbGl2ZXLigJlzIFRyYXZlbHNcIixhdXRob3I6XCJKb25hdGhhbiBTd2lmdFwiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn0se3RpdGxlOlwiV2FyIGFuZCBQZWFjZVwiLGF1dGhvcjpcIkxlbyBUb2xzdG95XCIsY2F0ZWdvcnk6XCJXYXIgYW5kIFRyYXZlbFwifSx7dGl0bGU6XCJBcm91bmQgdGhlIFdvcmxkIGluIEVpZ2h0eSBEYXlzXCIsYXV0aG9yOlwiSnVsZXMgVmVybmVcIixjYXRlZ29yeTpcIldhciBhbmQgVHJhdmVsXCJ9LHt0aXRsZTpcIlRoZSBDYWluZSBNdXRpbnlcIixhdXRob3I6XCJIZXJtYW4gV291a1wiLGNhdGVnb3J5OlwiV2FyIGFuZCBUcmF2ZWxcIn1dO2Z1bmN0aW9uIHNlKGUpe3JldHVybiBuKG51bGwhPWUmJmUuY2F0ZWdvcnk/cmUuZmlsdGVyKCgoe2NhdGVnb3J5OmF9KT0+YT09PWUuY2F0ZWdvcnkpKTpyZSxlKX12YXIgbGU9W1wiQXBwbGVcIixcIkFtYXpvblwiLFwiTWljcm9zb2Z0XCIsXCJHb29nbGVcIixcIlNhbXN1bmdcIixcIkNvY2EtQ29sYVwiLFwiVG95b3RhXCIsXCJNZXJjZWRlc1wiLFwiTWNEb25hbGTigJlzXCIsXCJEaXNuZXlcIixcIkJNV1wiLFwiSW50ZWxcIixcIkZhY2Vib29rXCIsXCJJQk1cIixcIk5pa2VcIixcIkNpc2NvXCIsXCJMb3VpcyBWdWl0dG9uXCIsXCJTQVBcIixcIkluc3RhZ3JhbVwiLFwiSG9uZGFcIixcIkNoYW5lbFwiLFwiSi5QLiBNb3JnYW5cIixcIkFtZXJpY2FuIEV4cHJlc3NcIixcIlVQU1wiLFwiSWtlYVwiLFwiUGVwc2lcIixcIkFkb2JlXCIsXCJIZXJtw6hzXCIsXCJHZW5lcmFsIEVsZWN0cmljXCIsXCJZb3VUdWJlXCIsXCJBY2NlbnR1cmVcIixcIkd1Y2NpXCIsXCJCdWR3ZWlzZXJcIixcIlBhbXBlcnNcIixcIlphcmFcIixcIkh5dW5kYWlcIixcIkgmTVwiLFwiTmVzY2Fmw6lcIixcIkFsbGlhbnpcIixcIlRlc2xhXCIsXCJOZXRmbGl4XCIsXCJGb3JkXCIsXCJMJ09yZWFsXCIsXCJBdWRpXCIsXCJWaXNhXCIsXCJFYmF5XCIsXCJWb2xrc3dhZ2VuXCIsXCJBWEFcIixcIkdvbGRtYW4gU2FjaHNcIixcIkFkaWRhc1wiLFwiU29ueVwiLFwiQ2l0aVwiLFwiUGhpbGlwc1wiLFwiR2lsbGV0dGVcIixcIlBvcnNjaGVcIixcIlN0YXJidWNrc1wiLFwiTWFzdGVyY2FyZFwiLFwiU2FsZXNmb3JjZVwiLFwiTmlzc2FuXCIsXCJQYXlQYWxcIixcIlNpZW1lbnNcIixcIkRhbm9uZVwiLFwiTmVzdGzDqVwiLFwiSFNCQ1wiLFwiSGV3bGV0dCBQYWNrYXJkXCIsXCJLZWxsb2dnJ3NcIixcIjNNXCIsXCJDb2xnYXRlXCIsXCJNb3JnYW4gU3RhbmVseVwiLFwiU3BvdGlmeVwiLFwiQ2Fub25cIixcIkxlZ29cIixcIkNhcnRpZXJcIixcIlNhbnRhbmRlclwiLFwiRmVkRXhcIixcIk5pbnRlbmRvXCIsXCJIZXdsZXR0IFBhY2thcmQgRW50ZXJwcmlzZVwiLFwiQ29yb25hXCIsXCJGZXJyYXJpXCIsXCJIdWF3ZWlcIixcIkRITFwiLFwiSmFjayBEYW5pZWwnc1wiLFwiRGlvclwiLFwiQ2F0ZXJwaWxsYXJcIixcIlBhbmFzb25pY1wiLFwiS2lhXCIsXCJKb2huc29uICYgSm9obnNvblwiLFwiSGVpbmVrZW5cIixcIkpvaG4gRGVlcmVcIixcIkxpbmtlZEluXCIsXCJIZW5uZXNzeVwiLFwiS0ZDXCIsXCJMYW5kIFJvdmVyXCIsXCJUaWZmYW55ICYgQ28uXCIsXCJNaW5pXCIsXCJVYmVyXCIsXCJCdXJiZXJyeVwiLFwiSm9obm5pZSBXYWxrZXJcIixcIlByYWRhXCIsXCJab29tXCJdO2Z1bmN0aW9uIHVlKGUpe3JldHVybiBuKGxlLGUpfXZhciBjZT1bXCJDaHJvbWVcIixcIkVkZ2VcIixcIkZpcmVmb3hcIixcIkludGVybmV0IEV4cGxvcmVyXCIsXCJTYWZhcmlcIixcIk9wZXJhXCIsXCJZYW5kZXhcIixcIkNocm9taXVtXCIsXCJWaXZhbGRpXCIsXCJCYWlkdVwiLFwiQnJhdmVcIl07ZnVuY3Rpb24gZGUoZSl7cmV0dXJuIG4oY2UsZSl9dmFyIGhlPVtcIkVhc3RcIixcIlNvdXRoXCIsXCJXZXN0XCIsXCJOb3J0aFwiXTtmdW5jdGlvbiBtZShlKXtyZXR1cm4gbihoZSxlKX12YXIgcGU9W1wiSmFwYW5lc2UgQm9idGFpbFwiLFwiU2F2YW5uYWhcIixcIkxhUGVybVwiLFwiU2liZXJpYW5cIixcIk9jaWNhdFwiLFwiQmlybWFuXCIsXCJEZXZvbiBSZXhcIixcIk1pbnNraW5cIixcIlNlcmVuZ2V0aVwiLFwiQm9tYmF5XCIsXCJIaW1hbGF5YW5cIixcIkFtZXJpY2FuIEN1cmxcIixcIlRoYWlcIixcIkJhbGluZXNlXCIsXCJTaW5nYXB1cmFcIixcIkFtZXJpY2FuIFNob3J0aGFpclwiLFwiT2pvcyBBenVsZXNcIixcIkJ1cm1lc2VcIl07ZnVuY3Rpb24geWUoZSl7cmV0dXJuIG4ocGUsZSl9dmFyIGdlPVtcIlBlcnNldmVyaW5nIGVuY29tcGFzc2luZyBtaWRkbGV3YXJlXCIsXCJNdWx0aS1sYXllcmVkIHplcm8gYWRtaW5pc3RyYXRpb24gc3lzdGVtIGVuZ2luZVwiLFwiRGlnaXRpemVkIGF0dGl0dWRlLW9yaWVudGVkIGltcGxlbWVudGF0aW9uXCIsXCJNdWx0aS1sYXRlcmFsIHplcm8gZGVmZWN0IHRocm91Z2hwdXRcIixcIlByb2ZpdC1mb2N1c2VkIGNvaGVyZW50IGFwcGxpY2F0aW9uXCIsXCJEZWNlbnRyYWxpemVkIGh1bWFuLXJlc291cmNlIHN5c3RlbSBlbmdpbmVcIixcIlJpZ2h0LXNpemVkIGNsaWVudC1kcml2ZW4gZmlybXdhcmVcIixcIkNsb25lZCBpbmNyZW1lbnRhbCBzdHJ1Y3R1cmVcIixcIlN0cmVhbWxpbmVkIGltcGFjdGZ1bCBhbGxpYW5jZVwiLFwiVmlzaW9uYXJ5IGZyZXNoLXRoaW5raW5nIGluc3RydWN0aW9uIHNldFwiLFwiTmV0d29ya2VkIGV4dWRpbmcgbW9uaXRvcmluZ1wiLFwiT3JnYW5pemVkIGNvbnRleHR1YWxseS1iYXNlZCBmdW5jdGlvblwiLFwiRW50ZXJwcmlzZS13aWRlIGRpcmVjdGlvbmFsIG9yY2hlc3RyYXRpb25cIixcIlVuaXZlcnNhbCBlbXBvd2VyaW5nIHByb2R1Y3RcIixcIlJlZHVjZWQgcmVnaW9uYWwgZnJhbWVcIixcIk1vbml0b3JlZCBib3R0b20tbGluZSBwcm9kdWN0aXZpdHlcIixcIlJlZHVjZWQgbXVsdGktdGFza2luZyBlbmNvZGluZ1wiLFwiRW5oYW5jZWQgcmVzcG9uc2l2ZSBzb2Z0d2FyZVwiLFwiTXVsdGktdGllcmVkIGV4dWRpbmcgYXBwcm9hY2hcIixcIkJhbGFuY2VkIHN0YWJsZSBrbm93bGVkZ2UgdXNlclwiLFwiUmUtZW5naW5lZXJlZCBuZXV0cmFsIGRhdGFiYXNlXCIsXCJWZXJzYXRpbGUgbmF0aW9uYWwgdGltZS1mcmFtZVwiLFwiRXhjbHVzaXZlIGZyZXNoLXRoaW5raW5nIHdvcmtmb3JjZVwiLFwiVmlydHVhbCBiYWNrZ3JvdW5kIHBhcmFkaWdtXCIsXCJVcGdyYWRhYmxlIGNvaGVzaXZlIGtub3dsZWRnZSB1c2VyXCIsXCJEZS1lbmdpbmVlcmVkIG5lZWRzLWJhc2VkIGhhcmR3YXJlXCIsXCJOZXR3b3JrZWQgbW9iaWxlIG1vcmF0b3JpdW1cIixcIkludmVyc2UgY29udGV4dHVhbGx5LWJhc2VkIHBvcnRhbFwiLFwiRGUtZW5naW5lZXJlZCBmdWxsLXJhbmdlIGV4dHJhbmV0XCIsXCJBZHZhbmNlZCB0cmFuc2l0aW9uYWwgc3VwcG9ydFwiLFwiQnVzaW5lc3MtZm9jdXNlZCBzdGFibGUgZnJhbWV3b3JrXCIsXCJSZWFjdGl2ZSA0dGggZ2VuZXJhdGlvbiBpbmZvLW1lZGlhcmllc1wiLFwiU3dpdGNoYWJsZSB1cHdhcmQtdHJlbmRpbmcgYXJyYXlcIixcIkludGVncmF0ZWQgcmVnaW9uYWwgb3BlbiBhcmNoaXRlY3R1cmVcIixcIlJlYWN0aXZlIGxvY2FsIGltcGxlbWVudGF0aW9uXCIsXCJGb2N1c2VkIGFzeW1tZXRyaWMgY29udGluZ2VuY3lcIixcIlN5bmVyZ2l6ZWQgNHRoIGdlbmVyYXRpb24gc3VjY2Vzc1wiLFwiTWFuZGF0b3J5IHJlZ2lvbmFsIGNvbXBsZXhpdHlcIixcIlByb2FjdGl2ZSBjbGllbnQtc2VydmVyIGFjY2Vzc1wiLFwiSW1wbGVtZW50ZWQgd2VsbC1tb2R1bGF0ZWQgdGFzay1mb3JjZVwiLFwiUHJlLWVtcHRpdmUgY2xlYXItdGhpbmtpbmcgZ3JvdXB3YXJlXCIsXCJCYWxhbmNlZCByYWRpY2FsIGFyY2hpdmVcIixcIk1hbmFnZWQgZXhwbGljaXQgaW5zdGFsbGF0aW9uXCIsXCJTd2l0Y2hhYmxlIG5leHQgZ2VuZXJhdGlvbiBpbnRyYW5ldFwiLFwiUXVhbGl0eS1mb2N1c2VkIGNvaGVyZW50IGdyb3Vwd2FyZVwiLFwiQ3VzdG9taXphYmxlIGNsaWVudC1kcml2ZW4gZW5jb2RpbmdcIixcIkNlbnRyYWxpemVkIGltcGFjdGZ1bCBjb250aW5nZW5jeVwiLFwiU3RyZWFtbGluZWQgZXhlY3V0aXZlIEdyYXBoaWMgSW50ZXJmYWNlXCIsXCJTZWFtbGVzcyBiaS1kaXJlY3Rpb25hbCBjYXBhY2l0eVwiLFwiU3luY2hyb25pc2VkIDI0IGhvdXIgZW11bGF0aW9uXCIsXCJSb2J1c3QgaGV1cmlzdGljIGluc3RhbGxhdGlvblwiLFwiRmFjZSB0byBmYWNlIDZ0aCBnZW5lcmF0aW9uIGNvbXBsZXhpdHlcIixcIlZpc2lvbi1vcmllbnRlZCBob2xpc3RpYyBwcm90b2NvbFwiLFwiQW1lbGlvcmF0ZWQgYXN5bmNocm9ub3VzIHByaWNpbmcgc3RydWN0dXJlXCIsXCJQcm9maXQtZm9jdXNlZCBleGVjdXRpdmUgY29yZVwiLFwiTXVsdGktY2hhbm5lbGxlZCB6ZXJvIHRvbGVyYW5jZSBjb3JlXCIsXCJDdXN0b21pemFibGUgZ2xvYmFsIG9wZW4gc3lzdGVtXCIsXCJSb2J1c3QgZm9yZWdyb3VuZCBzeW5lcmd5XCIsXCJVcC1zaXplZCBlY28tY2VudHJpYyBwcmljaW5nIHN0cnVjdHVyZVwiLFwiVXBncmFkYWJsZSBzdGFibGUgc3RyYXRlZ3lcIixcIlN5bmVyZ2l6ZWQgY2xpZW50LXNlcnZlciBhcmNoaXRlY3R1cmVcIixcIkZvY3VzZWQgbG9naXN0aWNhbCBkZWZpbml0aW9uXCIsXCJTZWN1cmVkIGhvbGlzdGljIGFyY2hpdGVjdHVyZVwiLFwiQWRhcHRpdmUgYXN5bW1ldHJpYyBpbmZyYXN0cnVjdHVyZVwiLFwiRGlnaXRpemVkIGNsZWFyLXRoaW5raW5nIGZpcm13YXJlXCIsXCJEZS1lbmdpbmVlcmVkIGVjby1jZW50cmljIGluc3RhbGxhdGlvblwiLFwiU3RhbmQtYWxvbmUgbmV4dCBnZW5lcmF0aW9uIHRhc2stZm9yY2VcIixcIlVzZXItY2VudHJpYyBvcHRpbWl6aW5nIGltcGxlbWVudGF0aW9uXCIsXCJSZS1jb250ZXh0dWFsaXplZCBncmlkLWVuYWJsZWQgcG9ydGFsXCIsXCJFeHRlbmRlZCBhc3luY2hyb25vdXMgc3lzdGVtIGVuZ2luZVwiLFwiUmVhY3RpdmUgbmV1dHJhbCBtb2RlcmF0b3JcIixcIkV4cGFuZGVkIDR0aCBnZW5lcmF0aW9uIEdyYXBoaWMgSW50ZXJmYWNlXCIsXCJPcHRpbWl6ZWQgY29udGV4dHVhbGx5LWJhc2VkIHRvb2xzZXRcIixcIk9wZXJhdGl2ZSBiaS1kaXJlY3Rpb25hbCBwcm90b2NvbFwiLFwiRGUtZW5naW5lZXJlZCBkeW5hbWljIGZyYW1lXCIsXCJVc2VyLWZyaWVuZGx5IGRpc2ludGVybWVkaWF0ZSBhbGxpYW5jZVwiLFwiRnVuZGFtZW50YWwgY2xpZW50LXNlcnZlciBkYXRhLXdhcmVob3VzZVwiLFwiQW1lbGlvcmF0ZWQgbXVsdGltZWRpYSBncm91cHdhcmVcIixcIlNlY3VyZWQgbWV0aG9kaWNhbCBmcmFtZVwiLFwiT3JnYW5pemVkIG1heGltaXplZCBmaXJtd2FyZVwiLFwiVXNlci1jZW50cmljIGV4ZWN1dGl2ZSBrbm93bGVkZ2UgdXNlclwiLFwiQ29uZmlndXJhYmxlIGdsb2JhbCBoZWxwLWRlc2tcIixcIlJlYWxpZ25lZCBlbXBvd2VyaW5nIG1vbml0b3JpbmdcIixcIkVudGVycHJpc2Utd2lkZSAyNCBob3VyIGluZm8tbWVkaWFyaWVzXCIsXCJFeHBhbmRlZCBkaWRhY3RpYyBtZXRob2RvbG9neVwiLFwiQ29uZmlndXJhYmxlIHplcm8gYWRtaW5pc3RyYXRpb24gcHJvamVjdGlvblwiLFwiRnVuZGFtZW50YWwgbXVsdGktdGFza2luZyBzdGFuZGFyZGl6YXRpb25cIixcIkZ1dHVyZS1wcm9vZmVkIGxlYWRpbmcgZWRnZSBzZWN1cmVkIGxpbmVcIixcIlBvbGFyaXNlZCBnbG9iYWwgb3BlbiBzeXN0ZW1cIixcIlJlLWVuZ2luZWVyZWQgdXB3YXJkLXRyZW5kaW5nIHN0YW5kYXJkaXphdGlvblwiLFwiU3RhbmQtYWxvbmUgbmVlZHMtYmFzZWQgcHJpY2luZyBzdHJ1Y3R1cmVcIixcIlN5bmVyZ2lzdGljIHJlc3BvbnNpdmUgc2VydmljZS1kZXNrXCIsXCJSZS1lbmdpbmVlcmVkIDI0LzcgcGFyYWRpZ21cIixcIkNvbXBhdGlibGUgZnJlc2gtdGhpbmtpbmcgc3VjY2Vzc1wiLFwiSW5ub3ZhdGl2ZSBiYWNrZ3JvdW5kIGF0dGl0dWRlXCIsXCJBdXRvbWF0ZWQgbW9kdWxhciBhY2Nlc3NcIixcIkRpc3RyaWJ1dGVkIGhldXJpc3RpYyBhcmNoaXZlXCIsXCJDbG9uZWQgaHVtYW4tcmVzb3VyY2Uga25vd2xlZGdlIGJhc2VcIixcIlVzZXItZnJpZW5kbHkgaW1wYWN0ZnVsIHV0aWxpc2F0aW9uXCIsXCJSZWFjdGl2ZSBtb3RpdmF0aW5nIGRhdGEtd2FyZWhvdXNlXCJdO2Z1bmN0aW9uIGZlKGUpe3JldHVybiBuKGdlLGUpfXZhciBiZT1bXCJDbHltZW5lIERvbHBoaW5cIixcIkJvdHRsZW5vc2UgRG9scGhpblwiLFwiQ29zdGVyb1wiLFwiQ2hpbGVhbiBEb2xwaGluXCIsXCJIZWF2aXNpZGXigJlzIERvbHBoaW5cIixcIlBhbnRyb3BpY2FsIFNwb3R0ZWQgRG9scGhpblwiLFwiU3Blcm0gV2hhbGVcIixcIkJ1cnJ1bmFuIERvbHBoaW5cIixcIkJyeWRl4oCZcyB3aGFsZVwiLFwiQXRsYW50aWMgV2hpdGUtU2lkZWQgRG9scGhpblwiLFwiTm9ydGhlcm4gUmlnaHR3aGFsZSBEb2xwaGluXCIsXCJLaWxsZXIgV2hhbGUgKE9yY2EpXCIsXCJGYWxzZSBLaWxsZXIgV2hhbGVcIixcIkdhbmdlcyBSaXZlciBEb2xwaGluXCIsXCJQYWNpZmljIFdoaXRlLVNpZGVkIERvbHBoaW5cIixcIkJsdWUgV2hhbGVcIixcIlNvdXRoZXJuIEJvdHRsZW5vc2UgV2hhbGVcIixcIlBlYWxl4oCZcyBEb2xwaGluXCJdO2Z1bmN0aW9uIHZlKGUpe3JldHVybiBuKGJlLGUpfXZhciB3ZT1bXCJTb3V0aCBEYWdtYXJzaGlyZVwiLFwiTmV3IFNvbG9ubW91dGhcIixcIk5ldyBNb250ZW1vdXRoXCIsXCJMYW5nYm9yb3VnaFwiLFwiUGFkYmVyZ21vdXRoXCIsXCJDb25uZnVydFwiLFwiTWV0YWlyaWVcIixcIk5ldyBNZXJsZVwiLFwiV2lsbGJ1cnlcIixcIk5vcnRoIFNpZ211bmRcIixcIk9wYWxidXJ5XCIsXCJOb3J0aCBBbnRvbmV0dGFcIixcIlRhbGxhaGFzc2VlXCIsXCJKYW5lZnVydFwiLFwiUG9ydCBBZGFsYmVydG9cIixcIldlc3QgRG9ycmlzXCIsXCJLZXR0ZXJpbmdcIixcIkxha2UgQWRlbGxcIixcIkJlbGxpbmdoYW1cIixcIkJ1ZmZhbG9cIixcIldlc3QgQnJlbmRvbnZpbGxlXCIsXCJTb3V0aCBMYWlsYVwiLFwiV2VzdCBMdWN5XCIsXCJNYXJpb250b25cIixcIkxha2UgQnJpYW5uZVwiLFwiTmV3IEFuc2xleVwiLFwiSm9obm5pZWJ1cmdoXCIsXCJKYXNrb2xza2lmb3J0XCIsXCJOZXcgRGF2b250ZXNpZGVcIixcIk5ldyBLeWxlXCIsXCJXaWxsaWVtb3V0aFwiLFwiTGFrZSBDZXNhclwiLFwiQmVybmllcmZ1cnRcIixcIldlc3QgSmFuZXRib3JvdWdoXCIsXCJQb3J0IEFzYVwiLFwiRWFzdCBGaWxpYmVydG9mdXJ0XCIsXCJGb3J0IExhdWRlcmRhbGVcIixcIldlc3QgRGVsbHNpZGVcIixcIkdsZW4gQnVybmllXCIsXCJQb3J0IEFtaWVcIixcIlNob3JlbGluZVwiLFwiV2VzdCBFc3RhdG9uXCIsXCJDdXlhaG9nYSBGYWxsc1wiLFwiTm9ydGggS2FsZWlnaHNoaXJlXCIsXCJLdXZhbGlzbW91dGhcIixcIlNvdXRoIERhcmllbmJ1cnlcIixcIlZlbmFtb3V0aFwiLFwiTm9ydGggV2lubmlmcmVkXCIsXCJCYWhyaW5nZXJ0b3duXCIsXCJIYW5lYm9yb3VnaFwiLFwiU291dGggQWhtZWRmb3J0XCIsXCJFYXN0IEtoYWxpbHRvblwiLFwiQWxpc28gVmllam9cIixcIkphcXVlbGludmlld1wiLFwiTGFrZSBMdWRpZVwiLFwiV2VzdCBTaW1vbmVcIixcIkthdHJpbmFzaWRlXCIsXCJOb3J0aCBOb25hXCIsXCJUcnljaWFzdGFkXCIsXCJUYWJpdGhhdmlsbGVcIixcIkZyaXNjb1wiLFwiT2x5bXBpYVwiLFwiU3RhdGUgQ29sbGVnZVwiLFwiTmV3IEdhcmxhbmRmb3J0XCIsXCJMYWtlIEFudGhvbnlcIixcIldlc3QgRXZlcmFyZG9cIixcIldlaG5lcmZvcnRcIixcIlNvdXRoIFZlcmRpZXRvblwiLFwiTGF3cmVuY2VcIixcIk5ldyBXYWxsYWNlYmVyZ1wiLFwiV2hpdGUgUGxhaW5zXCIsXCJTb3V0aCBTdGFjZXlcIixcIkZhcm1pbmd0b25cIixcIkJvcmVydmlsbGVcIixcIkVyeW5zaWRlXCIsXCJMYWtlIFphY2t0b25cIixcIlBvcnQgU2FsdmFkb3JcIixcIkZ1bmt2aWxsZVwiLFwiTm9ydGggRnJhbmtpZVwiLFwiRWFzdCBWaWNlbnRhYm9yb3VnaFwiLFwiTm9ydGggQnJhdWxpb1wiLFwiRWFzdCBQcm92aWRlbmNlXCIsXCJEZW5lc2lrYnVyZ2hcIixcIk5ldyBQaGlsaXBcIixcIkR1cndhcmR0b25cIixcIktpc3NpbW1lZVwiLFwiTm9ydGggQ2VsaWFcIixcIk1heHdlbGxwb3J0XCIsXCJSZWljaGVydGxhbmRcIixcIlJldHRhbGFuZFwiLFwiV2VzdCBBbWl5YVwiLFwiRWxpc2FiZXRobGFuZFwiLFwiUm9nZXJzXCIsXCJIZW5kZXJzb25cIixcIkZyYW5lY2tpdmlld1wiLFwiR3JhbmQgUmFwaWRzXCIsXCJNdXJyYXlcIixcIlBvcnQgUmlja3lcIixcIlBvcnQgSGFyZHltb3V0aFwiLFwiQ3J1enNoaXJlXCJdO2Z1bmN0aW9uIGtlKGUpe3JldHVybiBuKHdlLGUpfXZhciBTZT1bXCJYWFNcIixcIlhTXCIsXCJTXCIsXCJNXCIsXCJMXCIsXCJYTFwiLFwiWFhMXCJdO2Z1bmN0aW9uIENlKGUpe3JldHVybiBuKFNlLGUpfXZhciBBZT1bXCJBbGljZUJsdWVcIixcIkFudGlxdWVXaGl0ZVwiLFwiQXF1YVwiLFwiQXF1YW1hcmluZVwiLFwiQXp1cmVcIixcIkJlaWdlXCIsXCJCaXNxdWVcIixcIkJsYWNrXCIsXCJCbGFuY2hlZEFsbW9uZFwiLFwiQmx1ZVwiLFwiQmx1ZVZpb2xldFwiLFwiQnJvd25cIixcIkJ1cmx5V29vZFwiLFwiQ2FkZXRCbHVlXCIsXCJDaGFydHJldXNlXCIsXCJDaG9jb2xhdGVcIixcIkNvcmFsXCIsXCJDb3JuZmxvd2VyQmx1ZVwiLFwiQ29ybnNpbGtcIixcIkNyaW1zb25cIixcIkN5YW5cIixcIkRhcmtCbHVlXCIsXCJEYXJrQ3lhblwiLFwiRGFya0dvbGRlblJvZFwiLFwiRGFya0dyYXlcIixcIkRhcmtHcmV5XCIsXCJEYXJrR3JlZW5cIixcIkRhcmtLaGFraVwiLFwiRGFya01hZ2VudGFcIixcIkRhcmtPbGl2ZUdyZWVuXCIsXCJEYXJrT3JhbmdlXCIsXCJEYXJrT3JjaGlkXCIsXCJEYXJrUmVkXCIsXCJEYXJrU2FsbW9uXCIsXCJEYXJrU2VhR3JlZW5cIixcIkRhcmtTbGF0ZUJsdWVcIixcIkRhcmtTbGF0ZUdyYXlcIixcIkRhcmtTbGF0ZUdyZXlcIixcIkRhcmtUdXJxdW9pc2VcIixcIkRhcmtWaW9sZXRcIixcIkRlZXBQaW5rXCIsXCJEZWVwU2t5Qmx1ZVwiLFwiRGltR3JheVwiLFwiRGltR3JleVwiLFwiRG9kZ2VyQmx1ZVwiLFwiRmlyZUJyaWNrXCIsXCJGbG9yYWxXaGl0ZVwiLFwiRm9yZXN0R3JlZW5cIixcIkZ1Y2hzaWFcIixcIkdhaW5zYm9yb1wiLFwiR2hvc3RXaGl0ZVwiLFwiR29sZFwiLFwiR29sZGVuUm9kXCIsXCJHcmF5XCIsXCJHcmV5XCIsXCJHcmVlblwiLFwiR3JlZW5ZZWxsb3dcIixcIkhvbmV5RGV3XCIsXCJIb3RQaW5rXCIsXCJJbmRpYW5SZWRcIixcIkluZGlnb1wiLFwiSXZvcnlcIixcIktoYWtpXCIsXCJMYXZlbmRlclwiLFwiTGF2ZW5kZXJCbHVzaFwiLFwiTGF3bkdyZWVuXCIsXCJMZW1vbkNoaWZmb25cIixcIkxpZ2h0Qmx1ZVwiLFwiTGlnaHRDb3JhbFwiLFwiTGlnaHRDeWFuXCIsXCJMaWdodEdvbGRlblJvZFllbGxvd1wiLFwiTGlnaHRHcmF5XCIsXCJMaWdodEdyZXlcIixcIkxpZ2h0R3JlZW5cIixcIkxpZ2h0UGlua1wiLFwiTGlnaHRTYWxtb25cIixcIkxpZ2h0U2VhR3JlZW5cIixcIkxpZ2h0U2t5Qmx1ZVwiLFwiTGlnaHRTbGF0ZUdyYXlcIixcIkxpZ2h0U2xhdGVHcmV5XCIsXCJMaWdodFN0ZWVsQmx1ZVwiLFwiTGlnaHRZZWxsb3dcIixcIkxpbWVcIixcIkxpbWVHcmVlblwiLFwiTGluZW5cIixcIk1hZ2VudGFcIixcIk1hcm9vblwiLFwiTWVkaXVtQXF1YU1hcmluZVwiLFwiTWVkaXVtQmx1ZVwiLFwiTWVkaXVtT3JjaGlkXCIsXCJNZWRpdW1QdXJwbGVcIixcIk1lZGl1bVNlYUdyZWVuXCIsXCJNZWRpdW1TbGF0ZUJsdWVcIixcIk1lZGl1bVNwcmluZ0dyZWVuXCIsXCJNZWRpdW1UdXJxdW9pc2VcIixcIk1lZGl1bVZpb2xldFJlZFwiLFwiTWlkbmlnaHRCbHVlXCIsXCJNaW50Q3JlYW1cIixcIk1pc3R5Um9zZVwiLFwiTW9jY2FzaW5cIixcIk5hdmFqb1doaXRlXCIsXCJOYXZ5XCIsXCJPbGRMYWNlXCIsXCJPbGl2ZVwiLFwiT2xpdmVEcmFiXCIsXCJPcmFuZ2VcIixcIk9yYW5nZVJlZFwiLFwiT3JjaGlkXCIsXCJQYWxlR29sZGVuUm9kXCIsXCJQYWxlR3JlZW5cIixcIlBhbGVUdXJxdW9pc2VcIixcIlBhbGVWaW9sZXRSZWRcIixcIlBhcGF5YVdoaXBcIixcIlBlYWNoUHVmZlwiLFwiUGVydVwiLFwiUGlua1wiLFwiUGx1bVwiLFwiUG93ZGVyQmx1ZVwiLFwiUHVycGxlXCIsXCJSZWJlY2NhUHVycGxlXCIsXCJSZWRcIixcIlJvc3lCcm93blwiLFwiUm95YWxCbHVlXCIsXCJTYWRkbGVCcm93blwiLFwiU2FsbW9uXCIsXCJTYW5keUJyb3duXCIsXCJTZWFHcmVlblwiLFwiU2VhU2hlbGxcIixcIlNpZW5uYVwiLFwiU2lsdmVyXCIsXCJTa3lCbHVlXCIsXCJTbGF0ZUJsdWVcIixcIlNsYXRlR3JheVwiLFwiU2xhdGVHcmV5XCIsXCJTbm93XCIsXCJTcHJpbmdHcmVlblwiLFwiU3RlZWxCbHVlXCIsXCJUYW5cIixcIlRlYWxcIixcIlRoaXN0bGVcIixcIlRvbWF0b1wiLFwiVHVycXVvaXNlXCIsXCJWaW9sZXRcIixcIldoZWF0XCIsXCJXaGl0ZVwiLFwiV2hpdGVTbW9rZVwiLFwiWWVsbG93XCIsXCJZZWxsb3dHcmVlblwiXTtmdW5jdGlvbiBNZShlKXtyZXR1cm4gbihBZSxlKX12YXIgVGU9W1wiS2F1dHplciwgTWFjZWprb3ZpYyBhbmQgRmlzaGVyXCIsXCJHcmVlbmhvbHQgLSBNb3NjaXNraVwiLFwiTWFycXVhcmR0IC0gUnVub2xmc2RvdHRpclwiLFwiQWJlcm5hdGh5IEluY1wiLFwiRGlja2VucyAtIExhbmdcIixcIkhhbmQsIEJlcm5oYXJkIGFuZCBLZXNzbGVyXCIsXCJBYmJvdHQgTExDXCIsXCJLdWIgSW5jXCIsXCJKb2huc3RvbiAtIFdpc296a1wiLFwiUmVpY2hlcnQgTExDXCIsXCJLb2hsZXIgTExDXCIsXCJTaGFuYWhhbiAtIEJveWxlXCIsXCJCYXR6IC0gUmljZVwiLFwiQ3JvbmluLCBPYmVyYnJ1bm5lciBhbmQgQmVpZXJcIixcIkt1aGxtYW4sIFNjaG93YWx0ZXIgYW5kIFdlc3RcIixcIkx1ZXR0Z2VuIEluY1wiLFwiV2FyZCBHcm91cFwiLFwiSGlsbHMgYW5kIFNvbnNcIixcIlByb2hhc2thLCBCYWxpc3RyZXJpIGFuZCBXYWxrZXJcIixcIlJlbXBlbCAtIER1cmdhblwiLFwiQmVybmllciBMTENcIixcIlN0ZWhyIC0gTG9ja21hblwiLFwiUm9iZXJ0cywgUm9nYWhuIGFuZCBEb29sZXlcIixcIkxlc2NoIC0gSmFrdWJvd3NraVwiLFwiSmVua2lucyAtIFR1cmNvdHRlXCIsXCJHZXJob2xkIC0gUm93ZVwiLFwiQmxvY2sgLSBSYXVcIixcIkRpY2tpbnNvbiwgVHJlbWJsYXkgYW5kIE1vb3JlXCIsXCJOYWRlciAtIEZyaXRzY2hcIixcIktyZWlnZXIgYW5kIFNvbnNcIixcIkJhcnRlbGwsIFdlaG5lciBhbmQgU2Nob3dhbHRlclwiLFwiSGVnbWFubiBJbmNcIixcIk9ybiwgU3BlbmNlciBhbmQgS2llaG5cIixcIkdyYWhhbSwgU2lwZXMgYW5kIFRvd25lXCIsXCJIb2RraWV3aWN6IEluY1wiLFwiTWlsbHMgR3JvdXBcIixcIkxlZ3JvcywgVGlsbG1hbiBhbmQgSG9ka2lld2ljelwiLFwiTGVzY2ggLSBDYXJ0ZXJcIixcIkxlc2NoIEdyb3VwXCIsXCJLcmVpZ2VyIC0gU2F1ZXJcIixcIkNhcnR3cmlnaHQgLSBTY2h1c3RlclwiLFwiTGFiYWRpZSBMTENcIixcIlBmYW5uZXJzdGlsbCwgV2hpdGUgYW5kIE1vc2Npc2tpXCIsXCJKZW5raW5zIExMQ1wiLFwiQm9laG0sIEhldHRpbmdlciBhbmQgSHVlbHNcIixcIk1hZ2dpbywgV2lzb2t5IGFuZCBCbGlja1wiLFwiS296ZXkgSW5jXCIsXCJTdHJhY2tlIC0gV2lzb3prXCIsXCJPbHNvbiwgT2xzb24gYW5kIENhcnRlclwiLFwiT3JuLCBHZXJsYWNoIGFuZCBSdW5vbGZzZG90dGlyXCIsXCJTdHJhY2tlIC0gS2VydHptYW5uXCIsXCJXYWxrZXIgLSBaaWVtZVwiLFwiSG9ka2lld2ljeiAtIEhpbnR6XCIsXCJMaW5kIEdyb3VwXCIsXCJGYWhleSwgTGVhbm5vbiBhbmQgR2xlaWNobmVyXCIsXCJNZXJ0eiwgR3VzaWtvd3NraSBhbmQgTGVta2VcIixcIkhlaWRlbnJlaWNoIC0gQXVmZGVyaGFyXCIsXCJaYm9uY2FrIGFuZCBTb25zXCIsXCJDYXJyb2xsIEdyb3VwXCIsXCJCcm93biBMTENcIixcIldlYmVyIEluY1wiLFwiUmF0aCBMTENcIixcIldhbGtlciBJbmNcIixcIkhlbGxlciwgSHlhdHQgYW5kIEphc2tvbHNraVwiLFwiSmFjb2JpIC0gS3V0Y2hcIixcIlNraWxlcyBhbmQgU29uc1wiLFwiRHVyZ2FuIC0gU3RhbW1cIixcIlJlbm5lciAtIFByb3NhY2NvXCIsXCJIYWhuIC0gV2VsY2hcIixcIkxlc2NoLCBEb29sZXkgYW5kIEJhcnRlbGxcIixcIkNyb25hIGFuZCBTb25zXCIsXCJSb2dhaG4sIEFybXN0cm9uZyBhbmQgR295ZXR0ZVwiLFwiTHVib3dpdHosIEt1aGxtYW4gYW5kIEJhaWxleVwiLFwiRG95bGUgR3JvdXBcIixcIkRvb2xleSBhbmQgU29uc1wiLFwiS2VybHVrZSBMTENcIixcIkJvZ2FuIC0gRGFuaWVsXCIsXCJIaW50eiAtIEJvZWhtXCIsXCJTd2FuaWF3c2tpIGFuZCBTb25zXCIsXCJLcmlzLCBMZWdyb3MgYW5kIENhcnR3cmlnaHRcIixcIlJlaWNoZWwgR3JvdXBcIixcIlJ1c3NlbCAtIEhpbnR6XCIsXCJXZWxjaCwgTG9ja21hbiBhbmQgSGFuZFwiLFwiUG91cm9zIC0gQnJha3VzXCIsXCJNb2hyLCBGcml0c2NoIGFuZCBXaXNvemtcIixcIlVwdG9uIC0gUmVpY2hlcnRcIixcIktvZXBwIGFuZCBTb25zXCIsXCJXZWJlciBhbmQgU29uc1wiLFwiUXVpZ2xleSwgQmlucyBhbmQgQmVja2VyXCIsXCJTdHJvc2luLCBPYmVyYnJ1bm5lciBhbmQgV3Vuc2NoXCIsXCJSb2RyaWd1ZXogLSBTcGVuY2VyXCIsXCJXaWxraW5zb24gLSBEYXJlXCIsXCJHdXRrb3dza2kgSW5jXCIsXCJPUmVpbGx5IExMQ1wiLFwiQ29sbGlucywgTWFudGUgYW5kIFBhY29jaGFcIixcIlN0ZXViZXIsIEx1ZXR0Z2VuIGFuZCBDb3JrZXJ5XCIsXCJLdWIgYW5kIFNvbnNcIixcIkxlc2NoIGFuZCBTb25zXCJdO2Z1bmN0aW9uIEJlKGUpe3JldHVybiBuKFRlLGUpfXZhciBJZT1bXCJBcmdlbnRpbmFcIixcIlBlcnVcIixcIkNvbG9tYmlhXCIsXCJDaGlsZVwiLFwiVXJ1Z3VheVwiLFwiR2Fib25cIixcIkNvbmdvXCIsXCJOb3Jmb2xrIElzbGFuZFwiLFwiUWF0YXJcIixcIlN5cmlhbiBBcmFiIFJlcHVibGljXCIsXCJXYWxsaXMgYW5kIEZ1dHVuYVwiLFwiU29tYWxpYVwiLFwiU2FpbnQgQmFydGhlbGVteVwiLFwiQ29tb3Jvc1wiLFwiU3JpIExhbmthXCIsXCJDemVjaCBSZXB1YmxpY1wiLFwiQ2hyaXN0bWFzIElzbGFuZFwiLFwiTWFjYW9cIixcIk1vbnRlbmVncm9cIixcIkFuZ3VpbGxhXCIsXCJDYW5hZGFcIixcIk1heW90dGVcIixcIlRhamlraXN0YW5cIixcIkFmZ2hhbmlzdGFuXCIsXCJMaWVjaHRlbnN0ZWluXCIsXCJDb2NvcyAoS2VlbGluZykgSXNsYW5kc1wiLFwiQW5nb2xhXCIsXCJCYWhyYWluXCIsXCJEb21pbmljYW4gUmVwdWJsaWNcIixcIkNyb2F0aWFcIixcIkxhdHZpYVwiLFwiVmlyZ2luIElzbGFuZHMsIFUuUy5cIixcIlVuaXRlZCBLaW5nZG9tXCIsXCJCcmF6aWxcIixcIlNwYWluXCIsXCJNb25nb2xpYVwiLFwiTW9udHNlcnJhdFwiLFwiRXN0b25pYVwiLFwiQmVuaW5cIixcIkd1aW5lYVwiLFwiR3VpbmVhLUJpc3NhdVwiLFwiR3JlZWNlXCIsXCJMYW8gUGVvcGxlcyBEZW1vY3JhdGljIFJlcHVibGljXCIsXCJQdWVydG8gUmljb1wiLFwiU2xvdmFraWEgKFNsb3ZhayBSZXB1YmxpYylcIixcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLFwiU3dpdHplcmxhbmRcIixcIkNvc3RhIFJpY2FcIixcIk1hdXJpdGl1c1wiLFwiTmlnZXJpYVwiLFwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsXCJHZXJtYW55XCIsXCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsXCJBbGJhbmlhXCIsXCJSb21hbmlhXCIsXCJNb2xkb3ZhXCIsXCJTZW5lZ2FsXCIsXCJUYW56YW5pYVwiLFwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5IChDaGFnb3MgQXJjaGlwZWxhZ28pXCIsXCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIixcIk5ldyBDYWxlZG9uaWFcIixcIkJ1cnVuZGlcIixcIlBhbmFtYVwiLFwiQXplcmJhaWphblwiLFwiTmFtaWJpYVwiLFwiRnJlbmNoIFNvdXRoZXJuIFRlcnJpdG9yaWVzXCIsXCJWYW51YXR1XCIsXCJFdGhpb3BpYVwiLFwiQnVya2luYSBGYXNvXCIsXCJUdW5pc2lhXCIsXCJNb3phbWJpcXVlXCIsXCJCZWxhcnVzXCIsXCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIixcIkh1bmdhcnlcIixcIkluZG9uZXNpYVwiLFwiQ3lwcnVzXCIsXCJFY3VhZG9yXCIsXCJTYWludCBNYXJ0aW5cIixcIk5hdXJ1XCIsXCJGYXJvZSBJc2xhbmRzXCIsXCJJcmFuXCIsXCJCb2xpdmlhXCIsXCJQaXRjYWlybiBJc2xhbmRzXCIsXCJGcmFuY2VcIixcIlBhcmFndWF5XCIsXCJJc2xlIG9mIE1hblwiLFwiU2llcnJhIExlb25lXCIsXCJNb25hY29cIixcIkJlbGl6ZVwiLFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiXTtmdW5jdGlvbiBQZShlKXtyZXR1cm4gbihJZSxlKX12YXIgeGU9W1wiQmVkZm9yZHNoaXJlXCIsXCJCZXJrc2hpcmVcIixcIkJyaXN0b2xcIixcIkJ1Y2tpbmdoYW1zaGlyZVwiLFwiQ2FtYnJpZGdlc2hpcmVcIixcIkNoZXNoaXJlXCIsXCJDaXR5IG9mIExvbmRvblwiLFwiQ29ybndhbGxcIixcIkN1bWJyaWFcIixcIkRlcmJ5c2hpcmVcIixcIkRldm9uXCIsXCJEb3JzZXRcIixcIkR1cmhhbVwiLFwiRWFzdCBSaWRpbmcgb2YgWW9ya3NoaXJlXCIsXCJFYXN0IFN1c3NleFwiLFwiRXNzZXhcIixcIkdsb3VjZXN0ZXJzaGlyZVwiLFwiR3JlYXRlciBMb25kb25cIixcIkdyZWF0ZXIgTWFuY2hlc3RlclwiLFwiSGFtcHNoaXJlXCIsXCJIZXJlZm9yZHNoaXJlXCIsXCJIZXJ0Zm9yZHNoaXJlXCIsXCJJc2xlIG9mIFdpZ2h0XCIsXCJLZW50XCIsXCJMYW5jYXNoaXJlXCIsXCJMZWljZXN0ZXJzaGlyZVwiLFwiTGluY29sbnNoaXJlXCIsXCJNZXJzZXlzaWRlXCIsXCJOb3Jmb2xrXCIsXCJOb3J0aCBZb3Jrc2hpcmVcIixcIk5vcnRoYW1wdG9uc2hpcmVcIixcIk5vcnRodW1iZXJsYW5kXCIsXCJOb3R0aW5naGFtc2hpcmVcIixcIk94Zm9yZHNoaXJlXCIsXCJSdXRsYW5kXCIsXCJTaHJvcHNoaXJlXCIsXCJTb21lcnNldFwiLFwiU291dGggWW9ya3NoaXJlXCIsXCJTdGFmZm9yZHNoaXJlXCIsXCJTdWZmb2xrXCIsXCJTdXJyZXlcIixcIlR5bmUgYW5kIFdlYXJcIixcIldhcndpY2tzaGlyZVwiLFwiV2VzdCBNaWRsYW5kc1wiLFwiV2VzdCBTdXNzZXhcIixcIldlc3QgWW9ya3NoaXJlXCIsXCJXaWx0c2hpcmVcIixcIldvcmNlc3RlcnNoaXJlXCJdO2Z1bmN0aW9uIERlKGUpe3JldHVybiBuKHhlLGUpfXZhciBxZT1bXCJIYXJ0w7NuIGRlbCBWYWxsZVwiLFwiUGVkaXRcIixcIkdlcm1hbiBCbGFjayBQaWVkIGNhdHRsZVwiLFwiUGFyZGEgQWxwaW5hXCIsXCJEYWphbFwiLFwiUmF5YVwiLFwiQWRhbWF3YVwiLFwiQmxhYXJrb3BcIixcIkRvYXlvIGNhdHRsZVwiLFwiQXVsaWUtQXRhXCIsXCJOb3J0aCBCZW5nYWwgR3JleVwiLFwiTmd1bmlcIixcIkNhbmFyaWFcIixcIlNpcmlcIixcIkJyZWVkXCIsXCJIYWxsaWthcjRcIixcIlNpbW1lbnRhbFwiLFwiUGllIFJvdWdlIGRlcyBQbGFpbmVzXCJdO2Z1bmN0aW9uIEZlKGUpe3JldHVybiBuKHFlLGUpfWZ1bmN0aW9uIEdlKGUpe3JldHVybiBuKCgoKT0+cyh7bWluOjEwMCxtYXg6OTk5fSkudG9TdHJpbmcoKSksZSl9dmFyIExlPVtcIkFtZXJpY2FuIEV4cHJlc3NcIixcIlQtVW5pb25cIixcIlVuaW9uUGF5XCIsXCJEaW5lcnMgQ2x1YlwiLFwiRGlzY292ZXIgQ2FyZFwiLFwiVWtyQ2FyZFwiLFwiUnVQYXlcIixcIkludGVyUGF5bWVudFwiLFwiSW5zdGFQYXltZW50XCIsXCJKQ0JcIixcIk1hZXN0cm8gVUtcIixcIk1hZXN0cm9cIixcIkRhbmtvcnRcIixcIk1pclwiLFwiTlBTIFByaWRuZXN0cm92aWVcIixcIk1hc3RlcmNhcmRcIixcIjUx4oCTNTVcIixcIlRyb3lcIixcIlZpc2FcIixcIlZpc2EgRWxlY3Ryb25cIixcIlVBVFBcIixcIlZlcnZlXCJdO2Z1bmN0aW9uIFJlKGUpe3JldHVybiBuKExlLGUpfWZ1bmN0aW9uIEhlKGUsYSl7cmV0dXJuIG4oZSxhKX12YXIgRWU9W3ticmFuZDpcIkFtZXJpY2FuIEV4cHJlc3NcIixmb3JtYXRzOltcIjM0IyMgIyMjIyMjICMjIyMjXCIsXCIzNyMjICMjIyMjIyAjIyMjI1wiXX0se2JyYW5kOlwiVW5pb25QYXlcIixmb3JtYXRzOltcIjYyIyMgIyMjIyAjIyMjICMjIyNcIixcIjYyIyMjIyAjIyMjIyMjIyMjIyMjXCJdfSx7YnJhbmQ6XCJEaW5lcnMgQ2x1YlwiLGZvcm1hdHM6W1wiMzAwIyAjIyMjIyMgIyMjI1wiLFwiMzAxIyAjIyMjIyMgIyMjI1wiLFwiMzAyIyAjIyMjIyMgIyMjI1wiLFwiMzAzIyAjIyMjIyMgIyMjI1wiLFwiMzA0IyAjIyMjIyMgIyMjI1wiLFwiMzA1IyAjIyMjIyMgIyMjI1wiLFwiMzA5IyAjIyMjIyMgIyMjI1wiLFwiMzYjIyAjIyMjIyMgIyMjI1wiLFwiMzgjIyAjIyMjIyMgIyMjI1wiLFwiMzkjIyAjIyMjIyMgIyMjI1wiLFwiNTQjIyAjIyMjICMjIyMgIyMjI1wiLFwiNTUjIyAjIyMjICMjIyMgIyMjI1wiXX0se2JyYW5kOlwiRGlzY292ZXIgQ2FyZFwiLGZvcm1hdHM6W1wiNjAxMSAjIyMjICMjIyMgIyMjI1wiLFwiNjQ0IyAjIyMjICMjIyMgIyMjI1wiLFwiNjQ1IyAjIyMjICMjIyMgIyMjI1wiLFwiNjQ2IyAjIyMjICMjIyMgIyMjI1wiLFwiNjQ3IyAjIyMjICMjIyMgIyMjI1wiLFwiNjQ4IyAjIyMjICMjIyMgIyMjI1wiLFwiNjQ5IyAjIyMjICMjIyMgIyMjI1wiLFwiNjUjIyAjIyMjICMjIyMgIyMjI1wiXX0se2JyYW5kOlwiUnVQYXlcIixmb3JtYXRzOltcIjYwIyMgIyMjIyAjIyMjICMjIyNcIixcIjY1IyMgIyMjIyAjIyMjICMjIyNcIixcIjgxIyMgIyMjIyAjIyMjICMjIyNcIixcIjgyIyMgIyMjIyAjIyMjICMjIyNcIixcIjUwOCMgIyMjIyAjIyMjICMjIyNcIixcIjM1MyMgIyMjIyAjIyMjICMjIyNcIixcIjM1NiMgIyMjIyAjIyMjICMjIyNcIl19LHticmFuZDpcIkpDQlwiLGZvcm1hdHM6W1wiMzUyOCAjIyMjICMjIyMgIyMjI1wiLFwiMzU2NSAjIyMjICMjIyMgIyMjI1wiLFwiMzU3MiAjIyMjICMjIyMgIyMjI1wiLFwiMzU4OSAjIyMjICMjIyMgIyMjI1wiXX0se2JyYW5kOlwiTWFlc3Ryb1wiLGZvcm1hdHM6W1wiNTAxOCAjIyMjICMjIyMjXCIsXCI1MDIwICMjIyMgIyMjIyNcIixcIjUwMzggIyMjIyAjIyMjI1wiLFwiNTg5MyAjIyMjIyMgIyMjIyNcIixcIjYzMDQgIyMjIyAjIyMjICMjIyNcIixcIjY3NTkgIyMjIyAjIyMjICMjIyNcIixcIjY3NjEgIyMjIyAjIyMjICMjIyMgIyMjXCIsXCI2NzYyICMjIyMgIyMjIyAjIyMjXCIsXCI2NzYzICMjIyMgIyMjIyAjIyMjICMjI1wiXX0se2JyYW5kOlwiRGFua29ydFwiLGZvcm1hdHM6W1wiNTAxOSAjIyMjICMjIyMgIyMjI1wiXX0se2JyYW5kOlwiTWFzdGVyY2FyZFwiLGZvcm1hdHM6W1wiNTEjIyAjIyMjICMjIyMgIyMjI1wiLFwiNTIjIyAjIyMjICMjIyMgIyMjI1wiLFwiNTMjIyAjIyMjICMjIyMgIyMjI1wiLFwiNTQjIyAjIyMjICMjIyMgIyMjI1wiLFwiNTUjIyAjIyMjICMjIyMgIyMjI1wiXX0se2JyYW5kOlwiVmlzYVwiLGZvcm1hdHM6W1wiNCMjIyAjIyMjICMjIyMgIyMjI1wiXX0se2JyYW5kOlwiVmlzYSBFbGVjdHJvblwiLGZvcm1hdHM6W1wiNDAyNiAjIyMjICMjIyMgIyMjI1wiLFwiNDE3NSAwMCMjICMjIyMgIyMjI1wiLFwiNDQwNSAjIyMjICMjIyMgIyMjI1wiLFwiNDUwOCAjIyMjICMjIyMgIyMjI1wiLFwiNDg0NCAjIyMjICMjIyMgIyMjI1wiLFwiNDkxMyAjIyMjICMjIyMgIyMjI1wiLFwiNDkxNyAjIyMjICMjIyMgIyMjI1wiXX0se2JyYW5kOlwiVUFUUFwiLGZvcm1hdHM6W1wiMSMjIyAjIyMjIyAjIyMjIyNcIl19XTtmdW5jdGlvbiBXZShlKXt2YXIgYSx0O2NvbnN0IG89bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS5icmFuZCk/YTpIZShPYmplY3Qua2V5cyhFZSkpLGk9bnVsbD09KHQ9RWUuZmluZCgoZT0+ZS5icmFuZD09PW8pKSk/dm9pZCAwOnQuZm9ybWF0cyxsPVtcIiMjIyMgIyMjIyAjIyMjICMjIyNcIl07cmV0dXJuIG4oKCgpPT5yKGl8fGwpLnJlcGxhY2UoLyMvZywoKCk9PnMoe21pbjowLG1heDo5fSkudG9TdHJpbmcoKSkpKSxlKX12YXIgTmU9W1wiT3Jpbm9jbyBDcm9jb2RpbGVcIixcIkdoYXJpYWxcIixcIkJyb2FkLXNub3V0ZWQgQ2FpbWFuXCIsXCJTYWx0d2F0ZXIgQ3JvY29kaWxlXCIsXCJCbGFjayBDYWltYW5cIixcIldlc3QgQWZyaWNhbiBDcm9jb2RpbGVcIixcIlRvbWlzdG9tYVwiLFwiU2lhbWVzZSBDcm9jb2RpbGVcIixcIlBoaWxpcHBpbmUgQ3JvY29kaWxlXCIsXCJTY2huZWlkZXLigJlzIFNtb290aC1mcm9udGVkIENhaW1hblwiLFwiQ3ViYW4gQ3JvY29kaWxlXCIsXCJOZXcgR3VpbmVhIEZyZXNod2F0ZXIgQ3JvY29kaWxlXCIsXCJOaWxlIENyb2NvZGlsZVwiLFwiQW1lcmljYW4gQ3JvY29kaWxlXCIsXCJDaGluZXNlIEFsbGlnYXRvclwiLFwiRHdhcmYgQ3JvY29kaWxlXCIsXCJZYWNhcmUgQ2FpbWFuXCIsXCJBZnJpY2FuIFNsZW5kZXItc25vdXRlZCBDcm9jb2RpbGVcIl07ZnVuY3Rpb24gemUoZSl7cmV0dXJuIG4oTmUsZSl9dmFyIEtlPVtcIklSUlwiLFwiU0hQXCIsXCJOUFJcIixcIkNBRFwiLFwiWERSXCIsXCJCTURcIixcIkxUTFwiLFwiWFRTXCIsXCJDUkNcIixcIkJZUlwiLFwiR0VMXCIsXCJQR0tcIixcIkhLRFwiLFwiTEtSXCIsXCJJUURcIixcIkNWRVwiLFwiQlJMXCIsXCJNR0FcIixcIlRNVFwiLFwiSVNLXCIsXCJHSVBcIixcIkNVQ1wiLFwiU1lQXCIsXCJNV0tcIixcIkJORFwiLFwiQUZOXCIsXCJGS1BcIixcIkdZRFwiLFwiUEFCXCIsXCJOQURcIixcIlpNS1wiLFwiSUxTXCIsXCJLTUZcIixcIkdCUFwiLFwiSlBZXCIsXCJNVVJcIixcIlVBSFwiLFwiRUVLXCIsXCJTTExcIixcIk1NS1wiLFwiTkdOXCIsXCJTREdcIixcIkFMTFwiLFwiVFJZXCIsXCJCVE5cIixcIkpNRFwiLFwiQVdHXCIsXCJHVFFcIixcIlZFRlwiLFwiWEFGXCIsXCJESkZcIixcIk5JT1wiLFwiWEFVXCIsXCJDT1BcIixcIkNIRlwiLFwiSE5MXCIsXCJET1BcIixcIktIUlwiLFwiRVVSXCIsXCJDTFBcIixcIktFU1wiLFwiVE5EXCIsXCJEWkRcIixcIkdORlwiLFwiVVNEXCIsXCJNQURcIixcIkFPQVwiLFwiU1JEXCIsXCJUV0RcIixcIlJXRlwiLFwiWFBUXCIsXCJQS1JcIixcIlNPU1wiLFwiU0NSXCIsXCJHSFNcIixcIk1OVFwiLFwiQldQXCIsXCJBRURcIixcIlJPTlwiXTtmdW5jdGlvbiBPZShlKXtyZXR1cm4gbihLZSxlKX12YXIgSmU9W1wiRWd5cHRpYW4gUG91bmRcIixcIkJlbGl6ZSBEb2xsYXJcIixcIlN1ZGFuZXNlIFBvdW5kXCIsXCJQYWxsYWRpdW1cIixcIk1leGljYW4gUGVzb1wiLFwiUnVwaWFoXCIsXCJUZW5nZVwiLFwiQm9saXZpYW5vIGJvbGl2aWFub1wiLFwiVmF0dVwiLFwiTGViYW5lc2UgUG91bmRcIixcIlJpZWxcIixcIlVTIERvbGxhclwiLFwiRGppYm91dGkgRnJhbmNcIixcIkt3YWNoYVwiLFwiSHJ5dm5pYVwiLFwiTGFyaVwiLFwiUnVzc2lhbiBSdWJsZVwiLFwiQ29kZXMgc3BlY2lmaWNhbGx5IHJlc2VydmVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzXCIsXCJLaW5hXCIsXCJUdW5pc2lhbiBEaW5hclwiLFwiTGVvbmVcIixcIkJydW5laSBEb2xsYXJcIixcIkRhbmlzaCBLcm9uZVwiLFwiTmVwYWxlc2UgUnVwZWVcIixcIk5vcnRoIEtvcmVhbiBXb25cIixcIlNhdWRpIFJpeWFsXCIsXCJBZmdoYW5pXCIsXCJQbGF0aW51bVwiLFwiSXJhcWkgRGluYXJcIixcIkNvc3RhIFJpY2FuIENvbG9uXCIsXCJTaW5nYXBvcmUgRG9sbGFyXCIsXCJQaGlsaXBwaW5lIFBlc29cIixcIlBvdW5kIFN0ZXJsaW5nXCIsXCJEYWxhc2lcIixcIkRvYnJhXCIsXCJQYWFuZ2FcIixcIkJhbGJvYVwiLFwiQmVybXVkaWFuIERvbGxhciAoY3VzdG9tYXJpbHkga25vd24gYXMgQmVybXVkYSBEb2xsYXIpXCIsXCJCYXJiYWRvcyBEb2xsYXJcIixcIlBhdGFjYVwiLFwiS3V3YWl0aSBEaW5hclwiLFwiQ0ZQIEZyYW5jXCIsXCJVZ2FuZGEgU2hpbGxpbmdcIixcIk5vcndlZ2lhbiBLcm9uZVwiLFwiRG9uZ1wiLFwiTGlsYW5nZW5pXCIsXCJDcm9hdGlhbiBLdW5hXCIsXCJMZXNvdGhvIExvdGlcIixcIlJ1Zml5YWFcIixcIkZvcmludFwiLFwiQXJnZW50aW5lIFBlc29cIixcIkNlZGlcIixcIkJodXRhbmVzZSBOZ3VsdHJ1bVwiLFwiRG9taW5pY2FuIFBlc29cIixcIlNvbW9uaVwiLFwiR3VpbmVhIEZyYW5jXCIsXCJFdXJvcGVhbiBVbml0IG9mIEFjY291bnQgOShFLlUuQS4tOSlcIixcIkV1cm9wZWFuIE1vbmV0YXJ5IFVuaXQgKEUuTS5VLi02KVwiLFwiQ29udmVydGlibGUgTWFya3NcIixcIkN1YmFuIFBlc28gQ29udmVydGlibGVcIixcIlVBRSBEaXJoYW1cIixcIkljZWxhbmQgS3JvbmFcIixcIkdvdXJkZVwiLFwiU29tXCIsXCJCYWhhbWlhbiBEb2xsYXJcIixcIkt3YW56YVwiLFwiQ29yZG9iYSBPcm9cIixcIkdvbGRcIixcIk1hbmF0XCIsXCJCdXJ1bmRpIEZyYW5jXCIsXCJOZXcgVGFpd2FuIERvbGxhclwiLFwiRmlqaSBEb2xsYXJcIixcIlV6YmVraXN0YW4gU3VtXCIsXCJSb21hbmlhbiBMZXVcIl07ZnVuY3Rpb24gVmUoZSl7cmV0dXJuIG4oSmUsZSl9dmFyIGplPVtcIkIvLlwiLFwiwqNcIixcIkxzXCIsXCLigqFcIixcIk5UJFwiLFwi0LvQslwiLFwiJFwiLFwiUlwiLFwiTHRcIixcIu+3vFwiLFwia3JcIixcIktNXCIsXCLhn5tcIixcIkJzXCIsXCLigrlcIixcIlFcIixcIsaSXCIsXCJSJFwiLFwi4oKoXCIsXCLQtNC10L1cIixcInAuXCIsXCLigrpcIixcItCU0LjQvS5cIixcIlBcIixcIlJEJFwiLFwiTFwiLFwiRnRcIixcIkNIRlwiLFwi4oKpXCIsXCJQaHBcIixcIlMvLlwiLFwi4oKtXCIsXCJSTVwiLFwi4oKsXCIsXCJMZWtcIixcIsKlXCIsXCLYi1wiLFwi4oKmXCJdO2Z1bmN0aW9uIFVlKGUpe3JldHVybiBuKGplLGUpfXZhciBfZT1bXCJ1dGY4X3VuaWNvZGVfY2lcIixcImNwMTI1MF9nZW5lcmFsX2NpXCIsXCJjcDEyNTBfYmluXCIsXCJ1dGY4X2dlbmVyYWxfY2lcIixcImFzY2lpX2dlbmVyYWxfY2lcIixcInV0ZjhfYmluXCIsXCJhc2NpaV9iaW5cIl07ZnVuY3Rpb24gWWUoZSl7cmV0dXJuIG4oX2UsZSl9dmFyIFFlPVtcImNvbW1lbnRcIixcImdyb3VwXCIsXCJwYXNzd29yZFwiLFwidG9rZW5cIixcInBob25lXCIsXCJ0aXRsZVwiLFwic3RhdHVzXCIsXCJpZFwiLFwibmFtZVwiLFwidXBkYXRlZEF0XCIsXCJjYXRlZ29yeVwiLFwiZW1haWxcIixcImF2YXRhclwiLFwiY3JlYXRlZEF0XCJdO2Z1bmN0aW9uICRlKGUpe3JldHVybiBuKFFlLGUpfXZhciBYZT1bXCJDU1ZcIixcIkFSQ0hJVkVcIixcIk15SVNBTVwiLFwiTUVNT1JZXCIsXCJJbm5vREJcIixcIkJMQUNLSE9MRVwiXTtmdW5jdGlvbiBaZShlKXtyZXR1cm4gbihYZSxlKX12YXIgZWE9W1widGlueWludFwiLFwiZGF0ZVwiLFwidGltZXN0YW1wXCIsXCJzZXRcIixcImRhdGV0aW1lXCIsXCJlbnVtXCIsXCJiaW5hcnlcIixcImJpZ2ludFwiLFwicG9pbnRcIixcInNtYWxsaW50XCIsXCJ0ZXh0XCIsXCJiaXRcIixcImRlY2ltYWxcIixcInZhcmNoYXJcIixcIm1lZGl1bWludFwiLFwiZG91YmxlXCIsXCJ0aW1lXCIsXCJibG9iXCIsXCJnZW9tZXRyeVwiLFwiYm9vbGVhblwiLFwic2VyaWFsXCIsXCJyZWFsXCIsXCJmbG9hdFwiXTtmdW5jdGlvbiBhYShlKXtyZXR1cm4gbihlYSxlKX12YXIgdGE9W1wiT3JhY2xlXCIsXCJNeVNRTFwiLFwiTWljcm9zb2Z0IFNRTCBTZXJ2ZXJcIixcIlBvc3RncmVTUUxcIixcIk1vbmdvREJcIixcIklCTSBEYjJcIixcIlJlZGlzXCIsXCJFbGFzdGljc2VhcmNoXCIsXCJNaWNyb3NvZnQgQWNjZXNzXCIsXCJTUUxpdGVcIixcIkNhc3NhbmRyYVwiLFwiU3BsdW5rXCIsXCJNYXJpYURCXCIsXCJUZXJhZGF0YVwiLFwiSGl2ZVwiLFwiU29sclwiLFwiSEJhc2VcIixcIkZpbGVNYWtlclwiLFwiU0FQIEhBTkFcIixcIkFtYXpvbiBEeW5hbW9EQlwiLFwiU0FQIEFkYXB0aXZlIFNlcnZlclwiLFwiTmVvNGpcIixcIkNvdWNoYmFzZVwiLFwiTWVtY2FjaGVkXCIsXCJNaWNyb3NvZnQgQXp1cmUgU1FMIERhdGFiYXNlXCJdO2Z1bmN0aW9uIG9hKGUpe3JldHVybiBuKHRhLGUpfXZhciBpYT1bXCJHYW1lc1wiLFwiQXV0b21vdGl2ZVwiLFwiTXVzaWNcIixcIkhvbWVcIixcIk1vdmllc1wiLFwiSGVhbHRoXCIsXCJTcG9ydHNcIixcIkdhcmRlblwiLFwiQmFieVwiLFwiS2lkc1wiLFwiVG95c1wiLFwiQ29tcHV0ZXJzXCIsXCJDbG90aGluZ1wiLFwiT3V0ZG9vcnNcIixcIlNob2VzXCIsXCJKZXdlbGVyeVwiLFwiSW5kdXN0cmlhbFwiLFwiRWxlY3Ryb25pY3NcIixcIlRvb2xzXCIsXCJHcm9jZXJ5XCIsXCJCZWF1dHlcIixcIkJvb2tzXCJdO2Z1bmN0aW9uIG5hKGUpe3JldHVybiBuKGlhLGUpfXZhciByYT1bXCJTb3V0aHdlc3RcIixcIk5vcnRoXCIsXCJOb3J0aGVhc3RcIixcIk5vcnRod2VzdFwiLFwiU291dGhcIixcIldlc3RcIixcIkVhc3RcIixcIlNvdXRoZWFzdFwiXTtmdW5jdGlvbiBzYShlKXtyZXR1cm4gbihyYSxlKX12YXIgbGE9W1wiSmFjayBSdXNzZWxsIFRlcnJpZXJcIixcIkJlYXVjZXJvblwiLFwiRGVubWFyayBGZWlzdFwiLFwiQWZmZW5waW5zY2hlclwiLFwiS2lzaHVcIixcIkJveWtpbiBTcGFuaWVsXCIsXCJFbmdsaXNoIFRveSBUZXJyaWVyXCIsXCJBbGFza2FuIE1hbGFtdXRlXCIsXCJFbmdsaXNoIE1hc3RpZmZcIixcIk1hbHRlc2VcIixcIkNyb2F0aWFuIFNoZWVwZG9nXCIsXCJHYXJhZmlhbiBTaGVwaGVyZFwiLFwiR2lhbnQgU2NobmF1emVyXCIsXCJBdXN0cmlhbiBCbGFjayBhbmQgVGFuIEhvdW5kXCIsXCJCYXNzZXQgRmF1dmUgZGUgQnJldGFnbmVcIixcIlBvbWVyYW5pYW5cIixcIk5vdmEgU2NvdGlhIER1Y2sgVG9sbGluZyBSZXRyaWV2ZXJcIixcIkh5Z2VuIEhvdW5kXCIsXCJHb2xkZW4gUmV0cmlldmVyXCIsXCJEb2Jlcm1hbiBQaW5zY2hlclwiLFwiRnJlbmNoIFBvb2RsZVwiLFwiU2liZXJpYW4gSHVza3lcIixcIkNvY2tlciBTcGFuaWVsXCJdO2Z1bmN0aW9uIHVhKGUpe3JldHVybiBuKGxhLGUpfXZhciBjYT1bXCJvcmdcIixcImJpelwiLFwiY29tXCIsXCJuZXRcIixcIm5hbWVcIixcImluZm9cIixcImlvXCIsXCJkZXZcIl07ZnVuY3Rpb24gZGEoZSl7cmV0dXJuIG4oY2EsZSl9dmFyIGhhPVtcImVzdFwiLFwidm9sdXB0YXRlbVwiLFwibm9uXCIsXCJhdXRcIixcImFsaXF1aWRcIixcInF1YWVyYXRcIixcInF1b3NcIixcInZlbFwiLFwidGVuZXR1clwiLFwiY29uc2VjdGV0dXJcIixcImlwc3VtXCIsXCJ2b2x1cHRhdGVcIixcIm51bXF1YW1cIixcIm51bGxhXCIsXCJhc3BlcmlvcmVzXCIsXCJpblwiLFwibGFib3J1bVwiLFwicXVhc1wiLFwiZXRcIixcInVsbGFtXCIsXCJjb25zZXF1dW50dXJcIixcImVuaW1cIixcImRpY3RhXCIsXCJxdWlhXCIsXCJmYWNpbGlzXCIsXCJ2b2x1cHRhdGlidXNcIixcImF0XCIsXCJoaWNcIixcInN1bnRcIixcImV4Y2VwdHVyaVwiLFwibWFpb3Jlc1wiLFwidml0YWVcIixcImZ1Z2l0XCIsXCJwb3NzaW11c1wiLFwidW5kZVwiLFwicmVwZWxsYXRcIixcInNpdFwiLFwibmVjZXNzaXRhdGlidXNcIixcIm5lbW9cIixcInF1aVwiLFwiZXhlcmNpdGF0aW9uZW1cIixcImRvbG9yZXNcIixcImVzc2VcIixcInJlaWNpZW5kaXNcIixcIm5paGlsXCIsXCJjb21tb2RpXCIsXCJpZFwiLFwic2VxdWlcIixcImNvbnNlcXVhdHVyXCIsXCJvY2NhZWNhdGlcIixcImRlc2VydW50XCIsXCJxdWFlXCIsXCJlb3NcIixcInNhcGllbnRlXCIsXCJmdWdpYXRcIixcIm5lcXVlXCIsXCJxdWFzaVwiLFwibm9zdHJ1bVwiLFwibWFnbmFtXCIsXCJzZWRcIixcIm9tbmlzXCIsXCJkb2xvcmlidXNcIixcImVycm9yXCIsXCJkdWNpbXVzXCIsXCJyZXJ1bVwiLFwiYmVhdGFlXCIsXCJjdXBpZGl0YXRlXCIsXCJibGFuZGl0aWlzXCIsXCJsYWJvcmVcIl07ZnVuY3Rpb24gbWEoZSl7cmV0dXJuIG4oKCgpPT57bGV0IGE9cihoYSk7dmFyIHQ7cmV0dXJuIG51bGwhPWUmJmUuY2FwaXRhbGl6ZSYmKGE9KHQ9YSkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKSksYX0pLGUpfWZ1bmN0aW9uIHBhKGUpe3JldHVybiBuKCgoKT0+YCR7bWEoKX0uJHtkYSgpfWApLGUpfXZhciB5YT1bXCJBbWFyZXR0byBTb3VyXCIsXCJBdmlhdGlvblwiLFwiQ29ja3RhaWxcIixcIkdpblwiLFwiTGlxdWV1clwiLFwiQmVsbGluaVwiLFwiQnJhbmR5XCIsXCJCbGFjayBSdXNzaWFuXCIsXCJCb3VyYm9uXCIsXCJDb2ZmZWUtZmxhdm9yZWQgbGlxdWV1clwiLFwiQ29mZmVlIGxpcXVldXJcIixcIkNyYW5iZXJyeSBWb2RrYVwiLFwiQ3JlbWUgZGUgQ2FjYW9cIixcIkNyZW1lIGRlIENhc3Npc1wiLFwiQ3JlbWUgZGUgTWVudGhlXCIsXCJDcmVtZSBkZSBOb3lhdXhcIixcIkJsb29keSBNYXJ5XCIsXCJCb3VsZXZhcmRpZXJcIixcIkJyb254IENvY2t0YWlsXCIsXCJDbG92ZXIgQ2x1YlwiLFwiQ29zbW9wb2xpdGFuXCIsXCJDdWJhIExpYnJlXCIsXCJEYWlxdWlyaVwiLFwiRGFyayBhbmQgU3Rvcm15XCIsXCJGcmVuY2ggNzVcIixcIkdpbiBhbmQgVG9uaWNcIixcIkdvZGZhdGhlclwiLFwiQjUyXCIsXCJHcmV5aG91bmRcIixcIkhhcnZleSBXYWxsYmFuZ2VyXCIsXCJJcmlzaCBDb2ZmZWVcIixcIkphY2sgUm9zZVwiLFwiS2FtaWthemVcIixcIk1hcnRpbmlcIixcIk1hcnRpbmkgQmlhbmNvXCIsXCJMb25nIElzbGFuZFwiLFwiTG9uZyBJc2xhbmQgSWNlIFRlYVwiLFwiTWFpIFRhaVwiLFwiTWFyZ2FyaXRhXCIsXCJNaW1vc2FcIixcIk1pbnQgSnVsZXBcIixcIk5lZ3JvbmlcIixcIk1vaml0b1wiLFwiU3RpbGwgV2F0ZXJcIixcIlNwcmlua2xlZCBXYXRlclwiLFwiV2hpdGUgTGFkeVwiLFwiTmVncm9uaVwiLFwiQ2hhbXBhZ25lXCIsXCJSZWQgV2luZVwiLFwiV2hpdGUgV2luZVwiLFwiUnVtXCIsXCJSdW0gYW5kIENva2VcIixcIlJ1bSBQdW5jaFwiLFwiUGluYSBDb2xhZGFcIixcIlNhbmdyaWFcIixcIlNhemVyYWNcIixcIlRlcXVpbGFcIixcIlRlcXVpbGEgU3VucmlzZVwiLFwiWm9tYmllXCIsXCJUaGFpIFNwcmluZyBNb2ppdG9cIixcIlRoYWkgQmFzaWwgTWFydGluaVwiLFwiU2NyZXdkcml2ZXJcIixcIlJhc3BiZXJyeSBMZW1vbiBEcm9wXCIsXCJPcmFuZ2UgU29kYVwiLFwiUGluZWFwcGxlIEdpbmdlcmFsZVwiLFwiUG9tZWdyYW5hdGUgQ3JhbmJlcnJ5XCIsXCJOYXR1cmFsIFZhbmlsbGEgU3lydXBcIixcIk9yYW5nZSBMaXF1ZXVyXCIsXCJQZWFjaCBTY2huYXBwc1wiLFwiUGVwcGVybWludCBTY2huYXBwc1wiLFwiUGluZWFwcGxlIEp1aWNlXCIsXCJQaW5lYXBwbGUgU29kYVwiLFwiUGFzc2lvbiBGcnVpdCBQdWNrZXJcIl07ZnVuY3Rpb24gZ2EoZSl7cmV0dXJuIG4oeWEsZSl9dmFyIGZhPVtcImFpbVwiLFwiYWxpY2VcIixcImFsaWNlYWRzbFwiLFwiYW9sXCIsXCJhcmNvclwiLFwiYXR0XCIsXCJiZWxsc291dGhcIixcImJpZ3BvbmRcIixcImJsdWV3aW5cIixcImJsdWV5b25kZXJcIixcImJvbFwiLFwiY2VudHVyeXRlbFwiLFwiY2hhcnRlclwiLFwiY2hlbGxvXCIsXCJjbHViLWludGVybmV0XCIsXCJjb21jYXN0XCIsXCJlYXJ0aGxpbmtcIixcImZhY2Vib29rXCIsXCJmcmVlXCIsXCJmcmVlbmV0XCIsXCJmcm9udGllcm5ldFwiLFwiZ21haWxcIixcImdteFwiLFwiZ29vZ2xlbWFpbFwiLFwiaGV0bmV0XCIsXCJob21lXCIsXCJob3RtYWlsXCIsXCJpZ1wiLFwianVub1wiLFwibGFwb3N0ZVwiLFwibGliZXJvXCIsXCJsaXZlXCIsXCJtYWNcIixcIm1haWxcIixcIm1lXCIsXCJtc25cIixcIm5ldWZcIixcIm50bHdvcmxkXCIsXCJvcHRvbmxpbmVcIixcIm9wdHVzbmV0XCIsXCJvcmFuZ2VcIixcIm91dGxvb2tcIixcInBsYW5ldFwiLFwicXFcIixcInJhbWJsZXJcIixcInJlZGlmZm1haWxcIixcInJvY2tldG1haWxcIixcInNiY2dsb2JhbFwiLFwic2ZyXCIsXCJzaGF3XCIsXCJza3lcIixcInNreW5ldFwiLFwic3ltcGF0aWNvXCIsXCJ0LW9ubGluZVwiLFwidGVsZW5ldFwiLFwidGVycmFcIixcInRpblwiLFwidGlzY2FsaVwiLFwidW5hcmVmXCIsXCJ1b2xcIixcInZlcml6b25cIixcInZpcmdpbGlvXCIsXCJ2b2lsYVwiLFwid2FuYWRvb1wiLFwid2ViXCIsXCJ3aW5kc3RyZWFtXCIsXCJ5YWhvb1wiLFwieWFuZGV4XCIsXCJ6b25uZXRcIl07ZnVuY3Rpb24gYmEoZSl7cmV0dXJuIG4oZmEsZSl9dmFyIHZhPXt3aXRoQWNjZW50czp7bWFsZTpbXCJBZHJpw6FuXCIsXCLDhmdpclwiLFwiw4FsdmFyb1wiLFwiQW5kcsOpXCIsXCJBbmRyw6lzXCIsXCLDgXJuaVwiLFwiQXNiasO4cm5cIixcIkJqw7ZyblwiLFwiQ8Opc2FyXCIsXCJEYW7DrWVsXCIsXCJEYXbDrcOwXCIsXCJFbcOtbGlvXCIsXCJGYcOxY2hcIixcIkZyYW7Dp29pc1wiLFwiRnJhbnRpxaFla1wiLFwiR8Otc2xpXCIsXCJHw7Z0elwiLFwiR3XDsGrDs25cIixcIkd1w7BtdW5kdXJcIixcIkfDvG50ZXJcIixcIkhhbGxkw7NyXCIsXCJIYW5zLUrDtnJnXCIsXCJIYW5zLUrDvHJnZW5cIixcIkjDvHNleWluXCIsXCJJw7Fha2lcIixcIkrDoW5vc1wiLFwiSmVzw7pzXCIsXCJKacWZw61cIixcIkrDs2hhbm5cIixcIkrDs2hhbm5lc1wiLFwiSm9rxatiYXNcIixcIkrDs25cIixcIkpvc8OpXCIsXCJKw7ZyblwiLFwiSnVsacOjb1wiLFwiSsO8cmdlblwiLFwiS3Jpc3Rqw6FuXCIsXCJNYcOrbFwiLFwiTWFnbsO6c1wiLFwiTWF0aMOpb1wiLFwiTcOhdHnDoXNcIixcIk1pY2hhxYJcIixcIk5vw6tsXCIsXCJOdcOxZXpcIixcIsOTbGFmdXJcIixcIsOTc2NhclwiLFwiw5h5dmluZFwiLFwiUMOhbGxcIixcIlBhd2XFglwiLFwiUMOpdHVyXCIsXCJSYW3Ds25cIixcIlJhw7psXCIsXCJSZW7DqVwiLFwiUnVhaXLDrVwiLFwiUnViw6luXCIsXCJTZcOhblwiLFwiU8Opcmdpb1wiLFwiU2lndXLDsHVyXCIsXCJTw7Zua2VcIixcIlN0ZWbDoW5cIixcIlRvbcOhxaFcIixcIsOeb3JzdGVpbm5cIl0sZmVtYWxlOltcIsOGZGVsXCIsXCJBZ27DqHNcIixcIkFsw61jaWFcIixcIsOEbm5lXCIsXCJBbnTDs25pYVwiLFwiw4FzdGFcIixcIkF1w7B1clwiLFwiQ8OkY2lsaWFcIixcIkNobG/Dq1wiLFwiQ2xhw7pkaWFcIixcIkTDtnJ0ZVwiLFwiRWzDrW5cIixcIkVsw61zYWJldFwiLFwiRWxpxaFrYVwiLFwiRnJhbnRpxaFrYVwiLFwiR2zDs3JpYVwiLFwiR3Jhxbx5bmFcIixcIkd1w7BiasO2cmdcIixcIkd1w7Buw71cIixcIkd1w7Byw7puXCIsXCJIZW5yacOrdHRlXCIsXCJJbmdpYmrDtnJnXCIsXCLDjXJpc1wiLFwiSsOzaGFubmFcIixcIkrDs25hXCIsXCJKw7psaWFcIixcIkvDpHRlXCIsXCJLYXRyw61uXCIsXCJLb2xicsO6blwiLFwiS3Jpc3TDrW5cIixcIkvFoHRoZVwiLFwiTGV0w61jaWFcIixcIkzDrWRpYVwiLFwiTMO6Y2lhXCIsXCJNYcWCZ29yemF0YVwiLFwiTWFyZ3LDqXRcIixcIk1hcsOtYVwiLFwiTcOzbmljYVwiLFwiTmF0w6FsaWFcIixcIsOTbMO2ZlwiLFwiUGF0csOtY2lhXCIsXCJSYWduaGVpw7B1clwiLFwiUmVuw6llXCIsXCJSdcW+ZW5hXCIsXCJTacOiblwiLFwiU2lncsOtw7B1clwiLFwiU2lncsO6blwiLFwiU8OtbHZpYVwiLFwiU8O4cmluYVwiLFwiVsSbcmFcIixcIlZpcmfDrW5pYVwiLFwiWm/Dq1wiLFwiw57Ds3JhXCIsXCLDnsOzcnVublwiXX0sd2l0aG91dEFjY2VudHM6e21hbGU6W1wiQWJkdWxcIixcIkFiZHVsbGFoaVwiLFwiQWJ1YmFrYXJcIixcIkFkYW1cIixcIkFkYW11XCIsXCJBZGl5XCIsXCJBaG1hZFwiLFwiQWpheVwiLFwiQWtpcmFcIixcIkFsYW5cIixcIkFsYmVydG9cIixcIkFsZWphbmRyb1wiLFwiQWxla3NhbmRlclwiLFwiQWxla3NhbmRyXCIsXCJBbGVrc2V5XCIsXCJBbGV4XCIsXCJBbGV4YW5kZXJcIixcIkFsZXhleVwiLFwiQWxpXCIsXCJBbGl5dVwiLFwiQW1pbnVcIixcIkFtaXRcIixcIkFtaXlyXCIsXCJBbWl5dFwiLFwiQW1udWFpXCIsXCJBbXBob25cIixcIkFuYWhcIixcIkFuYW5cIixcIkFuZHJlYXNcIixcIkFuZHJld1wiLFwiQW5kcmV5XCIsXCJBbmRyaVwiLFwiQW5kcmllc1wiLFwiQW5kcnplalwiLFwiQW5pbFwiLFwiQW50aG9ueVwiLFwiQW50b25cIixcIkFudG9uaW9cIixcIkFybmFyXCIsXCJBcnR1clwiLFwiQXJ0eW9tXCIsXCJBcnVuXCIsXCJBc2hva1wiLFwiQXRsaVwiLFwiQXZyYWhhbVwiLFwiQmFydG9zelwiLFwiQmVsbG9cIixcIkJlcm5kXCIsXCJCaW5cIixcIkJpcmdpclwiLFwiQmphcm5pXCIsXCJCbGVzc2luZ1wiLFwiQm9uZ2FuaVwiLFwiQnJpYW5cIixcIkJ1bm1pXCIsXCJDYXJsb3NcIixcIkNhcm9sXCIsXCJDaGFuXCIsXCJDaGFvXCIsXCJDaGFybGVzXCIsXCJDaGFyb2VuXCIsXCJDaGVuXCIsXCJDaGVuZ1wiLFwiQ2hyaXN0aWFuXCIsXCJDaHJpc3RvcGhlclwiLFwiQ29saW5cIixcIkRhbmllbFwiLFwiRGFuaXllbFwiLFwiRGFyaXVzelwiLFwiRGF2aWRcIixcIkRlbmlzXCIsXCJEZW5uaXNcIixcIkRpZWdvXCIsXCJEaWV0ZXJcIixcIkRpbGlwXCIsXCJEaW5lc2hcIixcIkRtaXRyaXlcIixcIkRtaXRyeVwiLFwiRWluYXJcIixcIkVsaXlhaHVcIixcIkVtbWFudWVsXCIsXCJFdmdlbml5XCIsXCJGZXJuYW5kb1wiLFwiRnJhblwiLFwiRnJhbmNpc1wiLFwiRnJhbmNpc2NvXCIsXCJGcmFuY2lzY28tSmF2aWVyXCIsXCJGcmFua1wiLFwiRnJhbnpcIixcIkdhbmdcIixcIkdhcmV0aFwiLFwiR2FyeVwiLFwiR2VvcmdlXCIsXCJHZXJoYXJkXCIsXCJHcmFoYW1cIixcIkdyemVnb3J6XCIsXCJHdW5uYXJcIixcIkd1eVwiLFwiSGFpbVwiLFwiSGFpeWFuXCIsXCJIYW5zXCIsXCJIYW5zLVVscmljaFwiLFwiSGFydW5hXCIsXCJIYXNzYW5cIixcIkhlaWtlXCIsXCJIZWluelwiLFwiSGVsZ2lcIixcIkhlbG11dFwiLFwiSGVuZHJpa1wiLFwiSGVyYmVydFwiLFwiSGlkZW9cIixcIkhpcm9taVwiLFwiSGlyb3NoaVwiLFwiSG9uZ1wiLFwiSG9yc3RcIixcIkh1aVwiLFwiSWFuXCIsXCJJYnJhaGltXCIsXCJJZHJpc1wiLFwiSWdvclwiLFwiSWx5YVwiLFwiSXNhXCIsXCJJc2FhY1wiLFwiSXNhaFwiLFwiSXZhblwiLFwiSmFidWxhbmlcIixcIkphY2VrXCIsXCJKYWNvYnVzXCIsXCJKYWt1YlwiLFwiSmFtZXNcIixcIkphblwiLFwiSmFudXN6XCIsXCJKYXZpZXJcIixcIkplYW5cIixcIkplcnp5XCIsXCJKZXN1c1wiLFwiSmFzb25cIixcIkppYW5ndW9cIixcIkppYW5odWFcIixcIkppYW5qdW5cIixcIkppYW5waW5nXCIsXCJKaW5cIixcIkpvYW5cIixcIkpvaGFuXCIsXCJKb2hhbm5lc1wiLFwiSm9oblwiLFwiSm9uYXRoYW5cIixcIkpvcmdlXCIsXCJKb3NlXCIsXCJKb3NlLUFudG9uaW9cIixcIkpvc2UtTHVpc1wiLFwiSm9zZS1NYW51ZWxcIixcIkpvc2UtTWFyaWFcIixcIkpvc2VmXCIsXCJKb3NlcGhcIixcIkpveWNlXCIsXCJKdWFuXCIsXCJLYWJpcnVcIixcIkthaVwiLFwiS2FtaWxcIixcIkthcmVuXCIsXCJLYXJsXCIsXCJLYXJsLUhlaW56XCIsXCJLYXRzdW1pXCIsXCJLYXp1b1wiLFwiS2VsdmluXCIsXCJLZW5qaVwiLFwiS2VubmV0aFwiLFwiS2V2aW5cIixcIktpcmFuXCIsXCJLaXJpbGxcIixcIktpeW9zaGlcIixcIktqYXJ0YW5cIixcIktsYXVzXCIsXCJLb1wiLFwiS29pY2hpXCIsXCJLb2ppXCIsXCJLb25zdGFudGluXCIsXCJLb3NoaVwiLFwiS3Jpc2huYVwiLFwiS3Jpc3Rpbm5cIixcIktyenlzenRvZlwiLFwiS3VuXCIsXCJMYWtzaG1pXCIsXCJMYW5cIixcIkxheG1pXCIsXCJMZWlcIixcIkxpXCIsXCJMaWh1YVwiLFwiTGlqdW5cIixcIkxpbGlhblwiLFwiTGluXCIsXCJMaW5nXCIsXCJMaXBpbmdcIixcIkxpeW9yXCIsXCJMdWlzXCIsXCJMdWthc3pcIixcIk1hY2llalwiLFwiTWFobW9vZFwiLFwiTWFrc2ltXCIsXCJNYW5mcmVkXCIsXCJNYW5valwiLFwiTWFudWVsXCIsXCJNYXJjaW5cIixcIk1hcmRraGF5XCIsXCJNYXJla1wiLFwiTWFyaXVzelwiLFwiTWFya1wiLFwiTWFydGluXCIsXCJNYXNhbWlcIixcIk1hc2FvXCIsXCJNYXRldXN6XCIsXCJNYXR0XCIsXCJNYXR0aGV3XCIsXCJNZWl5clwiLFwiTWljaGFlbFwiLFwiTWljaGFsXCIsXCJNaWd1ZWxcIixcIk1pZ3VlbC1BbmdlbFwiLFwiTWlraGFpbFwiLFwiTWluXCIsXCJNaW5nXCIsXCJNaXRzdW9cIixcIk1peWtoYWVsXCIsXCJNaXlraGFsXCIsXCJNb1wiLFwiTW9oYW1lZFwiLFwiTW9oYW1tYWRcIixcIk1vaGFtbWVkXCIsXCJNb2hhblwiLFwiTW9zZXNcIixcIk1vc2hlXCIsXCJNcGhvXCIsXCJNdWhhbW1hZFwiLFwiTXVoYW1tZWRcIixcIk11a2VzaFwiLFwiTXVzYVwiLFwiTmFyb25nXCIsXCJOYXRoYW5cIixcIk5pY29sYVwiLFwiTmlraXRhXCIsXCJOaWtvbGF5XCIsXCJOaW5nXCIsXCJOa29zaW5hdGhpXCIsXCJOb2FtXCIsXCJPbGVnXCIsXCJPbWVyXCIsXCJPdGllbm9cIixcIlBhYmxvXCIsXCJQYXRyaWNrXCIsXCJQYXVsXCIsXCJQYXZlbFwiLFwiUGF3ZWxcIixcIlBlZHJvXCIsXCJQZW5nXCIsXCJQZXRlclwiLFwiUGV0cnVzXCIsXCJQaGlsaXBcIixcIlBpZXRlclwiLFwiUGluZ1wiLFwiUGlvdHJcIixcIlByYXNpdFwiLFwiUHJhc29ldFwiLFwiUHJpY2hhXCIsXCJQdXNocGFcIixcIlFpYW5nXCIsXCJRaW5nXCIsXCJSYWRoYVwiLFwiUmFmYWVsXCIsXCJSYWduYXJcIixcIlJhalwiLFwiUmFqZW5kcmFcIixcIlJhamVzaFwiLFwiUmFqdVwiLFwiUmFrZXNoXCIsXCJSYW1cIixcIlJhbWVzaFwiLFwiUmFwaGFlbFwiLFwiUmF0dGFuYVwiLFwiUmF2aVwiLFwiUmljaGFyZFwiLFwiUm9iZXJ0XCIsXCJSb21hblwiLFwiUm9uZ1wiLFwiUm95XCIsXCJSeWFuXCIsXCJTYWxpc3VcIixcIlNhbWFuXCIsXCJTYW1yYW5cIixcIlNhbXVlbFwiLFwiU2FuaVwiLFwiU2FuamF5XCIsXCJTYW50b3NoXCIsXCJTYW1cIixcIlNhbW15XCIsXCJTYXdhdFwiLFwiU2ViYXN0aWFuXCIsXCJTZXJnZXlcIixcIlNlcmdpb1wiLFwiU2hhbmthclwiLFwiU2hheVwiLFwiU2hpZ2VydVwiLFwiU2hpbW9uXCIsXCJTaGxvbW9cIixcIlNob2ppXCIsXCJTaWJ1c2lzb1wiLFwiU2ltb25cIixcIlNpcGhvXCIsXCJTb21iYXRcIixcIlNvbWJ1blwiLFwiU29tY2hhaVwiLFwiU29tY2hpdFwiLFwiU29ta2hpdFwiLFwiU29ta2lhdFwiLFwiU29tbWFpXCIsXCJTb21udWVrXCIsXCJTb21waG9uXCIsXCJTb21waG9uZ1wiLFwiU29tc2FrXCIsXCJTcmlcIixcIlN0ZWZhblwiLFwiU3RlcGhlblwiLFwiU3RldmVcIixcIlN0ZXZlblwiLFwiU3VtYW5cIixcIlN1bmRheVwiLFwiU3VuaWxcIixcIlN1bnRob25cIixcIlN1cmVzaFwiLFwiU3VzaGlsYVwiLFwiU3V3aXRcIixcIlN2ZWlublwiLFwiVGFkYXNoaVwiLFwiVGFrYXNoaVwiLFwiVGFrZXNoaVwiLFwiVGFsXCIsXCJUZWJvZ29cIixcIlRoYWJvXCIsXCJUaGF3aVwiLFwiVGhlbWJhXCIsXCJUaG9tYXNcIixcIlRodWxhbmlcIixcIlRvbWFzelwiLFwiVG9zaGlvXCIsXCJVZG9tXCIsXCJVbWFyXCIsXCJVcml5XCIsXCJVc21hblwiLFwiVXdlXCIsXCJWaWN0b3JcIixcIlZpamF5XCIsXCJWaWt0b3JcIixcIlZpbmNlbnRcIixcIlZpbm9kXCIsXCJWbGFkaW1pclwiLFwiV2FsdGVyXCIsXCJXYW5jaGFpXCIsXCJXYXJhcGhvblwiLFwiV2VpXCIsXCJXZXJuZXJcIixcIldpY2hhaVwiLFwiV2ljaGlhblwiLFwiV2lsbGVtXCIsXCJXaWxsaWFtXCIsXCJXaW5haVwiLFwiV2lyYXRcIixcIldpcm90XCIsXCJXb2pjaWVjaFwiLFwiV29sZmdhbmdcIixcIlhpYW5nXCIsXCJYaWFvaG9uZ1wiLFwiWGlhb2xpXCIsXCJYaWFvcGluZ1wiLFwiWGlhb3lhblwiLFwiWGluXCIsXCJYb2xhbmlcIixcIllhYWt2XCIsXCJZYWhheWFcIixcIllha3VidVwiLFwiWWFuXCIsXCJZYXN1b1wiLFwiWWh1ZGFoXCIsXCJZaW5nXCIsXCJZaXNyYWVsXCIsXCJZb25nXCIsXCJZb3NlZlwiLFwiWW9zaGllXCIsXCJZb3NoaW1pXCIsXCJZb3NoaW9cIixcIll1XCIsXCJZdWVcIixcIll1a2lvXCIsXCJZdW5cIixcIll1cml5XCIsXCJZdXN1ZlwiLFwiWXV2YWxcIixcIlpiaWduaWV3XCIsXCJaaGVuXCIsXCJaaGlxaWFuZ1wiXSxmZW1hbGU6W1wiQWdhdGFcIixcIkFnbmllc3prYVwiLFwiQWlzaGFcIixcIkFraXJhXCIsXCJBbGVrc2FuZHJhXCIsXCJBbGluYVwiLFwiQWx5b25hXCIsXCJBbWluYVwiLFwiQW1udWFpXCIsXCJBbmFcIixcIkFuYS1NYXJpYVwiLFwiQW5haFwiLFwiQW5hblwiLFwiQW5hc3Rhc2l5YVwiLFwiQW5kcmVhXCIsXCJBbmdlbGFcIixcIkFuaXRhXCIsXCJBbm5cIixcIkFubmFcIixcIkFub25nXCIsXCJBbnRvbmlhXCIsXCJBc2hhXCIsXCJCYXJiYXJhXCIsXCJCZWF0YVwiLFwiQmVyZ2xpbmRcIixcIkJpblwiLFwiQmlyZ2l0XCIsXCJCaXJuYVwiLFwiQmxlc3NpbmdcIixcIkJyaWdpdHRlXCIsXCJCdW5taVwiLFwiQnVzaXNpd2VcIixcIkNhcm1lblwiLFwiQ2Fyb2xcIixcIkNhcm9saW5lXCIsXCJDYXRoZXJpbmVcIixcIkNoYW5cIixcIkNoYW5haFwiLFwiQ2hhb1wiLFwiQ2hhcm9lblwiLFwiQ2hheWFoXCIsXCJDaGVuXCIsXCJDaGVuZ1wiLFwiQ2hyaXN0YVwiLFwiQ2hyaXN0aW5lXCIsXCJDbGFpcmVcIixcIkNsYXVkaWFcIixcIkNyaXN0aW5hXCIsXCJEYXJ5YVwiLFwiRG9sb3Jlc1wiLFwiRG9yb3RhXCIsXCJFZGRhXCIsXCJFa2F0ZXJpbmFcIixcIkVsZW5hXCIsXCJFbGlzYWJldGhcIixcIkVsaXphYmV0aFwiLFwiRWxrZVwiLFwiRW1pa29cIixcIkVtbWFcIixcIkVyaWthXCIsXCJFcmxhXCIsXCJFcm5hXCIsXCJFc3RlclwiLFwiRXN0aGVyXCIsXCJFdW5pY2VcIixcIkV2YVwiLFwiRXVnZW5pYVwiLFwiRXdhXCIsXCJGYWl0aFwiLFwiRmF0aW1hXCIsXCJGaW9uYVwiLFwiRnJhblwiLFwiRnJhbmNpc2NhXCIsXCJGdW1pa29cIixcIkdhbGluYVwiLFwiR2FicmFcIixcIkdpc2VsYVwiLFwiR2l0YVwiLFwiR3JhY2VcIixcIkhhZGl6YVwiLFwiSGFpeWFuXCIsXCJIYW5uYVwiLFwiSGFydW5hXCIsXCJIYXV3YVwiLFwiSGVpa2VcIixcIkhlbGVuXCIsXCJIZWxnYVwiLFwiSGlsZHVyXCIsXCJIaXJva29cIixcIkhpcm9taVwiLFwiSGlzYWtvXCIsXCJIb25nXCIsXCJIdWlcIixcIkh1bGRhXCIsXCJJbmdhXCIsXCJJbmdyaWRcIixcIklyaW5hXCIsXCJJc2FcIixcIklzYWJlbFwiLFwiSXNhaFwiLFwiSXdvbmFcIixcIkphY2tsaW5lXCIsXCJKYW5cIixcIkphbmVcIixcIkphbmV0XCIsXCJKZWFuXCIsXCJKZW5uaWZlclwiLFwiSmlhbmh1YVwiLFwiSmlhbnBpbmdcIixcIkppblwiLFwiSm9hblwiLFwiSm9hbm5hXCIsXCJKb2hhbm5hXCIsXCJKb3NlZmFcIixcIkpveVwiLFwiSm95Y2VcIixcIkp1YW5cIixcIkp1bGllXCIsXCJKdXN0eW5hXCIsXCJLYWlcIixcIkthbmNoYW5hXCIsXCJLYXJlblwiLFwiS2FyaW5cIixcIkthcm9saW5hXCIsXCJLYXNpYVwiLFwiS2F0YXJ6eW5hXCIsXCJLYXRzdW1pXCIsXCJLZWlrb1wiLFwiS2lyYW5cIixcIktpeW9rb1wiLFwiS3Jpc3RpbmFcIixcIktzZW5peWFcIixcIkt1blwiLFwiTGFrc2htaVwiLFwiTGFsaXRhXCIsXCJMYW5cIixcIkxhdGRhXCIsXCJMYXVyYVwiLFwiTGF4bWlcIixcIkxlYWhcIixcIkxlaVwiLFwiTGlcIixcIkxpaHVhXCIsXCJMaWp1blwiLFwiTGlsaWFuXCIsXCJMaWxqYVwiLFwiTGluXCIsXCJMaW5kYVwiLFwiTGluZGl3ZVwiLFwiTGluZ1wiLFwiTGlwaW5nXCIsXCJMaXNhXCIsXCJMdWNpYVwiLFwiTHVjeVwiLFwiTHl1Ym92XCIsXCJMeXVkbWlsYVwiLFwiTWFnZGFcIixcIk1hZ2RhbGVuYVwiLFwiTWFsaVwiLFwiTWFuanVcIixcIk1hcmdhcmV0XCIsXCJNYXJpYVwiLFwiTWFyaWEtSXNhYmVsXCIsXCJNYXJpYS1Kb3NlXCIsXCJNYXJpYS1QaWxhclwiLFwiTWFyaW5hXCIsXCJNYXJpeWFcIixcIk1hcnRhXCIsXCJNYXJ0aGFcIixcIk1hcnlcIixcIk1hcnlhbVwiLFwiTWFzYWtvXCIsXCJNYXNhbWlcIixcIk1laVwiLFwiTWVyY3lcIixcIk1pY2hhbFwiLFwiTWljaGlrb1wiLFwiTWlla29cIixcIk1pblwiLFwiTWluYVwiLFwiTWluZ1wiLFwiTWlyaWFtXCIsXCJNaXlva29cIixcIk1vXCIsXCJNb25pa2FcIixcIk1waG9cIixcIk5hXCIsXCJOYWRlemhkYVwiLFwiTmFuXCIsXCJOYW5jeVwiLFwiTmF0YWx5YVwiLFwiTmdvemlcIixcIk5pY29sYVwiLFwiTmluZ1wiLFwiTml0dGF5YVwiLFwiTm9hbVwiLFwiTm9idWtvXCIsXCJOb2t1dGh1bGFcIixcIk5vbmhsYW5obGFcIixcIk5vcmlrb1wiLFwiTnVzaGlcIixcIk9sZ2FcIixcIk9tZXJcIixcIlBhdHJpY2lhXCIsXCJQYXVsYVwiLFwiUGF1bGluYVwiLFwiUGVuZ1wiLFwiUGV0cmFcIixcIlBob250aGlwXCIsXCJQaWxhclwiLFwiUGluZ1wiLFwiUHJhbmlcIixcIlB1cml0eVwiLFwiUHVzaHBhXCIsXCJRaW5nXCIsXCJSYWNoZWxcIixcIlJhZGhhXCIsXCJSYXR0YW5hXCIsXCJSZWJlY2NhXCIsXCJSZWlrb1wiLFwiUmVraGFcIixcIlJlbmF0ZVwiLFwiUml0YVwiLFwiUm9uZ1wiLFwiUm9zYVwiLFwiUm9zZVwiLFwiUnV0XCIsXCJSdXRoXCIsXCJSeW9rb1wiLFwiU2FiaW5lXCIsXCJTYWNoaWtvXCIsXCJTYW1yYW5cIixcIlNhbnRvc2hcIixcIlNhcmFcIixcIlNhcmFoXCIsXCJTYW1cIixcIlNhbW15XCIsXCJTYXdhdFwiLFwiU2hhbnRpXCIsXCJTaGFyb25cIixcIlNoYXlcIixcIlNoaXp1a29cIixcIlNob3NoYW5haFwiLFwiU2lib25naWxlXCIsXCJTaXRhXCIsXCJTb21iYXRcIixcIlNvbWJ1blwiLFwiU29tY2hpdFwiLFwiU29ta2hpdFwiLFwiU29tbWFpXCIsXCJTb21udWVrXCIsXCJTb21waG9uXCIsXCJTb21waG9uZ1wiLFwiU3JpXCIsXCJTdGVpbnVublwiLFwiU3VrYW55YVwiLFwiU3VtYW5cIixcIlN1bmRheVwiLFwiU3VuaXRhXCIsXCJTdXBoYXBob25cIixcIlN1c2FuXCIsXCJTdXNhbm5lXCIsXCJTdXNoaWxhXCIsXCJTdmV0bGFuYVwiLFwiVGFrYWtvXCIsXCJUYW1hclwiLFwiVGF0eWFuYVwiLFwiVGFsXCIsXCJUZWJvZ29cIixcIlRlcnVrb1wiLFwiVGhhd2lcIixcIlRvbWlrb1wiLFwiVG9zaGlrb1wiLFwiVW5udXJcIixcIlVyYWlcIixcIlVybWlsYVwiLFwiVXJzdWxhXCIsXCJVc2hhXCIsXCJWYWxlbnRpbmFcIixcIlZpY3RvcmlhXCIsXCJXYW5qaXJ1XCIsXCJXYW5waGVuXCIsXCJXYXRzYW5hXCIsXCJXZWlcIixcIldpbGFpXCIsXCJYaWFuZ1wiLFwiWGlhb2hvbmdcIixcIlhpYW9saVwiLFwiWGlhb3BpbmdcIixcIlhpYW95YW5cIixcIlhpblwiLFwiWWFlbFwiLFwiWWFuXCIsXCJZYXN1a29cIixcIlllbGVuYVwiLFwiWWh1ZGl5dFwiLFwiWWluZ1wiLFwiWW9rb1wiLFwiWW9uZ1wiLFwiWW9zaGllXCIsXCJZb3NoaWtvXCIsXCJZb3NoaW1pXCIsXCJZdVwiLFwiWXVlXCIsXCJZdWtvXCIsXCJZdWxpeWFcIixcIll1blwiLFwiWXV2YWxcIixcIlphaW5hYlwiLFwiWmFuZGlsZVwiLFwiWmFuZWxlXCIsXCJaaGVuXCJdfX07ZnVuY3Rpb24gd2EoZSl7dmFyIGEsdDtjb25zdCBvPW51bGwhPShhPW51bGw9PWU/dm9pZCAwOmUud2l0aEFjY2VudHMpJiZhLGk9bnVsbCE9KHQ9bnVsbD09ZT92b2lkIDA6ZS5nZW5kZXIpP3Q6SGUoW1wibWFsZVwiLFwiZmVtYWxlXCJdKSxyPW51bGw9PWU/dm9pZCAwOmUubG9jYWxlO3JldHVybiBuKG8/cj9udWxsPT1yP3ZvaWQgMDpyLndpdGhBY2NlbnRzW2ldOnZhLndpdGhBY2NlbnRzW2ldOnI/bnVsbD09cj92b2lkIDA6ci53aXRob3V0QWNjZW50c1tpXTp2YS53aXRob3V0QWNjZW50c1tpXSxlKX12YXIga2E9e3dpdGhBY2NlbnRzOltcIsOGYmVsw7hcIixcIsOGYmVsdG9mdFwiLFwiw4Fnw7pzdHNkw7N0dGlyXCIsXCLDgWfDunN0c3NvblwiLFwiw4FsdmFyZXpcIixcIsOBcm5hZMOzdHRpclwiLFwiw4FybmFzb25cIixcIsOBc2dlaXJzZMOzdHRpclwiLFwiw4NzaGFpa2hcIixcIkJlbmXFoVwiLFwiQmVuZcWhb3bDoVwiLFwiQmFsZHVyc2TDs3R0aXJcIixcIkJpcmdpc2TDs3R0aXJcIixcIkJqYXJuYWTDs3R0aXJcIixcIkJqw7ZybnNkw7N0dGlyXCIsXCJCasO2cm5zc29uXCIsXCJCw7Z0dGNoZXJcIixcIsSMZXJuw6FcIixcIsSMZXJuw71cIixcIkNow6F2ZXpcIixcIsOQZWtpxIdcIixcIkTDrWF6XCIsXCLDkG9yw7BpxIdcIixcIkR2b8WZw6FrXCIsXCJEdm/FmcOha292w6FcIixcIkVpbmFyc2TDs3R0aXJcIixcIkZlcm7DoW5kZXpcIixcIkZpYWxvdsOhXCIsXCJGw7Zyc3RlclwiLFwiRnJpw7ByaWtzc29uXCIsXCJGcsO2aGxpY2hcIixcIkdhcmPDrWFcIixcIkfDrXNsYWTDs3R0aXJcIixcIkfDrXNsYXNvblwiLFwiR8O2YmVsXCIsXCJHw7NtZXpcIixcIkdyb8OfXCIsXCJHdW5uYXJzZMOzdHRpclwiLFwiR3XDsGrDs25zZMOzdHRpclwiLFwiR3XDsGrDs25zc29uXCIsXCJHdcOwbXVuZHNkw7N0dGlyXCIsXCJHdcOwbXVuZHNzb25cIixcIkfDvG50aGVyXCIsXCJIYWxsZMOzcnNkw7N0dGlyXCIsXCJIYWxsZMOzcnNzb25cIixcIkd1dGnDqXJyZXpcIixcIkd1em3DoW5cIixcIkjDoWpla1wiLFwiSGFyYWxkc2TDs3R0aXJcIixcIkhhcsOwYXJkw7N0dGlyXCIsXCJIYXLDsGFyc29uXCIsXCJIZWxnYWTDs3R0aXJcIixcIkhlcm7DoW5kZXpcIixcIkhhdWtzZMOzdHRpclwiLFwiSG9yw6FrXCIsXCJIb3LDoWtvdsOhXCIsXCJKYWLFgm/FhHNraVwiLFwiSsOkZ2VyXCIsXCJKYXNpxYRza2lcIixcIkppbcOpbmV6XCIsXCJKw7NoYW5uZXNkw7N0dGlyXCIsXCJKw7NoYW5uZXNzb25cIixcIkrDs2hhbm5zZMOzdHRpclwiLFwiSsOzaGFubnNzb25cIixcIkrDs25hc2TDs3R0aXJcIixcIkrDs25hc3NvblwiLFwiSsOzbnNkw7N0dGlyXCIsXCJKw7Nuc3NvblwiLFwiS2FtacWEc2tpXCIsXCJLYXJsc2TDs3R0aXJcIixcIktqYXJ0YW5zZMOzdHRpclwiLFwiS8O2aGxlclwiLFwiS8O2bmlnXCIsXCJLb3rFgm93c2tpXCIsXCJLcsOhbG92w6FcIixcIktyZWrEjcOtXCIsXCJLcmlzdGluc2TDs3R0aXJcIixcIktyaXN0asOhbnNkw7N0dGlyXCIsXCJLcmlzdGrDoW5zc29uXCIsXCJLcsO8Z2VyXCIsXCJLdcSNZXJhXCIsXCJLdcSNZXJvdsOhXCIsXCLFgWFwacWEc2tpXCIsXCJMw7ZmZmxlclwiLFwiTMOzcGV6XCIsXCLFgXVjemFrXCIsXCLFgXVrYXN6ZXdza2lcIixcIk1hZ27DunNkw7N0dGlyXCIsXCJNYWduw7pzc29uXCIsXCJNYXJrb3bDoVwiLFwiTWFydMOtbmV6XCIsXCJNZWnDn25lclwiLFwiTcOpbmRlelwiLFwiTcO2bGxlclwiLFwiTcO8bGxlclwiLFwiTXXDsW96XCIsXCJOb3bDoWtcIixcIk5vdsOha292w6FcIixcIk5vdm90bsOhXCIsXCJOb3ZvdG7DvVwiLFwiTnXDsWV6XCIsXCJOw7rDsWV6XCIsXCLDmGRlZ8OlcmRcIixcIsWQaGxzY2hsw6RnZXJvdsOhXCIsXCLDk2xhZnNkw7N0dGlyXCIsXCLDk2xhZnNzb25cIixcIsWQbGzDtnNvdsOhXCIsXCJPbHN6ZXdza2lcIixcIsWQcmlcIixcIsWQcnPDqWdpLVrDtmxkZXJkxZFcIixcIsOTc2thcnNkw7N0dGlyXCIsXCLDk3NrYXJzc29uXCIsXCLDmHZlcmfDpXJkXCIsXCLFkHpzZVwiLFwiUMOhbHNkw7N0dGlyXCIsXCJQw6Fsc3NvblwiLFwiUGF3xYJvd3NraVwiLFwiUGXDsWFcIixcIlDDqXJlelwiLFwiUMOpdHVyc2TDs3R0aXJcIixcIlDDqXR1cnNzb25cIixcIlBva29ybsOhXCIsXCJQb2tvcm7DvVwiLFwiUG9zcMOtxaFpbFwiLFwiUG9zcMOtxaFpbG92w6FcIixcIlByb2Now6F6a2FcIixcIlByb2Now6F6a292w6FcIixcIlJhZ25hcnNkw7N0dGlyXCIsXCJSYW3DrXJlelwiLFwiUsOtb3NcIixcIlJvZHLDrWd1ZXpcIixcIlPDoW5jaGV6XCIsXCJTY2jDpGZlclwiLFwiU2NocsO2ZGVyXCIsXCJTY2jDvHR6XCIsXCJTaWd1csOwYXJkw7N0dGlyXCIsXCJTaWd1csOwc3NvblwiLFwiU2lndXJqw7Nuc2TDs3R0aXJcIixcIlNpZ3VyasOzbnNzb25cIixcIlNva2/Fgm93c2tpXCIsXCJTdGVmw6Fuc2TDs3R0aXJcIixcIlN0ZWbDoW5zc29uXCIsXCJTdmVpbnNkw7N0dGlyXCIsXCJTdm9ib2RvdsOhXCIsXCJTemN6ZXBhxYRza2lcIixcIlN6eW1hxYRza2lcIixcIlVyYmHFhHNraVwiLFwixapzYXNcIixcIsWqxb5pZW5cIixcIlbDoXNxdWV6XCIsXCJWZXNlbMOhXCIsXCJWZXNlbMO9XCIsXCJXZWnDn1wiLFwixbtha1wiLFwixb3DoWtvdsOhXCIsXCJaZW1hbm92w6FcIixcIlppZWxpxYRza2lcIixcIsW9dWthdXNrYXNcIixcIsW9dWthdXNraWVuxJdcIixcIsOew7Nyw7BhcmTDs3R0aXJcIixcIsOew7Nyw7BhcnNvblwiLFwiw55vcnN0ZWluc2TDs3R0aXJcIixcIsOeb3JzdGVpbnNzb25cIl0sd2l0aG91dEFjY2VudHM6W1wiQWJkaVwiLFwiQWJkdWxsYWhpXCIsXCJBYmVcIixcIkFidWJha2FyXCIsXCJBY2hpZW5nXCIsXCJBZGFtY3p5a1wiLFwiQWRhbXVcIixcIkFkYW5cIixcIkFkZWJheW9cIixcIkFkaGlhbWJvXCIsXCJBZHJpXCIsXCJBZ2JhcmlhXCIsXCJBZ3VpbGFyXCIsXCJBaG1hZFwiLFwiQWhtZWRcIixcIkFraW55aVwiLFwiQWtwYW5cIixcIkFsaVwiLFwiQWxpZXZcIixcIkFsaXl1XCIsXCJBbGxlblwiLFwiQWxvbnNvXCIsXCJBbHZhcmV6XCIsXCJBbWFkaVwiLFwiQW1pbnVcIixcIkFuZHJlZXZcIixcIkFuZHJlZXZhXCIsXCJBbnNhcmlcIixcIkFueWFuZ29cIixcIkFva2lcIixcIkFyYWlcIixcIkFybmFyc29uXCIsXCJBc2hrbmF6aXlcIixcIkF0aWVub1wiLFwiQXR0aWFzXCIsXCJBdWR1XCIsXCJBdnJhaGFtXCIsXCJBeXV0dGhheWFcIixcIkF6dWxheVwiLFwiQmFiYVwiLFwiQmFpXCIsXCJCYWlsZXlcIixcIkJha2VyXCIsXCJCYWtrZXJcIixcIkJhbGFcIixcIkJhbGR1cnNzb25cIixcIkJhbG95aVwiLFwiQmFyYW5cIixcIkJhcmFzYVwiLFwiQmFybWFuXCIsXCJCYXVlclwiLFwiQmVja2VyXCIsXCJCZWdhbVwiLFwiQmVndW1cIixcIkJlaGVyYVwiLFwiQmVraGVyXCIsXCJCZWxsb1wiLFwiQmVubmV0dFwiLFwiQmVyXCIsXCJCZXZhblwiLFwiQmliaVwiLFwiQmlyZ2lzc29uXCIsXCJCaXN3YXNcIixcIkJpdHRvblwiLFwiQmphcm5hc29uXCIsXCJCbGFuY29cIixcIkJsb21cIixcIkJvcmtvd3NraVwiLFwiQm9zXCIsXCJCb3RoYVwiLFwiQm93ZW5cIixcIkJyYXVuXCIsXCJCcm91d2VyXCIsXCJCcm93blwiLFwiQnVubWFcIixcIkJ1bm1pXCIsXCJCdW5zaVwiLFwiQnV0aGVsZXppXCIsXCJDYWlcIixcIkNhbm9cIixcIkNhb1wiLFwiQ2FydGVyXCIsXCJDYXN0aWxsb1wiLFwiQ2FzdHJvXCIsXCJDZWxlXCIsXCJDZW5nXCIsXCJDaGFpY2hhbmFcIixcIkNoYW5kXCIsXCJDaGFudGhhcmFcIixcIkNoYXVrZVwiLFwiQ2hlYmV0XCIsXCJDaGVuXCIsXCJDaGVuZ1wiLFwiQ2hlcGtlbW9pXCIsXCJDaGVyaW5zdWtcIixcIkNoZXJ1aXlvdFwiLFwiQ2hpZGVkXCIsXCJDaG1pZWxld3NraVwiLFwiQ2h1a3d1XCIsXCJDbGFya1wiLFwiQ2xhcmtlXCIsXCJDb2V0emVlXCIsXCJDb2hlblwiLFwiQ29sbGluc1wiLFwiQ29va1wiLFwiQ29vcGVyXCIsXCJDb3J0ZXNcIixcIkNydXpcIixcIkN1aVwiLFwiQ3phcm5lY2tpXCIsXCJEYWhhblwiLFwiRGFpXCIsXCJEYXNcIixcIkRhdWRhXCIsXCJEYXZpZFwiLFwiRGF2aWVzXCIsXCJEYXZpc1wiLFwiRGF5YW5cIixcIkRlLUJydWlqblwiLFwiRGUtR3JhYWZcIixcIkRlLUdyb290XCIsXCJEZS1Kb25nXCIsXCJEZWtrZXJcIixcIkRlbGdhZG9cIixcIkRlbmdcIixcIkRldmlcIixcIkRpYXpcIixcIkRpamtzdHJhXCIsXCJEaW5nXCIsXCJEbGFtaW5pXCIsXCJEb21pbmd1ZXpcIixcIkRvbmdcIixcIkR1LVBsZXNzaXNcIixcIkR1YmVcIixcIkR1ZGFcIixcIkR1ZGVrXCIsXCJEdW1vbnRcIixcIkVkd2FyZHNcIixcIkVnb3JvdlwiLFwiRWdvcm92YVwiLFwiRWluYXJzc29uXCIsXCJFbGJhelwiLFwiRWxpeWFodVwiLFwiRWxsaXNcIixcIkVtbWFudWVsXCIsXCJFbmRvXCIsXCJFc3Bpbm96YVwiLFwiRXN0ZWJhblwiLFwiRXZhbnNcIixcIkV6ZVwiLFwiRmFuXCIsXCJGYW5nXCIsXCJGZWxkbWFuXCIsXCJGZW5nXCIsXCJGZXJuYW5kZXpcIixcIkZpYWxhXCIsXCJGaXNjaGVyXCIsXCJGbG9yZXNcIixcIkZyaWVkbWFuXCIsXCJGcm9sb3ZhXCIsXCJGdVwiLFwiRnVjaHNcIixcIkZ1amlpXCIsXCJGdWppdGFcIixcIkZ1a3VkYVwiLFwiR2FieVwiLFwiR2FvXCIsXCJHYXJiYVwiLFwiR2FyY2lhXCIsXCJHYXJyaWRvXCIsXCJHYXJ6YVwiLFwiR2hvc2hcIixcIkdpbFwiLFwiR29sYW5cIixcIkdvbGRzdGVpblwiLFwiR29tZXpcIixcIkdvbnphbGVzXCIsXCJHb256YWxlelwiLFwiR290b1wiLFwiR292ZW5kZXJcIixcIkdyYWJvd3NraVwiLFwiR3JlZW5cIixcIkdyZWVuYmVyZ1wiLFwiR3JpZmZpdGhzXCIsXCJHdVwiLFwiR3VlcnJlcm9cIixcIkd1bWVkZVwiLFwiR3VubmFyc3NvblwiLFwiR3VvXCIsXCJHdXB0YVwiLFwiR3V0aWVycmV6XCIsXCJIYWhuXCIsXCJIYWxsXCIsXCJIYW5cIixcIkhhcmFsZHNzb25cIixcIkhhcmxlXCIsXCJIYXJsZS1Db3dhblwiLFwiSGFycmlzXCIsXCJIYXJyaXNvblwiLFwiSGFydG1hbm5cIixcIkhhcnVuYVwiLFwiSGFzZWdhd2FcIixcIkhhc2hpbW90b1wiLFwiSGFzbmFcIixcIkhhc3NhblwiLFwiSGF1a3Nzb25cIixcIkhheWFzaGlcIixcIkhlXCIsXCJIZWxnYXNvblwiLFwiSGVuXCIsXCJIZW5kcmlrc1wiLFwiSGVyYnVsb3RcIixcIkhlcm5hbmRlelwiLFwiSGVycmVyYVwiLFwiSGVycm1hbm5cIixcIkhpbGxcIixcIkhvZWtzdHJhXCIsXCJIb2ZmbWFublwiLFwiSG9mbWFublwiLFwiSG9uZ3Rob25nXCIsXCJIb3BraW5zXCIsXCJIb3dlbGxzXCIsXCJIdVwiLFwiSHVhbmdcIixcIkh1YmVyXCIsXCJIdWdoZXNcIixcIkh1aXNtYW5cIixcIkh1c3NlaW5cIixcIklicmFoaW1cIixcIklkcmlzXCIsXCJJZ2xlc2lhc1wiLFwiSWd3ZVwiLFwiSWtlZGFcIixcIklub3VlXCIsXCJJc2FcIixcIklzYWFjXCIsXCJJc2FoXCIsXCJJc2hpaVwiLFwiSXNoaWthd2FcIixcIkl0b1wiLFwiSXZhbm92XCIsXCJJdmFub3ZhXCIsXCJKYWJhcmluXCIsXCJKYWNrc29uXCIsXCJKYWNvYnNcIixcIkphZGhhdlwiLFwiSmFrdWJvd3NraVwiLFwiSmFtZXNcIixcIkphbmtvd3NraVwiLFwiSmFuc2VuXCIsXCJKYW5zc2VuXCIsXCJKYXdvcnNraVwiLFwiSmVua2luc1wiLFwiSmlhXCIsXCJKaWFuZ1wiLFwiSmltZW5lelwiLFwiSmluXCIsXCJKb2huXCIsXCJKb2huc29uXCIsXCJKb25lc1wiLFwiSm9zZXBoXCIsXCJKdW1hXCIsXCJKdW5nXCIsXCJLYWN6bWFyZWtcIixcIkthaXNlclwiLFwiS2FtYXVcIixcIkthcmFuamFcIixcIkthcml1a2lcIixcIkthcmxzc29uXCIsXCJLYXRvXCIsXCJLYXR6XCIsXCJLYXVyXCIsXCJLZWxsZXJcIixcIktoYW5cIixcIktoYXRpYlwiLFwiS2hhdG9vblwiLFwiS2hhdHVuXCIsXCJLaG91cnlcIixcIktob3phXCIsXCJLaHVtYWxvXCIsXCJLaWJldFwiLFwiS2lrdWNoaVwiLFwiS2ltXCIsXCJLaW1hbmlcIixcIktpbXVyYVwiLFwiS2luZ1wiLFwiS2phcnRhbnNzb25cIixcIktsZWluXCIsXCJLb2JheWFzaGlcIixcIktvY2hcIixcIktvZWNoXCIsXCJLb2tcIixcIktvbmRvXCIsXCJLb25na2Flb1wiLFwiS29zdGVyXCIsXCJLb3ZhbGVua29cIixcIktvd2FsY3p5a1wiLFwiS293YWxza2lcIixcIktvemxvdlwiLFwiS296bG92YVwiLFwiS3JhdXNlXCIsXCJLcmF3Y3p5a1wiLFwiS3Jpc3RpbnNzb25cIixcIkt1Ymlha1wiLFwiS3VjaGFyc2tpXCIsXCJLdWlwZXJzXCIsXCJLdW1hclwiLFwiS3VtYXJpXCIsXCJLdXpuZXRzb3ZcIixcIkt1em5ldHNvdmFcIixcIkt3aWF0a293c2tpXCIsXCJMYWxcIixcIkxhbmdcIixcIkxhbmdhdFwiLFwiTGFuZ2VcIixcIkxhdnlhblwiLFwiTGF3YWxcIixcIkxlYmVkZXZhXCIsXCJMZWVcIixcIkxlaG1hbm5cIixcIkxldnlcIixcIkxld2FuZG93c2tpXCIsXCJMZXdpc1wiLFwiTGlcIixcIkxpYW5nXCIsXCJMaWFvXCIsXCJMaW1cIixcIkxpblwiLFwiTGlzXCIsXCJMaXVcIixcIkxsZXdlbGx5blwiLFwiTGxveWRcIixcIkxvcGV6XCIsXCJMb3phbm9cIixcIkx1XCIsXCJMdW9cIixcIk1hXCIsXCJNYWFzXCIsXCJNYWJhc29cIixcIk1hY2hhcmlhXCIsXCJNYWNpZWpld3NraVwiLFwiTWFlZGFcIixcIk1hZ29tZWRvdlwiLFwiTWFoYWduYVwiLFwiTWFoYXRvXCIsXCJNYWhsYW5ndVwiLFwiTWFodG9cIixcIk1haWVyXCIsXCJNYWluYVwiLFwiTWFqZXdza2lcIixcIk1ha2Fyb3ZcIixcIk1ha2Fyb3ZhXCIsXCJNYWxpbm93c2tpXCIsXCJNYWxrYWhcIixcIk1hbHVsZWtlXCIsXCJNYW5kYWxcIixcIk1hcmNpbmlha1wiLFwiTWFyZWtcIixcIk1hcmluXCIsXCJNYXJ0aW5cIixcIk1hcnRpbmV6XCIsXCJNYXNhcndlaFwiLFwiTWFzZWtvXCIsXCJNYXRoZWJ1bGFcIixcIk1hdHN1bW90b1wiLFwiTWF0dGhld3NcIixcIk1heWVyXCIsXCJNYXppYnVrb1wiLFwiTWF6dXJcIixcIk1henVyZWtcIixcIk1iYXRoYVwiLFwiTWVkaW5hXCIsXCJNZWllclwiLFwiTWVpamVyXCIsXCJNZW5kb3phXCIsXCJNZW5nXCIsXCJNZXllclwiLFwiTWhhbWlkXCIsXCJNaGxvbmdvXCIsXCJNaWNoYWxha1wiLFwiTWljaGFsc2tpXCIsXCJNaWtoYXlsb3ZcIixcIk1pa2hheWxvdmFcIixcIk1pc2hyYVwiLFwiTWl0Y2hlbGxcIixcIk1penJhaGlcIixcIk1raGl6ZVwiLFwiTW9mb2tlbmdcIixcIk1vaGFtZWRcIixcIk1vaGFtbWVkXCIsXCJNb2tvZW5hXCIsXCJNb2xlZmVcIixcIk1vbGluYVwiLFwiTW9uZGFsXCIsXCJNb29yZVwiLFwiTW9yXCIsXCJNb3JhbGVzXCIsXCJNb3Jlbm9cIixcIk1vcmdhblwiLFwiTW9yaVwiLFwiTW9yb3pvdlwiLFwiTW9yb3pvdmFcIixcIk1vcnJpc1wiLFwiTW9zaGVcIixcIk10aGVtYnVcIixcIk10aGV0aHdhXCIsXCJNdHNoYWxpXCIsXCJNdWhhbW1hZFwiLFwiTXVoYW1tYWR1XCIsXCJNdWhhbW1lZFwiLFwiTXVsZGVyXCIsXCJNdXJha2FtaVwiLFwiTXVzYVwiLFwiTXVzdGFwaGFcIixcIk11dGhvbmlcIixcIk11dHVhXCIsXCJNdXR1a3VcIixcIk13YW5naVwiLFwiTmFpZG9vXCIsXCJOYWthamltYVwiLFwiTmFrYW11cmFcIixcIk5ha2Fub1wiLFwiTmF2YXJyb1wiLFwiTmF5YWtcIixcIk5kbG92dVwiLFwiTmVsXCIsXCJOZXVtYW5uXCIsXCJOZ2NvYm9cIixcIk5nb2JlbmlcIixcIk5ndWJhbmVcIixcIk5ndXllblwiLFwiTmd3ZW55YVwiLFwiTmlraXRpbmFcIixcIk5pa29sYWV2XCIsXCJOaWtvbGFldmFcIixcIk5qZXJpXCIsXCJOam9yb2dlXCIsXCJOanVndW5hXCIsXCJOa29zaVwiLFwiTm92aWtvdlwiLFwiTm92aWtvdmFcIixcIk5vd2FrXCIsXCJOb3dha293c2tpXCIsXCJOb3dpY2tpXCIsXCJOdHVsaVwiLFwiTnh1bWFsb1wiLFwiTnlhbWJ1cmFcIixcIk9ha2xleVwiLFwiT2NoaWVuZ1wiLFwiT2RoaWFtYm9cIixcIk9nYXdhXCIsXCJPaGFuYVwiLFwiT2hheW9uXCIsXCJPam9cIixcIk9rYWRhXCIsXCJPa2Fmb3JcIixcIk9rZWtlXCIsXCJPa29uXCIsXCJPa29yb1wiLFwiT2tvdGhcIixcIk9tYXJcIixcIk9tZXJcIixcIk9tb25kaVwiLFwiT25vXCIsXCJPbnlhbmdvXCIsXCJPcnRlZ2FcIixcIk9ydGl6XCIsXCJPc3Ryb3dza2lcIixcIk90YVwiLFwiT3RpZW5vXCIsXCJPdW1hXCIsXCJPd2VuXCIsXCJPd2lub1wiLFwiUGFsXCIsXCJQYW5cIixcIlBhbnlhXCIsXCJQYXJhbWFyXCIsXCJQYXJrZXJcIixcIlBhcnJ5XCIsXCJQYXN3YW5cIixcIlBhdGVsXCIsXCJQYXRpbFwiLFwiUGF2bG92XCIsXCJQYXZsb3ZhXCIsXCJQYXdsYWtcIixcIlBlZXRlcnNcIixcIlBlbmdcIixcIlBlcmV0elwiLFwiUGVyZXpcIixcIlBldGVyXCIsXCJQZXRlcnNcIixcIlBldHJvdlwiLFwiUGV0cm92YVwiLFwiUGZlaWZmZXJcIixcIlBoaWxsaXBzXCIsXCJQaG90c2lcIixcIlBpZXRyemFrXCIsXCJQaWxsYXlcIixcIlBpb3Ryb3dza2lcIixcIlBvcG92XCIsXCJQb3BvdmFcIixcIlBvd2VsbFwiLFwiUHJhc2FkXCIsXCJQcmV0b3JpdXNcIixcIlByaWNlXCIsXCJQcmlldG9cIixcIlByaW5zXCIsXCJQcml0Y2hhcmRcIixcIlB1Z2hcIixcIlFpdVwiLFwiUmFiaXVcIixcIlJhZGViZVwiLFwiUmFnbmFyc3NvblwiLFwiUmFtXCIsXCJSYW1pcmV6XCIsXCJSYW1vc1wiLFwiUmFuaVwiLFwiUmF0aG9kXCIsXCJSYXlcIixcIlJlZXNcIixcIlJlblwiLFwiUmV1YmVuXCIsXCJSZXllc1wiLFwiUmljaGFyZHNcIixcIlJpY2hhcmRzb25cIixcIlJpY2h0ZXJcIixcIlJpdmVyYVwiLFwiUm9iZXJ0c1wiLFwiUm9iaW5zb25cIixcIlJvZHJpZ3VlelwiLFwiUm9nZXJzXCIsXCJSb21hbm92XCIsXCJSb21hbm92YVwiLFwiUm9tZXJvXCIsXCJSb3NlbmJlcmdcIixcIlJvdGljaFwiLFwiUm93bGFuZHNcIixcIlJveVwiLFwiUnViaW9cIixcIlJ1aXpcIixcIlJ1bmdydWVhbmdcIixcIlJ1bWJlbG93XCIsXCJSdXRrb3dza2lcIixcIlNhZG93c2tpXCIsXCJTYWVsaVwiLFwiU2FlbGltXCIsXCJTYWVuZ3Rob25nXCIsXCJTYWV0YW5cIixcIlNhZXRhbmdcIixcIlNhZXVlbmdcIixcIlNhaFwiLFwiU2FoYVwiLFwiU2FodVwiLFwiU2FpZHVcIixcIlNhaXRvXCIsXCJTYWthaVwiLFwiU2FrYW1vdG9cIixcIlNhbGF6YXJcIixcIlNhbGlzdVwiLFwiU2FtdWVsXCIsXCJTYW5jaGV6XCIsXCJTYW5ndGhvbmdcIixcIlNhbmlcIixcIlNhbnRpYWdvXCIsXCJTYW50b3NcIixcIlNhbnpcIixcIlNhcmthclwiLFwiU2FzYWtpXCIsXCJTYXRvXCIsXCJTYXdpY2tpXCIsXCJTY2htaWRcIixcIlNjaG1pZHRcIixcIlNjaG1pdHRcIixcIlNjaG1pdHpcIixcIlNjaG5laWRlclwiLFwiU2Nob2x6XCIsXCJTY2hvdXRlblwiLFwiU2NodWx6XCIsXCJTY2h1bHplXCIsXCJTY2h3YXJ0elwiLFwiU2Nod2FyelwiLFwiU2NvdHRcIixcIlNlZ2VsXCIsXCJTZWtoXCIsXCJTZXJnZWV2YVwiLFwiU2VycmFub1wiLFwiU2hhaWtoXCIsXCJTaGFsb21cIixcIlNoYXBpcm9cIixcIlNoYXJhYmlcIixcIlNoYXJtYVwiLFwiU2hhd1wiLFwiU2hlaHVcIixcIlNoZW1lc2hcIixcIlNoZXZjaGVua29cIixcIlNoaVwiLFwiU2hpbWl6dVwiLFwiU2liaXlhXCIsXCJTaWNoYW50aGFcIixcIlNpa29yYVwiLFwiU2ltaXl1XCIsXCJTaW5naFwiLFwiU2lzdWtcIixcIlNpdGhvbGVcIixcIlNpdHdhdFwiLFwiU21lZVwiLFwiU21pcm5vdlwiLFwiU21pcm5vdmFcIixcIlNtaXRcIixcIlNtaXRoXCIsXCJTbWl0c1wiLFwiU29rb2xvdlwiLFwiU29rb2xvdmFcIixcIlNvbWJ1blwiLFwiU29uZ1wiLFwiU290b1wiLFwiU21vYWtsZXlcIixcIlN0YXJyXCIsXCJTdGVwYW5vdlwiLFwiU3RlcGFub3ZhXCIsXCJTdVwiLFwiU3VhZFwiLFwiU3VhcmV6XCIsXCJTdWlzc2FcIixcIlN1a2thc2VtXCIsXCJTdWxhaW1hblwiLFwiU3VsZWltYW5cIixcIlN1blwiLFwiU3VuZGF5XCIsXCJTdXdhblwiLFwiU3V6dWtpXCIsXCJTdmVpbnNzb25cIixcIlN2b2JvZGFcIixcIlN6ZXdjenlrXCIsXCJUYWthaGFzaGlcIixcIlRha2V1Y2hpXCIsXCJUYWxcIixcIlRhblwiLFwiVGFuYWthXCIsXCJUYW5nXCIsXCJUYXlsb3JcIixcIlRoYWt1clwiLFwiVGhvbWFzXCIsXCJUaG9tcHNvblwiLFwiVGhvbmdkaVwiLFwiVGhvbmdraGFtXCIsXCJUaG9uZ3N1a1wiLFwiVGlhblwiLFwiVG9tYXN6ZXdza2lcIixcIlRvcnJlc1wiLFwiVHNoYWJhbGFsYVwiLFwiVHVybmVyXCIsXCJVZG9cIixcIlVlZGFcIixcIlVtYXJcIixcIlVtYXJ1XCIsXCJVc21hblwiLFwiVmFrbmluXCIsXCJWYWxkZXpcIixcIlZhbi1CZWVrXCIsXCJWYW4tRGFtXCIsXCJWYW4tZGVuLUJlcmdcIixcIlZhbi1kZXItSGVpamRlblwiLFwiVmFuLWRlci1MaW5kZW5cIixcIlZhbi1EaWprXCIsXCJWYXJnYXNcIixcIlZhc2lsZXZcIixcIlZhc2lsZXZhXCIsXCJWYXpxdWV6XCIsXCJWZWdhXCIsXCJWZW50ZXJcIixcIlZlcmhvZXZlblwiLFwiVmVybWV1bGVuXCIsXCJWaXNzZXJcIixcIlZvbGtvdlwiLFwiVm9sa292YVwiLFwiVm9zXCIsXCJXYWZ1bGFcIixcIldhZ25lclwiLFwiV2FpcmltdVwiLFwiV2FsY3pha1wiLFwiV2Fsa2VyXCIsXCJXYWx0ZXJcIixcIldhbHRlcnNcIixcIldhbWJ1YVwiLFwiV2FtYnVpXCIsXCJXYW5nXCIsXCJXYW5ndWlcIixcIldhbmphbGFcIixcIldhbmppa3VcIixcIldhcmRcIixcIldhdGFuYWJlXCIsXCJXYXRraW5zXCIsXCJXYXRzb25cIixcIldlYmVyXCIsXCJXZWlcIixcIldla2VzYVwiLFwiV2VuXCIsXCJXZXJuZXJcIixcIldoaXRlXCIsXCJXaWVjem9yZWtcIixcIldpbGtcIixcIldpbGxlbXNcIixcIldpbGxpYW1zXCIsXCJXaWxzb25cIixcIldpdGtvd3NraVwiLFwiV29qY2llY2hvd3NraVwiLFwiV29sZlwiLFwiV29vZFwiLFwiV3JpZ2h0XCIsXCJXdVwiLFwiWGlhb1wiLFwiWGllXCIsXCJYdVwiLFwiWWFha3ZcIixcIllhZGF2XCIsXCJZYWhheWFcIixcIllha292bGV2YVwiLFwiWWFrdWJ1XCIsXCJZYW1hZGFcIixcIllhbWFndWNoaVwiLFwiWWFtYW1vdG9cIixcIllhbWFzaGl0YVwiLFwiWWFtYXpha2lcIixcIllhblwiLFwiWWFuZ1wiLFwiWWFvXCIsXCJZZVwiLFwiWWluXCIsXCJZb3NlZlwiLFwiWW9zaGlkYVwiLFwiWW91bmdcIixcIll1XCIsXCJZdWFuXCIsXCJZdXN1ZlwiLFwiWmFqYWNcIixcIlpha2hhcm92XCIsXCJaYWtoYXJvdmFcIixcIlphbGV3c2tpXCIsXCJaYXdhZHpraVwiLFwiWmF5dHNldmFcIixcIlpoYW5nXCIsXCJaaGFvXCIsXCJaaGVuZ1wiLFwiWmhvbmdcIixcIlpob3VcIixcIlpodVwiLFwiWmltbWVybWFublwiLFwiWm9hYmlcIixcIlp1bHVcIixcIlp3YW5lXCJdfTtmdW5jdGlvbiBTYShlKXt2YXIgYTtyZXR1cm4gbigobnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS53aXRoQWNjZW50cyk/YTp2KCkpP2thLndpdGhBY2NlbnRzOmthLndpdGhvdXRBY2NlbnRzLGUpfWZ1bmN0aW9uIENhKGUpe3JldHVybiBuKCgoKT0+e2NvbnN0IGE9KG51bGw9PWU/dm9pZCAwOmUucHJvdmlkZXIpfHxiYSgpLHQ9ZnVuY3Rpb24oZSl7dmFyIGEsdDtsZXQgbz1cIlwiO2NvbnN0IGk9bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS5maXJzdE5hbWUpP2E6d2Eoe3dpdGhBY2NlbnRzOiExfSkscj1udWxsIT0odD1udWxsPT1lP3ZvaWQgMDplLmxhc3ROYW1lKT90OlNhKHt3aXRoQWNjZW50czohMX0pO251bGwhPWUmJmUubmFtZVNlcGFyYXRvcj9cIm5vbmVcIiE9PWUubmFtZVNlcGFyYXRvciYmKG89ZS5uYW1lU2VwYXJhdG9yKTpvPW4oW1wiLlwiLFwiLVwiLFwiX1wiLFwiK1wiLFwiXCJdKTtsZXQgcz1gJHtpfSAke3J9YC5yZXBsYWNlKFwiIFwiLG8pO3JldHVybiB2KCkmJihzKz1TKHttaW46MSxtYXg6MWUzfSkpLHMudG9Mb3dlckNhc2UoKX0oZSk7cmV0dXJuYCR7dH1AJHthfS4keyhudWxsPT1lP3ZvaWQgMDplLnN1ZmZpeCl8fGRhKCl9YH0pLGUpfXZhciBBYT1bXCLwn5iAXCIsXCLwn5iDXCIsXCLwn5iEXCIsXCLwn5iBXCIsXCLwn5iGXCIsXCLwn5iFXCIsXCLwn6SjXCIsXCLwn5iCXCIsXCLwn5mCXCIsXCLwn5mDXCIsXCLwn5iJXCIsXCLwn5iKXCIsXCLwn5iHXCIsXCLwn6WwXCIsXCLwn5iNXCIsXCLwn6SpXCIsXCLwn5iYXCIsXCLwn5iXXCIsXCLimLrvuI9cIixcIvCfmJpcIixcIvCfmJlcIixcIvCfpbJcIixcIvCfmItcIixcIvCfmJtcIixcIvCfmJxcIixcIvCfpKpcIixcIvCfmJ1cIixcIvCfpJFcIixcIvCfpJdcIixcIvCfpK1cIixcIvCfpKtcIixcIvCfpJRcIixcIvCfpJBcIixcIvCfpKhcIixcIvCfmJBcIixcIvCfmJFcIixcIvCfmLZcIixcIvCfmLbigI3wn4yr77iPXCIsXCLwn5iPXCIsXCLwn5iSXCIsXCLwn5mEXCIsXCLwn5isXCIsXCLwn5iu4oCN8J+SqFwiLFwi8J+kpVwiLFwi8J+YjFwiLFwi8J+YlFwiLFwi8J+YqlwiLFwi8J+kpFwiLFwi8J+YtFwiLFwi8J+Yt1wiLFwi8J+kklwiLFwi8J+klVwiLFwi8J+kolwiLFwi8J+krlwiLFwi8J+kp1wiLFwi8J+ltVwiLFwi8J+ltlwiLFwi8J+ltFwiLFwi8J+YtVwiLFwi8J+YteKAjfCfkqtcIixcIvCfpK9cIixcIvCfpKBcIixcIvCfpbNcIixcIvCfpbhcIixcIvCfmI5cIixcIvCfpJNcIixcIvCfp5BcIixcIvCfmJVcIixcIvCfmJ9cIixcIvCfmYFcIixcIuKYue+4j1wiLFwi8J+YrlwiLFwi8J+Yr1wiLFwi8J+YslwiLFwi8J+Ys1wiLFwi8J+lulwiLFwi8J+YplwiLFwi8J+Yp1wiLFwi8J+YqFwiLFwi8J+YsFwiLFwi8J+YpVwiLFwi8J+YolwiLFwi8J+YrVwiLFwi8J+YsVwiLFwi8J+YllwiLFwi8J+Yo1wiLFwi8J+YnlwiLFwi8J+Yk1wiLFwi8J+YqVwiLFwi8J+Yq1wiLFwi8J+lsVwiLFwi8J+YpFwiLFwi8J+YoVwiLFwi8J+YoFwiLFwi8J+krFwiLFwi8J+YiFwiLFwi8J+Rv1wiLFwi8J+SgFwiLFwi4pig77iPXCIsXCLwn5KpXCIsXCLwn6ShXCIsXCLwn5G5XCIsXCLwn5G6XCIsXCLwn5G7XCIsXCLwn5G9XCIsXCLwn5G+XCIsXCLwn6SWXCIsXCLwn5i6XCIsXCLwn5i4XCIsXCLwn5i5XCIsXCLwn5i7XCIsXCLwn5i8XCIsXCLwn5i9XCIsXCLwn5mAXCIsXCLwn5i/XCIsXCLwn5i+XCIsXCLwn5mIXCIsXCLwn5mJXCIsXCLwn5mKXCIsXCLwn5KLXCIsXCLwn5KMXCIsXCLwn5KYXCIsXCLwn5KdXCIsXCLwn5KWXCIsXCLwn5KXXCIsXCLwn5KTXCIsXCLwn5KeXCIsXCLwn5KVXCIsXCLwn5KfXCIsXCLinaPvuI9cIixcIvCfkpRcIixcIuKdpO+4j+KAjfCflKVcIixcIuKdpO+4j+KAjfCfqblcIixcIuKdpO+4j1wiLFwi8J+noVwiLFwi8J+Sm1wiLFwi8J+SmlwiLFwi8J+SmVwiLFwi8J+SnFwiLFwi8J+kjlwiLFwi8J+WpFwiLFwi8J+kjVwiLFwi8J+Sr1wiLFwi8J+SolwiLFwi8J+SpVwiLFwi8J+Sq1wiLFwi8J+SplwiLFwi8J+SqFwiLFwi8J+Vs++4j1wiLFwi8J+So1wiLFwi8J+SrFwiLFwi8J+Rge+4j+KAjfCfl6jvuI9cIixcIvCfl6jvuI9cIixcIvCfl6/vuI9cIixcIvCfkq1cIixcIvCfkqRcIixcIvCfkYtcIixcIvCfpJpcIixcIvCflpDvuI9cIixcIuKci1wiLFwi8J+WllwiLFwi8J+RjFwiLFwi8J+kjFwiLFwi8J+kj1wiLFwi4pyM77iPXCIsXCLwn6SeXCIsXCLwn6SfXCIsXCLwn6SYXCIsXCLwn6SZXCIsXCLwn5GIXCIsXCLwn5GJXCIsXCLwn5GGXCIsXCLwn5aVXCIsXCLwn5GHXCIsXCLimJ3vuI9cIixcIvCfkY1cIixcIvCfkY5cIixcIuKcilwiLFwi8J+RilwiLFwi8J+km1wiLFwi8J+knFwiLFwi8J+Rj1wiLFwi8J+ZjFwiLFwi8J+RkFwiLFwi8J+kslwiLFwi8J+knVwiLFwi8J+Zj1wiLFwi4pyN77iPXCIsXCLwn5KFXCIsXCLwn6SzXCIsXCLwn5KqXCIsXCLwn6a+XCIsXCLwn6a/XCIsXCLwn6a1XCIsXCLwn6a2XCIsXCLwn5GCXCIsXCLwn6a7XCIsXCLwn5GDXCIsXCLwn6egXCIsXCLwn6uAXCIsXCLwn6uBXCIsXCLwn6a3XCIsXCLwn6a0XCIsXCLwn5GAXCIsXCLwn5GB77iPXCIsXCLwn5GFXCIsXCLwn5GEXCIsXCLwn5G2XCIsXCLwn6eSXCIsXCLwn5GmXCIsXCLwn5GnXCIsXCLwn6eRXCIsXCLwn5GxXCIsXCLwn5GoXCIsXCLwn6eUXCIsXCLwn6eU4oCN4pmC77iPXCIsXCLwn6eU4oCN4pmA77iPXCIsXCLwn5Go4oCN8J+msFwiLFwi8J+RqOKAjfCfprFcIixcIvCfkajigI3wn6azXCIsXCLwn5Go4oCN8J+mslwiLFwi8J+RqVwiLFwi8J+RqeKAjfCfprBcIixcIvCfp5HigI3wn6awXCIsXCLwn5Gp4oCN8J+msVwiLFwi8J+nkeKAjfCfprFcIixcIvCfkanigI3wn6azXCIsXCLwn6eR4oCN8J+ms1wiLFwi8J+RqeKAjfCfprJcIixcIvCfp5HigI3wn6ayXCIsXCLwn5Gx4oCN4pmA77iPXCIsXCLwn5Gx4oCN4pmC77iPXCIsXCLwn6eTXCIsXCLwn5G0XCIsXCLwn5G1XCIsXCLwn5mNXCIsXCLwn5mN4oCN4pmC77iPXCIsXCLwn5mN4oCN4pmA77iPXCIsXCLwn5mOXCIsXCLwn5mO4oCN4pmC77iPXCIsXCLwn5mO4oCN4pmA77iPXCIsXCLwn5mFXCIsXCLwn5mF4oCN4pmC77iPXCIsXCLwn5mF4oCN4pmA77iPXCIsXCLwn5mGXCIsXCLwn5mG4oCN4pmC77iPXCIsXCLwn5mG4oCN4pmA77iPXCIsXCLwn5KBXCIsXCLwn5KB4oCN4pmC77iPXCIsXCLwn5KB4oCN4pmA77iPXCIsXCLwn5mLXCIsXCLwn5mL4oCN4pmC77iPXCIsXCLwn5mL4oCN4pmA77iPXCIsXCLwn6ePXCIsXCLwn6eP4oCN4pmC77iPXCIsXCLwn6eP4oCN4pmA77iPXCIsXCLwn5mHXCIsXCLwn5mH4oCN4pmC77iPXCIsXCLwn5mH4oCN4pmA77iPXCIsXCLwn6SmXCIsXCLwn6Sm4oCN4pmC77iPXCIsXCLwn6Sm4oCN4pmA77iPXCIsXCLwn6S3XCIsXCLwn6S34oCN4pmC77iPXCIsXCLwn6S34oCN4pmA77iPXCIsXCLwn6eR4oCN4pqV77iPXCIsXCLwn5Go4oCN4pqV77iPXCIsXCLwn5Gp4oCN4pqV77iPXCIsXCLwn6eR4oCN8J+Ok1wiLFwi8J+RqOKAjfCfjpNcIixcIvCfkanigI3wn46TXCIsXCLwn6eR4oCN8J+Pq1wiLFwi8J+RqOKAjfCfj6tcIixcIvCfkanigI3wn4+rXCIsXCLwn6eR4oCN4pqW77iPXCIsXCLwn5Go4oCN4pqW77iPXCIsXCLwn5Gp4oCN4pqW77iPXCIsXCLwn6eR4oCN8J+MvlwiLFwi8J+RqOKAjfCfjL5cIixcIvCfkanigI3wn4y+XCIsXCLwn6eR4oCN8J+Ns1wiLFwi8J+RqOKAjfCfjbNcIixcIvCfkanigI3wn42zXCIsXCLwn6eR4oCN8J+Up1wiLFwi8J+RqOKAjfCflKdcIixcIvCfkanigI3wn5SnXCIsXCLwn6eR4oCN8J+PrVwiLFwi8J+RqOKAjfCfj61cIixcIvCfkanigI3wn4+tXCIsXCLwn6eR4oCN8J+SvFwiLFwi8J+RqOKAjfCfkrxcIixcIvCfkanigI3wn5K8XCIsXCLwn6eR4oCN8J+UrFwiLFwi8J+RqOKAjfCflKxcIixcIvCfkanigI3wn5SsXCIsXCLwn6eR4oCN8J+Su1wiLFwi8J+RqOKAjfCfkrtcIixcIvCfkanigI3wn5K7XCIsXCLwn6eR4oCN8J+OpFwiLFwi8J+RqOKAjfCfjqRcIixcIvCfkanigI3wn46kXCIsXCLwn6eR4oCN8J+OqFwiLFwi8J+RqOKAjfCfjqhcIixcIvCfkanigI3wn46oXCIsXCLwn6eR4oCN4pyI77iPXCIsXCLwn5Go4oCN4pyI77iPXCIsXCLwn5Gp4oCN4pyI77iPXCIsXCLwn6eR4oCN8J+agFwiLFwi8J+RqOKAjfCfmoBcIixcIvCfkanigI3wn5qAXCIsXCLwn6eR4oCN8J+aklwiLFwi8J+RqOKAjfCfmpJcIixcIvCfkanigI3wn5qSXCIsXCLwn5GuXCIsXCLwn5Gu4oCN4pmC77iPXCIsXCLwn5Gu4oCN4pmA77iPXCIsXCLwn5W177iPXCIsXCLwn5W177iP4oCN4pmC77iPXCIsXCLwn5W177iP4oCN4pmA77iPXCIsXCLwn5KCXCIsXCLwn5KC4oCN4pmC77iPXCIsXCLwn5KC4oCN4pmA77iPXCIsXCLwn6W3XCIsXCLwn5G3XCIsXCLwn5G34oCN4pmC77iPXCIsXCLwn5G34oCN4pmA77iPXCIsXCLwn6S0XCIsXCLwn5G4XCIsXCLwn5GzXCIsXCLwn5Gz4oCN4pmC77iPXCIsXCLwn5Gz4oCN4pmA77iPXCIsXCLwn5GyXCIsXCLwn6eVXCIsXCLwn6S1XCIsXCLwn6S14oCN4pmC77iPXCIsXCLwn6S14oCN4pmA77iPXCIsXCLwn5GwXCIsXCLwn5Gw4oCN4pmC77iPXCIsXCLwn5Gw4oCN4pmA77iPXCIsXCLwn6SwXCIsXCLwn6SxXCIsXCLwn5Gp4oCN8J+NvFwiLFwi8J+RqOKAjfCfjbxcIixcIvCfp5HigI3wn428XCIsXCLwn5G8XCIsXCLwn46FXCIsXCLwn6S2XCIsXCLwn6eR4oCN8J+OhFwiLFwi8J+muFwiLFwi8J+muOKAjeKZgu+4j1wiLFwi8J+muOKAjeKZgO+4j1wiLFwi8J+muVwiLFwi8J+mueKAjeKZgu+4j1wiLFwi8J+mueKAjeKZgO+4j1wiLFwi8J+nmVwiLFwi8J+nmeKAjeKZgu+4j1wiLFwi8J+nmeKAjeKZgO+4j1wiLFwi8J+nmlwiLFwi8J+nmuKAjeKZgu+4j1wiLFwi8J+nmuKAjeKZgO+4j1wiLFwi8J+nm1wiLFwi8J+nm+KAjeKZgu+4j1wiLFwi8J+nm+KAjeKZgO+4j1wiLFwi8J+nnFwiLFwi8J+nnOKAjeKZgu+4j1wiLFwi8J+nnOKAjeKZgO+4j1wiLFwi8J+nnVwiLFwi8J+nneKAjeKZgu+4j1wiLFwi8J+nneKAjeKZgO+4j1wiLFwi8J+nnlwiLFwi8J+nnuKAjeKZgu+4j1wiLFwi8J+nnuKAjeKZgO+4j1wiLFwi8J+nn1wiLFwi8J+nn+KAjeKZgu+4j1wiLFwi8J+nn+KAjeKZgO+4j1wiLFwi8J+ShlwiLFwi8J+ShuKAjeKZgu+4j1wiLFwi8J+ShuKAjeKZgO+4j1wiLFwi8J+Sh1wiLFwi8J+Sh+KAjeKZgu+4j1wiLFwi8J+Sh+KAjeKZgO+4j1wiLFwi8J+atlwiLFwi8J+atuKAjeKZgu+4j1wiLFwi8J+atuKAjeKZgO+4j1wiLFwi8J+njVwiLFwi8J+njeKAjeKZgu+4j1wiLFwi8J+njeKAjeKZgO+4j1wiLFwi8J+njlwiLFwi8J+njuKAjeKZgu+4j1wiLFwi8J+njuKAjeKZgO+4j1wiLFwi8J+nkeKAjfCfpq9cIixcIvCfkajigI3wn6avXCIsXCLwn5Gp4oCN8J+mr1wiLFwi8J+nkeKAjfCfprxcIixcIvCfkajigI3wn6a8XCIsXCLwn5Gp4oCN8J+mvFwiLFwi8J+nkeKAjfCfpr1cIixcIvCfkajigI3wn6a9XCIsXCLwn5Gp4oCN8J+mvVwiLFwi8J+Pg1wiLFwi8J+Pg+KAjeKZgu+4j1wiLFwi8J+Pg+KAjeKZgO+4j1wiLFwi8J+Sg1wiLFwi8J+VulwiLFwi8J+VtO+4j1wiLFwi8J+Rr1wiLFwi8J+Rr+KAjeKZgu+4j1wiLFwi8J+Rr+KAjeKZgO+4j1wiLFwi8J+nllwiLFwi8J+nluKAjeKZgu+4j1wiLFwi8J+nluKAjeKZgO+4j1wiLFwi8J+nl1wiLFwi8J+nl+KAjeKZgu+4j1wiLFwi8J+nl+KAjeKZgO+4j1wiLFwi8J+kulwiLFwi8J+Ph1wiLFwi4pu377iPXCIsXCLwn4+CXCIsXCLwn4+M77iPXCIsXCLwn4+M77iP4oCN4pmC77iPXCIsXCLwn4+M77iP4oCN4pmA77iPXCIsXCLwn4+EXCIsXCLwn4+E4oCN4pmC77iPXCIsXCLwn4+E4oCN4pmA77iPXCIsXCLwn5qjXCIsXCLwn5qj4oCN4pmC77iPXCIsXCLwn5qj4oCN4pmA77iPXCIsXCLwn4+KXCIsXCLwn4+K4oCN4pmC77iPXCIsXCLwn4+K4oCN4pmA77iPXCIsXCLim7nvuI9cIixcIuKbue+4j+KAjeKZgu+4j1wiLFwi4pu577iP4oCN4pmA77iPXCIsXCLwn4+L77iPXCIsXCLwn4+L77iP4oCN4pmC77iPXCIsXCLwn4+L77iP4oCN4pmA77iPXCIsXCLwn5q0XCIsXCLwn5q04oCN4pmC77iPXCIsXCLwn5q04oCN4pmA77iPXCIsXCLwn5q1XCIsXCLwn5q14oCN4pmC77iPXCIsXCLwn5q14oCN4pmA77iPXCIsXCLwn6S4XCIsXCLwn6S44oCN4pmC77iPXCIsXCLwn6S44oCN4pmA77iPXCIsXCLwn6S8XCIsXCLwn6S84oCN4pmC77iPXCIsXCLwn6S84oCN4pmA77iPXCIsXCLwn6S9XCIsXCLwn6S94oCN4pmC77iPXCIsXCLwn6S94oCN4pmA77iPXCIsXCLwn6S+XCIsXCLwn6S+4oCN4pmC77iPXCIsXCLwn6S+4oCN4pmA77iPXCIsXCLwn6S5XCIsXCLwn6S54oCN4pmC77iPXCIsXCLwn6S54oCN4pmA77iPXCIsXCLwn6eYXCIsXCLwn6eY4oCN4pmC77iPXCIsXCLwn6eY4oCN4pmA77iPXCIsXCLwn5uAXCIsXCLwn5uMXCIsXCLwn6eR4oCN8J+kneKAjfCfp5FcIixcIvCfka1cIixcIvCfkatcIixcIvCfkaxcIixcIvCfko9cIixcIvCfkanigI3inaTvuI/igI3wn5KL4oCN8J+RqFwiLFwi8J+RqOKAjeKdpO+4j+KAjfCfkovigI3wn5GoXCIsXCLwn5Gp4oCN4p2k77iP4oCN8J+Si+KAjfCfkalcIixcIvCfkpFcIixcIvCfkanigI3inaTvuI/igI3wn5GoXCIsXCLwn5Go4oCN4p2k77iP4oCN8J+RqFwiLFwi8J+RqeKAjeKdpO+4j+KAjfCfkalcIixcIvCfkapcIixcIvCfkajigI3wn5Gp4oCN8J+RplwiLFwi8J+RqOKAjfCfkanigI3wn5GnXCIsXCLwn5Go4oCN8J+RqeKAjfCfkafigI3wn5GmXCIsXCLwn5Go4oCN8J+RqeKAjfCfkabigI3wn5GmXCIsXCLwn5Go4oCN8J+RqeKAjfCfkafigI3wn5GnXCIsXCLwn5Go4oCN8J+RqOKAjfCfkaZcIixcIvCfkajigI3wn5Go4oCN8J+Rp1wiLFwi8J+RqOKAjfCfkajigI3wn5Gn4oCN8J+RplwiLFwi8J+RqOKAjfCfkajigI3wn5Gm4oCN8J+RplwiLFwi8J+RqOKAjfCfkajigI3wn5Gn4oCN8J+Rp1wiLFwi8J+RqeKAjfCfkanigI3wn5GmXCIsXCLwn5Gp4oCN8J+RqeKAjfCfkadcIixcIvCfkanigI3wn5Gp4oCN8J+Rp+KAjfCfkaZcIixcIvCfkanigI3wn5Gp4oCN8J+RpuKAjfCfkaZcIixcIvCfkanigI3wn5Gp4oCN8J+Rp+KAjfCfkadcIixcIvCfkajigI3wn5GmXCIsXCLwn5Go4oCN8J+RpuKAjfCfkaZcIixcIvCfkajigI3wn5GnXCIsXCLwn5Go4oCN8J+Rp+KAjfCfkaZcIixcIvCfkajigI3wn5Gn4oCN8J+Rp1wiLFwi8J+RqeKAjfCfkaZcIixcIvCfkanigI3wn5Gm4oCN8J+RplwiLFwi8J+RqeKAjfCfkadcIixcIvCfkanigI3wn5Gn4oCN8J+RplwiLFwi8J+RqeKAjfCfkafigI3wn5GnXCIsXCLwn5ej77iPXCIsXCLwn5GkXCIsXCLwn5GlXCIsXCLwn6uCXCIsXCLwn5GjXCIsXCLwn5C1XCIsXCLwn5CSXCIsXCLwn6aNXCIsXCLwn6anXCIsXCLwn5C2XCIsXCLwn5CVXCIsXCLwn6auXCIsXCLwn5CV4oCN8J+mulwiLFwi8J+QqVwiLFwi8J+QulwiLFwi8J+milwiLFwi8J+mnVwiLFwi8J+QsVwiLFwi8J+QiFwiLFwi8J+QiOKAjeKsm1wiLFwi8J+mgVwiLFwi8J+Qr1wiLFwi8J+QhVwiLFwi8J+QhlwiLFwi8J+QtFwiLFwi8J+QjlwiLFwi8J+mhFwiLFwi8J+mk1wiLFwi8J+mjFwiLFwi8J+mrFwiLFwi8J+QrlwiLFwi8J+QglwiLFwi8J+Qg1wiLFwi8J+QhFwiLFwi8J+Qt1wiLFwi8J+QllwiLFwi8J+Ql1wiLFwi8J+QvVwiLFwi8J+Qj1wiLFwi8J+QkVwiLFwi8J+QkFwiLFwi8J+QqlwiLFwi8J+Qq1wiLFwi8J+mmVwiLFwi8J+mklwiLFwi8J+QmFwiLFwi8J+mo1wiLFwi8J+mj1wiLFwi8J+mm1wiLFwi8J+QrVwiLFwi8J+QgVwiLFwi8J+QgFwiLFwi8J+QuVwiLFwi8J+QsFwiLFwi8J+Qh1wiLFwi8J+Qv++4j1wiLFwi8J+mq1wiLFwi8J+mlFwiLFwi8J+mh1wiLFwi8J+Qu1wiLFwi8J+Qu+KAjeKdhO+4j1wiLFwi8J+QqFwiLFwi8J+QvFwiLFwi8J+mpVwiLFwi8J+mplwiLFwi8J+mqFwiLFwi8J+mmFwiLFwi8J+moVwiLFwi8J+QvlwiLFwi8J+mg1wiLFwi8J+QlFwiLFwi8J+Qk1wiLFwi8J+Qo1wiLFwi8J+QpFwiLFwi8J+QpVwiLFwi8J+QplwiLFwi8J+Qp1wiLFwi8J+Viu+4j1wiLFwi8J+mhVwiLFwi8J+mhlwiLFwi8J+molwiLFwi8J+miVwiLFwi8J+mpFwiLFwi8J+qtlwiLFwi8J+mqVwiLFwi8J+mmlwiLFwi8J+mnFwiLFwi8J+QuFwiLFwi8J+QilwiLFwi8J+QolwiLFwi8J+mjlwiLFwi8J+QjVwiLFwi8J+QslwiLFwi8J+QiVwiLFwi8J+mlVwiLFwi8J+mllwiLFwi8J+Qs1wiLFwi8J+Qi1wiLFwi8J+QrFwiLFwi8J+mrVwiLFwi8J+Qn1wiLFwi8J+QoFwiLFwi8J+QoVwiLFwi8J+miFwiLFwi8J+QmVwiLFwi8J+QmlwiLFwi8J+QjFwiLFwi8J+mi1wiLFwi8J+Qm1wiLFwi8J+QnFwiLFwi8J+QnVwiLFwi8J+qslwiLFwi8J+QnlwiLFwi8J+ml1wiLFwi8J+qs1wiLFwi8J+Vt++4j1wiLFwi8J+VuO+4j1wiLFwi8J+mglwiLFwi8J+mn1wiLFwi8J+qsFwiLFwi8J+qsVwiLFwi8J+moFwiLFwi8J+SkFwiLFwi8J+MuFwiLFwi8J+SrlwiLFwi8J+Pte+4j1wiLFwi8J+MuVwiLFwi8J+lgFwiLFwi8J+MulwiLFwi8J+Mu1wiLFwi8J+MvFwiLFwi8J+Mt1wiLFwi8J+MsVwiLFwi8J+qtFwiLFwi8J+MslwiLFwi8J+Ms1wiLFwi8J+MtFwiLFwi8J+MtVwiLFwi8J+MvlwiLFwi8J+Mv1wiLFwi4piY77iPXCIsXCLwn42AXCIsXCLwn42BXCIsXCLwn42CXCIsXCLwn42DXCIsXCLwn42HXCIsXCLwn42IXCIsXCLwn42JXCIsXCLwn42KXCIsXCLwn42LXCIsXCLwn42MXCIsXCLwn42NXCIsXCLwn6WtXCIsXCLwn42OXCIsXCLwn42PXCIsXCLwn42QXCIsXCLwn42RXCIsXCLwn42SXCIsXCLwn42TXCIsXCLwn6uQXCIsXCLwn6WdXCIsXCLwn42FXCIsXCLwn6uSXCIsXCLwn6WlXCIsXCLwn6WRXCIsXCLwn42GXCIsXCLwn6WUXCIsXCLwn6WVXCIsXCLwn4y9XCIsXCLwn4y277iPXCIsXCLwn6uRXCIsXCLwn6WSXCIsXCLwn6WsXCIsXCLwn6WmXCIsXCLwn6eEXCIsXCLwn6eFXCIsXCLwn42EXCIsXCLwn6WcXCIsXCLwn4ywXCIsXCLwn42eXCIsXCLwn6WQXCIsXCLwn6WWXCIsXCLwn6uTXCIsXCLwn6WoXCIsXCLwn6WvXCIsXCLwn6WeXCIsXCLwn6eHXCIsXCLwn6eAXCIsXCLwn42WXCIsXCLwn42XXCIsXCLwn6WpXCIsXCLwn6WTXCIsXCLwn42UXCIsXCLwn42fXCIsXCLwn42VXCIsXCLwn4ytXCIsXCLwn6WqXCIsXCLwn4yuXCIsXCLwn4yvXCIsXCLwn6uUXCIsXCLwn6WZXCIsXCLwn6eGXCIsXCLwn6WaXCIsXCLwn42zXCIsXCLwn6WYXCIsXCLwn42yXCIsXCLwn6uVXCIsXCLwn6WjXCIsXCLwn6WXXCIsXCLwn42/XCIsXCLwn6eIXCIsXCLwn6eCXCIsXCLwn6WrXCIsXCLwn42xXCIsXCLwn42YXCIsXCLwn42ZXCIsXCLwn42aXCIsXCLwn42bXCIsXCLwn42cXCIsXCLwn42dXCIsXCLwn42gXCIsXCLwn42iXCIsXCLwn42jXCIsXCLwn42kXCIsXCLwn42lXCIsXCLwn6WuXCIsXCLwn42hXCIsXCLwn6WfXCIsXCLwn6WgXCIsXCLwn6WhXCIsXCLwn6aAXCIsXCLwn6aeXCIsXCLwn6aQXCIsXCLwn6aRXCIsXCLwn6aqXCIsXCLwn42mXCIsXCLwn42nXCIsXCLwn42oXCIsXCLwn42pXCIsXCLwn42qXCIsXCLwn46CXCIsXCLwn42wXCIsXCLwn6eBXCIsXCLwn6WnXCIsXCLwn42rXCIsXCLwn42sXCIsXCLwn42tXCIsXCLwn42uXCIsXCLwn42vXCIsXCLwn428XCIsXCLwn6WbXCIsXCLimJVcIixcIvCfq5ZcIixcIvCfjbVcIixcIvCfjbZcIixcIvCfjb5cIixcIvCfjbdcIixcIvCfjbhcIixcIvCfjblcIixcIvCfjbpcIixcIvCfjbtcIixcIvCfpYJcIixcIvCfpYNcIixcIvCfpaRcIixcIvCfp4tcIixcIvCfp4NcIixcIvCfp4lcIixcIvCfp4pcIixcIvCfpaJcIixcIvCfjb3vuI9cIixcIvCfjbRcIixcIvCfpYRcIixcIvCflKpcIixcIvCfj7pcIixcIvCfjI1cIixcIvCfjI5cIixcIvCfjI9cIixcIvCfjJBcIixcIvCfl7rvuI9cIixcIvCfl75cIixcIvCfp61cIixcIvCfj5TvuI9cIixcIuKbsO+4j1wiLFwi8J+Mi1wiLFwi8J+Xu1wiLFwi8J+Ple+4j1wiLFwi8J+Plu+4j1wiLFwi8J+PnO+4j1wiLFwi8J+Pne+4j1wiLFwi8J+Pnu+4j1wiLFwi8J+Pn++4j1wiLFwi8J+Pm++4j1wiLFwi8J+Pl++4j1wiLFwi8J+nsVwiLFwi8J+qqFwiLFwi8J+qtVwiLFwi8J+bllwiLFwi8J+PmO+4j1wiLFwi8J+Pmu+4j1wiLFwi8J+PoFwiLFwi8J+PoVwiLFwi8J+PolwiLFwi8J+Po1wiLFwi8J+PpFwiLFwi8J+PpVwiLFwi8J+PplwiLFwi8J+PqFwiLFwi8J+PqVwiLFwi8J+PqlwiLFwi8J+Pq1wiLFwi8J+PrFwiLFwi8J+PrVwiLFwi8J+Pr1wiLFwi8J+PsFwiLFwi8J+SklwiLFwi8J+XvFwiLFwi8J+XvVwiLFwi4puqXCIsXCLwn5WMXCIsXCLwn5uVXCIsXCLwn5WNXCIsXCLim6nvuI9cIixcIvCflYtcIixcIuKbslwiLFwi4pu6XCIsXCLwn4yBXCIsXCLwn4yDXCIsXCLwn4+Z77iPXCIsXCLwn4yEXCIsXCLwn4yFXCIsXCLwn4yGXCIsXCLwn4yHXCIsXCLwn4yJXCIsXCLimajvuI9cIixcIvCfjqBcIixcIvCfjqFcIixcIvCfjqJcIixcIvCfkohcIixcIvCfjqpcIixcIvCfmoJcIixcIvCfmoNcIixcIvCfmoRcIixcIvCfmoVcIixcIvCfmoZcIixcIvCfmodcIixcIvCfmohcIixcIvCfmolcIixcIvCfmopcIixcIvCfmp1cIixcIvCfmp5cIixcIvCfmotcIixcIvCfmoxcIixcIvCfmo1cIixcIvCfmo5cIixcIvCfmpBcIixcIvCfmpFcIixcIvCfmpJcIixcIvCfmpNcIixcIvCfmpRcIixcIvCfmpVcIixcIvCfmpZcIixcIvCfmpdcIixcIvCfmphcIixcIvCfmplcIixcIvCfm7tcIixcIvCfmppcIixcIvCfmptcIixcIvCfmpxcIixcIvCfj47vuI9cIixcIvCfj43vuI9cIixcIvCfm7VcIixcIvCfpr1cIixcIvCfprxcIixcIvCfm7pcIixcIvCfmrJcIixcIvCfm7RcIixcIvCfm7lcIixcIvCfm7xcIixcIvCfmo9cIixcIvCfm6PvuI9cIixcIvCfm6TvuI9cIixcIvCfm6LvuI9cIixcIuKbvVwiLFwi8J+aqFwiLFwi8J+apVwiLFwi8J+aplwiLFwi8J+bkVwiLFwi8J+ap1wiLFwi4pqTXCIsXCLim7VcIixcIvCfm7ZcIixcIvCfmqRcIixcIvCfm7PvuI9cIixcIuKbtO+4j1wiLFwi8J+bpe+4j1wiLFwi8J+aolwiLFwi4pyI77iPXCIsXCLwn5up77iPXCIsXCLwn5urXCIsXCLwn5usXCIsXCLwn6qCXCIsXCLwn5K6XCIsXCLwn5qBXCIsXCLwn5qfXCIsXCLwn5qgXCIsXCLwn5qhXCIsXCLwn5uw77iPXCIsXCLwn5qAXCIsXCLwn5u4XCIsXCLwn5uO77iPXCIsXCLwn6ezXCIsXCLijJtcIixcIuKPs1wiLFwi4oyaXCIsXCLij7BcIixcIuKPse+4j1wiLFwi4o+y77iPXCIsXCLwn5Ww77iPXCIsXCLwn5WbXCIsXCLwn5WnXCIsXCLwn5WQXCIsXCLwn5WcXCIsXCLwn5WRXCIsXCLwn5WdXCIsXCLwn5WSXCIsXCLwn5WeXCIsXCLwn5WTXCIsXCLwn5WfXCIsXCLwn5WUXCIsXCLwn5WgXCIsXCLwn5WVXCIsXCLwn5WhXCIsXCLwn5WWXCIsXCLwn5WiXCIsXCLwn5WXXCIsXCLwn5WjXCIsXCLwn5WYXCIsXCLwn5WkXCIsXCLwn5WZXCIsXCLwn5WlXCIsXCLwn5WaXCIsXCLwn5WmXCIsXCLwn4yRXCIsXCLwn4ySXCIsXCLwn4yTXCIsXCLwn4yUXCIsXCLwn4yVXCIsXCLwn4yWXCIsXCLwn4yXXCIsXCLwn4yYXCIsXCLwn4yZXCIsXCLwn4yaXCIsXCLwn4ybXCIsXCLwn4ycXCIsXCLwn4yh77iPXCIsXCLimIDvuI9cIixcIvCfjJ1cIixcIvCfjJ5cIixcIvCfqpBcIixcIuKtkFwiLFwi8J+Mn1wiLFwi8J+MoFwiLFwi8J+MjFwiLFwi4piB77iPXCIsXCLim4VcIixcIuKbiO+4j1wiLFwi8J+MpO+4j1wiLFwi8J+Mpe+4j1wiLFwi8J+Mpu+4j1wiLFwi8J+Mp++4j1wiLFwi8J+MqO+4j1wiLFwi8J+Mqe+4j1wiLFwi8J+Mqu+4j1wiLFwi8J+Mq++4j1wiLFwi8J+MrO+4j1wiLFwi8J+MgFwiLFwi8J+MiFwiLFwi8J+MglwiLFwi4piC77iPXCIsXCLimJRcIixcIuKbse+4j1wiLFwi4pqhXCIsXCLinYTvuI9cIixcIuKYg++4j1wiLFwi4puEXCIsXCLimITvuI9cIixcIvCflKVcIixcIvCfkqdcIixcIvCfjIpcIixcIvCfjoNcIixcIvCfjoRcIixcIvCfjoZcIixcIvCfjodcIixcIvCfp6hcIixcIuKcqFwiLFwi8J+OiFwiLFwi8J+OiVwiLFwi8J+OilwiLFwi8J+Oi1wiLFwi8J+OjVwiLFwi8J+OjlwiLFwi8J+Oj1wiLFwi8J+OkFwiLFwi8J+OkVwiLFwi8J+np1wiLFwi8J+OgFwiLFwi8J+OgVwiLFwi8J+Ol++4j1wiLFwi8J+On++4j1wiLFwi8J+Oq1wiLFwi8J+Olu+4j1wiLFwi8J+PhlwiLFwi8J+PhVwiLFwi8J+lh1wiLFwi8J+liFwiLFwi8J+liVwiLFwi4pq9XCIsXCLimr5cIixcIvCfpY5cIixcIvCfj4BcIixcIvCfj5BcIixcIvCfj4hcIixcIvCfj4lcIixcIvCfjr5cIixcIvCfpY9cIixcIvCfjrNcIixcIvCfj49cIixcIvCfj5FcIixcIvCfj5JcIixcIvCfpY1cIixcIvCfj5NcIixcIvCfj7hcIixcIvCfpYpcIixcIvCfpYtcIixcIvCfpYVcIixcIuKbs1wiLFwi4pu477iPXCIsXCLwn46jXCIsXCLwn6S/XCIsXCLwn469XCIsXCLwn46/XCIsXCLwn5u3XCIsXCLwn6WMXCIsXCLwn46vXCIsXCLwn6qAXCIsXCLwn6qBXCIsXCLwn46xXCIsXCLwn5SuXCIsXCLwn6qEXCIsXCLwn6e/XCIsXCLwn46uXCIsXCLwn5W577iPXCIsXCLwn46wXCIsXCLwn46yXCIsXCLwn6epXCIsXCLwn6e4XCIsXCLwn6qFXCIsXCLwn6qGXCIsXCLimaDvuI9cIixcIuKZpe+4j1wiLFwi4pmm77iPXCIsXCLimaPvuI9cIixcIuKZn++4j1wiLFwi8J+Dj1wiLFwi8J+AhFwiLFwi8J+OtFwiLFwi8J+OrVwiLFwi8J+WvO+4j1wiLFwi8J+OqFwiLFwi8J+ntVwiLFwi8J+qoVwiLFwi8J+ntlwiLFwi8J+qolwiLFwi8J+Rk1wiLFwi8J+Vtu+4j1wiLFwi8J+lvVwiLFwi8J+lvFwiLFwi8J+mulwiLFwi8J+RlFwiLFwi8J+RlVwiLFwi8J+RllwiLFwi8J+no1wiLFwi8J+npFwiLFwi8J+npVwiLFwi8J+nplwiLFwi8J+Rl1wiLFwi8J+RmFwiLFwi8J+lu1wiLFwi8J+psVwiLFwi8J+pslwiLFwi8J+ps1wiLFwi8J+RmVwiLFwi8J+RmlwiLFwi8J+Rm1wiLFwi8J+RnFwiLFwi8J+RnVwiLFwi8J+bje+4j1wiLFwi8J+OklwiLFwi8J+ptFwiLFwi8J+RnlwiLFwi8J+Rn1wiLFwi8J+lvlwiLFwi8J+lv1wiLFwi8J+RoFwiLFwi8J+RoVwiLFwi8J+psFwiLFwi8J+RolwiLFwi8J+RkVwiLFwi8J+RklwiLFwi8J+OqVwiLFwi8J+Ok1wiLFwi8J+nolwiLFwi8J+qllwiLFwi4puR77iPXCIsXCLwn5O/XCIsXCLwn5KEXCIsXCLwn5KNXCIsXCLwn5KOXCIsXCLwn5SHXCIsXCLwn5SIXCIsXCLwn5SJXCIsXCLwn5SKXCIsXCLwn5OiXCIsXCLwn5OjXCIsXCLwn5OvXCIsXCLwn5SUXCIsXCLwn5SVXCIsXCLwn468XCIsXCLwn461XCIsXCLwn462XCIsXCLwn46Z77iPXCIsXCLwn46a77iPXCIsXCLwn46b77iPXCIsXCLwn46kXCIsXCLwn46nXCIsXCLwn5O7XCIsXCLwn463XCIsXCLwn6qXXCIsXCLwn464XCIsXCLwn465XCIsXCLwn466XCIsXCLwn467XCIsXCLwn6qVXCIsXCLwn6WBXCIsXCLwn6qYXCIsXCLwn5OxXCIsXCLwn5OyXCIsXCLimI7vuI9cIixcIvCfk55cIixcIvCfk59cIixcIvCfk6BcIixcIvCflItcIixcIvCflIxcIixcIvCfkrtcIixcIvCflqXvuI9cIixcIvCflqjvuI9cIixcIuKMqO+4j1wiLFwi8J+Wse+4j1wiLFwi8J+Wsu+4j1wiLFwi8J+SvVwiLFwi8J+SvlwiLFwi8J+Sv1wiLFwi8J+TgFwiLFwi8J+nrlwiLFwi8J+OpVwiLFwi8J+Onu+4j1wiLFwi8J+Tve+4j1wiLFwi8J+OrFwiLFwi8J+TulwiLFwi8J+Tt1wiLFwi8J+TuFwiLFwi8J+TuVwiLFwi8J+TvFwiLFwi8J+UjVwiLFwi8J+UjlwiLFwi8J+Vr++4j1wiLFwi8J+SoVwiLFwi8J+UplwiLFwi8J+PrlwiLFwi8J+qlFwiLFwi8J+TlFwiLFwi8J+TlVwiLFwi8J+TllwiLFwi8J+Tl1wiLFwi8J+TmFwiLFwi8J+TmVwiLFwi8J+TmlwiLFwi8J+Tk1wiLFwi8J+TklwiLFwi8J+Tg1wiLFwi8J+TnFwiLFwi8J+ThFwiLFwi8J+TsFwiLFwi8J+Xnu+4j1wiLFwi8J+TkVwiLFwi8J+UllwiLFwi8J+Pt++4j1wiLFwi8J+SsFwiLFwi8J+qmVwiLFwi8J+StFwiLFwi8J+StVwiLFwi8J+StlwiLFwi8J+St1wiLFwi8J+SuFwiLFwi8J+Ss1wiLFwi8J+nvlwiLFwi8J+SuVwiLFwi4pyJ77iPXCIsXCLwn5OnXCIsXCLwn5OoXCIsXCLwn5OpXCIsXCLwn5OkXCIsXCLwn5OlXCIsXCLwn5OmXCIsXCLwn5OrXCIsXCLwn5OqXCIsXCLwn5OsXCIsXCLwn5OtXCIsXCLwn5OuXCIsXCLwn5ez77iPXCIsXCLinI/vuI9cIixcIuKcku+4j1wiLFwi8J+Wi++4j1wiLFwi8J+Wiu+4j1wiLFwi8J+WjO+4j1wiLFwi8J+Wje+4j1wiLFwi8J+TnVwiLFwi8J+SvFwiLFwi8J+TgVwiLFwi8J+TglwiLFwi8J+Xgu+4j1wiLFwi8J+ThVwiLFwi8J+ThlwiLFwi8J+Xku+4j1wiLFwi8J+Xk++4j1wiLFwi8J+Th1wiLFwi8J+TiFwiLFwi8J+TiVwiLFwi8J+TilwiLFwi8J+Ti1wiLFwi8J+TjFwiLFwi8J+TjVwiLFwi8J+TjlwiLFwi8J+Wh++4j1wiLFwi8J+Tj1wiLFwi8J+TkFwiLFwi4pyC77iPXCIsXCLwn5eD77iPXCIsXCLwn5eE77iPXCIsXCLwn5eR77iPXCIsXCLwn5SSXCIsXCLwn5STXCIsXCLwn5SPXCIsXCLwn5SQXCIsXCLwn5SRXCIsXCLwn5ed77iPXCIsXCLwn5SoXCIsXCLwn6qTXCIsXCLim4/vuI9cIixcIuKaku+4j1wiLFwi8J+boO+4j1wiLFwi8J+Xoe+4j1wiLFwi4pqU77iPXCIsXCLwn5SrXCIsXCLwn6qDXCIsXCLwn4+5XCIsXCLwn5uh77iPXCIsXCLwn6qaXCIsXCLwn5SnXCIsXCLwn6qbXCIsXCLwn5SpXCIsXCLimpnvuI9cIixcIvCfl5zvuI9cIixcIuKalu+4j1wiLFwi8J+mr1wiLFwi8J+Ul1wiLFwi4puT77iPXCIsXCLwn6qdXCIsXCLwn6ewXCIsXCLwn6eyXCIsXCLwn6qcXCIsXCLimpfvuI9cIixcIvCfp6pcIixcIvCfp6tcIixcIvCfp6xcIixcIvCflKxcIixcIvCflK1cIixcIvCfk6FcIixcIvCfkolcIixcIvCfqbhcIixcIvCfkopcIixcIvCfqblcIixcIvCfqbpcIixcIvCfmqpcIixcIvCfm5dcIixcIvCfqp5cIixcIvCfqp9cIixcIvCfm4/vuI9cIixcIvCfm4vvuI9cIixcIvCfqpFcIixcIvCfmr1cIixcIvCfqqBcIixcIvCfmr9cIixcIvCfm4FcIixcIvCfqqRcIixcIvCfqpJcIixcIvCfp7RcIixcIvCfp7dcIixcIvCfp7lcIixcIvCfp7pcIixcIvCfp7tcIixcIvCfqqNcIixcIvCfp7xcIixcIvCfqqVcIixcIvCfp71cIixcIvCfp69cIixcIvCfm5JcIixcIvCfmqxcIixcIuKasO+4j1wiLFwi8J+qplwiLFwi4pqx77iPXCIsXCLwn5e/XCIsXCLwn6qnXCIsXCLwn4+nXCIsXCLwn5quXCIsXCLwn5qwXCIsXCLimb9cIixcIvCfmrlcIixcIvCfmrpcIixcIvCfmrtcIixcIvCfmrxcIixcIvCfmr5cIixcIvCfm4JcIixcIvCfm4NcIixcIvCfm4RcIixcIvCfm4VcIixcIuKaoO+4j1wiLFwi8J+auFwiLFwi4puUXCIsXCLwn5qrXCIsXCLwn5qzXCIsXCLwn5qtXCIsXCLwn5qvXCIsXCLwn5qxXCIsXCLwn5q3XCIsXCLwn5O1XCIsXCLwn5SeXCIsXCLimKLvuI9cIixcIuKYo++4j1wiLFwi4qyG77iPXCIsXCLihpfvuI9cIixcIuKeoe+4j1wiLFwi4oaY77iPXCIsXCLirIfvuI9cIixcIuKGme+4j1wiLFwi4qyF77iPXCIsXCLihpbvuI9cIixcIuKGle+4j1wiLFwi4oaU77iPXCIsXCLihqnvuI9cIixcIuKGqu+4j1wiLFwi4qS077iPXCIsXCLipLXvuI9cIixcIvCflINcIixcIvCflIRcIixcIvCflJlcIixcIvCflJpcIixcIvCflJtcIixcIvCflJxcIixcIvCflJ1cIixcIvCfm5BcIixcIuKam++4j1wiLFwi8J+Vie+4j1wiLFwi4pyh77iPXCIsXCLimLjvuI9cIixcIuKYr++4j1wiLFwi4pyd77iPXCIsXCLimKbvuI9cIixcIuKYqu+4j1wiLFwi4piu77iPXCIsXCLwn5WOXCIsXCLwn5SvXCIsXCLimYhcIixcIuKZiVwiLFwi4pmKXCIsXCLimYtcIixcIuKZjFwiLFwi4pmNXCIsXCLimY5cIixcIuKZj1wiLFwi4pmQXCIsXCLimZFcIixcIuKZklwiLFwi4pmTXCIsXCLim45cIixcIvCflIBcIixcIvCflIFcIixcIvCflIJcIixcIuKWtu+4j1wiLFwi4o+pXCIsXCLij63vuI9cIixcIuKPr++4j1wiLFwi4peA77iPXCIsXCLij6pcIixcIuKPru+4j1wiLFwi8J+UvFwiLFwi4o+rXCIsXCLwn5S9XCIsXCLij6xcIixcIuKPuO+4j1wiLFwi4o+577iPXCIsXCLij7rvuI9cIixcIuKPj++4j1wiLFwi8J+OplwiLFwi8J+UhVwiLFwi8J+UhlwiLFwi8J+TtlwiLFwi8J+Ts1wiLFwi8J+TtFwiLFwi4pmA77iPXCIsXCLimYLvuI9cIixcIuKap++4j1wiLFwi4pyW77iPXCIsXCLinpVcIixcIuKellwiLFwi4p6XXCIsXCLimb7vuI9cIixcIuKAvO+4j1wiLFwi4oGJ77iPXCIsXCLinZNcIixcIuKdlFwiLFwi4p2VXCIsXCLinZdcIixcIuOAsO+4j1wiLFwi8J+SsVwiLFwi8J+SslwiLFwi4pqV77iPXCIsXCLimbvvuI9cIixcIuKanO+4j1wiLFwi8J+UsVwiLFwi8J+Tm1wiLFwi8J+UsFwiLFwi4q2VXCIsXCLinIVcIixcIuKYke+4j1wiLFwi4pyU77iPXCIsXCLinYxcIixcIuKdjlwiLFwi4p6wXCIsXCLinr9cIixcIuOAve+4j1wiLFwi4pyz77iPXCIsXCLinLTvuI9cIixcIuKdh++4j1wiLFwiwqnvuI9cIixcIsKu77iPXCIsXCLihKLvuI9cIixcIiPvuI/ig6NcIixcIirvuI/ig6NcIixcIjDvuI/ig6NcIixcIjHvuI/ig6NcIixcIjLvuI/ig6NcIixcIjPvuI/ig6NcIixcIjTvuI/ig6NcIixcIjXvuI/ig6NcIixcIjbvuI/ig6NcIixcIjfvuI/ig6NcIixcIjjvuI/ig6NcIixcIjnvuI/ig6NcIixcIvCflJ9cIixcIvCflKBcIixcIvCflKFcIixcIvCflKJcIixcIvCflKNcIixcIvCflKRcIixcIvCfhbDvuI9cIixcIvCfho5cIixcIvCfhbHvuI9cIixcIvCfhpFcIixcIvCfhpJcIixcIvCfhpNcIixcIuKEue+4j1wiLFwi8J+GlFwiLFwi4pOC77iPXCIsXCLwn4aVXCIsXCLwn4aWXCIsXCLwn4W+77iPXCIsXCLwn4aXXCIsXCLwn4W/77iPXCIsXCLwn4aYXCIsXCLwn4aZXCIsXCLwn4aaXCIsXCLwn4iBXCIsXCLwn4iC77iPXCIsXCLwn4i377iPXCIsXCLwn4i2XCIsXCLwn4ivXCIsXCLwn4mQXCIsXCLwn4i5XCIsXCLwn4iaXCIsXCLwn4iyXCIsXCLwn4mRXCIsXCLwn4i4XCIsXCLwn4i0XCIsXCLwn4izXCIsXCLjipfvuI9cIixcIuOKme+4j1wiLFwi8J+IulwiLFwi8J+ItVwiLFwi8J+UtFwiLFwi8J+foFwiLFwi8J+foVwiLFwi8J+folwiLFwi8J+UtVwiLFwi8J+fo1wiLFwi8J+fpFwiLFwi4pqrXCIsXCLimqpcIixcIvCfn6VcIixcIvCfn6dcIixcIvCfn6hcIixcIvCfn6lcIixcIvCfn6ZcIixcIvCfn6pcIixcIvCfn6tcIixcIuKsm1wiLFwi4qycXCIsXCLil7zvuI9cIixcIuKXu++4j1wiLFwi4pe+XCIsXCLil71cIixcIuKWqu+4j1wiLFwi4par77iPXCIsXCLwn5S2XCIsXCLwn5S3XCIsXCLwn5S4XCIsXCLwn5S5XCIsXCLwn5S6XCIsXCLwn5S7XCIsXCLwn5KgXCIsXCLwn5SYXCIsXCLwn5SzXCIsXCLwn5SyXCIsXCLwn4+BXCIsXCLwn5qpXCIsXCLwn46MXCIsXCLwn4+0XCIsXCLwn4+z77iPXCIsXCLwn4+z77iP4oCN8J+MiFwiLFwi8J+Ps++4j+KAjeKap++4j1wiLFwi8J+PtOKAjeKYoO+4j1wiLFwi8J+HpvCfh6hcIixcIvCfh6bwn4epXCIsXCLwn4em8J+HqlwiLFwi8J+HpvCfh6tcIixcIvCfh6bwn4esXCIsXCLwn4em8J+HrlwiLFwi8J+HpvCfh7FcIixcIvCfh6bwn4eyXCIsXCLwn4em8J+HtFwiLFwi8J+HpvCfh7ZcIixcIvCfh6bwn4e3XCIsXCLwn4em8J+HuFwiLFwi8J+HpvCfh7lcIixcIvCfh6bwn4e6XCIsXCLwn4em8J+HvFwiLFwi8J+HpvCfh71cIixcIvCfh6bwn4e/XCIsXCLwn4en8J+HplwiLFwi8J+Hp/Cfh6dcIixcIvCfh6fwn4epXCIsXCLwn4en8J+HqlwiLFwi8J+Hp/Cfh6tcIixcIvCfh6fwn4esXCIsXCLwn4en8J+HrVwiLFwi8J+Hp/Cfh65cIixcIvCfh6fwn4evXCIsXCLwn4en8J+HsVwiLFwi8J+Hp/Cfh7JcIixcIvCfh6fwn4ezXCIsXCLwn4en8J+HtFwiLFwi8J+Hp/Cfh7ZcIixcIvCfh6fwn4e3XCIsXCLwn4en8J+HuFwiLFwi8J+Hp/Cfh7lcIixcIvCfh6fwn4e7XCIsXCLwn4en8J+HvFwiLFwi8J+Hp/Cfh75cIixcIvCfh6fwn4e/XCIsXCLwn4eo8J+HplwiLFwi8J+HqPCfh6hcIixcIvCfh6jwn4epXCIsXCLwn4eo8J+Hq1wiLFwi8J+HqPCfh6xcIixcIvCfh6jwn4etXCIsXCLwn4eo8J+HrlwiLFwi8J+HqPCfh7BcIixcIvCfh6jwn4exXCIsXCLwn4eo8J+HslwiLFwi8J+HqPCfh7NcIixcIvCfh6jwn4e0XCIsXCLwn4eo8J+HtVwiLFwi8J+HqPCfh7dcIixcIvCfh6jwn4e6XCIsXCLwn4eo8J+Hu1wiLFwi8J+HqPCfh7xcIixcIvCfh6jwn4e9XCIsXCLwn4eo8J+HvlwiLFwi8J+HqPCfh79cIixcIvCfh6nwn4eqXCIsXCLwn4ep8J+HrFwiLFwi8J+HqfCfh69cIixcIvCfh6nwn4ewXCIsXCLwn4ep8J+HslwiLFwi8J+HqfCfh7RcIixcIvCfh6nwn4e/XCIsXCLwn4eq8J+HplwiLFwi8J+HqvCfh6hcIixcIvCfh6rwn4eqXCIsXCLwn4eq8J+HrFwiLFwi8J+HqvCfh61cIixcIvCfh6rwn4e3XCIsXCLwn4eq8J+HuFwiLFwi8J+HqvCfh7lcIixcIvCfh6rwn4e6XCIsXCLwn4er8J+HrlwiLFwi8J+Hq/Cfh69cIixcIvCfh6vwn4ewXCIsXCLwn4er8J+HslwiLFwi8J+Hq/Cfh7RcIixcIvCfh6vwn4e3XCIsXCLwn4es8J+HplwiLFwi8J+HrPCfh6dcIixcIvCfh6zwn4epXCIsXCLwn4es8J+HqlwiLFwi8J+HrPCfh6tcIixcIvCfh6zwn4esXCIsXCLwn4es8J+HrVwiLFwi8J+HrPCfh65cIixcIvCfh6zwn4exXCIsXCLwn4es8J+HslwiLFwi8J+HrPCfh7NcIixcIvCfh6zwn4e1XCIsXCLwn4es8J+HtlwiLFwi8J+HrPCfh7dcIixcIvCfh6zwn4e4XCIsXCLwn4es8J+HuVwiLFwi8J+HrPCfh7pcIixcIvCfh6zwn4e8XCIsXCLwn4es8J+HvlwiLFwi8J+HrfCfh7BcIixcIvCfh63wn4eyXCIsXCLwn4et8J+Hs1wiLFwi8J+HrfCfh7dcIixcIvCfh63wn4e5XCIsXCLwn4et8J+HulwiLFwi8J+HrvCfh6hcIixcIvCfh67wn4epXCIsXCLwn4eu8J+HqlwiLFwi8J+HrvCfh7FcIixcIvCfh67wn4eyXCIsXCLwn4eu8J+Hs1wiLFwi8J+HrvCfh7RcIixcIvCfh67wn4e2XCIsXCLwn4eu8J+Ht1wiLFwi8J+HrvCfh7hcIixcIvCfh67wn4e5XCIsXCLwn4ev8J+HqlwiLFwi8J+Hr/Cfh7JcIixcIvCfh6/wn4e0XCIsXCLwn4ev8J+HtVwiLFwi8J+HsPCfh6pcIixcIvCfh7Dwn4esXCIsXCLwn4ew8J+HrVwiLFwi8J+HsPCfh65cIixcIvCfh7Dwn4eyXCIsXCLwn4ew8J+Hs1wiLFwi8J+HsPCfh7VcIixcIvCfh7Dwn4e3XCIsXCLwn4ew8J+HvFwiLFwi8J+HsPCfh75cIixcIvCfh7Dwn4e/XCIsXCLwn4ex8J+HplwiLFwi8J+HsfCfh6dcIixcIvCfh7Hwn4eoXCIsXCLwn4ex8J+HrlwiLFwi8J+HsfCfh7BcIixcIvCfh7Hwn4e3XCIsXCLwn4ex8J+HuFwiLFwi8J+HsfCfh7lcIixcIvCfh7Hwn4e6XCIsXCLwn4ex8J+Hu1wiLFwi8J+HsfCfh75cIixcIvCfh7Lwn4emXCIsXCLwn4ey8J+HqFwiLFwi8J+HsvCfh6lcIixcIvCfh7Lwn4eqXCIsXCLwn4ey8J+Hq1wiLFwi8J+HsvCfh6xcIixcIvCfh7Lwn4etXCIsXCLwn4ey8J+HsFwiLFwi8J+HsvCfh7FcIixcIvCfh7Lwn4eyXCIsXCLwn4ey8J+Hs1wiLFwi8J+HsvCfh7RcIixcIvCfh7Lwn4e1XCIsXCLwn4ey8J+HtlwiLFwi8J+HsvCfh7dcIixcIvCfh7Lwn4e4XCIsXCLwn4ey8J+HuVwiLFwi8J+HsvCfh7pcIixcIvCfh7Lwn4e7XCIsXCLwn4ey8J+HvFwiLFwi8J+HsvCfh71cIixcIvCfh7Lwn4e+XCIsXCLwn4ey8J+Hv1wiLFwi8J+Hs/Cfh6ZcIixcIvCfh7Pwn4eoXCIsXCLwn4ez8J+HqlwiLFwi8J+Hs/Cfh6tcIixcIvCfh7Pwn4esXCIsXCLwn4ez8J+HrlwiLFwi8J+Hs/Cfh7FcIixcIvCfh7Pwn4e0XCIsXCLwn4ez8J+HtVwiLFwi8J+Hs/Cfh7dcIixcIvCfh7Pwn4e6XCIsXCLwn4ez8J+Hv1wiLFwi8J+HtPCfh7JcIixcIvCfh7Xwn4emXCIsXCLwn4e18J+HqlwiLFwi8J+HtfCfh6tcIixcIvCfh7Xwn4esXCIsXCLwn4e18J+HrVwiLFwi8J+HtfCfh7BcIixcIvCfh7Xwn4exXCIsXCLwn4e18J+HslwiLFwi8J+HtfCfh7NcIixcIvCfh7Xwn4e3XCIsXCLwn4e18J+HuFwiLFwi8J+HtfCfh7lcIixcIvCfh7Xwn4e8XCIsXCLwn4e18J+HvlwiLFwi8J+HtvCfh6ZcIixcIvCfh7fwn4eqXCIsXCLwn4e38J+HtFwiLFwi8J+Ht/Cfh7hcIixcIvCfh7fwn4e6XCIsXCLwn4e38J+HvFwiLFwi8J+HuPCfh6ZcIixcIvCfh7jwn4enXCIsXCLwn4e48J+HqFwiLFwi8J+HuPCfh6lcIixcIvCfh7jwn4eqXCIsXCLwn4e48J+HrFwiLFwi8J+HuPCfh61cIixcIvCfh7jwn4euXCIsXCLwn4e48J+Hr1wiLFwi8J+HuPCfh7BcIixcIvCfh7jwn4exXCIsXCLwn4e48J+HslwiLFwi8J+HuPCfh7NcIixcIvCfh7jwn4e0XCIsXCLwn4e48J+Ht1wiLFwi8J+HuPCfh7hcIixcIvCfh7jwn4e5XCIsXCLwn4e48J+Hu1wiLFwi8J+HuPCfh71cIixcIvCfh7jwn4e+XCIsXCLwn4e48J+Hv1wiLFwi8J+HufCfh6ZcIixcIvCfh7nwn4eoXCIsXCLwn4e58J+HqVwiLFwi8J+HufCfh6tcIixcIvCfh7nwn4esXCIsXCLwn4e58J+HrVwiLFwi8J+HufCfh69cIixcIvCfh7nwn4ewXCIsXCLwn4e58J+HsVwiLFwi8J+HufCfh7JcIixcIvCfh7nwn4ezXCIsXCLwn4e58J+HtFwiLFwi8J+HufCfh7dcIixcIvCfh7nwn4e5XCIsXCLwn4e58J+Hu1wiLFwi8J+HufCfh7xcIixcIvCfh7nwn4e/XCIsXCLwn4e68J+HplwiLFwi8J+HuvCfh6xcIixcIvCfh7rwn4eyXCIsXCLwn4e68J+Hs1wiLFwi8J+HuvCfh7hcIixcIvCfh7rwn4e+XCIsXCLwn4e68J+Hv1wiLFwi8J+Hu/Cfh6ZcIixcIvCfh7vwn4eoXCIsXCLwn4e78J+HqlwiLFwi8J+Hu/Cfh6xcIixcIvCfh7vwn4euXCIsXCLwn4e78J+Hs1wiLFwi8J+Hu/Cfh7pcIixcIvCfh7zwn4erXCIsXCLwn4e88J+HuFwiLFwi8J+HvfCfh7BcIixcIvCfh77wn4eqXCIsXCLwn4e+8J+HuVwiLFwi8J+Hv/Cfh6ZcIixcIvCfh7/wn4eyXCIsXCLwn4e/8J+HvFwiLFwi8J+PtPOggafzoIGi86CBpfOgga7zoIGn86CBv1wiLFwi8J+PtPOggafzoIGi86CBs/OggaPzoIG086CBv1wiLFwi8J+PtPOggafzoIGi86CBt/OggazzoIGz86CBv1wiXTtmdW5jdGlvbiBNYShlKXtyZXR1cm4gbihBYSxlKX12YXIgVGE9W1wiMHg5NThhYTlkZGJkNjJmOTg5ZGVjMmZkMTQ2OGJmNDM2YWViZWI4YmU2XCIsXCIweDlhN2EzNjA3ZGM0NjE3ZGVmZjZkNGY5Y2E1ZDhjMGJlYmEwY2ZmYzVcIixcIjB4ZjVkY2M1N2NiNzQ2MjNkMmIzYmZhNmJlOWQ5NjkwMmY0YmFjYjBiNFwiLFwiMHhmZWZmNWZjMDlmYzY0ZGRkZTFjYjA5Y2RiYmE5ZDVhYTFiZDYwMDI4XCIsXCIweGJmN2FhMmZkZmRjMGE5NzE0MjdiYzdhODE1ZWFiZTRmMzdmNTNjMTlcIixcIjB4YmEwY2JkYmRhM2UxZmFmZDliYTliMWI2MzhkOWVlYTBmOGI5ZDdkYVwiLFwiMHhlYWM0NzZhZjJjZGQzZDViYmQ3MjM3NTkwNzNkYjIwZmU5ODdmN2JjXCIsXCIweDVjZWYwMjE0ZjRlYmVjYWViMGEzNDA4OGY0MTY5ZGMyZGJiZjNkZGJcIixcIjB4M2JlNGNhODhkZGE0YWVkZThiMmNmNGNkZjgwODc4ZGFlY2ZkOTdkMFwiLFwiMHg1YTM2N2ZhZTRkYWUwMGUwNWQ2YjNjZTE5ZDRmYWRlYzRkYTVkZmZlXCIsXCIweGJhZTdiNTE3ZmRkMDc3ZWRmZWZmZmFmYmQ2ZmZkZWM2YTk1NDEzYWNcIixcIjB4ZGJjZWJmZjQ5ZTZmOWM4ZGRiNzY0YjVhNjhiN2JhMmZkZjU1NWMyZVwiLFwiMHhmN2FlYTBjZTdhYjc1YmJiZWFiZjgzYTM1YjY2MzExMjRlMWIwMWRlXCIsXCIweGJmNTNlZTI2ZDhkZGRjY2NkYTk1YjM3M2FkOGNlMGViZGJiMDBjZmRcIixcIjB4ZDk3YmUzYmFlYmVhMzBlZWRjMzE4ZTgyYmVmZDdiNDUxZmRjYTFjZVwiLFwiMHhhNjllYTNlN2ViMjkzN2RiYzU2ZjFiOTNkYmFiYmJlNzQ4NDEwOGQ1XCIsXCIweDQ2MjcwZmFhYzc2YzFkY2I5ZWE3OGJmYzc1ZDg0YjgyYjkyODk2MmJcIixcIjB4ZWRhN2JkODJhYTQ1Y2I2ZjZkZGM5MmZmNDMyYjlmMWZjOTcwY2Y2ZlwiXTtmdW5jdGlvbiBCYShlKXtyZXR1cm4gbihUYSxlKX12YXIgSWE9W1wiYWlmZlwiLFwiZGViXCIsXCJ1dHpcIixcIm1wZWdcIixcIml0cFwiLFwicXhiXCIsXCJtbWZcIixcImZic1wiLFwiYWFtXCIsXCJsaW5rNjZcIixcIm1tclwiLFwiY2xrd1wiLFwidmlzXCIsXCJlb2xcIixcImNpaVwiLFwiaW5pXCIsXCJ1dmRcIixcInV2eFwiLFwia3dkXCIsXCJncWZcIixcIm9uZXRvYzJcIixcIm1hblwiLFwiejJcIixcInVybHNcIixcIm90c1wiLFwiY3BwXCIsXCJwdWJcIixcImNzcFwiLFwicmRmXCIsXCJsaXN0XCIsXCJzZmQtaGRzdHhcIixcInUzMlwiLFwieGh0bWxcIixcInZ4bWxcIixcImVjbWFcIixcInN3aVwiLFwiY3B0XCIsXCJncmFtcHNcIixcIm1iXCIsXCJwcmVcIixcInJzXCIsXCJkdHNcIixcIm5uZFwiLFwiYXRvbVwiLFwicGFzXCIsXCJ1dnZpXCIsXCJwN2JcIixcInB0aWRcIixcImRqdnVcIixcImNtcFwiLFwibXNsXCIsXCJvYTJcIixcImZsd1wiLFwicGN1cmxcIixcImF6c1wiLFwic3NkbFwiLFwiZG90eFwiLFwibXJjeFwiLFwic3NmXCIsXCJtM3VcIixcIm9uZXRvY1wiLFwidzNkXCIsXCJ0cHRcIixcIm1mdFwiLFwieWluXCIsXCJvZ2dcIixcImpzb25tbFwiLFwiZnN0XCIsXCJhY2NcIixcIngzZHZ6XCIsXCJtYWRzXCIsXCJzeGdcIixcInN0clwiLFwicHBzbVwiLFwicGZ4XCIsXCJ2c3dcIixcImlycFwiLFwibWV0YTRcIixcInRleFwiLFwiY2xreFwiLFwiY2hydFwiLFwidHh0XCIsXCJtc2ZcIixcInd2eFwiLFwiZXQzXCIsXCJiZG1cIixcIm9kc1wiLFwiM2RzXCIsXCJzbWlcIixcInNrbVwiLFwidDNcIixcImFzbVwiXTtmdW5jdGlvbiBQYShlKXtyZXR1cm4gbihJYSxlKX12YXIgeGE9W1wiL29wdC9iaW4vdHVybl9rZXlfYmVkZm9yZHNoaXJlX2NvbnRpbmdlbmN5Lm10cy5hY3VcIixcIi9saWIvbmljaGVzX2FjY291bnRfc3ByaW5ncy53M2QuZ3RtXCIsXCIvQXBwbGljYXRpb25zL3BsYWluc19mcmVzaF9oYWNrLnMub25lcGtnXCIsXCIvdXNyL2xpYmV4ZWMvZ29sZF9wbHVtX3RveXMubWJrLnhkZlwiLFwiL25ldC9ncmVlbl90ZXJyYWNlX2Zhcm9lLmNzaC53c3BvbGljeVwiLFwiL25ldC9tb25pdG9yX3NhaW50X2VuZ2luZWVyLm1yYy5vZ3ZcIixcIi91c3IvbGliL2RvbmcuZ3NmLmR4clwiLFwiL3Vzci9pbmNsdWRlL3JhbmRfc2xlZWsudXZzLnF4dFwiLFwiL3Vzci9idWNraW5naGFtc2hpcmUucGRiLnNvXCIsXCIvdG1wL3NvZnQuZnhwLmRpc3RcIixcIi9sb3N0K2ZvdW5kL3Byb2R1Y2VyX21ldGFsX25ldHdvcmtlZC5zcG90Lmt0elwiLFwiL2xvc3QrZm91bmQvZ29yZ2VvdXNfcGxhc3RpYy56MS5kd2ZcIixcIi91c3Ivc2Jpbi9jYXIuY2JhLmRzc2NcIixcIi9BcHBsaWNhdGlvbnMvcmVzcG9uc2l2ZV9tb2JpbGUudHdkcy5tYXJrZG93blwiLFwiL3Vzci9zaGFyZS9jb3B5aW5nLnNjcS50ZWFjaGVyXCIsXCIvYmluL25ldXJhbF9uZXQuYnRpZi5waHBcIixcIi9sb3N0K2ZvdW5kL3N1ZGFuZXNlLnNtLm0xdlwiLFwiL3Vzci9sb2NhbC9iaW4vY29tcHJlc3NpbmdfYmlmdXJjYXRlZC5jcmQub2RhXCIsXCIvZXRjL21haWwvdXpiZWtpc3Rhbl9pbnZvaWNlX2FuYWx5emVyLmxvc3R4bWwueGh0XCIsXCIvdXNyL2xvY2FsL2Jpbi90dXJuX2tleS51dnYubW5nXCIsXCIvdXNyL3NoYXJlL21vbGRvdmFfbG9hbl9hZG1pbmlzdHJhdGlvbi5wdmIueGFtbFwiLFwiL29wdC9pbmNsdWRlL2Zyb3plbi56Mi5wbm1cIixcIi9vcHQvYmluL3JlY29udGV4dHVhbGl6ZV9vcHRpbWl6YXRpb24ub25ldG9jLm9wZlwiLFwiL3Jlc2N1ZS9kaXJlY3Rvcl9ncm9jZXJ5LmdtbC5ubnNcIixcIi9vcHQvYmluL2FkcF9rZXlib2FyZC5tY2QucHJmXCIsXCIvVXNlcnMvdGFibGVfbGVhZGluZy51ZmQuYWFzXCIsXCIvdXNyL2luY2x1ZGUvYXZvbl9iZXN0X29mX2JyZWVkLnRnYS54aWZcIixcIi9ldGMvcGVyaW9kaWMvY29tcGF0aWJsZS5pY20ucGNmXCIsXCIvdmFyL2xvZy93aXRoZHJhd2FsLnNkYy5hZXBcIixcIi92YXIveXAvdGFzdHlfc2lsdmVyX2lkYWhvLmNici51dmZcIixcIi9ldGMvcGVyaW9kaWMvd2ViX3JlYWRpbmVzc19pbnRlcm5hdGlvbmFsX2xpY2Vuc2VkLmx3cC54bGZcIixcIi92YXIvc3Bvb2wvZnV0dXJlX29yZ2FuaWMuYnBrLnd0YlwiLFwiL2hvbWUvYWNjb3VudF9jb3R0b24ueGFwLmpwZVwiLFwiL2V0Yy9tYWlsL3N0cmF0ZWdpc3QubmdkYXQubWNkXCIsXCIvbGliL3RyYW5zbWl0X2F3ZXNvbWUuY2JhLmZseFwiLFwiL2hvbWUvc29mdHdhcmUuc3BjLmRkMlwiLFwiL3Jlc2N1ZS9zdGlja3kuYXNjLm90c1wiLFwiL3Vzci9iaW4vZmlzaF9pc2xhbmRzX2VzdGF0ZXMuZmRmLmFpZlwiLFwiL3Vzci9zYmluL29wdGltaXphdGlvbl9tdWx0aV90YXNraW5nLmh2cC5tY2RcIixcIi9ldGMvcHBwL3N0ZWVsLmNkZi5tcDRcIixcIi9ldGMvZ29yZ2VvdXNfbWV3cy5wbWwucHBhbVwiLFwiL3Vzci9saWIvbWV0cmljcy5zbXppcC5ocGlkXCIsXCIvU3lzdGVtL2hhY2tpbmcuc2Fzcy5zeGdcIixcIi9ob21lL3VzZXIvZ2xvdmVzX2dyZXkuYW1pLnN2Z1wiLFwiL3Vzci9pbmNsdWRlL292ZXJyaWRpbmdfcG5nLnR4dC5hd1wiLFwiL2xvc3QrZm91bmQvZGVzaWduZXJfZGVjZW50cmFsaXplZC50Y2wubTR1XCIsXCIvZXRjL25hbWVkYi9kZV9lbmdpbmVlcmVkX2JhbmR3aWR0aC5pZ3guYXZpXCIsXCIvb3B0L2luY2x1ZGUvY2hyaXN0bWFzLm1wMmEudm9iXCIsXCIvdXNyL1gxMVI2L3Byb2R1Y2VyX2RlbGl2ZXIudHhkLnJ0eFwiLFwiL25ldC9leHBsb2l0X3NtdHAua3B4eC5xd2RcIixcIi9wcml2YXRlL3Zhci9henVyZV9waW5lX2lyYW5pYW4ucmlmLmNzdFwiLFwiL0xpYnJhcnkvdmlydHVhbC5iZG9jLmllZlwiLFwiL3Vzci9iaW4vZHJpdmUuaHBpZC5qb2RhXCIsXCIvZXRjL25hbWVkYi9hY2NvdW50X3BhcnNpbmcuYmNwaW8ubWoyXCIsXCIvbGliL2NvbmZpZ3VyYXRpb25fcHJvZ3JhbW1pbmcuZmx5Lm5mb1wiLFwiL3Vzci9pbmNsdWRlL21hcnlsYW5kX2VudGVycHJpc2Vfd2lkZV90dW5hLnJtdmIubWszZFwiLFwiL3Nydi9iYWNrX2VuZC5qYXZhLm1wM1wiLFwiL3Jlc2N1ZS90cmFjZV9jb3R0b25fc3luZXJnaXplZC5wZ20ubXB0XCIsXCIvdmFyL21haWwvaW5jcmVkaWJsZS5lbGMuc2V0cmVnXCIsXCIvdXNyL3NoYXJlL2F2b25fc3RhdGUub25lcGtnLmR3Z1wiLFwiL3Vzci9saWIvY29tcG9zaXRlX21hcnlsYW5kLm1kLnBzZFwiLFwiL2xpYi9wb3J0c19jYWxjdWxhdGluZy5vZ2cud21cIixcIi9OZXR3b3JrL2VtYnJhY2VfaW50ZXJhY3Rpb25zX2ludGVybmFsLm1uZy5sYXN4bWxcIixcIi9Vc2Vycy9tb2JpbGl0eV9hdm9uX2ludGVybmFsLm1wcC5jeHhcIixcIi9ob21lL3NtdHBfa2V5c19zZXJiaWFuLmNidC5mOTBcIixcIi9ib290L2RlZmF1bHRzL2luZGV4X2F2b24uc3RsLmR4cFwiLFwiL3Zhci9jb21wdXRlcnNfYmVkZm9yZHNoaXJlLm1wMi5hbWlcIixcIi9ldGMvemltYmFid2UuaHRtbC5jcnhcIixcIi91c3Ivc2hhcmUvYWxhcm0udm9iLndtbHNcIixcIi9ldGMvbmFtZWRiL2NhbGN1bGF0ZS5jYnouZ3FzXCIsXCIvdXNyL3BvcnRzL2V4cGVyaWVuY2VzLnV2dnouaWZtXCIsXCIvaG9tZS91c2VyL3JlZ2lvbmFsX2dvbGQucDguc2lsb1wiLFwiL1N5c3RlbS9hdm9uX3JlcHJlc2VudGF0aXZlX2JhbmR3aWR0aF9tb25pdG9yZWQubmx1LmV6M1wiLFwiL3NlbGludXgvZ2FyZGVucy5kd2cuYWlmZlwiLFwiL0xpYnJhcnkvZGlyZWN0Lmxpbms2Ni5rdHhcIixcIi9zeXMvYWdwX2JvcmRlcnNfY2hhbm5lbHMudXUucm9hXCIsXCIvb3B0L3NoYXJlL2NvbXB1dGVyX2luZGlnby5zZnMueDNkdlwiLFwiL3Nydi9wYXltZW50X2ludm9pY2UucHBkLmlybVwiLFwiL3Vzci9sb2NhbC9iaW4vaW5kZXhpbmdfaGVhbHRoX3RhY3RpY3MuZmVfbGF1bmNoLnNnbFwiLFwiL3NiaW4vb25saW5lX3RlY2huaWNpYW4udmNkLnptbVwiLFwiL3Zhci90bXAvc29hcF9jYW1icmlkZ2VzaGlyZV9yZWdpb25hbC5hdS54cHNcIixcIi9vcHQvc2hhcmUvc2luZ2Fwb3JlLmVsYy5ocHNcIixcIi9yb290L3NvbHV0aW9uc19sb2dpc3RpY2FsLm5weC5rbXpcIixcIi9zYmluL3N5c3RlbV9jb250aW5nZW5jeS54c3BmLnBncFwiLFwiL3Jvb3QvZGFrb3RhLnBmYS54cHNcIixcIi91c3IvWDExUjYvc2F2aW5nc19leHByZXNzd2F5Lmpzb24udXZmXCIsXCIvdXNyL3BvcnRzL2ludGVybWVkaWF0ZV9hdm9uX3NvZnQubW1sLnhmZGZcIixcIi9ldGMvbmFtZWRiL3dvbl9mcmVzaC5ldDMuYWFtXCIsXCIvZGV2L2hhY2tpbmcuY2FmLnZjZFwiLFwiL3N5cy9nb3JnZW91c19wYXltZW50LnNrbS5odG1cIixcIi9BcHBsaWNhdGlvbnMvbmljaGVzLngzZC5hdG9tXCIsXCIvQXBwbGljYXRpb25zL3dlYnNpdGUucGdwLmNsa3BcIixcIi9ldGMvbWFpbC9iYXJiYWRvc19henVyZS5ncmUucGhwXCIsXCIvdmFyL3Rhc3R5LmNmcy51dnZ0XCIsXCIvdXNyL3NyYy9yZWFsLmJveC5naWZcIixcIi9vcHQvaW5jbHVkZS9lbmdpbmVlci5xeGQueHB3XCIsXCIvb3B0L3NiaW4vc3ludGhlc2l6aW5nX2ludmVzdG9yLnJhLmM0ZFwiLFwiL2V0Yy9kZWZhdWx0cy9pbmNyZWRpYmxlLnNwYy5lZG1cIixcIi91c3Ivc3JjL3J1Zml5YWEub2RwLmFjZVwiLFwiL3Vzci9sb2NhbC9iaW4vdGFjdGljc19tYXJ5bGFuZF94bWwuemlwLmdyYW1cIl07ZnVuY3Rpb24gRGEoZSl7cmV0dXJuIG4oeGEsZSl9dmFyIHFhPVtcIm1vZGVsXCIsXCJ4LWNvbmZlcmVuY2VcIixcIngtc2hhZGVyXCIsXCJ2aWRlb1wiLFwiYXBwbGljYXRpb25cIixcIm1lc3NhZ2VcIixcIm11bHRpcGFydFwiLFwiZm9udFwiLFwiYXVkaW9cIixcImltYWdlXCIsXCJjaGVtaWNhbFwiLFwidGV4dFwiXTtmdW5jdGlvbiBGYShlKXtyZXR1cm4gbihxYSxlKX12YXIgR2E9W1wiQXJhdWNhbmlhbiBoZXJyaW5nXCIsXCJQYWNpZmljIHNhdXJ5XCIsXCJJbmRpYW4gb2lsIHNhcmRpbmVcIixcIk5pbGUgdGlsYXBpYVwiLFwiQm9tYmF5LWR1Y2tcIixcIkphcGFuZXNlIGNvbW1vbiBjYXRmaXNoXCIsXCJXaGl0ZWxlZyBzaHJpbXBcIixcIkhhZGRvY2tcIixcIkNoaWxlYW4gamFjayBtYWNrZXJlbFwiLFwiUG9sbG9ja1wiLFwiU291dGhlcm4gcm91Z2ggc2hyaW1wXCIsXCJBbXVyIGNhdGZpc2hcIixcIkxhcmdlaGVhZCBoYWlydGFpbFwiLFwiR2F6YW1pIGNyYWJcIixcIlNpbHZlciBjYXJwXCIsXCJCbHVlIHdoaXRpbmdcIixcIlBhY2lmaWMgdGhyZWFkIGhlcnJpbmdcIixcIlBhY2lmaWMgYW5jaG92ZXRhXCJdO2Z1bmN0aW9uIExhKGUpe3JldHVybiBuKEdhLGUpfWZ1bmN0aW9uIFJhKGUpe3ZhciBhO2NvbnN0IHQ9T2JqZWN0LmFzc2lnbih7fSxlLHtmcmFjdGlvbjpudWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLmZyYWN0aW9uKT9hOjJ9KTtyZXR1cm4gbigoZnVuY3Rpb24gZSgpe2NvbnN0IGE9cyh0KSxvPVN0cmluZyhhKTtyZXR1cm4gby5pbmNsdWRlcyhcIi5cIikmJm8uc3BsaXQoXCIuXCIpWzFdLmxlbmd0aD09PXQuZnJhY3Rpb24/YTplKCl9KSxlKX12YXIgSGE9W1wiSW50ZXJcIixcIkRNIFNhbnNcIixcIlNwYWNlIE1vbm9cIixcIlNwYWNlIEdyb3Rlc2tcIixcIldvcmsgU2Fuc1wiLFwiU3luZVwiLFwiTGlicmUgRnJhbmtsaW5cIixcIkNvcm1vcmFudFwiLFwiRmlyYSBTYW5zXCIsXCJFY3phclwiLFwiQWxlZ3JleWEgU2Fuc1wiLFwiQWxlZ3JleWFcIixcIlNvdXJjZSBTYW5zIFByb1wiLFwiU291cmNlIFNlcmlmIFByb1wiLFwiUm9ib3RvXCIsXCJSb2JvdG8gU2xhYlwiLFwiQmlvUmh5bWVcIixcIklua251dCBBbnRpcXVhXCIsXCJQb3BwaW5zXCIsXCJBcmNoaXZvIE5hcnJvd1wiLFwiTGlicmUgQmFza2VydmlsbGVcIixcIlBsYXlmYWlyIERpc3BsYXlcIixcIkthcmxhXCIsXCJMb3JhXCIsXCJQcm96YSBMaWJyZVwiLFwiU3BlY3RyYWxcIixcIklCTSBQbGV4IFNhbnNcIixcIkNyaW1zb24gVGV4dFwiLFwiTW9udHNlcnJhdFwiLFwiTGF0b1wiLFwiUFQgU2Fuc1wiLFwiUFQgU2VyaWZcIixcIkNhcmRvXCIsXCJDaGl2b1wiLFwiTmV1dG9uXCIsXCJSdWJpa1wiLFwiT3BlbiBTYW5zXCIsXCJJbmNvbnNvbGF0YVwiLFwiUmFsZXdheVwiLFwiTWVycml3ZWF0aGVyXCJdO2Z1bmN0aW9uIEVhKGUpe3JldHVybiBuKEhhLGUpfWZ1bmN0aW9uIFdhKGUpe3JldHVybiBuKCgoKT0+e3ZhciBhO3JldHVybmAke1Moe21pbjowLG1heDoyZTMsZnJhY3Rpb246Mn0pfSR7bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS5zdWZmaXgpP2E6XCJweFwifWB9KSxlKX12YXIgTmE9e2NoaW5hOltcIlBla2luZyByb2FzdGVkIGR1Y2tcIixcIkt1bmcgcGFvIGNoaWNrZW5cIixcIlN3ZWV0IGFuZCBzb3VyIHBvcmtcIixcIkhvdCBwb3RcIixcIkRpbSBzdW1cIixcIkR1bXBsaW5nc1wiLFwiTWEgcG8gdG9mdVwiLFwiQ2hhciBzaXVcIixcIkNoaWNrZW4gY2hvdyBtZWluXCIsXCJCZWVmIGNob3cgbWVpblwiLFwidmVnZXRhYmxlIGNob3cgbWVpblwiLFwiQ2hpY2tlbiBmcmllZCByaWNlXCIsXCJCZWVmIGZyaWVkIHJpY2VcIixcIlZlZ2V0YWJsZSBmcmllZCBSaWNlXCIsXCJTcGVjaWFsIGZyaWVkIFJpY2VcIixcIlNpY2h1YW4gcG9ya1wiLFwiWGlhb2xvbmdiYW9cIixcIlpoYWppYW5nbWlhblwiLFwiV29udG9uIHNvdXBcIixcIlN3ZWV0IGFuZCBzb3VyIHBvcmtcIixcIkR1Y2sgc3ByaW5nIFJvbGxzXCIsXCJWZWdldGFibGUgc3ByaW5nIFJvbGxzXCIsXCJXb250b25cIixcIlBla2luZyBkdWNrXCIsXCJMYW1iIGhvdCBwb3RcIixcIlNwaWN5IGNyYXlmaXNoXCIsXCJHdWlsaW4gcmljZSBub29kbGVzXCIsXCJMYW56aG91IGhhbmQtcHVsbGVkIG5vb2RsZXNcIixcIlN0ZWFtZWQgY3JhYlwiLFwiU2hyZWRkZWQgcG9yayB3aXRoIGdhcmxpYyBzYXVjZVwiLFwiUmVkIGJyYWlzZWQgcG9ya1wiLFwiU3dlZXQgYW5kIHNvdXIgUmlic1wiLFwiWGluamlhbmdcIixcIkJyYWlzZWQgcG9yayB3aXRoIHZlcm1pY2VsbGlcIl0saXRhbHk6W1wiQnV0dGVybnV0IHNxdWFzaCByaXNvdHRvXCIsXCJNdXNocm9vbSByaXNvdHRvXCIsXCJCZWV0cm9vdCByaXNvdHRvXCIsXCJDb3VyZ2V0dGUgcmlzb3R0b1wiLFwiUGl6emFcIixcIkdub2NjaGlcIixcIlNwYWdoZXR0aSBib2xvZ25lc2VcIixcIlNwYWdoZXR0aSBjYXJib25hcmFcIixcIlBlc3RvIGFsbGEgR2Vub3Zlc2VcIixcIkJlZWYgbGFzYWduZVwiLFwiVmVnZXRhYmxlIGxhc2FnbmVcIixcIkdlbGF0b1wiLFwiUHJvc2NpdXR0byBkaSBQYXJtYVwiLFwiUmlib2xsaXRhXCIsXCJCYWduYSBjYXVkYVwiLFwiUG9sZW50YVwiLFwiVG9ydGVsbGkgYW5kIHJhdmlvbGlcIixcIkZvY2FjY2lhXCIsXCJHYXJsaWMgYnJlYWRcIixcIkFyYW5jaW5pXCIsXCJJbCB0YXJ0dWZvXCIsXCJQYW56ZXJvdHRvIGZyaXR0b1wiLFwiRmlvcmVudGluYVwiLFwiTWluZXN0cm9uZVwiLFwiRnJpY29cIixcIkFycm9zdGljaW5pXCIsXCJPbGl2ZSBhc2NvbGFudGVcIixcIkZyaXR0byBtaXN0byBwaWVtb250ZXNcIixcIlRpcmFtaXPDuVwiXSxpbmRpYTpbXCJCaXJ5YW5pXCIsXCJEb3NhXCIsXCJUYW5kb29yaSBjaGlja2VuXCIsXCJTYW1vc2FzXCIsXCJDaGFhdFwiLFwiUGxhaW4gbmFhblwiLFwiR2FybGljIG5hYW5cIixcIlBpbGF1IHJpY2VcIixcIlN0ZWFtZWQgcmljZVwiLFwiQ2hpY2tlbiBtYWRyYXNcIixcIlZlZ2V0YWJsZSBtYWRyYXNcIixcIkNoaWNrZW4gdmluZGFsb29cIixcIkNoaWNrZW4gamFsZnJlemlcIixcIkNoaWNrZW4gcm9naGFuIGpvc2hcIixcIkxhbWIgcm9naGFuIGpvc2hcIixcIkJlZWYgcm9naGFuIGpvc2hcIixcIkJ1dHRlciBjaGlja2VuXCIsXCJEb3NhXCIsXCJHdWxhYiBqYW11blwiLFwiQ2hpY2tlbiBrb3JtYVwiLFwiTXV0dGVyIHBhbmVlclwiLFwiUGFwYWR1bVwiLFwiUGFyYXRoYVwiLFwiUmFpdGFcIixcIlNhYWcgcGFuZWVyXCIsXCJUYW5kb29yaSBjaGlja2VuXCIsXCJDaGlja2VuIHRpa2thIG1hc2FsYVwiLFwiUGFrb3JhXCIsXCJEYWxcIixcIkNoYXBhdGlcIixcIlBhc2FuZGFcIixcIkFsb28gZ29iaVwiLFwiS29mdGFcIixcIkNoaWNrZW4gbWFraGFuaVwiLFwiUGFuZWVyIG5hYW5cIixcIkNoYW5hIEFsb28gQ3VycnlcIl0sbWV4aWNvOltcIkNoaWxhcXVpbGVzXCIsXCJQb3pvbGVcIixcIlRhY29zIGFsIHBhc3RvclwiLFwiVG9zdGFkYXNcIixcIkNoaWxlcyBlbiBub2dhZGFcIixcIkVsb3RlXCIsXCJFbmNoaWxhZGFzXCIsXCJNb2xlXCIsXCJHdWFjYW1vbGVcIixcIlRhbWFsZXNcIixcIkh1ZXZvcyByYW5jaGVyb3NcIixcIk1hY2hhY2FcIixcIkRpc2NhZGFcIixcIkJlZWYgQnVycml0b1wiLFwiQ2hpY2tlbiBCdXJyaXRvXCIsXCJQb3pvbGUgZGUgcG9sbG8gbyBkdWFqb2xvdGVcIixcIk1lbnVkb1wiLFwiQ29jaGluaXRhIHBpYmlsXCIsXCJUYW1hbGVcIixcIlF1ZXNhZGlsbGFcIixcIkZyaWpvbGVzIHB1ZXJjb3NcIixcIkNoaWxlIGVuIG5vZ2FkYVwiLFwiRXNxdWl0ZXNcIixcIkFsZWdyaWEgZGUgYW1hcmFudG9cIixcIlBpcGnDoW5cIixcIkFndWFjaGlsZVwiLFwiQ2V2aWNoZVwiLFwiUGVzY2FkbyB6YXJhbmRlYWRvXCIsXCJDYW1hcm9uZXMgYSBsYSBkaWFibGFcIixcIkJpcnJpYSBkZSBjaGl2b1wiLFwiVGxheXVkYVwiLFwiR3VhY2Ftb2xlIGNvbiBjaGFwdWxpbmVzXCIsXCJGbGF1dGFzXCIsXCJUb3J0YSBBaG9nYWRhXCIsXCJDYXJuaXRhc1wiLFwiQ2FsZG8gQXp0ZWNhXCIsXCJHb3JkaXRhcyBkZSBOYXRhXCJdLGphcGFuOltcIlN1c2hpXCIsXCJVZG9uXCIsXCJUb2Z1XCIsXCJUZW1wdXJhXCIsXCJZYWtpdG9yaVwiLFwiU2FzaGltaVwiLFwiUmFtZW5cIixcIkRvbmJ1cmlcIixcIk5hdHRvXCIsXCJPZGVuXCIsXCJUYW1hZ295YWtpXCIsXCJTb2JhXCIsXCJUb25rYXRzdVwiLFwiS2FzaGlwYW5cIixcIlN1a2l5YWtpXCIsXCJNaXNvIHNvdXBcIixcIk9rb25vbWl5YWtpXCIsXCJNZW50YWlrb1wiLFwiTmlrdWphZ2FcIixcIlVuYWdpIG5vIGthYmF5YWtpXCIsXCJTaGFidSBTaGFidVwiLFwiT25pZ2lyaVwiLFwiR3lvemFcIixcIlRha295YWtpXCIsXCJhaXNla2kgcnlvcmlcIixcIkVkYW1hbWVcIixcIllha2lzb2JhXCIsXCJDaGF3YW5tdXNoaVwiLFwiV2FnYXNoaVwiXSxmcmFuY2U6W1wiRm9pZSBncmFzXCIsXCJIdcOudHJlc1wiLFwiQ2Fzc291bGV0XCIsXCJQb3VsZXQgYmFzcXVhaXNlXCIsXCJFc2NhcmdvdHMgYXUgYmV1cnJlIHBlcnNpbGzDqVwiLFwiTW91Y2xhZGUgY2hhcmVudGFpc2VcIixcIkdhbGV0dGVzIGJyZXRvbm5lc1wiLFwiRmxlbWlzaCBjYXJib25uYWRlXCIsXCJRdWljaGUgbG9ycmFpbmVcIixcIlJhY2xldHRlXCIsXCJDaGVlc2UgZm9uZHVlXCIsXCJCZWVmIGZvbmR1ZVwiLFwiR3JhdGluIGRhdXBoaW5vaXNcIixcIlRhcnRpZmxldHRlXCIsXCJCb3VpbGxhYmFpc3NlXCIsXCJSYXRhdG91aWxsZVwiLFwiQm9ldWYgYm91cmd1aWdub25cIixcIkJsYW5xdWV0dGUgZGUgdmVhdVwiLFwiUG90LWF1LWZldVwiLFwiQ29xLWF1LXZpblwiLFwiSGFjaGlzIHBhcm1lbnRpZXJcIixcIlN0ZWFrIHRhcnRhcmVcIixcIkNob3Vjcm91dGVcIixcIlNvdWZmbMOpIGF1IGZyb21hZ2VcIixcIkN1aXNzZXMgZGUgZ3Jlbm91aWxsZXNcIixcIlNvdXBlIMOgIGzigJlvaWdub25cIixcIkJhZ3VldHRlXCIsXCJDcm9pc3NhbnRcIixcIkZyZW5jaCBjaGVlc2VzXCIsXCJGb25kYW50IGF1IGNob2NvbGF0XCIsXCJUYXJ0ZSB0YXRpblwiLFwiTWFjYXJvbnNcIixcIkNyw6htZSBicsO7bMOpZVwiLFwiw45sZSBmbG90dGFudGVcIixcIlByb2ZpdGVyb2xlc1wiLFwiUGFpbiBhdSBjaG9jb2xhdFwiXSxsZWJhbm9uOltcIktpYmJlaFwiLFwiS2FmdGFcIixcIkthbmFmZWhcIixcIkh1bW11c1wiLFwiUmljZSBwaWxhZlwiLFwiRmF0dG91c2hcIixcIk1hbmFraXNoXCIsXCJUYWJib3VsZWhcIixcIlNmZWVoYVwiLFwiRmF0dG91c2hcIixcIkxhYm5laFwiLFwiTXVoYW1tYXJhXCIsXCJMYWhtIGJpIGFqaW5cIixcIkthYWtcIixcIkNoYW5rbGljaFwiLFwiTXNzYWJhaGFcIixcIlNoYXdhcm1hXCIsXCJLZWJiZVwiLFwiRmFsYWZlbFwiLFwiSGFsZXdpdCBlbCBqZWJlblwiLFwiTmFtb3VyYVwiLFwiTWFhbW91bFwiLFwiRm91bCBtZGFtbWFzXCIsXCJCYWxpbGFcIixcIkthd2FybWFcIixcIkZhdHRvdWNoXCJdLHRoYWlsYW5kOltcIlBhZCBrcmEgcGFvIG1vb1wiLFwiVG9tIGtoYSBnYWlcIixcIktoYW8gUGFkXCIsXCJDaGlja2VuIHBhZCBUaGFpXCIsXCJWZWdldGFibGUgcGFkIFRoYWlcIixcIk1vbyBzYXRheVwiLFwiVG9tIHl1bSBnb29uZ1wiLFwiS2hhbyBuaWV3IG1hbXVhbmdcIixcIkthaSB5YWQgc2FpXCIsXCJLaGFvIHNvaVwiLFwiUGFkIHNlZSBld1wiLFwiTGFhYiBtb29cIixcIkdhZW5nIHBhbmFuZ1wiLFwiR2FpIHBhZCBtZWQgbWEgbXVhbmdcIixcIlNvbSB0YW1cIixcIlBvaCBwaWEgdG9kXCIsXCJHYWVuZyBtYXNzYW1hblwiLFwiUGxhIGthcHVuZyBudWVuZyBtYW5hb1wiLFwiVG9kIG11biBwbGFcIixcIkdhZW5nIHBlZFwiLFwiR2FlbmcgZ2FyZWVcIixcIkdhZW5nIGtlb3cgd2FuXCIsXCJNb28gcGluZ1wiLFwiRHVyaWFuXCIsXCJTYWkgb29haFwiLFwiSG95IHRvZFwiLFwiS3VheSB0ZW93IHJldWFcIixcIk11IGtyYXRoYVwiLFwiS2FvIGthIG1vb1wiLFwiWWFtIG51YVwiXSxncmVlY2U6W1wiTW91c3Nha2FcIixcIlBhcG91dHNha2lhXCIsXCJQYXN0aXRzaW9cIixcIlNvdXZsYWtpXCIsXCJTb3V0em91a2FraWFcIixcIlN0aWZhZG9cIixcIlRvbWF0b2tlZnRlZGVzXCIsXCJUemF0emlraVwiLFwiS29sb2tpdGhva2VmdGVkZXNcIixcIkdpb3V2ZXRzaVwiLFwiQ2hvcmlhdGlraVwiLFwiS2xlZnRpa29cIixcIkdlbWlzdGFcIixcIkZhc29sYWRhXCIsXCJCb3VnYXRzYVwiLFwiVGlyb3BpdGFcIixcIlNwYW5ha29waXRhXCIsXCJGZXRhIENoZWVzZSB3aXRoIEhvbmV5XCIsXCJIb3J0YVwiLFwiVGlyb2tyb2tldGVzXCIsXCJCcmlhbVwiLFwiU2FnYW5ha2lcIixcIkdpZ2FudGVzXCIsXCJEb2xtYWRlc1wiLFwiRmFzb2xhdGhhXCIsXCJLb3Vsb3VyaVwiLFwiTG91a291bWFkZXNcIixcIkd5cm9zXCIsXCJHYWxha3RvYm91cmVrb1wiLFwiQmFrbGF2YVwiXSx0dXJrZXk6W1wixZ5pxZ8ga2ViYXBcIixcIkTDtm5lclwiLFwiS8O2ZnRlXCIsXCJQaWRlXCIsXCJLdW1waXJcIixcIk1lemVcIixcIk1hbnTEsVwiLFwiTGFobWFjdW5cIixcIk1lbmVtZW5cIixcIsWeacWfIGtlYmFwXCIsXCLEsHNrZW5kZXIga2ViYWJcIixcIkNvcmJhXCIsXCJLdXp1IHRhbmRpclwiLFwiw4dpxJ8gS8O2ZnRlXCIsXCJQaWxhdlwiLFwiWWFwcmFrIHNhcm1hXCIsXCJEb2xtYVwiLFwixLBtYW0gYmF5xLFsZMSxXCIsXCJCb3Jla1wiLFwiRHVydW1cIixcIkt1bXBpclwiLFwiQmFsaWsgZWttZWtcIixcIlNpbWl0XCIsXCJLdW5lZmVcIixcIkJha2xhdmFcIixcIkxva3VtXCIsXCJIYWx2YVwiLFwiTW96emFpayBwYXN0YVwiLFwiR8O8bGxhw6dcIixcIk1lcmNpbWVrIEvDtmZ0ZXNpXCIsXCJIYXlkYXJpXCIsXCJUdXJzdSBzdXl1XCIsXCJLYWh2YWx0aVwiLFwiS2F6YW4gZGliaVwiLFwiSHVua2FyIGJlZ2VuZGlcIixcIklzbGFrIGJ1cmdlcnNcIixcIlNhbGVwXCIsXCJZb2d1cnRsdSBrZWJhYlwiXSxzcGFpbjpbXCJUb3J0aWxsYSBkZSBwYXRhdGFzXCIsXCJGYWJhZGEgYXN0dXJpYW5hXCIsXCJDYWzDp290c1wiLFwiQm9xdWVyb25lcyBhbCB2aW5hZ3JlXCIsXCJFbXBhbmFkYSBnYWxsZWdhXCIsXCJQYWVsbGFcIixcIkdhenBhY2hvXCIsXCJHYWNoYXNcIixcIk1pZ2FzXCIsXCJCb2NhZGlsbG8gZGUgY2FsYW1hcmVzXCIsXCJQdWxwbyBhIGZlaXJhXCIsXCJDYWxkbyBnYWxsZWdvXCIsXCJMZW50ZWphcyBjb24gY2hvcml6b1wiLFwiQ29jaWRvIG1hZHJpbGXDsW9cIixcIkNhY2hvcG9cIixcIkNhcmFjb2xlc1wiXSx2ZW5lenVlbGE6W1wiUGFiZWxsw7NuIGNyaW9sbG9cIixcIkFyZXBhXCIsXCJNb25kb25nb1wiLFwiRW1wYW5hZGFzXCIsXCJRdWVzaWxsb1wiLFwiQ2hpY2hhIGFuZGluYVwiLFwiVGVxdWXDsW9zXCIsXCJDYWNoYXBhXCIsXCJIYWxsYWNhXCIsXCJQZXJpY29cIixcIlBhc3RpY2hvXCIsXCJNYW5kb2Nhc1wiLFwiQ2FyYW90YXMgbmVncmFzXCIsXCJQYXRhY29uZXNcIixcIkR1bGNlIGRlIGxlY2hlXCIsXCJQYW4gZGUgSmFtw7NuXCJdLGNoaWxlOltcIkh1bWl0YXNcIixcIkVtcGFuYWRhc1wiLFwiUG9yb3RvcyBjb24gcmllbmRhc1wiLFwiQ29tcGxldG9zXCIsXCJNYW5qYXJcIixcIkNvcmRlcm8gYWwgcGFsb1wiLFwiUGFzdGVsIGRlIGNob2Nsb1wiLFwiTW90ZSBjb24gaHVlc2lsbG9zXCIsXCJTb3BhaXBpbGxhc1wiLFwiQ3VyYW50b1wiXSxhcmdlbnRpbmE6W1wiTWlsYW5lc2FzXCIsXCJFbXBhbmFkYXNcIixcIlBpenphIGZ1Z2F6ZXRhXCIsXCJBc2Fkb1wiLFwiQ2hvcmlwYW5cIixcIkJvbmRpb2xhXCIsXCJCaWZlIGRlIGNob3Jpem9cIl0sY29sb21iaWE6W1wiQmFuZGVqYSBwYWlzYVwiLFwiQ2h1bGV0YSB2YWxsdW5hXCIsXCJTYW5jb2NobyB0cmlmw6FzaWNvXCIsXCJFbXBhbmFkYSB2YWxsdW5hXCIsXCJTYWxwaWNvbiBkZSBmcnV0YXNcIixcIlBhc3RlbCBkZSBnYXJiYW56b1wiLFwiQWppYWNvXCIsXCJBcmVwYXNcIixcIkFycm96IGRlIGxpc2FcIixcIlNhbmNvY2hvXCIsXCJQYW4gZGUgYm9ub1wiLFwiQ3VjaHVjb1wiLFwiT2JsZWFcIixcIkNhenVlbGEgZGUgbWFyaXNjb3NcIixcIlBhbiBkZSB5dWNhXCIsXCJCb2xsbyBMaW1waW9cIixcIkFsbW9qw6FiYW5hXCIsXCJFbXBhbmFkYXNcIixcIkFycm96IGNvbiBDb2NvXCIsXCJTb3BhIGRlIG1vbmRvbmdvXCIsXCJDYXp1ZWxhIGRlIE1hcmlzY29zXCIsXCJBcnJveiBjb24gUG9sbG9cIixcIkFyZXBhIGRlIEh1ZXZvXCIsXCJNb3RlIGRlIFF1ZXNvXCJdLGVjdWFkb3I6W1wiRW5jZWJvbGxhZG9cIixcIkNldmljaGVcIixcIlRpZ3JpbGxvXCIsXCJCb2xvbiBkZSB2ZXJkZVwiLFwiTGxhcGluZ2FjaG9cIixcIk1vdGUgcGlsbG9cIixcIkxvY3JvIGRlIHBhcGFcIixcIkNodXJyYXNjb1wiXSxwZXJ1OltcIkNldmljaGVcIixcIkFycm96IGNvbiBwb2xsb1wiLFwiQWppIGRlIGdhbGxpbmFcIixcIkxsdW5jYSBkZSBnYWxsaW5hXCJdLFwiZWwgc2FsdmFkb3JcIjpbXCJQdXB1c2FcIixcIlNvcGEgZGUgcGF0YXNcIixcIlJpZ3VhXCIsXCJGbG9yIGRlIGl6b3RlIGNvbiBodWV2b1wiLFwiR2FsbG8gZW4gY2hpY2hhXCJdLHJvbWFuaWE6W1wiU2FybWFsZVwiLFwiTWljaVwiLFwiUG9tYW5hIHBvcmN1bHVpXCIsXCJDaW9yYsSDIGRlIGZhc29sZSBjdSBjaW9sYW5cIixcIkNpb3JixIMgZGUgYnVydMSDXCIsXCJDaW9yYsSDIHLEg2TEg3XIm2VhbsSDXCIsXCJQbMSDY2ludMSDIGN1IGJyw6JuesSDXCIsXCJDaW9yYsSDIGRlIHBvdHJvYWNlXCIsXCJNxINtxINsaWfEgyBjdSBicsOibnrEgyDImWkgc23Dom50w6JuxINcIixcIlRvY2hpdHVyxINcIixcIlBpZnRpZVwiLFwiSWFobmllIGRlIGZhc29sZVwiLFwiU2zEg25pbsSDIGFmdW1hdMSDXCIsXCJDw6JybmHIm2kgYWZ1bWHIm2lcIixcIlZhcnrEgyBhIGxhIENsdWpcIixcIkd1bGHImSBkZSBjYXJ0b2ZpIGN1IGFmdW3Eg3R1csSDXCIsXCJDb3pvbmFjIGRlIGNhc8SDXCIsXCJDaW9yYsSDIGFyZGVsZW5lYXNjxIMgZGUgcG9yY1wiLFwiTXVjZW5pY2kgbW9sZG92ZW5lyJl0aVwiLFwiU2FsYXTEgyBkZSBib2V1ZlwiLFwiRG92bGVhYyBjb3B0XCIsXCJQYXBhbmHImWkgY3UgYnLDom56xIMgZGUgdmFjxIMgyJlpIGFmaW5lXCIsXCJEcm9iIGRlIG1pZWxcIixcIlDDonJqb2FsZSBtb2xkb3ZlbmXImXRpXCIsXCJaYWN1c2PEgyBkZSB2aW5ldGVcIixcIlphY3VzY8SDIGRlIGZhc29sZVwiLFwiVHVydMSDIGR1bGNlXCIsXCJDbMSDdGl0ZWxlIGN1IGdlbVwiLFwiQ2zEg3RpdGVsZSBjdSBicsOibnphIGRlIHZhY8SDXCIsXCJCYWxtb8iZXCIsXCJDb3pvbmFjXCIsXCJDaGlmdGVsZVwiXX07dmFyIHphO2NvbnN0IEthPW51bGw9PSh6YT1PYmplY3Qua2V5cyhOYSkpP3ZvaWQgMDp6YS5sZW5ndGg7ZnVuY3Rpb24gT2EoZSl7Y29uc3QgYT1OYSx0PW51bGw9PWU/dm9pZCAwOmUub3JpZ2luO2lmKCFLYSl0aHJvd1wiTm8gZm9vZHMgZm91bmRcIjtpZih0JiYhYVt0XSl0aHJvd1wiTm8gZm9vZHMgZm91bmQgZm9yIHNlbGVjdGVkIG9yaWdpblwiO3JldHVybiBuKCgoKT0+e2lmKHQpcmV0dXJuIHIoYVt0XSk7Y29uc3QgZT1zKHttaW46MCxtYXg6S2EtMX0pLG89KGk9YSxPYmplY3Qua2V5cyhpKSlbZV07dmFyIGk7cmV0dXJuIHIoYVtvXSl9KSxlKX12YXIgSmE9W1wiQUZDIEJvdXJuZW1vdXRoXCIsXCJBbGF2w6lzXCIsXCJBcnNlbmFsXCIsXCJBc3RvbiBWaWxsYVwiLFwiQXRobGV0aWMgQmlsYmFvXCIsXCJBdGzDqXRpY28gTWFkcmlkXCIsXCJCYXJjZWxvbmFcIixcIkJhcm5zbGV5XCIsXCJCaXJtaW5naGFtIENpdHlcIixcIkJsYWNrYnVybiBSb3ZlcnNcIixcIkJsYWNrcG9vbFwiLFwiQm9sdG9uIFdhbmRlcmVyc1wiLFwiQnJhZGZvcmQgQ2l0eVwiLFwiQnJlbnRmb3JkXCIsXCJCcmlnaHRvbiBhbmQgSG92ZSBBbGJpb25cIixcIkJ1cm5sZXlcIixcIkPDoWRpelwiLFwiQ2FyZGlmZiBDaXR5XCIsXCJDZWx0YSBWaWdvXCIsXCJDaGFybHRvbiBBdGhsZXRpY1wiLFwiQ2hlbHNlYVwiLFwiQ292ZW50cnkgQ2l0eVwiLFwiQ3J5c3RhbCBQYWxhY2VcIixcIkRlcmJ5IENvdW50eVwiLFwiRWxjaGVcIixcIkVzcGFueW9sXCIsXCJFdmVydG9uXCIsXCJGdWxoYW1cIixcIkdldGFmZVwiLFwiR3JhbmFkYVwiLFwiSHVkZGVyc2ZpZWxkIFRvd25cIixcIkh1bGwgQ2l0eVwiLFwiSXBzd2ljaCBUb3duXCIsXCJMZWVkcyBVbml0ZWRcIixcIkxlaWNlc3RlciBDaXR5XCIsXCJMZXZhbnRlXCIsXCJMaXZlcnBvb2xcIixcIk1hbGxvcmNhXCIsXCJNYW5jaGVzdGVyIENpdHlcIixcIk1hbmNoZXN0ZXIgVW5pdGVkXCIsXCJNaWRkbGVzYnJvdWdoXCIsXCJOZXdjYXN0bGUgVW5pdGVkXCIsXCJOb3J3aWNoIENpdHlcIixcIk5vdHRpbmdoYW0gRm9yZXN0XCIsXCJPbGRoYW0gQXRobGV0aWNcIixcIk9zYXN1bmFcIixcIlBvcnRzbW91dGhcIixcIlF1ZWVucyBQYXJrIFJhbmdlcnNcIixcIlJheW8gVmFsbGVjYW5vXCIsXCJSZWFkaW5nXCIsXCJSZWFsIEJldGlzXCIsXCJSZWFsIE1hZHJpZFwiLFwiUmVhbCBTb2NpZWRhZFwiLFwiU2V2aWxsYVwiLFwiU2hlZmZpZWxkIFVuaXRlZFwiLFwiU2hlZmZpZWxkIFdlZG5lc2RheVwiLFwiU291dGhhbXB0b25cIixcIlN0b2tlIENpdHlcIixcIlN1bmRlcmxhbmRcIixcIlN3YW5zZWEgQ2l0eVwiLFwiU3dpbmRvbiBUb3duXCIsXCJUb3R0ZW5oYW0gSG90c3B1clwiLFwiVmFsZW5jaWFcIixcIlZpbGxhcnJlYWxcIixcIldhdGZvcmRcIixcIldlc3QgQnJvbXdpY2ggQWxiaW9uXCIsXCJXZXN0IEhhbSBVbml0ZWRcIixcIldpZ2FuIEF0aGxldGljXCIsXCJXaW1ibGVkb25cIixcIldvbHZlcmhhbXB0b24gV2FuZGVyZXJzXCIsXCJSaXZlciBQbGF0ZVwiLFwiQm9jYSBKdW5pb3JzXCIsXCJBdGzDqXRpY28gTmFjaW9uYWxcIixcIkluZGVwZW5kaWVudGVcIixcIkxsYW5lcm9zXCIsXCJUaWdyZVwiLFwiUGFsbWVpcmFzXCIsXCJBdGxldGljbyBQYXJhbmFlbnNlXCIsXCJTeWRuZXkgRkNcIixcIk1lbGJvdXJuZSBWaWN0b3J5XCJdO2Z1bmN0aW9uIFZhKGUpe3JldHVybiBuKEphLGUpfXZhciBqYT1bXCJhbHdheXNcIixcImNvbnN0YW50bHlcIixcInVzdWFsbHlcIixcIm5vcm1hbGx5XCIsXCJmcmVxdWVudGx5XCIsXCJyZWd1bGFybHlcIixcIm9mdGVuXCIsXCJzb21ldGltZXNcIixcIm9jY2FzaW9uYWxseVwiLFwicmFyZWx5XCIsXCJpbmZyZXF1ZW50bHlcIixcInNlbGRvbVwiLFwiaGFyZGx5XCIsXCJuZXZlclwiLFwiaG91cmx5XCIsXCJkYWlseVwiLFwid2Vla2x5XCIsXCJtb250aGx5XCIsXCJ5ZWFybHlcIixcIm9uY2VcIixcInR3aWNlXCJdO2Z1bmN0aW9uIFVhKGUpe3JldHVybiBuKGphLGUpfWZ1bmN0aW9uIF9hKGUpe2NvbnN0IGE9e3dpdGhBY2NlbnRzOm51bGw9PWU/dm9pZCAwOmUud2l0aEFjY2VudHMsZ2VuZGVyOm51bGw9PWU/dm9pZCAwOmUuZ2VuZGVyfTtyZXR1cm4gbigoKCk9PmAke3dhKGEpfSAke1NhKGEpfWApLGUpfWZ1bmN0aW9uIFlhKGUpe3ZhciBhO2NvbnN0IHQ9bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS55ZWFycyk/YToxO2lmKHQ8PTApdGhyb3cgbmV3IEVycm9yKFwiWWVhcnMgbXVzdCBiZSBwb3NpdGl2ZSwgdXNlIHBhc3QoKSBpbnN0ZWFkXCIpO2NvbnN0IG89MzY1KnQqMjQqNjAqNjAqMWUzLGk9bmV3IERhdGUscj1uZXcgRGF0ZShpLmdldFRpbWUoKStvKTtyZXR1cm4gbigoKCk9PiQoe2Zyb206aSx0bzpyfSkpLGUpfXZhciBRYT1bXCJDaXNnZW5kZXJcIixcIk1hbGUgdG8gZmVtYWxlIHRyYW5zZ2VuZGVyIHdvbWFuXCIsXCJBbmRyb2d5bmVcIixcIkJpZ2VuZGVyXCIsXCJQYW5nZW5kZXJcIixcIkNpc1wiLFwiVHJhbnNleHVhbCBQZXJzb25cIixcIlRyYW5zZ2VuZGVyIEZlbWFsZVwiLFwiRmVtYWxlIHRvIG1hbGUgdHJhbnNzZXh1YWwgbWFuXCIsXCJHZW5kZXIgbmV1dHJhbFwiLFwiSW50ZXJzZXggd29tYW5cIixcIkludGVyc2V4XCIsXCJUcmFuc2V4dWFsIEZlbWFsZVwiLFwiVHJhbnMqTWFsZVwiLFwiQ2lzZ2VuZGVyIE1hbGVcIixcIlRyYW5zZXh1YWwgV29tYW5cIixcIlRyYW5zIEZlbWFsZVwiLFwiR2VuZGVyIFZhcmlhbnRcIixcIk1hbGUgdG8gRmVtYWxlXCIsXCJUd28tc3Bpcml0XCIsXCJUcmFucyBNYW5cIixcIkdlbmRlciBOb25jb25mb3JtaW5nXCIsXCJOb24tYmluYXJ5XCIsXCJUcmFuc2dlbmRlciBQZXJzb25cIixcIkNpc2dlbmRlciBXb21hblwiLFwiQ2lzIFdvbWFuXCIsXCJDaXMgRmVtYWxlXCIsXCJUcmFucypXb21hblwiLFwiUG9seWdlbmRlclwiLFwiTTJGXCIsXCJOZWl0aGVyXCIsXCJNYWxlIHRvIGZlbWFsZSB0cmFuc3NleHVhbCB3b21hblwiLFwiSW50ZXJzZXggbWFuXCIsXCJBc2V4dWFsXCIsXCJUcmFuc2V4dWFsXCIsXCJDaXMgTWFsZVwiLFwiVCogd29tYW5cIixcIldvbWFuXCIsXCJDaXNnZW5kZXIgRmVtYWxlXCIsXCJPdGhlclwiLFwiVCogbWFuXCIsXCJBbmRyb2d5bm91c1wiLFwiVHJhbnMgTWFsZVwiLFwiTWFsZSB0byBmZW1hbGUgdHJhbnMgd29tYW5cIixcIlRyYW5zZXh1YWwgTWFsZVwiLFwiQ2lzIE1hblwiLFwiRmVtYWxlIHRvIG1hbGUgdHJhbnNnZW5kZXIgbWFuXCIsXCJHZW5kZXJxdWVlclwiLFwiTmV1dHJvaXNcIixcIkludGVyc2V4IHBlcnNvblwiLFwiRlRNXCIsXCJIZXJtYXBocm9kaXRlXCIsXCJGZW1hbGUgdG8gTWFsZVwiXSwkYT1bXCJBbmRyb1wiLFwiQmlcIixcIlBhblwiLFwiRlwiLFwiTVwiLFwiQ2lzXCIsXCJDaXMgTVwiLFwiQ2lzIFdcIixcIkNpcyBGXCIsXCJEZW1pXCIsXCJUKlwiLFwiVCBGXCIsXCJHVlwiLFwiVCBNXCIsXCJUKk1cIixcIlQqV1wiLFwiTm9uLWJpXCIsXCJQb2x5XCIsXCJNMkZcIixcIk0yRlRcIixcIkFjZVwiLFwiV1wiLFwiT3RoZXJcIixcIk5DXCIsXCJRXCIsXCJUQ1wiLFwiVEdOQ1wiLFwiRlRNXCIsXCJHU01cIl07ZnVuY3Rpb24gWGEoZSl7cmV0dXJuIG4obnVsbCE9ZSYmZS5jb2RlPyRhOlFhLGUpfXZhciBaYT1bXCJwcm90b2NvbC1uYXZpZ2F0ZVwiLFwiYXJyYXktcXVhbnRpZnlcIixcInRyYW5zbWl0dGVyLW92ZXJyaWRlXCIsXCJjaXJjdWl0LWNvbXByZXNzXCIsXCJmZWVkLXByb2dyYW1cIixcIm1pY3JvY2hpcC1wYXJzZVwiLFwiZmVlZC1xdWFudGlmeVwiLFwiY2FyZC1zeW50aGVzaXplXCIsXCJidXMtcmVib290XCIsXCJhcHBsaWNhdGlvbi1pbnB1dFwiLFwiZmlyZXdhbGwtZ2VuZXJhdGVcIixcIm1vbml0b3ItdHJhbnNtaXRcIixcInNlbnNvci1wYXJzZVwiLFwicG9ydC1jb21wcmVzc1wiLFwiaW50ZXJmYWNlLXJlYm9vdFwiLFwiY2FwYWNpdG9yLXByb2dyYW1cIixcIm1vbml0b3ItcXVhbnRpZnlcIixcInRyYW5zbWl0dGVyLWlucHV0XCJdO2Z1bmN0aW9uIGV0KGUpe3JldHVybiBuKFphLGUpfWZ1bmN0aW9uIGF0KCl7cmV0dXJuIFMoe21pbjowLG1heDoxNX0pLnRvU3RyaW5nKDE2KX1mdW5jdGlvbiB0dChlKXtyZXR1cm4gbihhdCxlKX1mdW5jdGlvbiBvdChlKXtyZXR1cm4gbigoKCk9PntsZXQgZT1cIlwiO2ZvcihsZXQgYT0wO2E8NDA7YSsrKWUrPXR0KCk7cmV0dXJuIGV9KSxlKX1mdW5jdGlvbiBpdChlKXtyZXR1cm4gbigoKCk9Pntjb25zdCBlPVtdO2ZvcihsZXQgYT0wO2E8Uyh7bWluOjIsbWF4OjV9KTthKyspZS5wdXNoKG1hKCkpO3JldHVybiBlLmpvaW4oXCIgXCIpfSksZSl9ZnVuY3Rpb24gbnQoZSl7cmV0dXJuIG4oKCgpPT5gY29tbWl0ICR7b3QoKX1cXFxcclxcXFxuQXV0aG9yOiAke19hKCl9IDwke0NhKCl9PlxcXFxyXFxcXG5EYXRlOiAkeyhuZXcgRGF0ZSkudG9TdHJpbmcoKX1cXFxcclxcXFxuXFxcXHJcXFxcbiR7aXQoKX1gKSxlKX1mdW5jdGlvbiBydChlKXtyZXR1cm4gbigoKCk9PntsZXQgZT1cIlwiO2ZvcihsZXQgYT0wO2E8NzthKyspZSs9dHQoKTtyZXR1cm4gZX0pLGUpfWZ1bmN0aW9uIHN0KGUpe3JldHVybiBuKCgoKT0+YCMke28oKS50b1N0cmluZygxNikuc3Vic3RyKDIsNil9YCksZSl9dmFyIGx0PVtcIlBvdHRva1wiLFwiRHV0Y2ggSGVhdnkgRHJhZnRcIixcIlNwYW5pc2ggQmFyYlwiLFwiUnVzc2lhbiBIZWF2eSBEcmFmdFwiLFwiQW1lcmljYW4gU2FkZGxlYnJlZFwiLFwiQ2FtYXJpbGxvIFdoaXRlIEhvcnNlXCIsXCJLYXJhY2hhaSBIb3JzZVwiLFwiQW5kYWx1c2lhbiBIb3JzZVwiLFwiUG9pdGV2aW4gSG9yc2VcIixcIkNvbG9yYWRvIFJhbmdlclwiLFwiUGFzbyBGaW5vXCIsXCJTd2lzcyBXYXJtYmxvb2RcIixcIk11cmdlc2VcIixcIlNlbGxlIEZyYW7Dp2Fpc1wiLFwiUml3b2NoZSBIb3JzZVwiLFwiRnJlbmNoIFRyb3R0ZXJcIixcIkFtZXJpY2FuIEluZGlhbiBIb3JzZVwiLFwiSmVqdSBIb3JzZVwiXTtmdW5jdGlvbiB1dChlKXtyZXR1cm4gbihsdCxlKX1mdW5jdGlvbiBjdChlKXtyZXR1cm4gbigoKCk9Pntjb25zdFthLHQsbyxpXT1bcyh7bWluOjAsbWF4OjM1OSxmcmFjdGlvbjowfSkscyh7bWluOjAsbWF4OjEwMCxmcmFjdGlvbjowfSkscyh7bWluOjAsbWF4OjEwMCxmcmFjdGlvbjowfSksUmEoe21pbjouMSxtYXg6MX0pXTtyZXR1cm4gbnVsbCE9ZSYmZS5hbHBoYT9gaHNsYSgke2F9LCAke3R9JSwgJHtvfSUsICR7aX0pYDpgaHNsKCR7YX0sICR7dH0lLCAke299JSlgfSksZSl9dmFyIGR0PVtcIkdFVFwiLFwiUE9TVFwiLFwiUFVUXCIsXCJQQVRDSFwiLFwiREVMRVRFXCJdO2Z1bmN0aW9uIGh0KGUpe3JldHVybiBuKGR0LGUpfWZ1bmN0aW9uIG10KGUpe3ZhciBhO2lmKG51bGwhPWUmJmUuY291bnRyeUNvZGUmJjIhPT0obnVsbD09ZXx8bnVsbD09KGE9ZS5jb3VudHJ5Q29kZSk/dm9pZCAwOmEubGVuZ3RoKSl0aHJvdyBuZXcgRXJyb3IoXCJjb3VudHJ5IGNvZGUgc2hvdWxkIGJlIHZhbGlkIElTTyAzMTY2LTEgYWxwaGEtMiB0d28tbGV0dGVyIGNvdW50cnkgY29kZSwgZm9yIGV4YW1wbGU6IERFXCIpO3JldHVybiBuKCgoKT0+e3ZhciBhO3JldHVybmAke251bGwhPShhPW51bGw9PWU/dm9pZCAwOmUuY291bnRyeUNvZGUpP2E6WigpfSR7Uyh7bWluOjEwLG1heDo5OX0pLnRvU3RyaW5nKCl9JHtBcnJheShTKHttaW46MTIsbWF4OjMwfSkpLmZpbGwoXCIjXCIpLmpvaW4oXCJcIikucmVwbGFjZSgvIy9nLCgoKT0+QygpLnRvU3RyaW5nKCkpKX1gLnRvVXBwZXJDYXNlKCl9KSxlKX12YXIgcHQ9W1wiQW5haGVpbSBEdWNrc1wiLFwiQXJpem9uYSBDb3lvdGVzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJCdWZmYWxvIFNhYnJlc1wiLFwiQ2FsZ2FyeSBGbGFtZXNcIixcIkNhcm9saW5hIEh1cnJpY2FuZXNcIixcIkNoaWNhZ28gQmxhY2toYXdrc1wiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJDb2x1bWJ1cyBCbHVlIEphY2tldHNcIixcIkRhbGxhcyBTdGFyc1wiLFwiRGV0cm9pdCBSZWQgV2luZ3NcIixcIkVkbW9udG9uIE9pbGVyc1wiLFwiRmxvcmlkYSBQYW50aGVyc1wiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIk1pbm5lc290YSBXaWxkXCIsXCJNb250csOpYWwgQ2FuYWRpZW5zXCIsXCJOYXNodmlsbGUgUHJlZGF0b3JzXCIsXCJOZXcgSmVyc2V5IERldmlsc1wiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCIsXCJOZXcgWW9yayBSYW5nZXJzXCIsXCJPdHRhd2EgU2VuYXRvcnNcIixcIlBoaWxhZGVscGhpYSBGbHllcnNcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIixcIlNhbiBKb3NlIFNoYXJrc1wiLFwiU2VhdHRsZSBLcmFrZW5cIixcIlN0LiBMb3VpcyBCbHVlc1wiLFwiVGFtcGEgQmF5IExpZ2h0bmluZ1wiLFwiVG9yb250byBNYXBsZSBMZWFmc1wiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJXYXNoaW5ndG9uIENhcGl0YWxzXCIsXCJXaW5uaXBlZyBKZXRzXCJdO2Z1bmN0aW9uIHl0KGUpe3JldHVybiBuKHB0LGUpfWZ1bmN0aW9uIGd0KGUpe3ZhciBhLHQsbztjb25zdFtpLHIsc109W251bGwhPShhPW51bGw9PWU/dm9pZCAwOmUud2lkdGgpP2E6NTAwLG51bGwhPSh0PW51bGw9PWU/dm9pZCAwOmUuaGVpZ2h0KT90OjUwMCxudWxsIT0obz1udWxsPT1lP3ZvaWQgMDplLmNhdGVnb3J5KT9vOlwiXCJdO3JldHVybiBuKCgoKT0+YGh0dHBzOi8vcGxhY2VpbWcuY29tLyR7aX0vJHtyfSR7cz9gLyR7c31gOnN9YCksZSl9dmFyIGZ0PVtcIlNsYWNrXCIsXCJHaXRIdWJcIixcIkppcmFcIixcIkFXUyBMYW1iZGFcIixcIkJpdGJ1Y2tldFwiLFwiQml0YnVja2V0IFNlcnZlclwiLFwiR2l0SHViIEVudGVycHJpc2VcIixcIkdpdExhYlwiLFwiR3JhZmFuYVwiLFwiSmlyYSBTZXJ2ZXJcIixcIk1pY3Jvc29mdCBUZWFtc1wiLFwiUGFnZXJEdXR5XCIsXCJWZXJjZWxcIixcIkF6dXJlIERldk9wc1wiLFwiV2ViSG9va3NcIixcIkFtaXhyXCIsXCJDYWxpeGFcIixcIkNsaWNrVXBcIixcIktvbW9kb3JcIixcIkxpbmVhclwiLFwiUm9va291dFwiLFwiU2hvcnRjdXRcIixcIlNwaWtlLnNoXCIsXCJTcGxpdFwiLFwiVGFza0NhbGxcIixcIlRlYW13b3JrXCIsXCJBc2FuYVwiLFwiT3BlblJlcGxheVwiLFwiQml0YnVja2V0IFBpcGVsaW5lc1wiLFwiRGF0YWRvZ1wiLFwiRnVsbFN0b3J5XCIsXCJHaXRIdWIgQWN0aW9uc1wiLFwiSGVyb2t1XCIsXCJJbnNpZ2h0RmluZGVyXCIsXCJOZXRsaWZ5XCIsXCJPY3RvaG9va1wiLFwiTGVhcm4gTW9yZVwiLFwiUGl2b3RhbCBUcmFja2VyXCIsXCJSb2NrZXQuQ2hhdFwiLFwiVHJlbGxvXCIsXCJUd2lsaW8gKFNNUylcIixcIk9wc0dlbmllXCIsXCJQaGFicmljYXRvclwiLFwiUHVzaG92ZXJcIixcIlJlZG1pbmVcIixcIlNlc3Npb25TdGFja1wiLFwiVmljdG9yT3BzXCIsXCJBbWF6b24gU1FTXCIsXCJTZWdtZW50XCIsXCJTcGx1bmtcIl07ZnVuY3Rpb24gYnQoZSl7cmV0dXJuIG4oZnQsZSl9Y29uc3QgdnQ9e21pbjowLG1heDoyNTV9O2Z1bmN0aW9uIHd0KGUpe3JldHVybiBuKCgoKT0+QXJyYXkuZnJvbSh7bGVuZ3RoOjR9LCgoKT0+Uyh2dCkpKS5qb2luKFwiLlwiKSksZSl9ZnVuY3Rpb24ga3QoZSl7cmV0dXJuIG4oKCgpPT5BcnJheS5mcm9tKHtsZW5ndGg6OH0sKCgpPT5BcnJheS5mcm9tKHtsZW5ndGg6NH0sKCgpPT50dCgpKSkuam9pbihcIlwiKSkpLmpvaW4oXCI6XCIpKSxlKX12YXIgU3Q9W1wiQnJhbmRcIixcIlRhY3RpY3NcIixcIk1hcmtldHNcIixcIlVzYWJpbGl0eVwiLFwiT3BlcmF0aW9uc1wiLFwiSW50ZWdyYXRpb25cIixcIklkZW50aXR5XCIsXCJNYXJrZXRpbmdcIixcIkNyZWF0aXZlXCIsXCJSZXNwb25zZVwiLFwiQnJhbmRpbmdcIixcIlF1YWxpdHlcIixcIlByb2dyYW1cIixcIkFjY291bnRzXCIsXCJBY2NvdW50YWJpbGl0eVwiLFwiSW50ZXJhY3Rpb25zXCIsXCJTZWN1cml0eVwiLFwiQXBwbGljYXRpb25zXCIsXCJDb25maWd1cmF0aW9uXCIsXCJGYWN0b3JzXCIsXCJQYXJhZGlnbVwiLFwiRGl2aXNpb25cIixcIkdyb3VwXCIsXCJEYXRhXCIsXCJEaXJlY3RpdmVzXCIsXCJPcHRpbWl6YXRpb25cIixcIldlYlwiLFwiRnVuY3Rpb25hbGl0eVwiLFwiUmVzZWFyY2hcIixcIkludHJhbmV0XCIsXCJTb2x1dGlvbnNcIixcIk1vYmlsaXR5XCIsXCJDb21tdW5pY2F0aW9uc1wiLFwiTWV0cmljc1wiLFwiQXNzdXJhbmNlXCJdO2Z1bmN0aW9uIEN0KGUpe3JldHVybiBuKFN0LGUpfXZhciBBdD1bXCJTZW5pb3JcIixcIkNvcnBvcmF0ZVwiLFwiRnV0dXJlXCIsXCJJbnRlcm5hdGlvbmFsXCIsXCJHbG9iYWxcIixcIkNlbnRyYWxcIixcIlByb2R1Y3RcIixcIkludGVybmFsXCIsXCJOYXRpb25hbFwiLFwiRGlyZWN0XCIsXCJDdXN0b21lclwiLFwiSHVtYW5cIixcIkxlYWRcIixcIkRpc3RyaWN0XCIsXCJDaGllZlwiLFwiRHluYW1pY1wiLFwiUHJpbmNpcGFsXCIsXCJGb3J3YXJkXCIsXCJMZWdhY3lcIixcIlJlZ2lvbmFsXCIsXCJJbnZlc3RvclwiXTtmdW5jdGlvbiBNdChlKXtyZXR1cm4gbihBdCxlKX12YXIgVHQ9W1wiSW50ZXJuYWwgUXVhbGl0eSBDb29yZGluYXRvclwiLFwiTGVnYWN5IE1hcmtldGluZyBQbGFubmVyXCIsXCJJbnZlc3RvciBDb25maWd1cmF0aW9uIFNwZWNpYWxpc3RcIixcIkh1bWFuIERpcmVjdGl2ZXMgRW5naW5lZXJcIixcIkRpc3RyaWN0IFF1YWxpdHkgVGVjaG5pY2lhblwiLFwiQ2VudHJhbCBNb2JpbGl0eSBMaWFpc29uXCIsXCJJbnRlcm5hdGlvbmFsIEludGVyYWN0aW9ucyBPcmNoZXN0cmF0b3JcIixcIkNlbnRyYWwgSW1wbGVtZW50YXRpb24gUHJvZHVjZXJcIixcIkZvcndhcmQgQ29uZmlndXJhdGlvbiBGYWNpbGl0YXRvclwiLFwiSW50ZXJuYWwgU29sdXRpb25zIENvb3JkaW5hdG9yXCIsXCJHbG9iYWwgV2ViIEFnZW50XCIsXCJJbnRlcm5hdGlvbmFsIEJyYW5kIEFzc29jaWF0ZVwiLFwiUmVnaW9uYWwgQXBwbGljYXRpb25zIFN0cmF0ZWdpc3RcIixcIkRpcmVjdCBCcmFuZCBBbmFseXN0XCIsXCJJbnZlc3RvciBNb2JpbGl0eSBDb25zdWx0YW50XCIsXCJQcmluY2lwYWwgRGl2aXNpb24gU3VwZXJ2aXNvclwiLFwiQ2hpZWYgSW50ZXJhY3Rpb25zIEFkbWluaXN0cmF0b3JcIixcIkRpc3RyaWN0IFdlYiBGYWNpbGl0YXRvclwiLFwiSW52ZXN0b3IgTWV0cmljcyBDb25zdWx0YW50XCIsXCJDb3Jwb3JhdGUgQXBwbGljYXRpb25zIERpcmVjdG9yXCIsXCJDb3Jwb3JhdGUgR3JvdXAgUGxhbm5lclwiLFwiR2xvYmFsIEZ1bmN0aW9uYWxpdHkgTWFuYWdlclwiLFwiUHJpbmNpcGFsIFdlYiBFbmdpbmVlclwiLFwiTmF0aW9uYWwgRGlyZWN0aXZlcyBFeGVjdXRpdmVcIixcIkR5bmFtaWMgRmFjdG9ycyBPZmZpY2VyXCIsXCJQcmluY2lwYWwgSWRlbnRpdHkgU3VwZXJ2aXNvclwiLFwiRHluYW1pYyBTb2x1dGlvbnMgQWRtaW5pc3RyYXRvclwiLFwiQ29ycG9yYXRlIEludGVyYWN0aW9ucyBBbmFseXN0XCIsXCJTZW5pb3IgQ29uZmlndXJhdGlvbiBDb25zdWx0YW50XCIsXCJIdW1hbiBXZWIgQ29uc3VsdGFudFwiLFwiQ3VzdG9tZXIgTWV0cmljcyBUZWNobmljaWFuXCIsXCJTZW5pb3IgU29sdXRpb25zIFByb2R1Y2VyXCIsXCJDZW50cmFsIE9wZXJhdGlvbnMgVGVjaG5pY2lhblwiLFwiUHJvZHVjdCBTZWN1cml0eSBQcm9kdWNlclwiLFwiRm9yd2FyZCBTZWN1cml0eSBFeGVjdXRpdmVcIixcIkR5bmFtaWMgQXNzdXJhbmNlIEFyY2hpdGVjdFwiLFwiSW50ZXJuYWwgSW50ZWdyYXRpb24gUmVwcmVzZW50YXRpdmVcIixcIkxlYWQgV2ViIERldmVsb3BlclwiLFwiSHVtYW4gRGlyZWN0aXZlcyBBc3Npc3RhbnRcIixcIkludGVybmFsIE9wZXJhdGlvbnMgUmVwcmVzZW50YXRpdmVcIixcIkNoaWVmIENvbW11bmljYXRpb25zIEFzc29jaWF0ZVwiLFwiUHJpbmNpcGFsIEJyYW5kaW5nIFN0cmF0ZWdpc3RcIixcIkludGVybmF0aW9uYWwgUGFyYWRpZ20gU3BlY2lhbGlzdFwiLFwiUmVnaW9uYWwgU2VjdXJpdHkgQWRtaW5pc3RyYXRvclwiLFwiRm9yd2FyZCBPcGVyYXRpb25zIEFyY2hpdGVjdFwiLFwiUHJvZHVjdCBNb2JpbGl0eSBPcmNoZXN0cmF0b3JcIixcIkxlYWQgRnVuY3Rpb25hbGl0eSBPcmNoZXN0cmF0b3JcIixcIkxlYWQgU29sdXRpb25zIENvbnN1bHRhbnRcIixcIkh1bWFuIE1hcmtldHMgU3RyYXRlZ2lzdFwiLFwiSW50ZXJuYXRpb25hbCBJbmZyYXN0cnVjdHVyZSBFbmdpbmVlclwiLFwiRHluYW1pYyBSZXNwb25zZSBPZmZpY2VyXCIsXCJEeW5hbWljIFF1YWxpdHkgRW5naW5lZXJcIixcIk5hdGlvbmFsIENyZWF0aXZlIFN0cmF0ZWdpc3RcIixcIlByaW5jaXBhbCBTZWN1cml0eSBSZXByZXNlbnRhdGl2ZVwiLFwiSW50ZXJuYWwgVXNhYmlsaXR5IEV4ZWN1dGl2ZVwiLFwiUHJvZHVjdCBVc2FiaWxpdHkgQ29vcmRpbmF0b3JcIixcIkdsb2JhbCBPcHRpbWl6YXRpb24gQXNzb2NpYXRlXCIsXCJHbG9iYWwgQ29uZmlndXJhdGlvbiBFeGVjdXRpdmVcIixcIkdsb2JhbCBSZXNlYXJjaCBFbmdpbmVlclwiLFwiUmVnaW9uYWwgQWNjb3VudHMgQXNzb2NpYXRlXCIsXCJDZW50cmFsIElkZW50aXR5IEFnZW50XCIsXCJQcmluY2lwYWwgUHJvZ3JhbSBPZmZpY2VyXCIsXCJTZW5pb3IgR3JvdXAgRGV2ZWxvcGVyXCIsXCJGb3J3YXJkIFJlc2VhcmNoIENvb3JkaW5hdG9yXCIsXCJMZWdhY3kgSWRlbnRpdHkgRGV2ZWxvcGVyXCIsXCJDZW50cmFsIEludGVyYWN0aW9ucyBEZXZlbG9wZXJcIixcIkRpcmVjdCBSZXNlYXJjaCBUZWNobmljaWFuXCIsXCJDaGllZiBXZWIgUGxhbm5lclwiLFwiSW52ZXN0b3IgUHJvZ3JhbSBBcmNoaXRlY3RcIixcIk5hdGlvbmFsIEludHJhbmV0IEFyY2hpdGVjdFwiLFwiUHJpbmNpcGFsIE9wZXJhdGlvbnMgQWRtaW5pc3RyYXRvclwiLFwiTGVnYWN5IFNlY3VyaXR5IEFzc29jaWF0ZVwiLFwiR2xvYmFsIENvbW11bmljYXRpb25zIEFyY2hpdGVjdFwiLFwiRm9yd2FyZCBDb25maWd1cmF0aW9uIEFuYWx5c3RcIixcIkN1c3RvbWVyIFByb2dyYW0gUmVwcmVzZW50YXRpdmVcIixcIkR5bmFtaWMgQ29tbXVuaWNhdGlvbnMgRGlyZWN0b3JcIixcIkR5bmFtaWMgRGl2aXNpb24gQXJjaGl0ZWN0XCIsXCJDdXN0b21lciBTZWN1cml0eSBNYW5hZ2VyXCIsXCJEeW5hbWljIEJyYW5kaW5nIEFuYWx5c3RcIixcIkludGVybmFsIENvbmZpZ3VyYXRpb24gQWdlbnRcIixcIlByaW5jaXBhbCBQcm9ncmFtIExpYWlzb25cIixcIlJlZ2lvbmFsIFJlc2VhcmNoIEFkbWluaXN0cmF0b3JcIixcIkR5bmFtaWMgRnVuY3Rpb25hbGl0eSBDb29yZGluYXRvclwiLFwiSW52ZXN0b3IgQ29uZmlndXJhdGlvbiBQcm9kdWNlclwiLFwiRGlyZWN0IFdlYiBFbmdpbmVlclwiLFwiQ2VudHJhbCBJbXBsZW1lbnRhdGlvbiBPcmNoZXN0cmF0b3JcIixcIkludmVzdG9yIFRhY3RpY3MgU3RyYXRlZ2lzdFwiLFwiTmF0aW9uYWwgQ3JlYXRpdmUgQWdlbnRcIixcIkNlbnRyYWwgSW50cmFuZXQgU3BlY2lhbGlzdFwiLFwiRnV0dXJlIENyZWF0aXZlIFN0cmF0ZWdpc3RcIixcIlByb2R1Y3QgSW50cmFuZXQgTGlhaXNvblwiLFwiRHluYW1pYyBNYXJrZXRzIENvbnN1bHRhbnRcIixcIkdsb2JhbCBJbmZyYXN0cnVjdHVyZSBBZG1pbmlzdHJhdG9yXCIsXCJMZWFkIEludGVyYWN0aW9ucyBTdXBlcnZpc29yXCIsXCJGdXR1cmUgVXNhYmlsaXR5IERlc2lnbmVyXCIsXCJQcmluY2lwYWwgUmVzZWFyY2ggUHJvZHVjZXJcIixcIkludGVybmF0aW9uYWwgUXVhbGl0eSBGYWNpbGl0YXRvclwiLFwiTGVnYWN5IERhdGEgRGlyZWN0b3JcIixcIkR5bmFtaWMgSW5mcmFzdHJ1Y3R1cmUgUmVwcmVzZW50YXRpdmVcIixcIkRpcmVjdCBQYXJhZGlnbSBBbmFseXN0XCJdO2Z1bmN0aW9uIEJ0KGUpe3JldHVybiBuKFR0LGUpfXZhciBJdD1bXCJEaXJlY3RvclwiLFwiUmVwcmVzZW50YXRpdmVcIixcIk9mZmljZXJcIixcIkNvb3JkaW5hdG9yXCIsXCJFbmdpbmVlclwiLFwiRGVzaWduZXJcIixcIkRldmVsb3BlclwiLFwiU3BlY2lhbGlzdFwiLFwiQW5hbHlzdFwiLFwiT3JjaGVzdHJhdG9yXCIsXCJUZWNobmljaWFuXCIsXCJFeGVjdXRpdmVcIixcIkFzc2lzdGFudFwiLFwiUHJvZHVjZXJcIixcIkxpYWlzb25cIixcIkNvbnN1bHRhbnRcIixcIkFyY2hpdGVjdFwiLFwiQXNzb2NpYXRlXCIsXCJNYW5hZ2VyXCIsXCJBZ2VudFwiLFwiRmFjaWxpdGF0b3JcIixcIlBsYW5uZXJcIixcIkFkbWluaXN0cmF0b3JcIixcIlN1cGVydmlzb3JcIl07ZnVuY3Rpb24gUHQoZSl7cmV0dXJuIG4oSXQsZSl9dmFyIHh0PVtcIkFmcmlrYWFuc1wiLFwiQW1oYXJpY1wiLFwiQXJhYmljXCIsXCJBemVyYmFpamFuaVwiLFwiQnllbG9ydXNzaWFuXCIsXCJCdWxnYXJpYW5cIixcIkJlbmdhbGksQmFuZ2xhXCIsXCJCb3NuaWFuXCIsXCJDYXRhbGFuXCIsXCJDZWJ1YW5vXCIsXCJDb3JzaWNhblwiLFwiQ3plY2hcIixcIldlbHNoXCIsXCJEYW5pc2hcIixcIkdlcm1hblwiLFwiR3JlZWtcIixcIkVuZ2xpc2hcIixcIkVzcGVyYW50b1wiLFwiU3BhbmlzaFwiLFwiRXN0b25pYW5cIixcIkJhc3F1ZVwiLFwiUGVyc2lhblwiLFwiRmlubmlzaFwiLFwiRnJlbmNoXCIsXCJGcmlzaWFuXCIsXCJJcmlzaFwiLFwiR2FlbGljIChTY290cyBHYWVsaWMpXCIsXCJHYWxpY2lhblwiLFwiR3VqYXJhdGlcIixcIkhhdXNhXCIsXCJIaW5kaVwiLFwiSG1vbmdcIixcIkNyb2F0aWFuXCIsXCJIYWl0aWFuIENyZW9sZVwiLFwiSHVuZ2FyaWFuXCIsXCJBcm1lbmlhblwiLFwiSW5kb25lc2lhblwiLFwiSWdib1wiLFwiSWNlbGFuZGljXCIsXCJJdGFsaWFuXCIsXCJIZWJyZXdcIixcIkphcGFuZXNlXCIsXCJKYXZhbmVzZVwiLFwiR2VvcmdpYW5cIixcIkthemFraFwiLFwiQ2FtYm9kaWFuXCIsXCJLYW5uYWRhXCIsXCJLb3JlYW5cIixcIkt1cmRpc2hcIixcIktpcmdoaXpcIixcIkxhdGluXCIsXCJMdXhlbWJvdXJnaXNoXCIsXCJMYW90aGlhblwiLFwiTGl0aHVhbmlhblwiLFwiTGF0dmlhbixMZXR0aXNoXCIsXCJNYWxhZ2FzeVwiLFwiTWFvcmlcIixcIk1hY2Vkb25pYW5cIixcIk1hbGF5YWxhbVwiLFwiTW9uZ29saWFuXCIsXCJNYXJhdGhpXCIsXCJNYWxheVwiLFwiTWFsdGVzZVwiLFwiQnVybWVzZVwiLFwiTmVwYWxpXCIsXCJEdXRjaFwiLFwiTm9yd2VnaWFuXCIsXCJOeWFuamFcIixcIlB1bmphYmlcIixcIlBvbGlzaFwiLFwiUGFzaHRvLFB1c2h0b1wiLFwiUG9ydHVndWVzZVwiLFwiUm9tYW5pYW5cIixcIlJ1c3NpYW5cIixcIlNpbmRoaVwiLFwiU2luZ2hhbGVzZVwiLFwiU2xvdmFrXCIsXCJTbG92ZW5pYW5cIixcIlNhbW9hblwiLFwiU2hvbmFcIixcIlNvbWFsaVwiLFwiQWxiYW5pYW5cIixcIlNlcmJpYW5cIixcIlNlc290aG9cIixcIlN1bmRhbmVzZVwiLFwiU3dlZGlzaFwiLFwiU3dhaGlsaVwiLFwiVGFtaWxcIixcIlRlZ3VsdVwiLFwiVGFqaWtcIixcIlRoYWlcIixcIlR1cmtpc2hcIixcIlVrcmFpbmlhblwiLFwiVXJkdVwiLFwiVXpiZWtcIixcIlZpZXRuYW1lc2VcIixcIlhob3NhXCIsXCJZaWRkaXNoXCIsXCJZb3J1YmFcIixcIkNoaW5lc2VcIixcIlp1bHVcIl0sRHQ9W1wiYWZcIixcImFtXCIsXCJhclwiLFwiYXpcIixcImJlXCIsXCJiZ1wiLFwiYm5cIixcImJzXCIsXCJjYVwiLFwiY2VcIixcImNvXCIsXCJjc1wiLFwiY3lcIixcImRhXCIsXCJkZVwiLFwiZWxcIixcImVuXCIsXCJlb1wiLFwiZXNcIixcImV0XCIsXCJldVwiLFwiZmFcIixcImZpXCIsXCJmclwiLFwiZnlcIixcImdhXCIsXCJnZFwiLFwiZ2xcIixcImd1XCIsXCJoYVwiLFwiaGlcIixcImhtXCIsXCJoclwiLFwiaHRcIixcImh1XCIsXCJoeVwiLFwiaWRcIixcImlnXCIsXCJpc1wiLFwiaXRcIixcIml3XCIsXCJqYVwiLFwianZcIixcImthXCIsXCJra1wiLFwia21cIixcImtuXCIsXCJrb1wiLFwia3VcIixcImt5XCIsXCJsYVwiLFwibGJcIixcImxvXCIsXCJsdFwiLFwibHZcIixcIm1nXCIsXCJtaVwiLFwibWtcIixcIm1sXCIsXCJtblwiLFwibXJcIixcIm1zXCIsXCJtdFwiLFwibXlcIixcIm5lXCIsXCJubFwiLFwibm9cIixcIm55XCIsXCJwYVwiLFwicGxcIixcInBzXCIsXCJwdFwiLFwicm9cIixcInJ1XCIsXCJzZFwiLFwic2lcIixcInNrXCIsXCJzbFwiLFwic21cIixcInNuXCIsXCJzb1wiLFwic3FcIixcInNyXCIsXCJzdFwiLFwic3VcIixcInN2XCIsXCJzd1wiLFwidGFcIixcInRlXCIsXCJ0Z1wiLFwidGhcIixcInRyXCIsXCJ1a1wiLFwidXJcIixcInV6XCIsXCJ2aVwiLFwieGhcIixcInlpXCIsXCJ5b1wiLFwiemhcIixcInp1XCJdO2Z1bmN0aW9uIHF0KGUpe3JldHVybiBuKG51bGwhPWUmJmUuY29kZT9EdDp4dCxlKX1mdW5jdGlvbiBGdChlKXtyZXR1cm4gbigoKCk9PnMoe21pbjotOTAsbWF4OjkwLGZyYWN0aW9uOjN9KSksZSl9ZnVuY3Rpb24gR3QoZSl7Y29uc3QgYT1zKHttaW46MSxtYXg6MTAsZnJhY3Rpb246MH0pO3JldHVybiAxPT09YXx8NTA9PT1lP1wiLlwiOjI9PT1hP1wiLFwiOlwiXCJ9ZnVuY3Rpb24gTHQoZSl7cmV0dXJuIG4oKCgpPT57bGV0IGU9bWEoe2NhcGl0YWxpemU6ITB9KSxhPTE7Zm9yKDthPDUwOyl7Y29uc3QgdD1tYSgpO2xldCBvPVwiXCI7aWYoYSsrLGE+MyYmKG89R3QoYSkpLGUrPWAgJHt0fSR7b31gLFwiLlwiPT09bylicmVha31yZXR1cm4gZX0pLGUpfWZ1bmN0aW9uIFJ0KGUpe3ZhciBhO2NvbnN0IHQ9bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS5saW5lQ291bnQpP2E6NTtpZih0PDF8fGlzTmFOKHQpKXRocm93XCJMaW5lIGNvdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIjtyZXR1cm4gbigoKCk9PntsZXQgZT1gJHtMdCgpfVxcbmA7Zm9yKGxldCBhPTA7YTx0LTE7YSsrKWUrPWAke0x0KCl9XFxuYDtyZXR1cm4gZX0pLGUpfXZhciBIdD1bXCJDb21tb2RpIGVzdCByZXJ1bSBkb2xvcnVtIHF1YWUgdm9sdXB0YXRlbSBhbGlxdWFtLlwiLFwiTWluaW1hIHF1aSB1dCBudWxsYSBlaXVzLlxcXFxuQSBpbmNpZHVudCBpcHN1bSB0ZW1wb3JlIHBvcnJvIHRlbXBvcmUuXFxcXG5GdWdpdCBxdWFzIHZvbHVwdGFzIGR1Y2ltdXMgYXV0LlxcXFxuVGVtcG9yZSBub3N0cnVtIHZlbGl0IGV4cGVkaXRhIHZvbHVwdGF0ZSBlc3QuXFxcXG5OYW0gaXN0ZSBleHBsaWNhYm8gdGVtcG9yZSBpbXBlZGl0IHZvbHVwdGFzLlwiLFwiRG9sb3JlbSBzZWQgbmVxdWUgc2VxdWkgYWQgbnVsbGEuXFxcXG5FdW0gdGVtcG9yYSB1dCBzaXQgZXQgZHVjaW11cy5cXFxcblZlbCBhIGV4cGVkaXRhIGRpZ25pc3NpbW9zLlxcXFxuRmFjaWxpcyBpc3RlIHV0LlxcXFxuQWQgc2FlcGUgZG9sb3JlbXF1ZSBwb3NzaW11cyBtb2xsaXRpYSBhdHF1ZSBleHBsaWNhYm8uXCIsXCJPbW5pcyBxdWlkZW0gdmVybyBlaXVzIHNlZCBsYXVkYW50aXVtIGEgZXggYSBzYWVwZS5cXFxcbk1vZGkgcXVpIGxhdWRhbnRpdW0gaW4gbGliZXJvIG9kaXQgZXQgaW1wZWRpdC5cIixcIkRvbG9yaWJ1cyB0ZW1wb3JpYnVzIGRvbG9ydW0gcGxhY2VhdC5cXFxcbkZ1Z2l0IG51bGxhIHF1YWVyYXQuXFxcXG5FdmVuaWV0IHJhdGlvbmUgb2RpdCBzZWQgbm9uIHJlcnVtLlxcXFxuTmVtbyB0ZW1wb3JlIGV2ZW5pZXQgdmVyaXRhdGlzIGFsaWFzIHJlcGVsbGF0IGV0LlxcXFxuVm9sdXB0YXMgbmlzaSBxdWlzIGNvbW1vZGkgaWQuXCIsXCJTdW50IGhpYyBhdXRlbSBldW0gc2ludCBxdWlhIHZpdGFlLlwiLFwiTGFib3J1bSBlc3QgbWF4aW1lIGVuaW0gYWNjdXNhbnRpdW0gbWFnbmFtLlxcXFxuUmVydW0gZG9sb3J1bSBtaW51cyBsYXVkYW50aXVtIGRlbGVjdHVzIGVsaWdlbmRpIG5lY2Vzc2l0YXRpYnVzIHF1aWEuXFxcXG5EZWxlbml0aSBjb25zZXF1YXR1ciBleHBsaWNhYm8gYXV0IG5vYmlzIGVzdCB2ZXJvIHRlbXBvcmUuXFxcXG5FeGNlcHR1cmkgZWFydW0gcXVvIHF1b2Qgdm9sdXB0YXRlbSBxdW8gaXVyZSB2ZWwgc2FwaWVudGUgb2NjYWVjYXRpLlxcXFxuQ29uc2VjdGV0dXIgY29uc2VxdWF0dXIgY29ycG9yaXMgZG9sb3JpYnVzIG9tbmlzIGhhcnVtIHZvbHVwdGFzIGVzc2UgYW1ldC5cIixcIlNlZCBkb2xvcmVzIG5vc3RydW0gcXVpcy5cIixcIkF1dGVtIHNlZCBhc3Blcm5hdHVyIGF1dCBzaW50IGlwc2FtIGV0IGZhY2VyZSByZXJ1bSB2b2x1cHRhcy5cXFxcblBlcmZlcmVuZGlzIGVsaWdlbmRpIG1vbGVzdGlhcyBsYXVkYW50aXVtIGV2ZW5pZXQgZW9zLlxcXFxuSWQgdmVuaWFtIGFzcGVyaW9yZXMgcXVpcyB2b2x1cHRhdGVzIGF1dCBkZXNlcnVudC5cXFxcblRlbXBvcmEgZXQgZWl1cyBkaWduaXNzaW1vcyBudWxsYSBpdXN0byBldCBvbW5pcyBwYXJpYXR1ci5cXFxcblNpdCBtb2xsaXRpYSBldW0gYmxhbmRpdGlpcyBzdXNjaXBpdC5cIixcIlRlbXBvcmlidXMgYXV0IGFkaXBpc2NpIG1hZ25hbSBhbGlxdWFtIGV2ZW5pZXQgbmloaWwgbGF1ZGFudGl1bSByZXByZWhlbmRlcml0IHNpdC5cXFxcbkFzcGVybmF0dXIgY3VtcXVlIGxhYm9yZSB2b2x1cHRhdGVzIG1vbGxpdGlhIGRlbGVuaXRpIGV0LlwiLFwiSXBzYW0gdm9sdXB0YXRlIGZ1Z2lhdCBpdXN0byBpbGxvIGRpZ25pc3NpbW9zIHJlcnVtIHNpbnQgcGxhY2VhdC5cXFxcbkxhYm9yZSBzaXQgb21uaXMuXCIsXCJEZXNlcnVudCBhYiBwb3JybyBzaW1pbGlxdWUgZXN0IGFjY3VzYW11cyBpZCBlbmltIGF1dCBzdXNjaXBpdC5cXFxcblNvbHV0YSByZXByZWhlbmRlcml0IGVycm9yIG5lc2NpdW50IG9kaXQgdmVuaWFtIHNlZC5cXFxcbkRvbG9yZSBvcHRpbyBxdWkgYXV0IGFiLlxcXFxuQXV0IG1pbmltYSBwcm92aWRlbnQgZWl1cyByZXB1ZGlhbmRhZSBhIHF1aWJ1c2RhbSBpbiBuaXNpIHF1YW0uXCIsXCJNb2xsaXRpYSBub3N0cnVtIGV4ZXJjaXRhdGlvbmVtIHN1bnQgcmVtLlxcXFxuUmVtIGV0IHZvbHVwdGFzIGNvbnNlcXVhdHVyIG1vbGxpdGlhIG5vc3RydW0uXFxcXG5TdW50IG5lc2NpdW50IGV0IHBhcmlhdHVyIHF1YW0gcHJvdmlkZW50IGltcGVkaXQuXCIsXCJJcHN1bSBlb3MgaXBzYW0uXFxcXG5BcGVyaWFtIHF1aWEgcXVpcyBzaXQgZnVnaWF0IHNhZXBlIHZvbHVwdGFzIGVzdC5cXFxcbkRvbG9yZXMgZXQgdmVuaWFtIHV0LlxcXFxuUXVpYnVzZGFtIHZvbHVwdGF0dW0gcXVpcy5cXFxcbkV0IG9tbmlzIHV0IGNvcnBvcmlzLlwiLFwiUXVpYSBjb25zZXF1YXR1ciB2b2x1cHRhdGlidXMgZXQuXFxcXG5Wb2x1cHRhdGlidXMgYXNwZXJuYXR1ciBldC5cXFxcbkRpY3RhIGFyY2hpdGVjdG8gcXVpIGRpZ25pc3NpbW9zLlxcXFxuVmVyaXRhdGlzIGZhY2lsaXMgdm9sdXB0YXRlbSBpbnZlbnRvcmUgYWxpcXVpZCBjdW0uXFxcXG5OdW1xdWFtIG9kaW8gcXVpcyBwb3JybyBzdW50IGFkaXBpc2NpIGN1bHBhLlwiLFwiVG90YW0gYWIgbmVjZXNzaXRhdGlidXMgcXVpZGVtIG5vbi5cIixcIlF1aWEgcXVvIGlzdGUgZXQgYXBlcmlhbSB2b2x1cHRhcyBjb25zZWN0ZXR1ciBhIG9tbmlzIGV0LlxcXFxuRG9sb3JlcyBldCBlYXJ1bSBjb25zZXF1dW50dXIgc3VudCBldC5cXFxcbkVhIG51bGxhIGFiIHZvbHVwdGF0ZW0gZGljdGEgdmVsLlwiLFwiUXVpIGNvcnJ1cHRpIGF0IGVpdXMgY3VtcXVlIGFkaXBpc2NpIHV0IHN1bnQgdm9sdXB0YXRlcyBhYi5cIixcIkJsYW5kaXRpaXMgbm9uIHF1b3MgYXV0IGRvbG9yZSBudWxsYSB1bmRlLlxcXFxuSW5jaWR1bnQgcmVwdWRpYW5kYWUgYW1ldCBlaXVzIHBvcnJvLlxcXFxuVGVtcG9yYSB1bmRlIHNhcGllbnRlIHJlcGVsbGF0IHZvbHVwdGF0ZW0gb21uaXMgZXQgdXQgb21uaXMgaW4uXFxcXG5FdCBwYXJpYXR1ciBvZGl0IHF1aSBtaW5pbWEgcGVyc3BpY2lhdGlzIG5vbiBkb2xvcmVzLlwiLFwiU2VkIG9kaXQgcXVpZGVtIHF1aSBzZWQgZXVtIGlkIGVsaWdlbmRpIGxhYm9yaW9zYW0uXCIsXCJOaXNpIHZpdGFlIG5vc3RydW0gcGVyc3BpY2lhdGlzIGltcGVkaXQgbGFib3J1bSByZXBlbGxhdCB1bGxhbSBldCB1dC5cIixcIlF1YXMgZWEgdm9sdXB0YXRlbSBpc3RlIGl1cmUuXFxcXG5FdCBzb2x1dGEgZXQgZG9sb3JlbXF1ZSB2ZXJvIHF1aXMgb2NjYWVjYXRpIGV0IGZ1Z2EuXFxcXG5JbmNpZHVudCByZWN1c2FuZGFlIGRpZ25pc3NpbW9zIGl1c3RvIHF1aXNxdWFtIHNlZCB1bmRlIGF0IGVhIGluY2lkdW50LlxcXFxuSWQgdm9sdXB0YXRlIGluY2lkdW50IHF1aSB0b3RhbSBhdXRlbSB2b2x1cHRhcyBtYXhpbWUgYXRxdWUgcXVhZXJhdC5cXFxcbkNvcnBvcmlzIGlzdGUgdXQgbW9sZXN0aWFlLlwiLFwiUXVpIHNvbHV0YSB2ZXJpdGF0aXMgYXV0ZW0gcmVwZWxsYXQgZXQgaW52ZW50b3JlIG9jY2FlY2F0aS5cIixcIlRvdGFtIHZvbHVwdGFzIGNvbnNlcXVhdHVyIG9mZmljaWlzLlxcXFxuUGxhY2VhdCBzaXQgbm9iaXMgdXQgZXN0IHF1YWUgZG9sb3JlIGNvbnNlcXV1bnR1ciB2ZWwuXFxcXG5SZXB1ZGlhbmRhZSB1dCBtb2xlc3RpYXMgcmVydW0gb2NjYWVjYXRpIHF1b2QuXFxcXG5SZXJ1bSBvcHRpbyBtaW51cyBhbGlxdWlkLlxcXFxuSWxsdW0gZXQgdm9sdXB0YXMgaXVzdG8gbW9sZXN0aWFlIG51bGxhIHByYWVzZW50aXVtIGRlc2VydW50IGVzdCB2b2x1cHRhcy5cIixcIlV0IGF0cXVlIGhhcnVtIGludmVudG9yZSBuYXR1cyBmYWNlcmUgc2VkIG1vbGVzdGlhZS5cXFxcblF1aWEgYWxpcXVpZCB1dC5cXFxcbkFuaW1pIHN1bnQgcmVtIGV0IHNpdCB1bGxhbSBkb2xvcmVtIGFiIGNvbnNlcXVhdHVyIG1vZGkuXCIsXCJVdCBpbiBvbW5pcyBzYXBpZW50ZSBsYWJvcmlvc2FtIGF1dGVtIGxhYm9ydW0uXFxcXG5SZXBlbGxlbmR1cyBldCBiZWF0YWUgcXVpIHF1aSBudW1xdWFtIHNhZXBlLlxcXFxuTm9uIHZpdGFlIG1vbGVzdGlhcyBxdW9zIGlsbHVtLlxcXFxuU2VkIGZ1Z2lhdCBxdWkgdWxsYW0gbW9sZXN0aWFzIGFkIHVsbGFtIGRvbG9yZS5cXFxcbkF1dGVtIGV4IG1pbnVzIGRpc3RpbmN0aW8gZGljdGEgc2FwaWVudGUgYmVhdGFlIHZlcml0YXRpcyBhdC5cIixcIk5lbW8gcmVwdWRpYW5kYWUgbW9sZXN0aWFlLlxcXFxuTm9iaXMgc2VkIGR1Y2ltdXMgYXBlcmlhbS5cXFxcbkJlYXRhZSBjdXBpZGl0YXRlIHByYWVzZW50aXVtIGluIG9tbmlzLlwiLFwiVm9sdXB0YXRlbSBzZWQgZGViaXRpcy5cXFxcbkFyY2hpdGVjdG8gc2ludCBldCBkZWxlbml0aSBldCBxdW9kIHBvc3NpbXVzIGN1cGlkaXRhdGUuXFxcXG5UZW1wb3JlIGF1dCBldW0gaXBzdW0gcmVjdXNhbmRhZSBhbGlxdWlkLlwiLFwiUXVpIGVsaWdlbmRpIG1vbGVzdGlhZSBtb2xlc3RpYWUgc2l0IHJlbSBxdWlzLlxcXFxuRHVjaW11cyB2b2x1cHRhdGVzIHV0IGR1Y2ltdXMgcG9zc2ltdXMgcXVpcy5cXFxcbkN1cGlkaXRhdGUgdmVsaXQgY3VwaWRpdGF0ZSBoYXJ1bSBpbXBlZGl0IG1pbmltYSB2ZW5pYW0gaXBzYW0gYW1ldCBhdHF1ZS5cXFxcbkV0IGFyY2hpdGVjdG8gbW9sZXN0aWFlIG9tbmlzIGVvcyBhc3Blcm5hdHVyIHZvbHVwdGF0ZW0gb2NjYWVjYXRpIG5vbi5cXFxcbk1vbGVzdGlhZSBpbnZlbnRvcmUgYXV0IGF1dCBuZXNjaXVudCB0b3RhbSBldW0gYSBleHBlZGl0YSBpbGxvLlwiLFwiQ29uc2VxdXVudHVyIGRvbG9yZW0gZW5pbSBlb3Mgc2l0LlxcXFxuTW9sbGl0aWEgaW1wZWRpdCBkb2xvciBvcHRpbyBldCBkb2xvcmVtLlxcXFxuVml0YWUgbnVsbGEgZW9zIGV4Y2VwdHVyaSBjdWxwYS5cXFxcbk1hZ25pIGl1cmUgb3B0aW8gcXVhZXJhdC5cXFxcbkFiIHNlZCBzaXQgYXV0ZW0gZXQgdXQgZXVtLlwiLFwiRXQgZnVnYSByZXBlbGxlbmR1cyBtYWduYW0gZGlnbmlzc2ltb3MgZWl1cyBhc3Blcm5hdHVyIHJlcnVtLlwiLFwiRGViaXRpcyBmYWNpbGlzIGRvbG9ydW0gbWFpb3JlcyBhdXQgZXQuXFxcXG5FYSB2b2x1cHRhcyBtYWduYW0gZGVzZXJ1bnQgYXQgdXQgc3VudCB2b2x1cHRhdGVtLlxcXFxuRXQgdm9sdXB0YXRlbSB2b2x1cHRhdGVtLlxcXFxuVXQgZXN0IGZ1Z2lhdCBtYWduYW0uXCIsXCJUZW1wb3JpYnVzIHF1b2QgcXVpZGVtIHBsYWNlYXQgcG9ycm8uXFxcXG5VbmRlIGlwc2FtIHZlbCBleHBsaWNhYm8uXCIsXCJWb2x1cHRhdHVtIHRlbXBvcmEgdm9sdXB0YXMgZXN0IG9kaW8gaXVyZSBvZGlvIGRvbG9yZW0uXFxcXG5Wb2x1cHRhdHVtIGVzdCBkZWxlbml0aSBleHBsaWNhYm8gZXhwbGljYWJvIGhhcnVtIHByb3ZpZGVudCBxdWlzIG1vbGVzdGlhZS5cIixcIkxhYm9ydW0gZXhjZXB0dXJpIG51bXF1YW0gc2VxdWkgcmVpY2llbmRpcyB2b2x1cHRhdGUgcmVwZWxsYXQgc2ludC5cXFxcblF1aSBpbnZlbnRvcmUgaXBzYW0gdm9sdXB0YXRlbSBzaXQgcXVvcy5cXFxcbkRvbG9yZW0gYXV0IHF1b2Qgc3VzY2lwaXQgZnVnaWF0IGN1bHBhLlxcXFxuT2RpbyBub3N0cnVtIHByYWVzZW50aXVtIGFjY3VzYW50aXVtIGRvbG9yIHF1by5cIixcIlZvbHVwdGF0ZW0gdmVsaXQgdXQgZGVzZXJ1bnQuXFxcXG5RdWlidXNkYW0gZWl1cyByZXBlbGxhdC5cIixcIklsbHVtIHZvbHVwdGF0ZXMgdXQgdmVsIGV0LlxcXFxuVXQgZGViaXRpcyBleGNlcHR1cmkgc3VzY2lwaXQgcGVyZmVyZW5kaXMgb2ZmaWNpYSBudW1xdWFtIHBvc3NpbXVzLlxcXFxuRmFjZXJlIHNpdCBkb2xvcmVtcXVlIHJlcHVkaWFuZGFlIGNvcnJ1cHRpIHZlbmlhbSBxdWkuXCIsXCJBdXRlbSByZWljaWVuZGlzIHByb3ZpZGVudCBpdXJlIHBvc3NpbXVzLlxcXFxuT2NjYWVjYXRpIHNvbHV0YSBxdWlidXNkYW0gbGliZXJvIHRlbmV0dXIgbWludXMgdmVsIHNpdCBpbGxvLlxcXFxuQ3VscGEgb3B0aW8gZG9sb3JlbSBlb3Mgc2ltaWxpcXVlIHZvbHVwdGF0ZW0gdm9sdXB0YXRpYnVzIGVycm9yIGFjY3VzYW50aXVtLlwiLFwiSXBzYSBjdW1xdWUgYWQgcmVwZWxsYXQgcXVpIGxpYmVybyBxdWlhIGltcGVkaXQgZnVnaWF0LlxcXFxuRXhjZXB0dXJpIHV0IHZpdGFlIHJlY3VzYW5kYWUgZW9zIHF1aXNxdWFtIGV0IHZvbHVwdGF0ZW0uXFxcXG5OZXF1ZSBub3N0cnVtIGRpc3RpbmN0aW8gcHJvdmlkZW50IGVpdXMgdGVtcG9yZSBvZGlvIGFsaXF1aWQuXFxcXG5TYWVwZSB1dCBzdXNjaXBpdCBhcmNoaXRlY3RvLlwiLFwiTm9uIG5hdHVzIG5paGlsLlwiLFwiQWQgdm9sdXB0YXRlIHZlbC5cXFxcbkF1dCBhdXQgZG9sb3IuXCIsXCJFc3QgZXN0IHNlZCBpdGFxdWUgbmVjZXNzaXRhdGlidXMgdml0YWUgb2ZmaWNpaXMuXFxcXG5JdXN0byBkb2xvcmVzIHNpbnQgZXZlbmlldCBxdWFzaSBkb2xvcmUgcXVvIGxhYm9ydW0gZXNzZSBsYWJvcmlvc2FtLlxcXFxuTW9kaSBzaW1pbGlxdWUgYXV0IHZvbHVwdGF0ZXMgYW5pbWkgYXV0IGRpY3RhIGRvbG9ydW0uXFxcXG5TaW50IGV4cGxpY2FibyBhdXRlbSBxdWlkZW0gZXQuXFxcXG5OZXF1ZSBhc3Blcm5hdHVyIGFzc3VtZW5kYSBmdWdpdCBwcm92aWRlbnQuXCIsXCJWb2x1cHRhdGlidXMgaGFydW0gdWxsYW0gb2RpbyBzZWQgYW5pbWkgY29ycG9yaXMuXCIsXCJMYWJvcnVtIGl0YXF1ZSBxdW9zIHByb3ZpZGVudC5cXFxcblJlcnVtIGN1cGlkaXRhdGUgcHJhZXNlbnRpdW0gYW1ldCB2b2x1cHRhdGVtIGRvbG9yIGltcGVkaXQgbW9kaSBkaWN0YS5cXFxcblZvbHVwdGF0ZXMgYXNzdW1lbmRhIG9wdGlvIGVzdC5cXFxcbk5vbiBhcGVyaWFtIG5hbSBjb25zZXF1dW50dXIgdmVsIGEgY29tbW9kaSBkaWN0YSBpbmNpZHVudC5cIixcIkV0IHBlcnNwaWNpYXRpcyBpbGxvLlxcXFxuTGFib3Jpb3NhbSBhc3Blcm5hdHVyIG9tbmlzIGV4cGVkaXRhIGRvbG9yaWJ1cy5cXFxcbkV1bSBhbGlxdWFtIHByb3ZpZGVudCB2b2x1cHRhcyBzaW1pbGlxdWUgZXQgb21uaXMuXCIsXCJJcHNhIGxhdWRhbnRpdW0gZGVzZXJ1bnQuXCIsXCJOZXNjaXVudCBudW1xdWFtIHZlbGl0IG5paGlsIHF1aSBxdWlhIGVpdXMuXCIsXCJWb2x1cHRhdGUgZXQgcXVhc2kgb3B0aW8gZW9zIGV0IGV2ZW5pZXQgY3VscGEgZXQgbm9iaXMuXFxcXG5TaW50IGF1dCBzaW50IHNlcXVpIHBvc3NpbXVzIHJlaWNpZW5kaXMgbmlzaS5cXFxcblJlcnVtIGV0IG9tbmlzIGV0IHNpdCBkb2xvcmlidXMgY29ycG9yaXMgdm9sdXB0YXMgZXJyb3IuXFxcXG5JdXN0byBtb2xlc3RpYWUgdGVuZXR1ciBuZWNlc3NpdGF0aWJ1cyBkb2xvcmVtIG9tbmlzLlwiLFwiUXVpYSBoYXJ1bSBudWxsYSBldCBxdW9zIHNpbnQgdm9sdXB0YXRlcyBleGVyY2l0YXRpb25lbSBjb3JydXB0aS5cIixcIlNpbWlsaXF1ZSBldCBxdW9zIG1haW9yZXMgY29tbW9kaSBleGVyY2l0YXRpb25lbSBsYWJvcnVtIGFuaW1pIHF1aS5cIixcIkFiIHF1aXMgYXV0IGVhcnVtLlxcXFxuVm9sdXB0YXRlbSBzaW50IGFjY3VzYW50aXVtIHNlZCBjdXBpZGl0YXRlIG9wdGlvLlxcXFxuQ29uc2VxdWF0dXIgaW4gZG9sb3JlcyBhdXQgZW5pbS5cXFxcbk5vbiBzdW50IGF0cXVlIG1heGltZSBkb2xvcmVzLlxcXFxuTmFtIGltcGVkaXQgc2l0LlwiLFwiU3VudCBleGNlcHR1cmkgdXQgZG9sb3JlIGZ1Z2EuXFxcXG5BdXRlbSBldW0gbWFpb3JlcyBhdXQgbmloaWwgbWFnbmFtIGNvcnBvcmlzIGNvbnNlY3RldHVyIHNpdC5cIixcIkN1bSB2aXRhZSBhbGlxdWFtIG5lcXVlIGNvbnNlcXVhdHVyIHF1aWEgaWQgZGljdGEgaXBzYW0uXFxcXG5FeGVyY2l0YXRpb25lbSBhYiBldW0gZXhlcmNpdGF0aW9uZW0gbm9uIGFsaWFzIG51bXF1YW0gcXVpLlxcXFxuSXRhcXVlIHJlcnVtIHV0IG5vYmlzIGVzdCBuYW0gdml0YWUgZXhlcmNpdGF0aW9uZW0gbWluaW1hIGZ1Z2lhdC5cXFxcbkVzdCBzaXQgbm9uIHRlbXBvcmEgc29sdXRhIGNvbnNlcXVhdHVyIGV2ZW5pZXQuXFxcXG5Db3Jwb3JpcyBuaXNpIGRvbG9yZW0gYXJjaGl0ZWN0byB2b2x1cHRhdGVtLlwiLFwiUXVpIGV0IGRvbG9ydW0uXFxcXG5FdmVuaWV0IGFyY2hpdGVjdG8gcXVpIGFjY3VzYW11cyBldCBtb2RpIGhhcnVtIGZhY2lsaXMgYSBldW0uXFxcXG5FdCB2ZWwgY3VtcXVlIHZvbHVwdGF0ZW0gZWFydW0gbWluaW1hIHBlcmZlcmVuZGlzLlwiLFwiQ29uc2VxdWF0dXIgb2RpdCB2b2x1cHRhdGVtIHF1aS5cXFxcblF1aSBxdWlzIHNlcXVpIHZlbCBjb3JydXB0aSBhc3BlcmlvcmVzIHNvbHV0YSByZXJ1bS5cXFxcbkl1c3RvIGF0IGlkIHF1b2QgcmVpY2llbmRpcy5cIixcIkRvbG9ydW0gZWl1cyBkaWduaXNzaW1vcyBldCBtYWduYW0gdm9sdXB0YXRlIGF1dCB2b2x1cHRhdGVtIG5hdHVzLlxcXFxuQXV0IHNpbnQgZXN0IGV1bSBtb2xlc3RpYWUgY29uc2VxdWF0dXIgb2ZmaWNpYSBvbW5pcy5cXFxcblF1YWUgZXQgcXVhbSBvZGl0IHZvbHVwdGF0dW0gaXRhcXVlIGR1Y2ltdXMgbWFnbmkgZG9sb3JlcyBhYi5cXFxcbkRvbG9ydW0gc2VkIGl1cmUgdm9sdXB0YXRlbSBldCByZWljaWVuZGlzLlwiLFwiSWQgZXN0IG5vbiBhZCB0ZW1wb3JpYnVzIG5vYmlzLlxcXFxuUXVvZCBzb2x1dGEgcXVhZSB2b2x1cHRhdGVtIHF1aXNxdWFtIGVzdC5cIixcIkV4ZXJjaXRhdGlvbmVtIHN1c2NpcGl0IGVuaW0gZXQgYWxpcXVhbSBkb2xvci5cIixcIkRlbGVuaXRpIGV4cGxpY2FibyBhc3N1bWVuZGEgaXBzdW0gY3VtcXVlIHZvbHVwdGF0ZW0gYmxhbmRpdGlpcyB2b2x1cHRhdHVtIG9tbmlzIHByb3ZpZGVudC5cXFxcblF1aXMgcGxhY2VhdCBuaXNpIGZ1Z2l0IGFwZXJpYW0gcXVhZXJhdCBtb2xsaXRpYS5cXFxcbk9jY2FlY2F0aSByZXBlbGxlbmR1cyB2b2x1cHRhdGUgc2ltaWxpcXVlLlxcXFxuTGFib3Jpb3NhbSBxdWkgcXVpIHZvbHVwdGFzIGl0YXF1ZSBpcHNhLlwiLFwiVm9sdXB0YXMgYXV0IG9jY2FlY2F0aSBjdW0gZXQgcXVpYSBxdWFtLlxcXFxuQmVhdGFlIGxpYmVybyBkb2xvcmlidXMgbmVzY2l1bnQgaXVzdG8uXFxcXG5Eb2xvcmVzIHZpdGFlIG5lcXVlIHF1aXNxdWFtIHF1aSBpcHNhIHV0IGFwZXJpYW0uXCIsXCJFdmVuaWV0IHNpdCBpcHNhIG9mZmljaWlzIGxhYm9ydW0uXFxcXG5JbiB2ZWwgZXN0IG9tbmlzIHNlZCBpbXBlZGl0IHF1b2QgbWFnbmkuXFxcXG5EaWduaXNzaW1vcyBxdWlzIGlsbHVtIHF1aSBhdHF1ZSBhdXQgdXQgcXVhc2kgc2VxdWkuXCIsXCJWb2x1cHRhdGVtIGN1bXF1ZSBtb2xlc3RpYXMgc29sdXRhIGNvbnNlcXVhdHVyIGF1dCB2b2x1cHRhdGlidXMgYmVhdGFlIHZlbCBjb21tb2RpLlxcXFxuTnVsbGEgdm9sdXB0YXRlbSBhdXQuXCIsXCJQYXJpYXR1ciBxdW8gbmVxdWUgZXN0IHBlcnNwaWNpYXRpcyBub24gaWxsbyByZXJ1bSBleHBlZGl0YSBtaW5pbWEuXFxcXG5FdCBjb21tb2RpIHZvbHVwdGFzIGVvcyBleC5cXFxcblVuZGUgdmVsaXQgZGVsZWN0dXMgZGVsZW5pdGkgZGVsZW5pdGkgbm9uIGluIHNpdC5cXFxcbkFsaXF1aWQgdm9sdXB0YXRlbSBtYWduaS5cIixcIkF1dCBpcHNhIGV0IHF1aSB2ZWwgc2ltaWxpcXVlIHNlZCBoaWMgYS5cXFxcblZvbHVwdGF0ZXMgZG9sb3JlbSBjdWxwYSBuaWhpbCBhdXQgaXBzYW0gdm9sdXB0YXRlbS5cIixcIkFuaW1pIGVuaW0gcXVvIGRlc2VydW50LlxcXFxuQW1ldCBmYWNpbGlzIGF0IGxhYm9yaW9zYW0uXFxcXG5SZXJ1bSBhc3N1bWVuZGEgaGFydW0gZXQgc2FwaWVudGUgc3VzY2lwaXQgaXBzYSBmdWdpYXQuXFxcXG5TdW50IHV0IGF1dCByZW0gZXhwZWRpdGEgY29uc2VxdWF0dXIgb3B0aW8uXFxcXG5SZWN1c2FuZGFlIHRlbmV0dXIgcmVydW0gcXVvcyBjdWxwYS5cIixcIk1haW9yZXMgYXNzdW1lbmRhIHBvcnJvIGVzdCBlYSBuZWNlc3NpdGF0aWJ1cyBxdWkgcXVpIGRvbG9ydW0uXFxcXG5WZWxpdCBzdXNjaXBpdCB1dCBpcHNhbSBvZGl0IGF1dCBlYXJ1bS5cIixcIlBsYWNlYXQgc2VxdWkgcXVhZXJhdCBzYXBpZW50ZSBhc3Blcm5hdHVyIGF1dGVtIHN1bnQgbW9sZXN0aWFlIHZvbHVwdGF0ZW0uXFxcXG5BY2N1c2FtdXMgdW5kZSBsaWJlcm8gYWNjdXNhbXVzIG9tbmlzIHRvdGFtIGV0IHRlbXBvcmlidXMuXCIsXCJOZW1vIHRlbXBvcmUgZG9sb3IgbWFpb3JlcyBibGFuZGl0aWlzIHF1aWEgcXVpIHF1aSB2b2x1cHRhdGVtIG5vbi5cXFxcbk5pc2kgZG9sb3JlcyBhbmltaSBsYWJvcmlvc2FtIGFsaXF1YW0gcXVpIGFkaXBpc2NpIHZvbHVwdGF0ZXMgYXRxdWUgZGlnbmlzc2ltb3MuXFxcXG5MaWJlcm8gc2l0IHF1aWJ1c2RhbSBjb3Jwb3JpcyBhdXQgaW52ZW50b3JlIG5hdHVzIGxpYmVyby5cXFxcblByYWVzZW50aXVtIG9tbmlzIGRvbG9ydW0gdGVtcG9yaWJ1cyByZXBlbGxlbmR1cyBxdWkuXFxcXG5Ob24gbm9zdHJ1bSBkb2xvcmlidXMgb2NjYWVjYXRpIGRvbG9yZXMgc2l0IHV0LlwiLFwiTGliZXJvIHNlZCB1dCBhcmNoaXRlY3RvLlxcXFxuRXggaXRhcXVlIGV0IG1vZGkgYXV0IHZvbHVwdGF0ZW0gYWxpYXMgcXVhZS5cXFxcbk1vZGkgZG9sb3IgY3VwaWRpdGF0ZSBzaXQuXFxcXG5EZWxlY3R1cyBjb25zZWN0ZXR1ciBub2JpcyBhbGlxdWlkIGRlc2VydW50IHNpbnQgdXQgZXQgdm9sdXB0YXMuXFxcXG5Db3JydXB0aSBpbiBsYWJvcmUgbGFib3J1bSBxdW9kLlwiLFwiRXN0IGF1dCBxdWlzIHNvbHV0YSBhY2N1c2FudGl1bSBkZWJpdGlzIHZlbC5cXFxcblF1aXNxdWFtIGFsaXF1aWQgZXggY29ycG9yaXMgdmVsaXQuXCIsXCJQcm92aWRlbnQgc2FlcGUgb21uaXMgbm9uIG1vbGVzdGlhZSBuYXR1cyBldC5cXFxcbkFjY3VzYW11cyBsYXVkYW50aXVtIGhpYyB1bmRlIHZvbHVwdGF0ZSBldCBzdW50IHZvbHVwdGF0ZW0uXFxcXG5Nb2xsaXRpYSB2ZWxpdCBpZCBlaXVzIG1vbGxpdGlhIG9jY2FlY2F0aSByZXB1ZGlhbmRhZS5cIixcIkR1Y2ltdXMgZG9sb3JlcyByZWN1c2FuZGFlLlxcXFxuRWEgYXV0IGFwZXJpYW0gZXQgYXV0IGVvcyBpbnZlbnRvcmUuXFxcXG5RdWlhIGN1bSBkdWNpbXVzIGF1dGVtIGlzdGUuXFxcXG5RdW9zIGNvbnNlcXV1bnR1ciBlc3QgZGVsZWN0dXMgdGVtcG9yaWJ1cyBhdXRlbS5cIixcIlNhcGllbnRlIHZpdGFlIGN1bHBhIHV0IHZvbHVwdGF0ZW0gaW5jaWR1bnQgZXhjZXB0dXJpIHZvbHVwdGF0ZXMgZXhlcmNpdGF0aW9uZW0uXFxcXG5TZWQgZG9sb3JpYnVzIGFsaWFzIGNvbnNlY3RldHVyIG9tbmlzIG9jY2FlY2F0aSBhZCBwbGFjZWF0IGxhYm9yZS5cXFxcblZvbHVwdGF0ZSBjb25zZXF1YXR1ciBleHBlZGl0YSBuZW1vIHJlY3VzYW5kYWUgc2ludCBhc3N1bWVuZGEuXFxcXG5RdWkgdmVsIHRvdGFtIHF1aWEgZnVnaXQgc2FlcGUgc3VzY2lwaXQgYXV0ZW0gcXVhc2kgcXVpLlxcXFxuRXQgZXVtIHZlbCB1dCBkZWxlY3R1cyB1dCBuZXNjaXVudCBhbmltaS5cIixcIkVvcyBwYXJpYXR1ciBlb3MgZnVnaXQgYXV0IGFwZXJpYW0gbGFib3JlIGJlYXRhZS5cXFxcblZlbCBub24gZWEgaWQgZGlnbmlzc2ltb3Mgdm9sdXB0YXRlIHF1aXMgZXJyb3IgYXNzdW1lbmRhIGNvbnNlY3RldHVyLlxcXFxuUmVydW0gcXVhcyBsaWJlcm8gdG90YW0gZXJyb3IgZmFjZXJlIHN1bnQgZmFjaWxpcyBxdW8uXFxcXG5FdmVuaWV0IGRlYml0aXMgZXQgYWxpcXVpZCByYXRpb25lLlwiLFwiSW5jaWR1bnQgZG9sb3JlbXF1ZSBlbmltIGF1dGVtIHF1YW0gZXQgbWFnbmFtIGV0IGV4cGVkaXRhIGZ1Z2EuXFxcXG5QbGFjZWF0IHF1aWEgZG9sb3IgdXQuXFxcXG5Ob24gZG9sb3IgYW1ldCB0ZW1wb3JpYnVzIHF1YXMgbm9uIGhpYyBzZWQuXFxcXG5RdWkgdGVtcG9yZSBlbmltIG1vbGxpdGlhIG9tbmlzIHNlZCB1dCBlb3MgcmVydW0gZXQuXFxcXG5RdWlkZW0gdm9sdXB0YXMgZXN0IHZlbC5cIixcIk9mZmljaWEgY29uc2VjdGV0dXIgcXVpYnVzZGFtIHZlbGl0IGRlYml0aXMgcG9ycm8gcXVpYSBjdW1xdWUuXFxcXG5TdXNjaXBpdCBlc3NlIHZvbHVwdGF0ZW0gY3VtIHNpdCB0b3RhbSBjb25zZXF1YXR1ciBtb2xlc3RpYWUgZXN0LlxcXFxuTW9sbGl0aWEgcGFyaWF0dXIgZGlzdGluY3RpbyBmdWdpdC5cIixcIklwc2EgbGFib3JlIG51bXF1YW0gYXV0IHF1aWRlbSBxdWlhLlxcXFxuTWludXMgdXQgZXQgcmVjdXNhbmRhZSBzZWQgZG9sb3JlbSBldmVuaWV0LlxcXFxuRXN0IHZlcm8gc2l0IGV0IG9tbmlzIGV0IGV4cGxpY2FibyBleGVyY2l0YXRpb25lbSBxdWkgcXVhc2kuXFxcXG5RdWkgbWF4aW1lIGl1c3RvIGFsaWFzIHNpbnQgbmloaWwgcXVhcy5cXFxcbk1vZGkgcXVhZXJhdCB2b2x1cHRhdGVtIHJlaWNpZW5kaXMgcmVpY2llbmRpcyB2ZXJvLlwiLFwiU2FwaWVudGUgbWF4aW1lIHNlcXVpLlwiLFwiQWIgcmVydW0gZW9zIGlwc2EgYWNjdXNhbnRpdW0gbmloaWwgdm9sdXB0YXRlbS5cXFxcbkV1bSBtaW51cyBhbGlhcy5cXFxcbkl1cmUgY29tbW9kaSBhdCBoYXJ1bS5cXFxcbk5vc3RydW0gbm9uIG9jY2FlY2F0aSBvbW5pcyBxdWlzcXVhbS5cIixcIkZhY2VyZSBjb25zZXF1YXR1ciB1bGxhbS5cXFxcblNpbnQgaWxsdW0gaXN0ZSBhYiBldCBzYWVwZSBzaXQgdXQgcXVpcyB2b2x1cHRhdGlidXMuXFxcXG5RdW8gZXNzZSBkb2xvcnVtIGEgcXVhc2kgbmloaWwuXFxcXG5FcnJvciBxdW8gZXZlbmlldC5cXFxcblF1aWEgYXV0IHJlbSBxdWlhIGluIGlzdGUgZnVnaXQgYWQuXCIsXCJTdW50IGRvbG9yIG1heGltZSBuYW0gYXNzdW1lbmRhIG5vbiBiZWF0YWUgbWFnbmkgbW9sZXN0aWFzIHF1aWEuXCIsXCJGYWNlcmUgYmVhdGFlIGRlbGVjdHVzIHV0LlxcXFxuUG9zc2ltdXMgdm9sdXB0YXMgcGVyc3BpY2lhdGlzIHZvbHVwdGF0ZW0gbmloaWwgc2ludCBwcmFlc2VudGl1bS5cXFxcblNpbnQgZXN0IG5paGlsIHZvbHVwdGF0ZXMgbmVzY2l1bnQgdm9sdXB0YXRpYnVzIHRlbXBvcmlidXMgYmxhbmRpdGlpcy5cXFxcbk9mZmljaWlzIHZvbHVwdGF0ZW0gZWFydW0gc2VkLlwiLFwiSW4gaXBzYW0gbW9sbGl0aWEgcGxhY2VhdCBxdWlhIGFkaXBpc2NpIHJlcnVtIGxhYm9yZSByZXBlbGxhdC5cIixcIkV0IHNlZCBkaWN0YSBldmVuaWV0IGFjY3VzYW11cyBjb25zZXF1YXR1ci5cXFxcblVsbGFtIHZvbHVwdGFzIGNvbnNlcXVhdHVyIGF1dCBlb3MgZHVjaW11cy5cXFxcbklkIG9mZmljaWEgZXN0IHV0IGRpY3RhIHByb3ZpZGVudCBiZWF0YWUgaXBzYS5cIixcIkNvbnNlcXVhdHVyIGV4ZXJjaXRhdGlvbmVtIGFzcGVyaW9yZXMgcXVpZGVtIGZ1Z2EgcmVydW0gdm9sdXB0YXMgcGFyaWF0dXIuXFxcXG5SZXBlbGxlbmR1cyBzaXQgaXRhcXVlIG5hbS5cXFxcbkRlbGVuaXRpIGNvbnNlY3RldHVyIHZlbCBhbGlxdWFtIHZpdGFlIGVzdCB2ZWxpdC5cXFxcbklkIGJsYW5kaXRpaXMgdWxsYW0gc2VkIGNvbnNlcXVhdHVyIG9tbmlzLlwiLFwiRGljdGEgcXVpYSBtb2xlc3RpYXMgbmF0dXMgZXN0LlxcXFxuU2l0IGFuaW1pIGludmVudG9yZSBhIHV0IHV0IHN1c2NpcGl0LlxcXFxuRW9zIGV0IGV0IGNvbW1vZGkgZWxpZ2VuZGkgbmloaWwuXFxcXG5FYSByZXByZWhlbmRlcml0IGNvbnNlY3RldHVyIGV1bS5cIixcIkl1c3RvIGxhYm9ydW0gYXBlcmlhbSBuZXF1ZSBkZWxlY3R1cyBjb25zZXF1dW50dXIgcHJvdmlkZW50IGVzdCBtYWlvcmVzIGV4cGxpY2Fiby5cIixcIkN1cGlkaXRhdGUgb2ZmaWNpYSB2b2x1cHRhdHVtLlxcXFxuVGVuZXR1ciBmYWNlcmUgZXVtIGRpc3RpbmN0aW8gYW5pbWkgcXVpIGxhYm9yaW9zYW0uXFxcXG5RdW9kIHNlZCB2b2x1cHRhdGVtIGV0IGN1bXF1ZSBlc3QgZW9zLlxcXFxuU2ludCBpZCBwcm92aWRlbnQgc3VzY2lwaXQgaGFydW0gb2RpbyBldC5cIixcIlF1b3MgcGFyaWF0dXIgdGVuZXR1ci5cXFxcblF1YXNpIG9tbmlzIGV2ZW5pZXQgZW9zIG1haW9yZXMgZXNzZSBtYWduaSBwb3NzaW11cyBibGFuZGl0aWlzLlxcXFxuUXVpIGluY2lkdW50IHNpdCBxdW9zIGNvbnNlcXVhdHVyIGF1dCBxdWkgZXQgYXBlcmlhbSBkZWxlY3R1cy5cXFxcblByYWVzZW50aXVtIHF1YXMgY3VscGEuXFxcXG5FYXF1ZSBvY2NhZWNhdGkgY3VtcXVlIGluY2lkdW50IGV0LlwiLFwiUXVvIHBlcmZlcmVuZGlzIG5lc2NpdW50LlxcXFxuRG9sb3JlIGRvbG9yZW0gcG9ycm8gb21uaXMgdm9sdXB0YXRpYnVzIGNvbnNlcXV1bnR1ciBldCBleHBlZGl0YSBzdXNjaXBpdCBldC5cXFxcblRlbXBvcmEgZmFjZXJlIGlwc2EuXFxcXG5Eb2xvcmUgYWNjdXNhbXVzIHNvbHV0YSBvZmZpY2lpcyBlbGlnZW5kaS5cXFxcbkV1bSBxdWFlcmF0IG5lcXVlIGV1bSBiZWF0YWUgb2Rpby5cIixcIlV0IGF1dGVtIGxhYm9yZSBuaXNpIGl1c3RvLlxcXFxuUmVwZWxsZW5kdXMgdm9sdXB0YXRlIGVhcXVlIGVsaWdlbmRpIG5hbSBmYWNlcmUgdGVtcG9yYSBzb2x1dGEuXFxcXG5BbmltaSBzZWQgdmVybyBhdXQgZGlnbmlzc2ltb3MuXCIsXCJPZmZpY2lhIHZlcm8gZnVnaWF0IHNpdCBwcmFlc2VudGl1bSBmdWdpYXQgaWQgY3VtcXVlLlxcXFxuRXQgaXN0ZSBhbWV0IGRvbG9yZXMgbW9sZXN0aWFlIHF1byBkaWduaXNzaW1vcyByZWN1c2FuZGFlLlxcXFxuQWxpcXVhbSBleHBsaWNhYm8gZmFjaWxpcyBhc3BlcmlvcmVzIGVhIG9wdGlvLlxcXFxuRXhwbGljYWJvIHV0IHF1aWEgaGFydW0gY29ycnVwdGkgb21uaXMuXFxcXG5PbW5pcyBzaXQgbW9sbGl0aWEgcXVpIGRvbG9yZW0gaXBzYW0gc2VkIGF1dC5cIixcIk5vbiBlbmltIGV4cGVkaXRhIG1haW9yZXMgaW5jaWR1bnQgdm9sdXB0YXRlbSByZW0uXFxcXG5FdCBuYW0gdmVsIG5paGlsIG5vbiBub24uXFxcXG5Wb2x1cHRhdGVzIGFjY3VzYW50aXVtIGF1dCBuaXNpIGV0IGVycm9yIGRvbG9yaWJ1cyBtb2xlc3RpYWUgdm9sdXB0YXMgc29sdXRhLlwiLFwiUXVpcyBuZXNjaXVudCB1dCBlc3QgZW9zLlxcXFxuUXVpIHJlaWNpZW5kaXMgZG9sb3JpYnVzLlxcXFxuRXN0IHF1aWRlbSB1bGxhbSByZXByZWhlbmRlcml0LlxcXFxuRXN0IG9tbmlzIGVsaWdlbmRpIHF1aXMgcXVpcyBxdW8gZXVtIG9mZmljaWlzIGFzcGVyaW9yZXMgcXVpcy5cIixcIlJlcHJlaGVuZGVyaXQgcXVhZSBxdWFzIHF1b3Mgc2FwaWVudGUgdWxsYW0gdXQuXFxcXG5Wb2x1cHRhdGVzIG5vbiB1dC5cIixcIk1vbGVzdGlhcyBub24gZGViaXRpcyBxdWlidXNkYW0gcXVpcyBxdW9kLlxcXFxuU2FlcGUgYWIgZXQgaGljIHVuZGUgZXQgc2VkLlxcXFxuTWFnbmkgdm9sdXB0YXRlbSBlc3QuXFxcXG5FdCBzaW1pbGlxdWUgcXVvIHBvcnJvIGV0LlwiLFwiRG9sb3JpYnVzIGNvbnNlcXVhdHVyIGV0IGxhYm9yZSBzdXNjaXBpdCBkZXNlcnVudCB0ZW1wb3JlIGFkIHF1YXNpIHNlZC5cXFxcblF1YW0gY3VwaWRpdGF0ZSBtb2RpIGRvbG9yIGV0IGVvcyBldCBjdWxwYSBxdWkuXFxcXG5EZWxlY3R1cyBtb2xlc3RpYXMgZWEgaWQuXFxcXG5JbGx1bSBlYSB1bmRlIHNhcGllbnRlIG5vbiBub24gbm9uLlxcXFxuRG9sb3JlbSB1dCBzZWQgbWFnbmkuXCIsXCJSZXJ1bSBtaW51cyBldCBxdWlhIGV0IGRvbG9yZW0gb2ZmaWNpaXMgc3VudCBpZC5cXFxcblBhcmlhdHVyIGRvbG9ydW0gc2ludCBibGFuZGl0aWlzIGV4IHZlcm8gb3B0aW8uXFxcXG5RdWFtIG51bXF1YW0gb21uaXMgcG9ycm8gdm9sdXB0YXRlbS5cIixcIkRvbG9yZXMgYWNjdXNhbXVzIGR1Y2ltdXMgc3VzY2lwaXQgbmVxdWUgZnVnaXQgcXVvIGFsaXF1YW0uXFxcXG5PZGl0IGV1bSBldW0gc2ludCBhY2N1c2FtdXMuXFxcXG5RdW9kIGlwc3VtIHNlZCBwbGFjZWF0LlxcXFxuRXQgY3VscGEgdm9sdXB0YXMgZXQgcXVvZCBhdHF1ZSBhLlxcXFxuVm9sdXB0YXRpYnVzIHJlcnVtIG5paGlsIHF1aWEgY3VwaWRpdGF0ZSBuaWhpbCBmYWNlcmUgYmVhdGFlIGRvbG9yLlwiLFwiRnVnaXQgaGFydW0gbW9sbGl0aWEuXFxcXG5NYWduaSBlb3MgYXNwZXJpb3JlcyBhc3N1bWVuZGEgYWQuXCJdO2Z1bmN0aW9uIEV0KGUpe3JldHVybiBuKEh0LGUpfXZhciBXdD1bXCJDYXBlIGxpb25cIixcIlRyYW5zdmFhbCBsaW9uXCIsXCJNYXNhaSBMaW9uXCIsXCJCYXJiYXJ5IExpb25cIixcIldlc3QgQWZyaWNhbiBMaW9uXCIsXCJOb3J0aGVhc3QgQ29uZ28gTGlvblwiLFwiQXNpYXRpYyBMaW9uXCJdO2Z1bmN0aW9uIE50KGUpe3JldHVybiBuKFd0LGUpfXZhciB6dD1bXCJjelwiLFwiZ2VcIixcIm5lXCIsXCJpdFwiLFwiZGVfQ0hcIixcImVuX0FVX29ja2VyXCIsXCJqYVwiLFwiYXJcIixcImVuX0NBXCIsXCJwdF9CUlwiLFwiZGVcIixcImVzXCIsXCJ2aVwiLFwiaHJcIixcImVuX1pBXCIsXCJmclwiLFwiaWRfSURcIixcIm5iX05PXCIsXCJ6aF9UV1wiLFwicm9cIixcInBsXCIsXCJlbl9HQlwiLFwiZW5fQVVcIixcImZyX0NBXCIsXCJoeVwiLFwia29cIixcImVuX0JPUktcIixcImVzX01YXCIsXCJlbl9JRVwiLFwiYXpcIixcIm5sX0JFXCIsXCJlbl9VU1wiLFwic2tcIixcImZyX0NIXCIsXCJlbl9JTkRcIixcInN2XCIsXCJmaVwiLFwiZW5cIixcInpoX0NOXCIsXCJoZVwiLFwicHRfUFRcIixcImRlX0FUXCJdO2Z1bmN0aW9uIEt0KGUpe3JldHVybiBuKHp0LGUpfWZ1bmN0aW9uIE90KGUpe3JldHVybiBuKCgoKT0+cyh7bWluOi0xODAsbWF4OjE4MCxmcmFjdGlvbjozfSkpLGUpfWZ1bmN0aW9uIEp0KGUpe3JldHVybiBuKCgoKT0+QXJyYXkuZnJvbSh7bGVuZ3RoOjZ9LCgoKT0+dHQoKSt0dCgpKSkuam9pbihcIi1cIikpLGUpfWZ1bmN0aW9uIFZ0KGUpe3JldHVybiBuKCgoKT0+e3ZhciBhLHQsbztjb25zdFtpLG4scl09W251bGwhPShhPW51bGw9PWU/dm9pZCAwOmUubWFzayk/YTpcIkAjI0AjXCIsbnVsbCE9KHQ9bnVsbD09ZT92b2lkIDA6ZS5jaGFyKT90OlwiQFwiLG51bGwhPShvPW51bGw9PWU/dm9pZCAwOmUuZGlnaXQpP286XCIjXCJdO3JldHVybiBpLnNwbGl0KFwiXCIpLm1hcCgoZT0+ZT09PW4/YigpOmU9PT1yP3Moe21pbjowLG1heDo5LGZyYWN0aW9uOjB9KTplKSkuam9pbihcIlwiKX0pLGUpfXZhciBqdD1bXCJhcHBsaWNhdGlvbi92bmQubG90dXMtYXBwcm9hY2hcIixcImFwcGxpY2F0aW9uL3ZuZC53di5jc3Ard2J4bWxcIixcImFwcGxpY2F0aW9uL2ZvbnQtdGRwZnJcIixcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5pcHR2LmNvbmZpZyt4bWxcIixcImFwcGxpY2F0aW9uL3ZuZC5vbWEuZGNkY1wiLFwiYXBwbGljYXRpb24vdm5kLmRlY2UuZGF0YVwiLFwiYXVkaW8veC1mbGFjXCIsXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5jaGFubmVsLXdieG1sXCIsXCJhcHBsaWNhdGlvbi92bmQuZnNjLndlYmxhdW5jaFwiLFwidmlkZW8vbXB2XCIsXCJhcHBsaWNhdGlvbi92bmQuZnJhbWVtYWtlclwiLFwiYXBwbGljYXRpb24vdm5kLmdvdi5zay5lLWZvcm0reG1sXCIsXCJtb2RlbC92bmQub3BlbmdleFwiLFwiYXBwbGljYXRpb24vbWV0YWxpbmsreG1sXCIsXCJhcHBsaWNhdGlvbi9zY3ZwLXZwLXJlc3BvbnNlXCIsXCJhcHBsaWNhdGlvbi92bmQub2lwZi5taXBwdmNvbnRyb2xtZXNzYWdlK3htbFwiLFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFwiYXBwbGljYXRpb24vdm5kLnVtYWppblwiLFwiYXBwbGljYXRpb24veC1iemlwXCIsXCJhcHBsaWNhdGlvbi92bmQuYW5zZXItd2ViLWNlcnRpZmljYXRlLWlzc3VlLWluaXRpYXRpb25cIixcImFwcGxpY2F0aW9uL29jc3AtcmVxdWVzdFwiLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNwcm9wcyt4bWxcIixcInZpZGVvL29nZ1wiLFwiYXVkaW8vZXZyY3diMFwiLFwiYXBwbGljYXRpb24vdm5kLmZvbnQtZm9udGZvcmdlLXNmZFwiLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLXRlbXBsYXRlXCIsXCJ2aWRlby9wYXJpdHlmZWNcIixcImFwcGxpY2F0aW9uL3ZuZC5vcGVuYmxveC5nYW1lK3htbFwiLFwidGV4dC9qYWRlXCIsXCJhdWRpby9hcHR4XCIsXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtcmVnaXN0cmF0aW9uXCIsXCJhcHBsaWNhdGlvbi92bmQucHZpLnB0aWQxXCIsXCJhcHBsaWNhdGlvbi92bmQud2VidHVyYm9cIixcImFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmltcFwiLFwiYXBwbGljYXRpb24veC1tc3NjaGVkdWxlXCIsXCJpbWFnZS92bmQuYWlyemlwLmFjY2VsZXJhdG9yLmF6dlwiLFwiYXBwbGljYXRpb24vdm5kLmtlbmFtZWFhcHBcIixcImFwcGxpY2F0aW9uL3ZuZC5nZW9wbGFuXCIsXCJhcHBsaWNhdGlvbi92bmQudG1kLm1lZGlhZmxleC5hcGkreG1sXCIsXCJhcHBsaWNhdGlvbi9tcGVnNC1pb2RcIixcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG1kZGYreG1sXCIsXCJhcHBsaWNhdGlvbi92bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZ1wiLFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1hdWRpdC1zdHJlYW0reG1sXCIsXCJhcHBsaWNhdGlvbi92bmQuc3VzLWNhbGVuZGFyXCIsXCJhcHBsaWNhdGlvbi9zYW1sYXNzZXJ0aW9uK3htbFwiLFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQuZG9jdW1lbnQubWFjcm9lbmFibGVkLjEyXCIsXCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiLFwiYXBwbGljYXRpb24veGNhcC1lcnJvcit4bWxcIixcInZpZGVvL2gyNjQtc3ZjXCIsXCJtdWx0aXBhcnQvaGVhZGVyLXNldFwiLFwiaW1hZ2Uvdm5kLmFkb2JlLnBob3Rvc2hvcFwiLFwiYXBwbGljYXRpb24vcGtpeC1wa2lwYXRoXCIsXCJhcHBsaWNhdGlvbi9tYWMtY29tcGFjdHByb1wiLFwidGV4dC92bmQuZmx5XCIsXCJhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZWRtXCIsXCJhcHBsaWNhdGlvbi92bmQuZHRnLmxvY2FsLmZsYXNoXCIsXCJhcHBsaWNhdGlvbi92bmQuZWNvd2luLnNlcmllc1wiLFwiYXBwbGljYXRpb24vdm5kLnNwb3RmaXJlLmR4cFwiLFwiYXVkaW8veC1tNGFcIixcInRleHQvcnRwLWVuYy1hZXNjbTEyOFwiLFwiYXVkaW8vcGNtdVwiLFwibXVsdGlwYXJ0L2FwcGxlZG91YmxlXCIsXCJhdWRpby94LXdhdlwiLFwiYXBwbGljYXRpb24vdm5kLmlibS5lbGVjdHJvbmljLW1lZGlhXCIsXCJ0ZXh0L2NvZmZlZXNjcmlwdFwiLFwiYXBwbGljYXRpb24vbWV0YWxpbms0K3htbFwiLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwubnVtYmVyaW5nK3htbFwiLFwiYXVkaW8vMWQtaW50ZXJsZWF2ZWQtcGFyaXR5ZmVjXCIsXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNzVcIixcImFwcGxpY2F0aW9uL3NxbFwiLFwidGV4dC9tYXJrZG93blwiLFwidGV4dC92bmQuZG1jbGllbnRzY3JpcHRcIixcImFwcGxpY2F0aW9uL3BpZGYreG1sXCIsXCJhcHBsaWNhdGlvbi9tYm1zLW1zayt4bWxcIixcImF1ZGlvL3J0cC1lbmMtYWVzY20xMjhcIixcImFwcGxpY2F0aW9uL3gtZm9udC1kb3NcIixcImFwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzXCIsXCJhcHBsaWNhdGlvbi94LW1zYWNjZXNzXCIsXCJ0ZXh0L3gtc2Fzc1wiLFwiYXBwbGljYXRpb24vdm5kLmRhcnRcIixcImFwcGxpY2F0aW9uL3ZuZC5wYWxtXCIsXCJhcHBsaWNhdGlvbi92bmQuaW50ZXJnZW9cIixcImFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmFzb1wiLFwibW9kZWwvdm5kLm1vbWwreG1sXCIsXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5hbGVydC13YnhtbFwiLFwiYXVkaW8vZzcyNi0yNFwiLFwiaW1hZ2Uvdm5kLm1pY3Jvc29mdC5pY29uXCIsXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuY29tbWVudHMreG1sXCIsXCJhdWRpby9pbGJjXCIsXCJhdWRpby92bmQuZHRzLmhkXCIsXCJhdWRpby9sMjBcIixcImF1ZGlvL3ZuZC5udWVyYS5lY2VscDQ4MDBcIixcInZpZGVvL3ZuZC5pcHR2Zm9ydW0uMWRwYXJpdHlmZWMtMjAwNVwiLFwiYXBwbGljYXRpb24vdm5kLm1zLWFzZlwiLFwiYXBwbGljYXRpb24vdm5kLmF2aXN0YXIreG1sXCIsXCJhdWRpby92bmQuZG9sYnkucHVsc2UuMVwiLFwiYXBwbGljYXRpb24vdm5kLmRtLmRlbGVnYXRpb24reG1sXCJdO2Z1bmN0aW9uIFV0KGUpe3JldHVybiBuKGp0LGUpfXZhciBfdD1bXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl07ZnVuY3Rpb24gWXQoZSl7Y29uc3QgYT1fdCx0PW51bGw9PWU/dm9pZCAwOmUuYWJicmV2aWF0aW9uO3JldHVybiBuKCgoKT0+e2NvbnN0IGU9cihhKTtyZXR1cm4gdD9lLnNsaWNlKDAsMyk6ZX0pLGUpfXZhciBRdD1bXCJBcHJpbGlhXCIsXCJCZW5lbGxpXCIsXCJCTVcgTW90b3JyYWRcIixcIkJ1bHRhY29cIixcIkNhZ2l2YVwiLFwiRGFlbGltXCIsXCJEZXJiaVwiLFwiRHVjYXRpXCIsXCJHYXMgR2FzXCIsXCJHaWxlcmFcIixcIkhhcmxleS1EYXZpZHNvblwiLFwiSG9uZGFcIixcIkh1c3F2YXJuYVwiLFwiSHlvc3VuZ1wiLFwiSW5kaWFuIE1vdG9yY3ljbGVcIixcIkthd2FzYWtpXCIsXCJLZWV3YXlcIixcIktUTVwiLFwiTW90byBHdXp6aVwiLFwiTVYgQWd1c3RhXCIsXCJQaWFnZ2lvXCIsXCJSaWVqdVwiLFwiUm95YWwgRW5maWVsZFwiLFwiU3V6dWtpXCIsXCJTWU1cIixcIlRyaXVtcGhcIixcIlZlc3BhXCIsXCJZYW1haGFcIixcIlplcm8gTW90b3JjeWNsZXNcIl07ZnVuY3Rpb24gJHQoZSl7cmV0dXJuIG4oUXQsZSl9dmFyIFh0PVtcIjEyIEFuZ3J5IE1lblwiLFwiMTIgWWVhcnMgYSBTbGF2ZVwiLFwiMTkxN1wiLFwiMjAwMTogQSBTcGFjZSBPZHlzc2V5XCIsXCJBIEJlYXV0aWZ1bCBNaW5kXCIsXCJBIENsb2Nrd29yayBPcmFuZ2VcIixcIkFsaWVuXCIsXCJBbGllbnNcIixcIkFsbCBBYm91dCBFdmVcIixcIkFtYWRldXNcIixcIkFtZXJpY2FuIEJlYXV0eVwiLFwiQW1lcmljYW4gSGlzdG9yeSBYXCIsXCJBbcOpbGllXCIsXCJBcG9jYWx5cHNlIE5vd1wiLFwiQmFjayB0byB0aGUgRnV0dXJlXCIsXCJCZWZvcmUgU3VucmlzZVwiLFwiQmVmb3JlIFN1bnNldFwiLFwiQmVuLUh1clwiLFwiQmljeWNsZSBUaGlldmVzXCIsXCJCbGFkZSBSdW5uZXJcIixcIkJyYXZlaGVhcnRcIixcIkNhc2FibGFuY2FcIixcIkNhc2lub1wiLFwiQ2F0Y2ggTWUgSWYgWW91IENhblwiLFwiQ2hpbGRyZW4gb2YgSGVhdmVuXCIsXCJDaGluYXRvd25cIixcIkNpbmVtYSBQYXJhZGlzb1wiLFwiQ2l0aXplbiBLYW5lXCIsXCJDaXR5IExpZ2h0c1wiLFwiQ2l0eSBvZiBHb2RcIixcIkNvb2wgSGFuZCBMdWtlXCIsXCJEYXMgQm9vdFwiLFwiRGVhZCBQb2V0cyBTb2NpZXR5XCIsXCJEaWUgSGFyZFwiLFwiRGphbmdvIFVuY2hhaW5lZFwiLFwiRG91YmxlIEluZGVtbml0eVwiLFwiRG93bmZhbGxcIixcIkRyLiBTdHJhbmdlbG92ZSBvcjogSG93IEkgTGVhcm5lZCB0byBTdG9wIFdvcnJ5aW5nIGFuZCBMb3ZlIHRoZSBCb21iXCIsXCJFdGVybmFsIFN1bnNoaW5lIG9mIHRoZSBTcG90bGVzcyBNaW5kXCIsXCJFdmVyeXRoaW5nIEV2ZXJ5d2hlcmUgQWxsIGF0IE9uY2VcIixcIkZhcmdvXCIsXCJGaWdodCBDbHViXCIsXCJGb3IgYSBGZXcgRG9sbGFycyBNb3JlXCIsXCJGb3JyZXN0IEd1bXBcIixcIkZ1bGwgTWV0YWwgSmFja2V0XCIsXCJHYW5kaGlcIixcIkdsYWRpYXRvclwiLFwiR29uZSBHaXJsXCIsXCJHb29kIFdpbGwgSHVudGluZ1wiLFwiR29vZGZlbGxhc1wiLFwiR3JhbiBUb3Jpbm9cIixcIkdyYXZlIG9mIHRoZSBGaXJlZmxpZXNcIixcIkdyZWVuIEJvb2tcIixcIkdyb3VuZGhvZyBEYXlcIixcIkhhY2tzYXcgUmlkZ2VcIixcIkhlYXRcIixcIkhvdGVsIFJ3YW5kYVwiLFwiSW4gdGhlIE5hbWUgb2YgdGhlIEZhdGhlclwiLFwiSW5jZXB0aW9uXCIsXCJJbmRpYW5hIEpvbmVzIGFuZCB0aGUgTGFzdCBDcnVzYWRlXCIsXCJJbnRvIHRoZSBXaWxkXCIsXCJJdCBIYXBwZW5lZCBPbmUgTmlnaHRcIixcIkl0J3MgYSBXb25kZXJmdWwgTGlmZVwiLFwiSmF3c1wiLFwiSnVyYXNzaWMgUGFya1wiLFwiS2lsbCBCaWxsOiBWb2wuIDFcIixcIkwuQS4gQ29uZmlkZW50aWFsXCIsXCJMYXdyZW5jZSBvZiBBcmFiaWFcIixcIkxlIE1hbnMgJzY2XCIsXCJMaWZlIElzIEJlYXV0aWZ1bFwiLFwiTGlmZSBvZiBCcmlhblwiLFwiTG9jaywgU3RvY2sgYW5kIFR3byBTbW9raW5nIEJhcnJlbHNcIixcIkzDqW9uOiBUaGUgUHJvZmVzc2lvbmFsXCIsXCJNXCIsXCJNYWQgTWF4OiBGdXJ5IFJvYWRcIixcIk1lbWVudG9cIixcIk1ldHJvcG9saXNcIixcIk1pbGxpb24gRG9sbGFyIEJhYnlcIixcIk1vZGVybiBUaW1lc1wiLFwiTW9udHkgUHl0aG9uIGFuZCB0aGUgSG9seSBHcmFpbFwiLFwiTm8gQ291bnRyeSBmb3IgT2xkIE1lblwiLFwiTm9ydGggYnkgTm9ydGh3ZXN0XCIsXCJPbGRib3lcIixcIk9uIHRoZSBXYXRlcmZyb250XCIsXCJPbmNlIFVwb24gYSBUaW1lIGluIEFtZXJpY2FcIixcIk9uY2UgVXBvbiBhIFRpbWUgaW4gdGhlIFdlc3RcIixcIk9uZSBGbGV3IE92ZXIgdGhlIEN1Y2tvbydzIE5lc3RcIixcIlBhdGhzIG9mIEdsb3J5XCIsXCJQbGF0b29uXCIsXCJQcmluY2VzcyBNb25vbm9rZVwiLFwiUHJpc29uZXJzXCIsXCJQc3ljaG9cIixcIlB1bHAgRmljdGlvblwiLFwiUmFnaW5nIEJ1bGxcIixcIlJhaWRlcnMgb2YgdGhlIExvc3QgQXJrXCIsXCJSYXNob21vblwiLFwiUmVhciBXaW5kb3dcIixcIlJlcXVpZW0gZm9yIGEgRHJlYW1cIixcIlJlc2Vydm9pciBEb2dzXCIsXCJSb2NreVwiLFwiUm9vbVwiLFwiUnVzaFwiLFwiU2F2aW5nIFByaXZhdGUgUnlhblwiLFwiU2NhcmZhY2VcIixcIlNjaGluZGxlcidzIExpc3RcIixcIlNlN2VuXCIsXCJTZXZlbiBTYW11cmFpXCIsXCJTaHV0dGVyIElzbGFuZFwiLFwiU2luZ2luJyBpbiB0aGUgUmFpblwiLFwiU25hdGNoXCIsXCJTb21lIExpa2UgSXQgSG90XCIsXCJTcGlyaXRlZCBBd2F5XCIsXCJTcG90bGlnaHRcIixcIlN0YW5kIGJ5IE1lXCIsXCJTdGFyIFdhcnNcIixcIlN0YXIgV2FyczogRXBpc29kZSBWIC0gVGhlIEVtcGlyZSBTdHJpa2VzIEJhY2tcIixcIlN0YXIgV2FyczogRXBpc29kZSBWSSAtIFJldHVybiBvZiB0aGUgSmVkaVwiLFwiU3Vuc2V0IEJsdmQuXCIsXCJUYXhpIERyaXZlclwiLFwiVGVybWluYXRvciAyOiBKdWRnbWVudCBEYXlcIixcIlRoZSBBcGFydG1lbnRcIixcIlRoZSBCYXR0bGUgb2YgQWxnaWVyc1wiLFwiVGhlIEJlc3QgWWVhcnMgb2YgT3VyIExpdmVzXCIsXCJUaGUgQmlnIExlYm93c2tpXCIsXCJUaGUgQnJpZGdlIG9uIHRoZSBSaXZlciBLd2FpXCIsXCJUaGUgRGFyayBLbmlnaHRcIixcIlRoZSBEYXJrIEtuaWdodCBSaXNlc1wiLFwiVGhlIERlZXIgSHVudGVyXCIsXCJUaGUgRGVwYXJ0ZWRcIixcIlRoZSBFbGVwaGFudCBNYW5cIixcIlRoZSBFeG9yY2lzdFwiLFwiVGhlIEZhdGhlclwiLFwiVGhlIEdlbmVyYWxcIixcIlRoZSBHb2RmYXRoZXJcIixcIlRoZSBHb2RmYXRoZXI6IFBhcnQgSUlcIixcIlRoZSBHb2xkIFJ1c2hcIixcIlRoZSBHb29kLCB0aGUgQmFkIGFuZCB0aGUgVWdseVwiLFwiVGhlIEdyYW5kIEJ1ZGFwZXN0IEhvdGVsXCIsXCJUaGUgR3JhcGVzIG9mIFdyYXRoXCIsXCJUaGUgR3JlYXQgRGljdGF0b3JcIixcIlRoZSBHcmVhdCBFc2NhcGVcIixcIlRoZSBHcmVlbiBNaWxlXCIsXCJUaGUgSGVscFwiLFwiVGhlIEludG91Y2hhYmxlc1wiLFwiVGhlIElyb24gR2lhbnRcIixcIlRoZSBMaW9uIEtpbmdcIixcIlRoZSBMaXZlcyBvZiBPdGhlcnNcIixcIlRoZSBMb3JkIG9mIHRoZSBSaW5nczogVGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmdcIixcIlRoZSBMb3JkIG9mIHRoZSBSaW5nczogVGhlIFJldHVybiBvZiB0aGUgS2luZ1wiLFwiVGhlIExvcmQgb2YgdGhlIFJpbmdzOiBUaGUgVHdvIFRvd2Vyc1wiLFwiVGhlIE1hdHJpeFwiLFwiVGhlIFBpYW5pc3RcIixcIlRoZSBQcmVzdGlnZVwiLFwiVGhlIFNlY3JldCBpbiBUaGVpciBFeWVzXCIsXCJUaGUgU2V2ZW50aCBTZWFsXCIsXCJUaGUgU2hhd3NoYW5rIFJlZGVtcHRpb25cIixcIlRoZSBTaGluaW5nXCIsXCJUaGUgU2lsZW5jZSBvZiB0aGUgTGFtYnNcIixcIlRoZSBTaXh0aCBTZW5zZVwiLFwiVGhlIFNvdW5kIG9mIE11c2ljXCIsXCJUaGUgU3RpbmdcIixcIlRoZSBUZXJtaW5hdG9yXCIsXCJUaGUgVGhpcmQgTWFuXCIsXCJUaGUgVHJlYXN1cmUgb2YgdGhlIFNpZXJyYSBNYWRyZVwiLFwiVGhlIFRydW1hbiBTaG93XCIsXCJUaGUgVXN1YWwgU3VzcGVjdHNcIixcIlRoZSBXaXphcmQgb2YgT3pcIixcIlRoZSBXb2xmIG9mIFdhbGwgU3RyZWV0XCIsXCJUaGVyZSBXaWxsIEJlIEJsb29kXCIsXCJUaHJlZSBCaWxsYm9hcmRzIE91dHNpZGUgRWJiaW5nLCBNaXNzb3VyaVwiLFwiVG8gS2lsbCBhIE1vY2tpbmdiaXJkXCIsXCJUb3kgU3RvcnkgM1wiLFwiVHJhaW5zcG90dGluZ1wiLFwiVW5mb3JnaXZlblwiLFwiVXBcIixcIlZlcnRpZ29cIixcIldBTEzCt0VcIixcIldhcnJpb3JcIixcIldpbGQgVGFsZXNcIixcIldpdG5lc3MgZm9yIHRoZSBQcm9zZWN1dGlvblwiLFwiWW9qaW1ib1wiXTtmdW5jdGlvbiBadChlKXtyZXR1cm4gbihYdCxlKX12YXIgZW89W1wiRGFydGggVmFkZXJcIixcIkVkbmEgTW9kZVwiLFwiUmFuZGxlIE1jTXVycGh5XCIsXCJPcHRpbXVzIFByaW1lXCIsXCJOb3JtYW4gQmF0ZXNcIixcIlRoZSBNaW5pb25zXCIsXCJNYXhpbXVzXCIsXCJMZWdvbGFzXCIsXCJXZWRuZXNkYXkgQWRkYW1zXCIsXCJJbnNwZWN0b3IgQ2xvdXNlYXVcIixcIkluaWdvIE1vbnRveWFcIixcIkhhbFwiLFwiR3Jvb3RcIixcIkdyb21pdFwiLFwiRXRoYW4gSHVudFwiLFwiUmVkXCIsXCJXYWxrZXJcIixcIkNvcnBvcmFsIEhpY2tzXCIsXCJCYW5lXCIsXCJXb29keVwiLFwiV2l0aG5haWxcIixcIlZcIixcIlJveSBCYXR0eVwiLFwiTWFydGluIEJsYW5rXCIsXCJTYW13aXNlIEdhbWdlZVwiLFwiUHJpdmF0ZSBXaWxsaWFtIEh1ZHNvblwiLFwiTGlzYmV0aCBTYWxhbmRlclwiLFwiRnJhbmsgRHJlYmluXCIsXCJEb25uaWUgRGFya29cIixcIkNhcHRhaW4gS2lya1wiLFwiU3Rhci1Mb3JkXCIsXCJUb255IE1vbnRhbmFcIixcIk1hcmdlIEd1bmRlcnNvblwiLFwiTmVvXCIsXCJIYXJyeSBQb3R0ZXJcIixcIkdvbGx1bSAvIFNtw6lhZ29sXCIsXCJIYW5zIExhbmRhXCIsXCJHZW9yZ2UgQmFpbGV5XCIsXCJXb2x2ZXJpbmVcIixcIkUuVC5cIixcIkJpbGJvIEJhZ2dpbnNcIixcIkRyLiBLaW5nIFNjaHVsdHpcIixcIkFjZSBWZW50dXJhXCIsXCJTYXJhaCBDb25ub3JcIixcIkthdG5pc3MgRXZlcmRlZW5cIixcIkphY2sgQnVydG9uXCIsXCJBeGVsIEZvbGV5XCIsXCJBbcOpbGllIFBvdWxhaW5cIixcIlZpdG8gQ29ybGVvbmVcIixcIlNoYXVuIFJpbGV5XCIsXCJPYmktV2FuIEtlbm9iaVwiLFwiTHVrZSBTa3l3YWxrZXJcIixcIkhhcnJ5IENhbGxhaGFuXCIsXCJMZXN0ZXIgQnVybmhhbVwiLFwiUmljayBEZWNrYXJkXCIsXCJDYXB0YWluIEFtZXJpY2FcIixcIlRvbW15IERlVml0b1wiLFwiQW50b24gQ2hpZ3VyaFwiLFwiQW15IER1bm5lXCIsXCJMb3UgQmxvb21cIixcIktleXNlciBTw7Z6ZVwiLFwiRmVycmlzIEJ1ZWxsZXJcIixcIkRyaXZlclwiLFwiWW9kYVwiLFwiV2FsdGVyIFNvYmNoYWtcIixcIlJvY2t5IEJhbGJvYVwiLFwiQXR0aWN1cyBGaW5jaFwiLFwiQ2FwdGFpbiBNYWwgUmV5bm9sZHNcIixcIlRoZSBNYW4gV2l0aCBObyBOYW1lXCIsXCJKdWxlcyBXaW5uZmllbGRcIixcIlBldGVyIFZlbmttYW5cIixcIkdhbmRhbGZcIixcIlNuYWtlIFBsaXNza2VuXCIsXCJUaGUgVGVybWluYXRvciAoVC04MDApXCIsXCJGb3JyZXN0IEd1bXBcIixcIlBhdHJpY2sgQmF0ZW1hblwiLFwiQXNoXCIsXCJEYW5pZWwgUGxhaW52aWV3XCIsXCJUaGUgQnJpZGVcIixcIlRyYXZpcyBCaWNrbGVcIixcIkhhbm5pYmFsIExlY3RlclwiLFwiRG9jIEJyb3duXCIsXCJMb2tpXCIsXCJSaWNrIEJsYWluZVwiLFwiTS4gR3VzdGF2ZVwiLFwiUm9uIEJ1cmd1bmR5XCIsXCJBcmFnb3JuXCIsXCJDYXB0YWluIEphY2sgU3BhcnJvd1wiLFwiSXJvbiBNYW5cIixcIk1hcnR5IE1jRmx5XCIsXCJNaWNoYWVsIENvcmxlb25lXCIsXCJUaGUgRHVkZVwiLFwiVHlsZXIgRHVyZGVuXCIsXCJKb2huIE1jQ2xhbmVcIixcIlRoZSBKb2tlclwiLFwiRWxsZW4gUmlwbGV5XCIsXCJCYXRtYW5cIixcIkhhbiBTb2xvXCIsXCJKYW1lcyBCb25kXCIsXCJJbmRpYW5hIEpvbmVzXCJdO2Z1bmN0aW9uIGFvKGUpe3JldHVybiBuKGVvLGUpfXZhciB0bz1bXCJDbGFzc2ljYWxcIixcIlJlZ2dhZVwiLFwiQmx1ZXNcIixcIkNvdW50cnlcIixcIkxhdGluXCIsXCJGdW5rXCIsXCJSYXBcIixcIkZvbGtcIixcIkVsZWN0cm9uaWNcIixcIldvcmxkXCIsXCJIaXAgSG9wXCIsXCJQb3BcIixcIlN0YWdlIEFuZCBTY3JlZW5cIixcIlNvdWxcIixcIk5vbiBNdXNpY1wiLFwiSmF6elwiLFwiUm9ja1wiLFwiTWV0YWxcIl07ZnVuY3Rpb24gb28oZSl7cmV0dXJuIG4odG8sZSl9ZnVuY3Rpb24gaW8oZSl7cmV0dXJuIG4oKCgpPT5bRnQoKSxPdCgpXSksZSl9dmFyIG5vPVtcIkFtYXpvblwiLFwiQU9MXCIsXCJBdXRvZGVza1wiLFwiQXBwbGVcIixcIkJhc2VjYW1wXCIsXCJCYXR0bGUubmV0XCIsXCJCaXRidWNrZXRcIixcImJpdGx5XCIsXCJCb3hcIixcIkNsZWFyU2NvcmVcIixcIkNsb3VkIEZvdW5kcnlcIixcIkRhaWx5bW90aW9uXCIsXCJEZXV0c2NoZSBUZWxla29tXCIsXCJkZXZpYW50QVJUXCIsXCJEaXNjb2dzXCIsXCJEaXNjb3JkXCIsXCJEcm9wYm94XCIsXCJFdHN5XCIsXCJFdmVybm90ZVwiLFwiRmFjZWJvb2tcIixcIkZhdFNlY3JldFwiLFwiRml0Yml0XCIsXCJGbGlja3JcIixcIkZvcm1zdGFja1wiLFwiRm91cnNxdWFyZVwiLFwiR2l0SHViXCIsXCJHaXRMYWJcIixcIkdvb2RyZWFkc1wiLFwiR29vZ2xlXCIsXCJHb29nbGUgQXBwIEVuZ2luZVwiLFwiR3JvdW5kc3BlYWtcIixcIkh1ZGRsZVwiLFwiSW1ndXJcIixcIkluc3RhZ3JhbVwiLFwiSW50ZWxDbG91ZCBTZXJ2aWNlc1wiLFwiSml2ZSBTb2Z0d2FyZVwiLFwiS2V5Y2xvYWtcIixcIkxpbmtlZEluXCIsXCJMb2dpblJhZGl1c1wiLFwiTWljcm9zb2Z0IHNlcnZpY2VzXCIsXCJNaXhpXCIsXCJNeVNwYWNlXCIsXCJNb3JlVGVhbVwiLFwiTmV0ZmxpeFwiLFwiTmV0SVFcIixcIk9rdGFcIixcIk9wZW5BTVwiLFwiT3BlblN0cmVldE1hcFwiLFwiT3BlblRhYmxlXCIsXCJPUkNJRFwiLFwiUGF5UGFsXCIsXCJQaW5nIElkZW50aXR5XCIsXCJQaXhpdlwiLFwiUGx1cmtcIixcIlJlZGRpdFwiLFwiU2FsZXNmb3JjZS5jb21cIixcIlNpbmEgV2VpYm9cIixcIlNwb3RpZnlcIixcIlN0YWNrIEV4Y2hhbmdlXCIsXCJTdGF0dXNOZXRcIixcIlN0cmF2YVwiLFwiU3RyaXBlXCIsXCJUcmVsbG9cIixcIlR1bWJsclwiLFwiVHdpdGNoXCIsXCJUd2l0dGVyXCIsXCJVYnVudHUgT25lXCIsXCJWaWFkZW9cIixcIlZpbWVvXCIsXCJWS1wiLFwiV2VDaGF0XCIsXCJXaXRoaW5nc1wiLFwiV29vQ29tbWVyY2VcIixcIldvcmRQcmVzcy5jb21cIixcIldTTzIgSWRlbnRpdHkgU2VydmVyXCIsXCJYZXJvXCIsXCJYSU5HXCIsXCJZYWhvbyFcIixcIllhbW1lclwiLFwiWWFuZGV4XCIsXCJZZWxwXCIsXCJaZW5kZXNrXCJdO2Z1bmN0aW9uIHJvKGUpe3JldHVybiBuKG5vLGUpfWZ1bmN0aW9uIHNvKGUpe3JldHVybiBuKCgoKT0+e2NvbnN0IGU9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKk51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtyZXR1cm4gQmlnSW50KGUudG9TdHJpbmcoOCkpfSksZSl9dmFyIGxvPVtcIlNvdXRod2VzdFwiLFwiTm9ydGh3ZXN0XCIsXCJTb3V0aGVhc3RcIixcIk5vcnRoZWFzdFwiXTtmdW5jdGlvbiB1byhlKXtyZXR1cm4gbihsbyxlKX12YXIgY289W1wiUXVpYSBzaXQgYXJjaGl0ZWN0byBpdGFxdWUgdm9sdXB0YXMgYWxpcXVhbS4gUmVtIHZlcml0YXRpcyBxdWkgcXVhc2kgc2ludCB2ZWxpdCBkb2xvcmVtIG1heGltZSB2b2x1cHRhdGVtLiBTaXQgYXV0IGxhYm9yaW9zYW0gYXNwZXJuYXR1ciBkaWN0YSBub24gY29uc2VxdWF0dXIgcXVpIHJlY3VzYW5kYWUuIERpZ25pc3NpbW9zIHZvbHVwdGF0ZW0gbGFib3JlIHByYWVzZW50aXVtLlwiLFwiRXZlbmlldCBxdWkgYXBlcmlhbSBldC4gUmVtIGluY2lkdW50IHNhcGllbnRlIGFyY2hpdGVjdG8gZWFydW0gY29uc2VjdGV0dXIgb2ZmaWNpYS4gQXNzdW1lbmRhIHZvbHVwdGF0ZW0gc2VkIGFwZXJpYW0gc2VkIHRlbXBvcmlidXMgc3VudCBpbi4gVG90YW0gbW9sZXN0aWFlIGFzcGVybmF0dXIgcXVpYSBub24gcmVtIGZhY2lsaXMgZXhwZWRpdGEgaGFydW0gdmVyaXRhdGlzLiBDdWxwYSBpcHNhbSBxdW8gZG9sb3IuXCIsXCJQZXJzcGljaWF0aXMgZGlzdGluY3RpbyBxdWlhIGVzdCBtYWduaS4gQWxpcXVpZCBpZCBzZWQgcXVpIHF1aXMgZXVtIGFtZXQgdXQgaXVzdG8uIEV0IGVvcyByZXBlbGxhdCBuaXNpIGRvbG9yZW1xdWUuIE5vbiBlc3QgYXV0IGRvbG9yZXMgYWNjdXNhbXVzIHBhcmlhdHVyIHBsYWNlYXQgYW1ldCBkb2xvci5cIixcIlNpbnQgZG9sb3JpYnVzIGlkIHZvbHVwdGF0ZW0gbnVsbGEgZGljdGEgZGVzZXJ1bnQuIEVuaW0gZXhlcmNpdGF0aW9uZW0gYXV0IG1vZGkgc2FlcGUgbnVtcXVhbSBlYS4gVm9sdXB0YXMgbW9sbGl0aWEgbm9uIHRvdGFtIHRlbXBvcmEgZGVsZWN0dXMgdGVuZXR1ciBuZWNlc3NpdGF0aWJ1cyBvZmZpY2lpcy4gT2RpdCB2ZXJvIGNvbnNlcXVhdHVyIHF1aSBkb2xvcmVtIGV0LiBSZXBlbGxlbmR1cyBxdWlhIGl1cmUgZXQgZG9sb3JlbS5cIixcIkVycm9yIHF1b3MgYXBlcmlhbSBldCBkb2xvciBldCBzaXQgb2NjYWVjYXRpLiBRdWkgbWluaW1hIG9mZmljaWEgcGFyaWF0dXIgZG9sb3JlbSBzaXQuIEV0IGluY2lkdW50IGNvbnNlcXVhdHVyIGVhcXVlIHVuZGUgc3VudCBzaXQgZG9sb3JlLiBFdCBxdWlhIHV0IHJlcnVtLiBGdWdpdCBzdW50IGFyY2hpdGVjdG8gY3VwaWRpdGF0ZSB2b2x1cHRhcy5cIixcIkNvbnNlcXVhdHVyIHByYWVzZW50aXVtIHZlbCBvcHRpbyBmYWNpbGlzIGFsaWFzIGVhIG5lc2NpdW50LiBTb2x1dGEgZG9sb3JlcyBmYWNlcmUgZXVtIGVhIHF1YXNpIHF1aS4gT2RpdCBxdWlzcXVhbSBsaWJlcm8gcmVjdXNhbmRhZSBzaXQgc2l0IHNlZC4gRGlzdGluY3RpbyBuaWhpbCBvbW5pcyBlc3Qgc3VudC5cIixcIk1hZ25pIGZ1Z2l0IHBlcnNwaWNpYXRpcyBhcGVyaWFtIGlwc2FtIGRvbG9yZW0gbWluaW1hLiBNYWduaSBlYSBxdWkgcXVhZXJhdCBoYXJ1bSBxdW8gcmVwZWxsYXQgZW9zLiBOZWNlc3NpdGF0aWJ1cyBwb3NzaW11cyBxdWlzIGZ1Z2l0IGF1dCBzZWQgcXVpcyBhc3BlcmlvcmVzIGV0LlwiLFwiUGVyc3BpY2lhdGlzIGlsbHVtIGlsbHVtIGV0IGV0IGVycm9yIGxhYm9yZSB1dCBpdXJlLiBFaXVzIHF1aWRlbSBlaXVzIHBsYWNlYXQgYmxhbmRpdGlpcyBpbiBldCBkZXNlcnVudC4gRWxpZ2VuZGkgZnVnaWF0IHZlcm8gbmFtIGFzcGVyaW9yZXMgc2VxdWkgc2l0IGRpZ25pc3NpbW9zLiBRdWFtIHJlcnVtIGNvbnNlcXV1bnR1ciBkb2xvci5cIixcIkRpc3RpbmN0aW8gZmFjZXJlIGZ1Z2l0IHZlbCBub2JpcyBkb2xvciB2b2x1cHRhcyB2ZWwgcXVvZCBpbi4gTW9sZXN0aWFlIGV0IHZlbGl0LiBNYWlvcmVzIHZvbHVwdGF0ZW0gdXQgcXVpIGVsaWdlbmRpIHJlcGVsbGF0IGVvcyBxdWlhLiBUZW1wb3JlIGlwc2Egdm9sdXB0YXRlbSBtaW51cy4gSW4gcmVpY2llbmRpcyBkb2xvcmVtIGRlc2VydW50IGNvbnNlcXVhdHVyIGF0LlwiLFwiQ29uc2VjdGV0dXIgc3VzY2lwaXQgYmVhdGFlIGVzdCB1dCB1dCBkb2xvcmVtIHZvbHVwdGFzLiBFdCBzdW50IHJhdGlvbmUuIENvbnNlcXVhdHVyIGlsbG8gZXQgYXJjaGl0ZWN0by5cIixcIlF1aXNxdWFtIGF0IGRvbG9yZW0gY3VwaWRpdGF0ZSBlbmltIHV0IHJlY3VzYW5kYWUgcG9ycm8gYXV0IHF1YWUuIEluIG5vc3RydW0gZXQgdmVsaXQgbWFpb3JlcyBkb2xvcmVzIGluIGFyY2hpdGVjdG8gbmF0dXMgZGVsZWN0dXMuIEFzcGVybmF0dXIgcG9zc2ltdXMgbGliZXJvIHZlbGl0IG9tbmlzIGJlYXRhZS4gTGliZXJvIGFkaXBpc2NpIGV0IGNvbnNlcXVhdHVyIHVsbGFtLiBBbGlxdWFtIGVzdCBuYW0gcmVwdWRpYW5kYWUgb2Rpby4gRWxpZ2VuZGkgdml0YWUgaW4gYmVhdGFlIHNpbnQgc2FlcGUgdXQgZWFxdWUgZXNzZS5cIixcIk9kaXQgY29uc2VxdWF0dXIgbm9iaXMgYXV0IHF1byBkb2xvcmVzIGluIGFkaXBpc2NpIHByYWVzZW50aXVtLiBRdW9kIHJlcnVtIGR1Y2ltdXMgYWQuIFV0IGF1dGVtIHZlbGl0IGNvbnNlcXVhdHVyIG5paGlsIGFuaW1pIGFuaW1pIGFyY2hpdGVjdG8uIFF1YWVyYXQgZXQgc2VkLlwiLFwiVmVsIHByb3ZpZGVudCBhYiBuZW1vIHJlcnVtIGNvbnNlcXVhdHVyIGZ1Z2lhdC4gVm9sdXB0YXMgZmFjaWxpcyBvZmZpY2lhIHNpbnQgdWxsYW0gb21uaXMgcXVpIHF1aXMgYS4gTm9zdHJ1bSBhdHF1ZSBsYXVkYW50aXVtIGRlbGVjdHVzIGRvbG9ydW0gcXVvZCBlcnJvci5cIixcIlZlcml0YXRpcyBvZmZpY2lpcyBlc3Qgb2NjYWVjYXRpIHN1bnQgY29uc2VxdWF0dXIuIEF1dCBzYXBpZW50ZSB0b3RhbSBzZWQgYWQgYWQgcXVpIGV1bSBvbW5pcyBkZWxlbml0aS4gUXVpcyBibGFuZGl0aWlzIGFwZXJpYW0uXCIsXCJBc3BlcmlvcmVzIGxhYm9yZSB0ZW1wb3JlIHF1YW0uIFV0IHZvbHVwdGF0ZW0gdW5kZSB0ZW1wb3JlIGZ1Z2Egbm9uIHJlcGVsbGVuZHVzIG9tbmlzIG1heGltZS4gUXVpYSBzb2x1dGEgcXVpYnVzZGFtLiBDb21tb2RpIGFuaW1pIGV1bSBkb2xvcmVtIHBsYWNlYXQgc2l0LiBRdWFtIG5paGlsIGRvbG9yZW1xdWUgZWxpZ2VuZGkgcmVtIHF1aWJ1c2RhbSBpdXN0byBjb25zZXF1YXR1ciBxdWFlLiBNb2RpIHF1YWVyYXQgbGFib3JlIGxhYm9yaW9zYW0gcXVhZXJhdCBzaW50IG51bGxhLlwiLFwiUHJvdmlkZW50IGN1bXF1ZSBxdW9zIHF1YW0gZW5pbS4gTmloaWwgYXBlcmlhbSBuaWhpbCB1dC4gQmxhbmRpdGlpcyBlbmltIG9mZmljaWEgb21uaXMgcXVvIHRlbmV0dXIgYWxpcXVpZCBvZGlvIGV0LiBQZXJzcGljaWF0aXMgdW5kZSBvZmZpY2lpcyBlYSBleHBlZGl0YSBpZCBkb2xvcmVtLiBRdWFtIG5paGlsIGV0IGFtZXQgcXVvcyBldCBmdWdpdC4gQ3VtIHZvbHVwdGF0ZW0gdGVtcG9yYSBkZXNlcnVudC5cIixcIklwc2EgbmVtbyBlb3Mgc2VxdWkgbnVsbGEgaWQgYWNjdXNhbXVzIG5hbSByYXRpb25lIGRvbG9yZS4gT21uaXMgc2ludCBxdWlzcXVhbSBhY2N1c2FtdXMgcmVtIHJlbSBuaWhpbC4gTm9uIG1pbnVzIGFuaW1pIGN1bSBkb2xvcmVtIGVhcnVtIG9kaXQgc2VxdWkuIFJlbSBub24gaW52ZW50b3JlIHNlZCBkaWN0YSBhdHF1ZSBtb2RpLiBTZWQgZG9sb3JlbSBpc3RlIG1vbGVzdGlhZS4gU2VkIGV1bSBpc3RlIGFsaXF1aWQgYWxpcXVpZC5cIixcIkV0IHF1b2QgYWQgb3B0aW8gY3VscGEgZGljdGEgYXQgZXZlbmlldC4gRGVzZXJ1bnQgcGVyZmVyZW5kaXMgZGViaXRpcyBzdW50IGF1dC4gTGFib3Jpb3NhbSBsYWJvcmlvc2FtIGFzcGVybmF0dXIgaWQgY29ycG9yaXMuXCIsXCJFdCBhdHF1ZSBzdW50IGFiIGVzc2UgZXhjZXB0dXJpIHV0IHF1b3MgZGVsZWN0dXMuIFBvc3NpbXVzIGRvbG9yIGFzc3VtZW5kYSBkaWN0YSBzYXBpZW50ZSBxdWFlcmF0IG5pc2kgc2VkIGNvbnNlcXVhdHVyIGhpYy4gSW4gZG9sb3JlbSBlb3MgdXQgZXVtIG5hbSBhY2N1c2FudGl1bSBpdXJlLiBJcHNhbSBsYWJvcnVtIGRlbGVuaXRpIHV0LlwiLFwiRXQgaWQgaGFydW0gdW5kZSBldCByYXRpb25lIG1pbmltYSBub24uIFN1c2NpcGl0IGlwc3VtIHJlbS4gU2VkIGFzcGVyaW9yZXMgcXVhZXJhdCBkb2xvcnVtIGF1dGVtIG5paGlsIHZvbHVwdGF0ZW0gZXQgaGljIHV0LiBNb2xlc3RpYWUgcmVydW0gYXV0ZW0uIERvbG9yZXMgbmFtIHNvbHV0YSBvZmZpY2lhIHBhcmlhdHVyIGRlYml0aXMuXCIsXCJBbGlhcyBlc3NlIG1pbnVzLiBNb2xlc3RpYWUgZXQgdXQgZG9sb3JlcyBpc3RlLiBOYW0gc2ludCBhdXQuIEV4cGxpY2FibyB1dCBlYXJ1bSBtb2RpIGFjY3VzYW11cyBmYWNpbGlzIHJlcnVtLlwiLFwiU2ludCBpZCBvZGl0LiBUZW5ldHVyIHNpdCBpbiBkZXNlcnVudCB2b2x1cHRhdGVtIGNvcnBvcmlzIHZvbHVwdGF0dW0gY3VscGEgZWxpZ2VuZGkuIEVzdCBxdWlhIHJlcHJlaGVuZGVyaXQgYXRxdWUgbW9kaS4gSXBzdW0gcXVvIGVvcyBkZXNlcnVudCBub2Jpcy5cIixcIk1vbGVzdGlhcyBpbiByZXByZWhlbmRlcml0IG1vbGVzdGlhcyBxdWFtIGRvbG9yaWJ1cyB0ZW5ldHVyLiBDdXBpZGl0YXRlIGVuaW0gYWQgZXN0IG5lbW8gZXQgcXVvcy4gTWludXMgbm9uIGV0IHZvbHVwdGF0ZW0gbWFnbmkgdm9sdXB0YXRpYnVzIGNvbnNlY3RldHVyIHRlbXBvcmlidXMgYWQuIE1vbGVzdGlhZSBzZWQgdm9sdXB0YXRlIGV0IGRvbG9yIGVhcXVlIHNlcXVpIG1pbmltYS4gUXVpc3F1YW0gYXRxdWUgZGlzdGluY3RpbyBjdWxwYSBkaXN0aW5jdGlvIHJlcnVtIGxhYm9yZSB2ZXJvIGFzc3VtZW5kYSB2b2x1cHRhdGUuXCIsXCJRdWFzIHF1aWRlbSBkb2xvcmVzIGV1bSBhc3Blcm5hdHVyIHRlbXBvcmUgaWxsbyBkZXNlcnVudCB2ZW5pYW0gc2VkLiBOb24gZXN0IG1vbGVzdGlhcyBvbW5pcyBkb2xvcmVtIGRvbG9yZW1xdWUgZXQgZXhlcmNpdGF0aW9uZW0gb2RpdCBpdGFxdWUuIEFsaXF1aWQgbmFtIGVvcyByZW0gbWFpb3JlcyBleGVyY2l0YXRpb25lbSBzaW1pbGlxdWUgcmVydW0gdm9sdXB0YXRlbSB2b2x1cHRhcy4gRG9sb3IgcmVydW0gZWEgaGljIGVzc2UgaW52ZW50b3JlLlwiLFwiRGlzdGluY3RpbyBhZGlwaXNjaSBleC4gVGVtcG9yaWJ1cyBlc3NlIGVycm9yIGVhIGF1dCBlc3QgdGVtcG9yaWJ1cy4gU3VudCBsYXVkYW50aXVtIHJlY3VzYW5kYWUuIFNvbHV0YSBjdWxwYSBuaWhpbCBuZW1vIHN1bnQgZXQgcmVwZWxsYXQgc2FwaWVudGUgZGlzdGluY3Rpby4gTm9zdHJ1bSBhY2N1c2FtdXMgZG9sb3JpYnVzIHJlcGVsbGF0IGJsYW5kaXRpaXMgbGFib3JlLlwiLFwiRXNzZSBvbW5pcyBlbmltIG9kaXQuIFZlbmlhbSBzZWQgaXVzdG8uIFZvbHVwdGFzIGxpYmVybyBhY2N1c2FtdXMuIENvcnBvcmlzIGNvbnNlcXVhdHVyIHV0IHZvbHVwdGFzIGNvcnBvcmlzIGJsYW5kaXRpaXMgbGF1ZGFudGl1bSBjb25zZXF1YXR1ciBlYSBkdWNpbXVzLiBJbmNpZHVudCBpbmNpZHVudCBtb2xlc3RpYWUuXCIsXCJEaWduaXNzaW1vcyBuZXNjaXVudCBzdXNjaXBpdCBiZWF0YWUgZXQgZXZlbmlldCBvbW5pcyB2b2x1cHRhdHVtIG5hdHVzLiBJdXN0byBtaW5pbWEgY29tbW9kaSByZW0gZXQgYSByZXJ1bSBhc3BlcmlvcmVzLiBGdWdpdCB0ZW5ldHVyIHV0IGF0IGF1dCBtb2xlc3RpYXMuXCIsXCJPcHRpbyBjb25zZWN0ZXR1ciByZXJ1bSBlb3MgcmVpY2llbmRpcy4gVm9sdXB0YXRlbSBoaWMgaXVyZS4gVW5kZSBhdXQgdm9sdXB0YXMuXCIsXCJDdWxwYSBpcHNhIHZvbHVwdGF0ZW0gc3VzY2lwaXQgdXQgb21uaXMgb21uaXMgaXN0ZS4gTW9sZXN0aWFzIGZhY2VyZSBmYWNpbGlzIGRlbGVjdHVzIHZlbCBmdWdpdCBxdWlidXNkYW0gc2FlcGUuIFZlbCB1dCBldCBkaWduaXNzaW1vcyBmdWdpYXQgc2ludCBhdXQgbWFnbmFtLiBRdWlzIG1haW9yZXMgaGFydW0gYWxpcXVpZCBtb2RpIGNvbnNlcXV1bnR1ciB2ZW5pYW0gaXBzdW0gcXVhZXJhdC4gUXVhbSBxdW8gaXVzdG8gbnVsbGEuIEV0IHF1YXNpIHF1aSBkb2xvcmUgZW5pbS5cIixcIkV4ZXJjaXRhdGlvbmVtIHNpbWlsaXF1ZSBtYWduaSB2b2x1cHRhdGVzLiBBbWV0IGV0IGFzcGVyaW9yZXMgcXVpZGVtIGVycm9yLiBDb21tb2RpIG5vc3RydW0gaGljIHN1c2NpcGl0IGZ1Z2EgY29uc2VxdWF0dXIgbm9iaXMgdmVyaXRhdGlzIHNpdC5cIixcIlF1YWVyYXQgb2ZmaWNpYSB2b2x1cHRhdHVtIG9mZmljaWlzLiBRdW8gdmVsaXQgbnVtcXVhbSBxdWkgc2ludCB2b2x1cHRhdGVtIGVvcyBtYWduYW0gcXVhcyBoaWMuIEV4Y2VwdHVyaSByZXByZWhlbmRlcml0IHRvdGFtIHJlcHJlaGVuZGVyaXQgZXQgZnVnaXQgZG9sb3J1bSBwZXJmZXJlbmRpcyBlc3QuIFF1YWUgcmVwdWRpYW5kYWUgcXVpc3F1YW0gdmVuaWFtIG1heGltZSBxdWkuIFJlcnVtIGF1dCBkb2xvcmVzIHZvbHVwdGF0ZXMgY29ycnVwdGkgbW9kaSBkdWNpbXVzIHBhcmlhdHVyIGVycm9yIHRlbXBvcmUuXCIsXCJTZWQgcXVhbSBxdW8gbmVzY2l1bnQgZXQgbGFib3Jpb3NhbS4gQXNwZXJuYXR1ciBldCBldW0gdm9sdXB0YXMgbmVzY2l1bnQgb21uaXMgZGlzdGluY3RpbyBvY2NhZWNhdGkgZXVtIGF1dC4gT2NjYWVjYXRpIG1vbGxpdGlhIGV0IGVzdC4gUmVpY2llbmRpcyBkb2xvciBldCB1dCBjb21tb2RpIGVzdCByZXBlbGxhdCBpcHNhIGl1cmUuIE1pbnVzIGxhdWRhbnRpdW0gdXQgc2VkIGVhcnVtIG9kaXQuIExhdWRhbnRpdW0gZXQgbm9uIGl1c3RvIGV0IGFsaXF1aWQuXCIsXCJSZXBlbGxhdCBpbGxvIHN1bnQgY3VtLiBNYWlvcmVzIGV0IGl1cmUuIEFjY3VzYW50aXVtIGV1bSBxdW8gdWxsYW0gbWludXMgYXJjaGl0ZWN0byBhdXQgbnVsbGEgcmVydW0uIE5vbiBxdWlzIG5pc2kgb21uaXMgZW9zIGRvbG9yZXMgcXVpYS4gQmVhdGFlIG5paGlsIGhpYyB1dCBuZWNlc3NpdGF0aWJ1cyBpZCBmdWdpYXQuXCIsXCJOb24gY29uc2VxdXVudHVyIHV0IHZvbHVwdGF0dW0uIERpY3RhIG9tbmlzIGFyY2hpdGVjdG8gaXVyZSBwZXJzcGljaWF0aXMgdmVyaXRhdGlzIGl0YXF1ZSBkb2xvcmUuIFF1b3MgbmVjZXNzaXRhdGlidXMgZG9sb3IgbmFtLlwiLFwiRXQgaXBzYW0gZGlzdGluY3RpbyBxdWlhIHF1aWEgaXBzdW0gZGlnbmlzc2ltb3MgYXV0ZW0gYXNzdW1lbmRhIHF1aS4gVmVsIGVhcnVtIGhhcnVtIHByb3ZpZGVudCBjb25zZXF1YXR1ci4gTmVxdWUgYW5pbWkgYXJjaGl0ZWN0byByYXRpb25lLiBWZW5pYW0gcG9ycm8gcG9zc2ltdXMgbmlzaSB2b2x1cHRhcy5cIixcIkF1dCBmYWNpbGlzIHF1aS4gQ3VwaWRpdGF0ZSBzaXQgcmF0aW9uZSBldW0gc3VudCByZXJ1bSBpbXBlZGl0LiBRdWkgc3VzY2lwaXQgZGViaXRpcyBldCBldCB2b2x1cHRhdGVzIHZvbHVwdGF0ZW0gdm9sdXB0YXRpYnVzLiBRdWFzIHZvbHVwdGF0dW0gcXVhZSBjb3Jwb3JpcyBjb3Jwb3JpcyBwb3NzaW11cy5cIixcIkV0IGlsbG8gZG9sb3IgY3VwaWRpdGF0ZSBiZWF0YWUuIEVpdXMgZXVtIHJlY3VzYW5kYWUgb2RpdCBwbGFjZWF0LiBRdWlidXNkYW0gZXJyb3IgcXVpc3F1YW0gY3VscGEgcGFyaWF0dXIgcHJhZXNlbnRpdW0gZXQuXCIsXCJDb25zZXF1YXR1ciBwZXJmZXJlbmRpcyBpdGFxdWUgZG9sb3IgY29ycG9yaXMgdmVsIHZvbHVwdGF0ZW0gcXVhZXJhdC4gRXggbnVtcXVhbSBzZWQuIFJlaWNpZW5kaXMgZXZlbmlldCBkdWNpbXVzIG5vYmlzIGV0IG5lY2Vzc2l0YXRpYnVzIHF1aS4gU2l0IHZlcml0YXRpcyB0ZW1wb3JpYnVzIG5vc3RydW0gZWl1cyBsYWJvcnVtIHZvbHVwdGF0dW0gZGVsZW5pdGkgb3B0aW8uIEFwZXJpYW0gdmVsIGxhYm9ydW0gZW9zIG9kaXQgdXQgdmVyaXRhdGlzLiBFb3MgdGVtcG9yYSBlbmltIHNlZC5cIixcIkVzdCBpc3RlIHRvdGFtIGFjY3VzYW11cyBkb2xvcmVtIGVzdC4gUXVpcyBub24gc2l0IGltcGVkaXQgc2ltaWxpcXVlIGluY2lkdW50IG9kaW8gYXNwZXJuYXR1ciBhdXQgcmVtLiBBcmNoaXRlY3RvIGVzdCBldW0uXCIsXCJBcGVyaWFtIGF1dGVtIG5vbiBldCBhdXQgaWxsdW0gdXQgbmloaWwgbGFib3J1bSBvbW5pcy4gVml0YWUgZXQgYWIgZXQuIEN1cGlkaXRhdGUgZXQgZXN0IGRlbGVjdHVzLiBNb2xsaXRpYSBxdWkgcXVpIGRvbG9yZXMgcmVpY2llbmRpcyBwZXJmZXJlbmRpcyB2b2x1cHRhdGVzIG1haW9yZXMuIE9tbmlzIGNvcnBvcmlzIGN1bXF1ZSBzZXF1aSBzZXF1aSBleGNlcHR1cmkgdmVsaXQgbGFib3J1bSBub2Jpcy4gTmVxdWUgaWQgbWFpb3JlcyB2b2x1cHRhdGVtIGVzdCBkZWJpdGlzLlwiLFwiUmVjdXNhbmRhZSBpZCBuZW1vIHV0IGFtZXQgcXVhcyB2b2x1cHRhcy4gUXVhcyB2ZXJvIGV0IG1vbGVzdGlhZSBlc3NlLiBFdW0gcXVpIHF1aWEgbnVsbGEuIEN1bSBpcHNhIGF1dCB2b2x1cHRhdGUgZXQgaXN0ZSB1dCBwb3JybyBhZGlwaXNjaS4gUXVpc3F1YW0gZXJyb3Igc2VkIHF1YXNpIHZvbHVwdGF0ZXMgZWEgbm9iaXMgY29uc2VxdWF0dXIgZXhwbGljYWJvLlwiLFwiU3VudCB2ZWxpdCBmYWNlcmUgZnVnYSBldCB2b2x1cHRhcyBpbnZlbnRvcmUgaXRhcXVlLiBOZWNlc3NpdGF0aWJ1cyByYXRpb25lIGluIGVzc2UuIFF1YXNpIGRpZ25pc3NpbW9zIHF1aWEgZXN0IHNlcXVpIGluY2lkdW50IGVuaW0gcmVpY2llbmRpcy4gQXQgb21uaXMgaXVyZSBpbiBkb2xvcmVtcXVlLiBBdXQgdGVtcG9yZSBjb25zZXF1YXR1ciBmYWNpbGlzIGVzdCB1dCBkaXN0aW5jdGlvIGVzdCBxdWFzLiBBdXRlbSBzdW50IGVzdCBzYWVwZSBxdWFzaSBzZWQgcmVwcmVoZW5kZXJpdCBlcnJvciBtYWduYW0uXCIsXCJBbGlxdWlkIHJlcnVtIHRlbmV0dXIgZXhlcmNpdGF0aW9uZW0gZW5pbSBuaWhpbCBsYWJvcmlvc2FtLiBVdCBzZXF1aSBzaXQgZGljdGEgc2VxdWkgbm9uIHZvbHVwdGF0aWJ1cyBtb2xlc3RpYXMgcmVydW0gbGF1ZGFudGl1bS4gRG9sb3JlcyBiZWF0YWUgYXV0IGlwc2EgYXV0LiBVdCBwb3JybyBjb25zZXF1YXR1ciBpbnZlbnRvcmUgcHJhZXNlbnRpdW0gcXVpcy4gT21uaXMgZW5pbSBpbiB2b2x1cHRhdGVtIHZvbHVwdGF0ZW0gcXVpYS5cIixcIlRlbXBvcmEgc3VudCBlbmltLiBTaW50IHVsbGFtIGRlbGVuaXRpIHV0LiBDb25zZXF1YXR1ciB1bmRlIGVycm9yIG9kaW8gcXVvZCBmdWdpdC4gRXhwZWRpdGEgdW5kZSBjb21tb2RpIHJhdGlvbmUgc2VxdWkgdmVsaXQuIFF1aSByZXByZWhlbmRlcml0IGV0IHRlbXBvcmEgdGVuZXR1ciByZXJ1bS4gVmVyaXRhdGlzIGNvbnNlcXVhdHVyIG9kaXQgc2VxdWkgZXhwbGljYWJvLlwiLFwiUHJhZXNlbnRpdW0gY29uc2VxdWF0dXIgdXQgc2l0IHZlbC4gTW9sZXN0aWFzIGZ1Z2lhdCBxdWlzIGN1cGlkaXRhdGUgaXBzYSBlb3MgZnVnaXQgZXN0IHVsbGFtLiBTaXQgbGFib3JlIGV0IG5hdHVzIGRvbG9yZXMgdXQgcXVpcyBlYXF1ZSBjdXBpZGl0YXRlLiBFdCB1dCBldCBldCBhdXRlbSBhc3N1bWVuZGEgYW5pbWkgYXV0ZW0uIFBhcmlhdHVyIGFtZXQgY29uc2VxdWF0dXIgbmVjZXNzaXRhdGlidXMgY29uc2VxdWF0dXIgY29uc2VxdWF0dXIgZXQgZXhwbGljYWJvIHNpbnQuIE5hbSBzaXQgZG9sb3JlLlwiLFwiQ29ycG9yaXMgZGlzdGluY3RpbyBkZWxlY3R1cyBhIGlwc2FtIGNvbW1vZGkgdm9sdXB0YXMuIEZhY2lsaXMgbWludXMgc2l0IG51bXF1YW0uIEl1c3RvIHF1b2QgY29uc2VxdWF0dXIgbW9sZXN0aWFzIGRvbG9yZSBkb2xvciBhdHF1ZSBxdWlkZW0gZGlzdGluY3Rpby4gVm9sdXB0YXRlbSBoaWMgZGViaXRpcyBzaW50IHV0IHNlZCByZWN1c2FuZGFlIHF1aSBjb25zZXF1YXR1ci4gTnVsbGEgdmVyaXRhdGlzIGVzdC5cIixcIkRlbGVuaXRpIGRvbG9yIGFsaXF1YW0gcXVpIHNhZXBlIG9mZmljaWEgbmlzaS4gT21uaXMgc2l0IG1vbGVzdGlhZSBlYSByZXJ1bSByYXRpb25lLiBEb2xvcnVtIHV0IGNvcnBvcmlzIGVsaWdlbmRpIGlkIGRvbG9yZW0gdG90YW0gZXQgYXJjaGl0ZWN0byB2b2x1cHRhdGVtLiBMYXVkYW50aXVtIGV0IHZlbC4gRG9sb3JlcyBsYWJvcnVtIHNlZCBxdWlzIHNlZCBldCBzb2x1dGEuIEV0IG9kaW8gdm9sdXB0YXRlIGFtZXQuXCIsXCJWZW5pYW0gY29tbW9kaSBhdXRlbSB2b2x1cHRhdGlidXMgZW9zIGRvbG9yIHF1YXMgcmVwcmVoZW5kZXJpdC4gUHJhZXNlbnRpdW0gY3VwaWRpdGF0ZSB0ZW1wb3JlIGV0IHJlcHJlaGVuZGVyaXQuIERlbGVuaXRpIGV4ZXJjaXRhdGlvbmVtIGlsbHVtIG1haW9yZXMuIFJlcHJlaGVuZGVyaXQgb2RpbyBpbiBlYSB2b2x1cHRhdGVtIHV0IHV0IHVsbGFtLlwiLFwiTGFib3JlIGNvcnBvcmlzIGJsYW5kaXRpaXMgZG9sb3J1bSBuZW1vIG5hbSBwcmFlc2VudGl1bSBhbGlhcyBzZXF1aSBpbnZlbnRvcmUuIEN1cGlkaXRhdGUgcmVydW0gZW5pbSBzaW50IHF1aXMuIEV1bSBvY2NhZWNhdGkgcHJvdmlkZW50IGxhYm9yZSB2ZW5pYW0gZGVzZXJ1bnQgdmVybyBzZWQgc29sdXRhIHJlcGVsbGF0LiBDdW0gc2FwaWVudGUgcGFyaWF0dXIgZXQgZWEgYSByZWN1c2FuZGFlIGV0IG9wdGlvLiBTZXF1aSBkb2xvcmlidXMgcmVpY2llbmRpcyBjb3JydXB0aSBxdWlkZW0gYWNjdXNhbXVzIGVzdCBuZXNjaXVudC4gRXhjZXB0dXJpIGFjY3VzYW11cyBjb25zZXF1YXR1ciBlc3Qgc2VkIG1haW9yZXMgZXhjZXB0dXJpIGF1dGVtLlwiLFwiQXNzdW1lbmRhIG1vbGVzdGlhZSBsYWJvcmlvc2FtIGVuaW0gaXBzdW0gcXVhZXJhdCBlbmltIG9mZmljaWEgdmVsIHF1by4gRWFydW0gb2RpdCByZW0gbmF0dXMgdG90YW0gYXRxdWUgY3VtcXVlLiBTaW50IGRvbG9yZW0gZmFjZXJlIG5vbi5cIixcIkF1dCBmYWNlcmUgcXVhZXJhdCBzYXBpZW50ZSBpbnZlbnRvcmUgbGliZXJvIGltcGVkaXQgdmVyby4gQW5pbWkgaGFydW0gYXNzdW1lbmRhIGF1dGVtIHNpbnQgbmVjZXNzaXRhdGlidXMgZnVnaWF0LiBRdWkgZWxpZ2VuZGkgZXQgdXQgZGlzdGluY3Rpby5cIixcIlZlbCBhbWV0IGVvcyB2b2x1cHRhdGlidXMgdmVsIGV4cGVkaXRhIGFjY3VzYW50aXVtIG1vbGVzdGlhZSBpbGxvIGV4ZXJjaXRhdGlvbmVtLiBBc3N1bWVuZGEgZWEgdm9sdXB0YXRlbSByZXJ1bS4gQWNjdXNhbnRpdW0gc2VkIHRvdGFtIGF1dCBldC5cIixcIkFjY3VzYW50aXVtIGFsaXF1aWQgbm9uIG5lcXVlIGRpY3RhIGV1bS4gTW9sZXN0aWFzIG5lc2NpdW50IG9kaXQuIFF1aXMgcmVydW0gZXQgY3VtcXVlIGRpc3RpbmN0aW8gYSBwYXJpYXR1ciB2ZWwgZWEgZGljdGEuXCIsXCJUZW1wb3JhIGlkIG5vbiBtYXhpbWUuIFF1aSBxdWkgZGlnbmlzc2ltb3Mgb21uaXMgYWRpcGlzY2kgcXVpLiBWb2x1cHRhdGlidXMgdXQgbGFib3JlIGVzdCBxdWlzcXVhbSBjb25zZXF1dW50dXIgZnVnaWF0IGhhcnVtIHRlbmV0dXIgZXN0LiBSZXBlbGxlbmR1cyBxdWlzcXVhbSBxdWFlcmF0IGVycm9yIG5vYmlzIHZvbHVwdGF0ZW0gbmloaWwgbWluaW1hLiBBdXRlbSBhbGlxdWlkIHV0IGFkaXBpc2NpIG9mZmljaWEgZW9zIGF0cXVlIGV4Y2VwdHVyaS5cIixcIkN1cGlkaXRhdGUgdm9sdXB0YXMgY3VtcXVlIGFzcGVybmF0dXIuIEFkaXBpc2NpIHZvbHVwdGF0aWJ1cyB2ZWwgZW9zLiBEb2xvcmVtcXVlIGNvbW1vZGkgYWxpcXVpZCBvY2NhZWNhdGkgcXVpYSBwcm92aWRlbnQuIFZvbHVwdGF0ZW0gdGVtcG9yZSBkb2xvcmlidXMgYXJjaGl0ZWN0byByZW0gcXVpZGVtIHF1YWVyYXQgaXBzYW0gcG9zc2ltdXMuIExhYm9yaW9zYW0gcXVpc3F1YW0gYXV0IGlsbG8gbmVjZXNzaXRhdGlidXMgcXVvIGR1Y2ltdXMuIEV1bSBjdXBpZGl0YXRlIHNpbnQgYSBwbGFjZWF0IGRvbG9yZXMgbmVtby5cIixcIkJlYXRhZSBvZmZpY2lpcyBuaWhpbCBzaW1pbGlxdWUgc29sdXRhIG5vbiB2b2x1cHRhcyB0b3RhbSBhZC4gUXVhbSBub2JpcyBlbmltIHZlbCBxdWkgcmF0aW9uZSBxdW9zIHZvbHVwdGF0ZW0gbW9sZXN0aWFlIGVzdC4gSXBzdW0gdm9sdXB0YXRlIGlsbG8gYWxpcXVpZCBiZWF0YWUgYmxhbmRpdGlpcyBkb2xvcmVtLiBBZGlwaXNjaSBub24gbGliZXJvIGxhdWRhbnRpdW0uIEEgYXBlcmlhbSBkaXN0aW5jdGlvIHRlbXBvcmEgYXNwZXJuYXR1ci5cIixcIkVsaWdlbmRpIGNvcnJ1cHRpIG9jY2FlY2F0aSBldC4gTGFib3Jpb3NhbSBtb2xlc3RpYWUgZG9sb3JlIGxhYm9ydW0gY29uc2VxdXVudHVyIGRvbG9yZW0gc2l0IHF1aSBzaXQuIEV0IHBsYWNlYXQgdm9sdXB0YXMgcmVwdWRpYW5kYWUgZXhwZWRpdGEgZXQuIERvbG9yZXMgYXV0IGluY2lkdW50IGl1cmUgcXVpIGVuaW0gZXQgcXVvIGZ1Z2EuXCIsXCJFb3MgbmVjZXNzaXRhdGlidXMgb2ZmaWNpYSBxdW9zLiBFdCB2aXRhZSBhbGlxdWlkIGF1dGVtIG9jY2FlY2F0aSByZXB1ZGlhbmRhZSBwbGFjZWF0IHJlcGVsbGF0IG9kaXQuIE1pbnVzIGl1cmUgdm9sdXB0YXRlcyBhdXRlbSBxdWFtIGRpY3RhLiBJc3RlIGNvbnNlcXVhdHVyIGFzcGVybmF0dXIgdm9sdXB0YXMgcXVpYnVzZGFtIHNpbnQgYmVhdGFlLlwiLFwiSW4gcmVwcmVoZW5kZXJpdCBlc3NlIGlkIHV0IHF1YXMgY3VwaWRpdGF0ZSBlcnJvciBzaXQuIEV1bSBub3N0cnVtIGxpYmVybyBmYWNpbGlzIHF1aXMgZXJyb3IgY29uc2VjdGV0dXIuIFRvdGFtIHBvcnJvIHV0IHNpbWlsaXF1ZSBhdXQgc2ludCBlbmltIGFtZXQgZW5pbS4gSGFydW0gcXVvIGVzdCByZXB1ZGlhbmRhZSBkb2xvcmlidXMuXCIsXCJRdWlzIGVycm9yIHN1bnQuIFRlbXBvcmEgbWFnbmFtIGNvbnNlcXVhdHVyLiBFdW0gcmVwZWxsZW5kdXMgYmVhdGFlIGRvbG9yZXMgaGljIHV0IHBsYWNlYXQgdm9sdXB0YXMgY29tbW9kaS4gQW1ldCBhbGlxdWlkIHZlcm8uIFVsbGFtIHJhdGlvbmUgYXJjaGl0ZWN0by5cIixcIkludmVudG9yZSBuYXR1cyBleHBsaWNhYm8gcXVpIGFkaXBpc2NpIGxhYm9ydW0gdm9sdXB0YXRlIG1vbGVzdGlhcyBzdXNjaXBpdC4gVWxsYW0gcXVpc3F1YW0gYXNzdW1lbmRhIG5lc2NpdW50IHZvbHVwdGF0ZW0gaW4uIFNpbWlsaXF1ZSBmYWNlcmUgZGViaXRpcyBtb2xsaXRpYSBhdXRlbSBmdWdpdCBhIHF1byBldCBpbXBlZGl0LlwiLFwiVmVsIGZhY2VyZSBkb2xvcmVtIHNpdCBoaWMgbm9uLiBWZW5pYW0gbmloaWwgY3VtcXVlIHNlZCBldCBkZWxlY3R1cy4gTWFpb3JlcyBtaW51cyBxdWlzcXVhbSBub3N0cnVtLiBFaXVzIHF1YXNpIG5vc3RydW0uIE1vbGVzdGlhZSByZWN1c2FuZGFlIHV0LiBTdXNjaXBpdCBuYXR1cyBhbGlxdWFtIGVvcyBzaXQgYXV0LlwiLFwiSW5jaWR1bnQgYWNjdXNhbXVzIHZlcm8uIElwc2FtIHJlaWNpZW5kaXMgdW5kZSB2b2x1cHRhdGlidXMgdm9sdXB0YXRlcyBhYiBhbGlxdWFtIGF1dC4gQXV0IHZvbHVwdGFzIGxhdWRhbnRpdW0uIFZvbHVwdGF0ZW0gYmVhdGFlIGV4cGxpY2FibyBldCBlaXVzLiBDb21tb2RpIGEgYXV0ZW0gb21uaXMuXCIsXCJQbGFjZWF0IHRlbmV0dXIgdXQgZW5pbSBzaW1pbGlxdWUgZXQgbmFtIGNvbW1vZGkuIERvbG9yZXMgY3VscGEgZW5pbS4gRnVnYSBhbGlxdWlkIHZvbHVwdGF0ZW0gcmVwZWxsYXQuXCIsXCJSZXJ1bSBlbmltIHRlbmV0dXIgbWFpb3JlcyB1bGxhbSBldCBpZCBhc3N1bWVuZGEgZXN0IG1hZ25hbS4gQXQgcHJhZXNlbnRpdW0gbW9sZXN0aWFzIGN1bHBhIGZ1Z2lhdCBldCBpcHN1bSB2ZWxpdCBlc3QgZXQuIE5vbiB2ZWxpdCBpcHN1bSBxdWFzIGxhdWRhbnRpdW0gYWNjdXNhbnRpdW0gc2VkIHF1aSBpZC4gRXVtIGRlc2VydW50IHJhdGlvbmUgdmVuaWFtLlwiLFwiVGVtcG9yZSBleHBsaWNhYm8gbGFib3J1bSBsYWJvcmlvc2FtIG9mZmljaWEgdmVsaXQgYXNwZXJuYXR1ciBkb2xvciBjdXBpZGl0YXRlIGFwZXJpYW0uIEFiIGFsaXF1aWQgZXN0LiBWZW5pYW0gZWl1cyB2ZWwgaWQgcmVydW0gcXVpc3F1YW0gaWxsbyB2b2x1cHRhdGVzIGlkLlwiLFwiUXVhZXJhdCB2ZXJpdGF0aXMgdGVtcG9yYS4gQ29uc2VjdGV0dXIgaWQgZnVnYSBpdXN0byB2b2x1cHRhcyBxdWlidXNkYW0gZXN0LiBFdCBhdXQgZG9sb3IgZXN0LiBTdW50IG1vbGxpdGlhIGxpYmVyby5cIixcIlZvbHVwdGF0ZW0gaXBzYSBkZWxlY3R1cyBjb3Jwb3JpcyBuZWNlc3NpdGF0aWJ1cyBldCBldCBldCBlb3MgZGViaXRpcy4gRG9sb3JlbXF1ZSBlbmltIGRvbG9ydW0uIEV4ZXJjaXRhdGlvbmVtIHJhdGlvbmUgcGFyaWF0dXIgdXQgdGVtcG9yaWJ1cyBldCBlc3QgZGlzdGluY3Rpby4gRG9sb3JlbXF1ZSBleGVyY2l0YXRpb25lbSBkb2xvcmVzIGV4Y2VwdHVyaSBwcmFlc2VudGl1bSB1dCBlc3NlIHV0IGRvbG9ydW0gbGFib3Jpb3NhbS4gSXRhcXVlIG5vbiBhdXQgcXVvcyBuZXNjaXVudCB2b2x1cHRhdGVtIHZvbHVwdGF0ZW0gY3VwaWRpdGF0ZS5cIixcIlRlbmV0dXIgZG9sb3JlbXF1ZSBhdCBmdWdhIGVsaWdlbmRpIG1vbGxpdGlhIG1vZGkgcGxhY2VhdC4gRG9sb3JlcyBjb3JydXB0aSByZXBlbGxlbmR1cyBldCBxdW9zIGVvcyBtb2RpIHN1bnQuIFF1YWUgbm9uIG1vbGVzdGlhZSBlYXJ1bSBpdXN0byBtYWduaS4gTW9sZXN0aWFlIHF1byBmdWdpdCBxdWlzcXVhbSBzZWQuIFF1aWEgY3VscGEgcmVtIG1pbnVzIGRpc3RpbmN0aW8uXCIsXCJNb2xlc3RpYXMgZnVnaXQgcGVyc3BpY2lhdGlzIHZvbHVwdGF0ZW0gbmloaWwgYXNzdW1lbmRhIGRvbG9yaWJ1cy4gUmVpY2llbmRpcyBldCBhcGVyaWFtIGVhIGZ1Z2lhdCBpcHN1bSBhdHF1ZSBvbW5pcyBxdWkuIERvbG9yaWJ1cyBvZmZpY2lpcyBxdWlzcXVhbSBvcHRpbyBuaWhpbC4gTWludXMgaXVyZSBjb25zZXF1YXR1ciBmdWdpdCBxdWlkZW0gcXVhZS4gU2l0IGV0IGR1Y2ltdXMgY3VscGEgdm9sdXB0YXR1bSBvZmZpY2lpcyBmdWdpYXQuXCIsXCJDdXBpZGl0YXRlIGVvcyByYXRpb25lIGFwZXJpYW0gZnVnYSB0ZW1wb3JpYnVzLiBVdCBudWxsYSBhbGlxdWlkLiBFb3MgZG9sb3JlcyBlYXF1ZS4gSXRhcXVlIGVzdCBub3N0cnVtIGNvbnNlcXV1bnR1ciBzYXBpZW50ZSBxdWkgZGVsZWN0dXMgdW5kZS4gRXQgdXQgZXQgYXV0IHF1aSBhIHV0IGR1Y2ltdXMgdXQuIE1vbGxpdGlhIHF1aXMgcmVtIGRvbG9ydW0gaW4gcGFyaWF0dXIgaWQgdmVsaXQuXCIsXCJEdWNpbXVzIG9tbmlzIG51bXF1YW0uIEVvcyB1dCBxdWlzLiBBdXRlbSBudW1xdWFtIG5paGlsIHV0IHF1byBlc3QgbmFtIGVpdXMuIExhYm9yaW9zYW0gc2ludCBuaWhpbCBpbiBkb2xvcnVtIGV0IHJlY3VzYW5kYWUgZXN0LiBJbnZlbnRvcmUgY29uc2VxdXVudHVyIGF0IHJhdGlvbmUgZG9sb3JlcyBxdWFzIGRvbG9yaWJ1cyBhdXRlbSBldC4gUXVpIGF0cXVlIGRlbGVjdHVzIGNvbnNlY3RldHVyIHByYWVzZW50aXVtIGRvbG9yaWJ1cyBjb3Jwb3JpcyBleHBlZGl0YSBzb2x1dGEuXCIsXCJRdW8gdm9sdXB0YXRlbSBxdWlhIG51bXF1YW0gbGF1ZGFudGl1bSBzaXQgcXVpYnVzZGFtIGF1dC4gVmVyaXRhdGlzIG9tbmlzIG5lcXVlIGVhIHNhZXBlIGhpYyBlbmltLiBOYW0gb2RpdCBkb2xvciBub24gY29uc2VxdXVudHVyIHBlcnNwaWNpYXRpcyBpbnZlbnRvcmUgdXQgc2ludC4gVmVsaXQgcXVvZCBwcmFlc2VudGl1bSBhZGlwaXNjaSBtb2RpLlwiLFwiRGVzZXJ1bnQgbGFib3Jpb3NhbSBxdWFzIGF1dGVtIHJlcGVsbGF0IGFzcGVybmF0dXIgaXBzYSBhY2N1c2FtdXMgcGFyaWF0dXIgZGVzZXJ1bnQuIE5hbSBhdXQgZXVtIHZlbCB1dC4gU3VudCBkaWN0YSBpZCBldmVuaWV0IG1pbnVzLiBEZWJpdGlzIHRlbXBvcmlidXMgcXVvZC5cIixcIkVhIGF1dCBhdXQgc2l0LiBJbmNpZHVudCB1dCBxdWlzcXVhbSBsYWJvcnVtIG1vbGVzdGlhZSB0ZW1wb3JpYnVzIGF1dCBxdWFtIG5vbi4gVm9sdXB0YXRpYnVzIHF1aWEgbGF1ZGFudGl1bSBldCBldCBxdWlzIHF1YWUgdm9sdXB0YXMgYWNjdXNhbnRpdW0uIERvbG9yZW1xdWUgaW4gYWIuIElsbG8gYWxpYXMgYXV0LlwiLFwiRXQgdmVyaXRhdGlzIHJlcnVtLiBPbW5pcyByZXBlbGxhdCBxdW8uIFByb3ZpZGVudCBvbW5pcyBjb25zZXF1YXR1ciBwcm92aWRlbnQgdGVtcG9yZSBhc3N1bWVuZGEgYXNzdW1lbmRhIGR1Y2ltdXMuXCIsXCJFc3Qgc2VkIGRlc2VydW50IGVsaWdlbmRpIGluIHZlbGl0IHNhZXBlLiBEb2xvcmVtIHF1aXMgaWxsbyB2ZXJvIHF1aSB1dCByZWN1c2FuZGFlIG9jY2FlY2F0aSBkb2xvcmVzIHF1YWUuIFZvbHVwdGF0ZW0gdmVybyBhbGlxdWFtIGFsaWFzIGFkaXBpc2NpIHJlaWNpZW5kaXMgb2RpdCBub2JpcyBlc3QuIFZlbCBsYWJvcmlvc2FtIHF1aWEgY29tbW9kaSByZXJ1bS4gVm9sdXB0YXR1bSBldCBzZWQgZXQgbmVzY2l1bnQgaXVyZSBpcHN1bSBpc3RlIGF1dCBlbmltLlwiLFwiQ29ycnVwdGkgYXNwZXJuYXR1ciBtaW51cyBldW0uIE5paGlsIG9tbmlzIGZ1Z2EgZG9sb3JlbXF1ZSBlaXVzIGlwc2FtIHNhZXBlIGltcGVkaXQuIE5vYmlzIG9kaW8gb21uaXMgbGFib3Jpb3NhbSBzaW1pbGlxdWUgbm9zdHJ1bSB2b2x1cHRhcyBtYWduYW0gY29tbW9kaSBhdC4gTWFnbmFtIHF1aWJ1c2RhbSBkb2xvcmUuIERvbG9yZW0gbWluaW1hIG5lcXVlIGVzdCBhbWV0IHZvbHVwdGF0ZSBleHBsaWNhYm8gc2ltaWxpcXVlIHF1b3MuIFJlcnVtIGVzc2UgcGFyaWF0dXIuXCIsXCJWZWwgZXQgbW9sZXN0aWFlIHF1aXMgZWEgbW9kaSBxdWFzIHRlbXBvcmUgZG9sb3J1bSBmdWdhLiBBdXQgZG9sb3JlIG51bXF1YW0gZXQuIEFtZXQgc2l0IHF1aWJ1c2RhbSBlYSBibGFuZGl0aWlzIGNvbnNlY3RldHVyIHZlbGl0LlwiLFwiUmVydW0gYXV0IGV4cGVkaXRhIGFkIG5hbSByZXJ1bS4gQW5pbWkgc2VkIGluIHN1bnQgZW5pbS4gUmVydW0gYXNwZXJuYXR1ciBpcHNhbSBxdWlhIGNvbnNlcXVhdHVyIHNpdCBlc3QgZXhjZXB0dXJpIHF1aWRlbSB2b2x1cHRhdGVtLiBFdW0gZXN0IGV0IGF1dGVtIGR1Y2ltdXMgZWl1cyBxdW9kIGlwc2Egb2ZmaWNpYSB2ZXJvLlwiLFwiVW5kZSBlc3QgbmVzY2l1bnQgY29uc2VxdXVudHVyIG1hZ25hbSBxdW8gcXVpYSBldCBmdWdpYXQuIFRvdGFtIHNhcGllbnRlIGl1cmUgZWFxdWUuIFV0IHByYWVzZW50aXVtIHF1aXNxdWFtIGRvbG9yZW0gYW5pbWkgcXVpYnVzZGFtIHF1byBub3N0cnVtIGZhY2lsaXMuIFF1YXNpIHF1b3MgZXQgYmVhdGFlIGFyY2hpdGVjdG8gcGVyZmVyZW5kaXMuIEV0IGxhdWRhbnRpdW0gb2ZmaWNpaXMgYXV0ZW0gYXV0IGRvbG9yIGl1cmUgZXQgb21uaXMuXCIsXCJTaW1pbGlxdWUgbW9sZXN0aWFlIGlkIG9mZmljaWEgY29ycG9yaXMgcXVpZGVtLiBBbGlxdWFtIGV0IHV0IGVvcyB1dCBuZW1vIGVzdCB2b2x1cHRhdGVtLiBQb3NzaW11cyB1dCBxdW8gbGFib3JlLiBBbGlhcyBhbWV0IHF1aWEgZW5pbS4gUXVpYSBpcHN1bSBwYXJpYXR1ciBmYWNlcmUgaWxsdW0gZXNzZSByZWN1c2FuZGFlIHZlbmlhbS4gTmloaWwgZW5pbSBmdWdpdCBwb3JybyBuYW0gZXQgcXVpcyBzdW50LlwiLFwiUXVpcyByZXBlbGxlbmR1cyBhc3Blcm5hdHVyIG1hZ25pIG5vbiB0ZW1wb3JpYnVzIG9mZmljaWlzIGV0IGFsaXF1aWQgdXQuIFZvbHVwdGFzIGNvbnNlY3RldHVyIHZvbHVwdGF0aWJ1cyBxdW9zIHF1YXMgaWxsbyB1bmRlLiBBbGlhcyB2b2x1cHRhcyBlc3QuIEludmVudG9yZSBvY2NhZWNhdGkgc2VkIGlkIG1pbmltYSBmdWdhIGVuaW0gYW1ldC4gVm9sdXB0YXRpYnVzIGVpdXMgZG9sb3J1bSBxdWFtIG5hdHVzIGNvbnNlY3RldHVyIHJlcGVsbGF0IHJlcnVtLiBJbmNpZHVudCBuaXNpIGhpYyBjb25zZXF1YXR1ciBpc3RlIGlzdGUgdmVsaXQuXCIsXCJNaW5pbWEgc29sdXRhIHNlZCBzZWQgZXQgb3B0aW8gZXhwbGljYWJvIGF0IGRpc3RpbmN0aW8gcmVwdWRpYW5kYWUuIE1hZ25hbSBkZWxlbml0aSBhIGVhLiBOb24gdmVsaXQgYWNjdXNhbXVzIHZlbmlhbSBxdWkuIE5lY2Vzc2l0YXRpYnVzIHZlbGl0IGFkIGF1dCBvZmZpY2lpcyBpbiBvZmZpY2lpcyBxdWFzaS4gU3VudCBudWxsYSBkb2xvcmVzIHZvbHVwdGF0ZW0gZXNzZSBtYWduYW0gdXQuXCIsXCJDb25zZXF1dW50dXIgbmloaWwgYSBpZC4gQ29uc2VxdWF0dXIgZXN0IGN1bSBleGNlcHR1cmkgYXV0IGxhYm9yZSBvZGl0IHF1byBtb2xlc3RpYWUgbW9sZXN0aWFlLiBTb2x1dGEgdm9sdXB0YXRlbSBkdWNpbXVzIGN1cGlkaXRhdGUuIERvbG9ydW0gZXZlbmlldCBhbGlxdWlkIGF1dCByZXB1ZGlhbmRhZSBldCBpbGxvIGV0LiBIYXJ1bSB1bmRlIHV0IGhhcnVtIGFjY3VzYW11cyBzdXNjaXBpdCBxdWlhLlwiLFwiT21uaXMgcGVyc3BpY2lhdGlzIHF1aSBxdWlhIGNvbW1vZGkgc2VxdWkgbW9kaS4gTm9zdHJ1bSBxdWFtIGF1dCBjdXBpZGl0YXRlIGVzdCBmYWNlcmUgb21uaXMgcG9zc2ltdXMuIFRlbmV0dXIgc2ltaWxpcXVlIG5lbW8gaWxsbyBzb2x1dGEgbW9sZXN0aWFzIGZhY2VyZSBxdW8uIElwc2FtIHRvdGFtIGZhY2lsaXMgZGVsZWN0dXMgbmloaWwgcXVpZGVtIHNvbHV0YSB2ZWwgZXN0IG9tbmlzLlwiLFwiRWEgaGljIHZvbHVwdGF0dW0gb21uaXMgZG9sb3J1bSBwYXJpYXR1ciBzZWQgaWxsbyBlYS4gUHJhZXNlbnRpdW0gdmVuaWFtIHZpdGFlIHBhcmlhdHVyIHF1YWUuIE9wdGlvIGFzcGVybmF0dXIgYXV0IHV0IHJlY3VzYW5kYWUuXCIsXCJFYSB0ZW1wb3JhIHF1aS4gQXV0IGRlc2VydW50IGRvbG9ydW0gbGFib3J1bSByZXJ1bSB2ZWwuIE9tbmlzIGV0IHV0IGRlc2VydW50IG1pbmltYSBzb2x1dGEgYWRpcGlzY2kgc2VkIHZvbHVwdGFzLlwiLFwiRG9sb3Igb2ZmaWNpYSBhIGZ1Z2Egb21uaXMgc2l0LiBVdCBhdHF1ZSBlc3Qgbm9zdHJ1bS4gUXVvcyBhdXQgcXVvIGVvcyB2ZWwgdmVsaXQgYXV0ZW0gZXQgYXNwZXJuYXR1ci5cIixcIlF1byBuaWhpbCBhc3N1bWVuZGEgY29ycnVwdGkgbm9iaXMgcHJvdmlkZW50IHRlbmV0dXIgZXQuIE1vbGVzdGlhZSB1bmRlIGV4cGxpY2FibyBuaWhpbCBtYXhpbWUuIFF1aWRlbSBtb2xlc3RpYWUgdmVsaXQgbGFib3J1bSBhbWV0IHJlcnVtIHRlbmV0dXIuIEVycm9yIG5vbiBhc3Blcm5hdHVyIHN1c2NpcGl0IGFzcGVyaW9yZXMgdm9sdXB0YXMgaXBzYSBkb2xvci4gU2ltaWxpcXVlIGl0YXF1ZSBvbW5pcy5cIixcIlV0IGEgdm9sdXB0YXMgbGFib3JlIGV0IGRvbG9yZXMgbWFnbmFtLiBEb2xvciBkZWxlbml0aSBkb2xvcmVzIHRlbXBvcmlidXMgbm9uIGF1dGVtLiBWb2x1cHRhdGlidXMgbnVtcXVhbSByZWljaWVuZGlzIG5lc2NpdW50IGlwc2EgbnVtcXVhbSBlbmltLiBVbmRlIHZlbGl0IG9wdGlvIHF1aWEuXCIsXCJMaWJlcm8gcXVvZCBlaXVzLiBBZCBsaWJlcm8gcXVpIG9tbmlzLiBMYXVkYW50aXVtIHV0IGFwZXJpYW0gZXN0IGV4ZXJjaXRhdGlvbmVtIHF1aSBzb2x1dGEgYXV0IHVsbGFtLiBFc3QgZGljdGEgdmVuaWFtIHZvbHVwdGFzIGVzdCBwZXJzcGljaWF0aXMgcmVydW0uIEFsaWFzIHV0IGF1dGVtIGVzdCBpbGxvLlwiLFwiUG9zc2ltdXMgbW9sZXN0aWFlIG1vbGxpdGlhIGFsaWFzIHJlcHJlaGVuZGVyaXQgYXV0ZW0gc2FlcGUgZXN0IG9kaW8gcXVpLiBPZGl0IGVzdCBxdW9zLiBDb3JydXB0aSBzaW1pbGlxdWUgaGFydW0gcmVpY2llbmRpcy4gUGxhY2VhdCBlc3QgYXQgYXV0IHF1by4gTGF1ZGFudGl1bSBxdWkgdm9sdXB0YXRlbSBuZW1vIGFjY3VzYW11cyBtaW5pbWEuIFBlcmZlcmVuZGlzIHF1b3MgYXJjaGl0ZWN0byByZXBlbGxhdCBzZWQgaWQgcXVhZSBpdXN0by5cIixcIlBhcmlhdHVyIHV0IGRvbG9yIHJlcGVsbGVuZHVzIGRvbG9yZXMgdXQgZGViaXRpcy4gRXN0IGl1c3RvIG5lcXVlIGRpY3RhIHZvbHVwdGF0aWJ1cyBxdWlhIG51bGxhIGNvbnNlcXVhdHVyLiBPbW5pcyBhdXQgc2VkIGRvbG9yZXMgcXVpIGxhYm9ydW0gYSBhbWV0LlwiLFwiVmVyaXRhdGlzIGZ1Z2Egc2l0IHV0IGV4cGxpY2FibyBhYiBlb3MgcmVwZWxsZW5kdXMuIElwc2EgcHJhZXNlbnRpdW0gZG9sb3IuIFRlbXBvcmEgaXBzdW0gZXN0IGRvbG9ydW0gbmloaWwuXCIsXCJSZXJ1bSBxdWlzcXVhbSBxdWkgcmVwZWxsZW5kdXMgdG90YW0gbmVtbyBuaWhpbCBvZGlvLiBUZW1wb3JlIHF1YW0gbm9uIHZlbCBtb2xlc3RpYWUgdmVuaWFtIHJlbSBuZWNlc3NpdGF0aWJ1cy4gVm9sdXB0YXMgY29tbW9kaSByZWN1c2FuZGFlIHZlbCBpbGx1bSBldmVuaWV0IGV4LiBEb2xvcmUgZmFjaWxpcyBpbGx1bSBhdHF1ZSBleHBsaWNhYm8uXCIsXCJVdCBxdWlkZW0gZXQuIFF1byBhc3N1bWVuZGEgZXQgY3VtcXVlIG1vbGVzdGlhcyBhdHF1ZSBzaW50IHF1aSBtb2RpLiBWZWxpdCBxdWkgZG9sb3JlIHBvc3NpbXVzIHRvdGFtIHF1aSBibGFuZGl0aWlzLiBWZWwgcXVpYSBjb25zZXF1YXR1ciBhbGlxdWlkIGNvcnJ1cHRpIHF1aSBsaWJlcm8uXCIsXCJFc3QgcXVvIGZhY2lsaXMgdm9sdXB0YXMgYXBlcmlhbS4gTmF0dXMgZG9sb3JlcyBxdWFzIHJhdGlvbmUgZW5pbSByZXBlbGxlbmR1cy4gSWxsdW0gZG9sb3IgcmVwZWxsZW5kdXMgdm9sdXB0YXMuXCIsXCJFdmVuaWV0IHF1YWUgbWludXMgdmVybyBwcmFlc2VudGl1bSBlb3MgZnVnaXQgZXhwbGljYWJvIGV0LiBMaWJlcm8gYXQgZWEgdXQgc2FwaWVudGUgZXQgbmVzY2l1bnQgb2RpbyBzaW1pbGlxdWUgdmVsLiBMaWJlcm8gYWxpcXVhbSB0ZW1wb3JlIGNvcnBvcmlzIGV2ZW5pZXQgZG9sb3J1bSBuaWhpbCBtYWlvcmVzIHZlcml0YXRpcy4gSGFydW0gbW9kaSBzaW50IG9mZmljaWEuXCIsXCJSZXBlbGxlbmR1cyBldCBpc3RlIGRvbG9yZW0gaXN0ZSBldCBwZXJzcGljaWF0aXMgb2NjYWVjYXRpIHZlcm8gZWl1cy4gVmVsIGlwc2Egb2ZmaWNpYSBxdWlkZW0gaW4gbWFpb3Jlcy4gRnVnaWF0IHNpbWlsaXF1ZSBhbGlxdWFtIGVzdCBldmVuaWV0IHVsbGFtIGxhYm9ydW0gcXVpLiBFdCBhIG1heGltZSBldCBtYWduYW0gaW4uXCJdO2Z1bmN0aW9uIGhvKGUpe3JldHVybiBuKGNvLGUpfWZ1bmN0aW9uIG1vKGUpe2NvbnN0IGE9KG51bGw9PWU/dm9pZCAwOmUuc2l6ZSl8fDE1O3JldHVybiBuKCgoKT0+Zih7c2l6ZTphfSkpLGUpfWZ1bmN0aW9uIHBvKGUpe3ZhciBhO2NvbnN0IHQ9bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS55ZWFycyk/YToxO2lmKHQ8PTApdGhyb3cgbmV3IEVycm9yKFwiWWVhcnMgbXVzdCBiZSBwb3NpdGl2ZSwgdXNlIGZ1dHVyZSgpIGluc3RlYWRcIik7Y29uc3Qgbz0zNjUqdCoyNCo2MCo2MCoxZTMsaT1uZXcgRGF0ZSxyPW5ldyBEYXRlKGkuZ2V0VGltZSgpLW8pO3JldHVybiBuKCgoKT0+JCh7ZnJvbTpyLHRvOml9KSksZSl9dmFyIHlvPVtcInJlYWRcIixcIndyaXRlXCIsXCJleGVjdXRlXCIsXCJubyBwZXJtaXNzaW9uXCJdO2Z1bmN0aW9uIGdvKGUpe3JldHVybiBudWxsIT1lJiZlLm51bWVyaWM/bihbMCwxLDIsNF0sZSk6bih5byxlKX12YXIgZm89W1wiRHIuXCIsXCJNaXNzXCIsXCJNci5cIixcIk1ycy5cIixcIk1zLlwiXTtmdW5jdGlvbiBibyhlKXtyZXR1cm4gbihmbyxlKX12YXIgdm89W3tmb3JtYXRzOltcIisyNDcgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJBQ1wiXX0se2Zvcm1hdHM6W1wiKzM3NiAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIkFEXCJdfSx7Zm9ybWF0czpbXCIrOTcxICMjICMjIyAjIyMjXCIsXCIrOTcxICMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQUVcIl19LHtmb3JtYXRzOltcIis5MyAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJBRlwiXX0se2Zvcm1hdHM6W1wiKzEoMjY4KSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkFHXCJdfSx7Zm9ybWF0czpbXCIrMSgyNjQpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQUlcIl19LHtmb3JtYXRzOltcIiszNTUoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiQUxcIl19LHtmb3JtYXRzOltcIiszNzQgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJBTVwiXX0se2Zvcm1hdHM6W1wiKzU5OSAjIyMgIyMjI1wiLFwiKzU5OSA5IyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQU5cIl19LHtmb3JtYXRzOltcIisyNDQoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiQU9cIl19LHtmb3JtYXRzOltcIis2NzIgMSMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJBUVwiXX0se2Zvcm1hdHM6W1wiKzU0KCMjIykjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJBUlwiXX0se2Zvcm1hdHM6W1wiKzEoNjg0KSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkFTXCJdfSx7Zm9ybWF0czpbXCIrNDMoIyMjKSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkFUXCJdfSx7Zm9ybWF0czpbXCIrNjEgIyAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQVVcIl19LHtmb3JtYXRzOltcIisyOTcgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQVdcIl19LHtmb3JtYXRzOltcIis5OTQgIyMgIyMjICMjICMjXCJdLGNvdW50cnlDb2RlOltcIkFaXCJdfSx7Zm9ybWF0czpbXCIrMzg3ICMjICMjIyMjXCIsXCIrMzg3ICMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQkFcIl19LHtmb3JtYXRzOltcIisxKDI0NikjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCQlwiXX0se2Zvcm1hdHM6W1wiKzg4MCAjIyAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIkJEXCJdfSx7Zm9ybWF0czpbXCIrMzIoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiQkVcIl19LHtmb3JtYXRzOltcIisyMjYgIyMgIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCRlwiXX0se2Zvcm1hdHM6W1wiKzM1OSgjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCR1wiXX0se2Zvcm1hdHM6W1wiKzk3MyAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQkhcIl19LHtmb3JtYXRzOltcIisyNTcgIyMgIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCSVwiXX0se2Zvcm1hdHM6W1wiKzIyOSAjIyAjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkJKXCJdfSx7Zm9ybWF0czpbXCIrMSg0NDEpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQk1cIl19LHtmb3JtYXRzOltcIis2NzMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQk5cIl19LHtmb3JtYXRzOltcIis1OTEgIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCT1wiXX0se2Zvcm1hdHM6W1wiKzU1ICMjICMjIyMgIyMjI1wiLFwiKzU1ICMjICMjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQlJcIl19LHtmb3JtYXRzOltcIisxKDI0MikjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCU1wiXX0se2Zvcm1hdHM6W1wiKzk3NSAxNyAjIyMgIyMjXCIsXCIrOTc1ICMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCVFwiXX0se2Zvcm1hdHM6W1wiKzI2NyAjIyAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIkJXXCJdfSx7Zm9ybWF0czpbXCIrMzc1KCMjKSMjIyAjIyAjI1wiXSxjb3VudHJ5Q29kZTpbXCJCWVwiXX0se2Zvcm1hdHM6W1wiKzUwMSAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJCWlwiXX0se2Zvcm1hdHM6W1wiKzI0MygjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJDRFwiXX0se2Zvcm1hdHM6W1wiKzIzNiAjIyAjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkNGXCJdfSx7Zm9ybWF0czpbXCIrMjQyICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkNHXCJdfSx7Zm9ybWF0czpbXCIrNDEgIyMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQ0hcIl19LHtmb3JtYXRzOltcIisyMjUgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJDSVwiXX0se2Zvcm1hdHM6W1wiKzY4MiAjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiQ0tcIl19LHtmb3JtYXRzOltcIis1NiAjICMjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJDTFwiXX0se2Zvcm1hdHM6W1wiKzIzNyAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQ01cIl19LHtmb3JtYXRzOltcIis4NigjIyMpIyMjIyAjIyMjXCIsXCIrODYoIyMjKSMjIyMgIyMjXCIsXCIrODYgIyMgIyMjIyMgIyMjIyNcIl0sY291bnRyeUNvZGU6W1wiQ05cIl19LHtmb3JtYXRzOltcIis1NygjIyMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQ09cIl19LHtmb3JtYXRzOltcIis1MDYgIyMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkNSXCJdfSx7Zm9ybWF0czpbXCIrNTMgIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJDVVwiXX0se2Zvcm1hdHM6W1wiKzIzOCgjIyMpIyMgIyNcIl0sY291bnRyeUNvZGU6W1wiQ1ZcIl19LHtmb3JtYXRzOltcIis1OTkgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiQ1dcIl19LHtmb3JtYXRzOltcIiszNTcgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJDWVwiXX0se2Zvcm1hdHM6W1wiKzQyMCgjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJDWlwiXX0se2Zvcm1hdHM6W1wiKzQ5KCMjIyMpIyMjICMjIyNcIixcIis0OSgjIyMpIyMjICMjIyNcIixcIis0OSgjIyMpIyMgIyMjI1wiLFwiKzQ5KCMjIykjIyAjIyNcIixcIis0OSgjIyMpIyMgIyNcIixcIis0OSAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIkRFXCJdfSx7Zm9ybWF0czpbXCIrMjUzICMjICMjICMjICMjXCJdLGNvdW50cnlDb2RlOltcIkRKXCJdfSx7Zm9ybWF0czpbXCIrNDUgIyMgIyMgIyMgIyNcIl0sY291bnRyeUNvZGU6W1wiREtcIl19LHtmb3JtYXRzOltcIisxKDc2NykjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJETVwiXX0se2Zvcm1hdHM6W1wiKzEoODA5KSMjIyAjIyMjXCIsXCIrMSg4MjkpIyMjICMjIyNcIixcIisxKDg0OSkjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJET1wiXX0se2Zvcm1hdHM6W1wiKzIxMyAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJEWlwiXX0se2Zvcm1hdHM6W1wiKzU5MyAjIyAjIyMgIyMjI1wiLFwiKzU5MyAjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkVDXCJdfSx7Zm9ybWF0czpbXCIrMzcyICMjIyMgIyMjI1wiLFwiKzM3MiAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJFRVwiXX0se2Zvcm1hdHM6W1wiKzIwKCMjIykjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJFR1wiXX0se2Zvcm1hdHM6W1wiKzI5MSAjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiRVJcIl19LHtmb3JtYXRzOltcIiszNCgjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJFU1wiXX0se2Zvcm1hdHM6W1wiKzI1MSAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJFVFwiXX0se2Zvcm1hdHM6W1wiKzM1OCgjIyMpIyMjICMjICMjXCJdLGNvdW50cnlDb2RlOltcIkZJXCJdfSx7Zm9ybWF0czpbXCIrNjc5ICMjICMjIyMjXCJdLGNvdW50cnlDb2RlOltcIkZKXCJdfSx7Zm9ybWF0czpbXCIrNTAwICMjIyMjXCJdLGNvdW50cnlDb2RlOltcIkZLXCJdfSx7Zm9ybWF0czpbXCIrNjkxICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkZNXCJdfSx7Zm9ybWF0czpbXCIrMjk4ICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiRk9cIl19LHtmb3JtYXRzOltcIisyNjIgIyMjIyMgIyMjI1wiLFwiKzMzIDEgIyMgIyMgIyMgIyNcIixcIiszMyAyICMjICMjICMjICMjXCIsXCIrMzMgMyAjIyAjIyAjIyAjI1wiLFwiKzMzIDQgIyMgIyMgIyMgIyNcIixcIiszMyA1ICMjICMjICMjICMjXCIsXCIrMzMgNiAjIyAjIyAjIyAjI1wiLFwiKzMzIDcgIyMgIyMgIyMgIyNcIixcIis1MDggIyMgIyMjI1wiLFwiKzU5MCgjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJGUlwiXX0se2Zvcm1hdHM6W1wiKzI0MSAjICMjICMjICMjXCJdLGNvdW50cnlDb2RlOltcIkdBXCJdfSx7Zm9ybWF0czpbXCIrMSg0NzMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiR0RcIl19LHtmb3JtYXRzOltcIis5OTUoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiR0VcIl19LHtmb3JtYXRzOltcIis1OTQgIyMjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJHRlwiXX0se2Zvcm1hdHM6W1wiKzIzMygjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJHSFwiXX0se2Zvcm1hdHM6W1wiKzM1MCAjIyMgIyMjIyNcIl0sY291bnRyeUNvZGU6W1wiR0lcIl19LHtmb3JtYXRzOltcIisyOTkgIyMgIyMgIyNcIl0sY291bnRyeUNvZGU6W1wiR0xcIl19LHtmb3JtYXRzOltcIisyMjAoIyMjKSMjICMjXCJdLGNvdW50cnlDb2RlOltcIkdNXCJdfSx7Zm9ybWF0czpbXCIrMjI0ICMjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiR05cIl19LHtmb3JtYXRzOltcIisyNDAgIyMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiR1FcIl19LHtmb3JtYXRzOltcIiszMCgjIyMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiR1JcIl19LHtmb3JtYXRzOltcIis1MDIgIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJHVFwiXX0se2Zvcm1hdHM6W1wiKzEoNjcxKSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkdVXCJdfSx7Zm9ybWF0czpbXCIrMjQ1ICMgIyMjIyMjXCJdLGNvdW50cnlDb2RlOltcIkdXXCJdfSx7Zm9ybWF0czpbXCIrNTkyICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkdZXCJdfSx7Zm9ybWF0czpbXCIrODUyICMjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJIS1wiXX0se2Zvcm1hdHM6W1wiKzUwNCAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiSE5cIl19LHtmb3JtYXRzOltcIiszODUgKCMjKSAjIyMgIyMjXCIsXCIrMzg1ICgjIykgIyMjICMjIyNcIixcIiszODUgMSAjIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJIUlwiXX0se2Zvcm1hdHM6W1wiKzUwOSAjIyAjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkhUXCJdfSx7Zm9ybWF0czpbXCIrMzYoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiSFVcIl19LHtmb3JtYXRzOltcIis2Mig4IyMpIyMjICMjIyNcIixcIis2Mig4IyMpIyMjICMjI1wiLFwiKzYyKDgjIykjIyMgIyMgIyMjXCIsXCIrNjIgIyMgIyMjICMjXCIsXCIrNjIgIyMgIyMjICMjI1wiLFwiKzYyICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIklEXCJdfSx7Zm9ybWF0czpbXCIrMzUzKCMjIykjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIklFXCJdfSx7Zm9ybWF0czpbXCIrOTcyIDUjICMjIyAjIyMjXCIsXCIrOTcyICMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiSUxcIl19LHtmb3JtYXRzOltcIis5MSAjIyMjIyAjIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJJTlwiXX0se2Zvcm1hdHM6W1wiKzI0NiAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJJT1wiXX0se2Zvcm1hdHM6W1wiKzk2NCgjIyMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiSVFcIl19LHtmb3JtYXRzOltcIis5OCgjIyMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiSVJcIl19LHtmb3JtYXRzOltcIiszNTQgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiSVNcIl19LHtmb3JtYXRzOltcIiszOSgwIyMpIyMjIyAjIyAjI1wiLFwiKzM5KDAjIykjIyMjICMjI1wiLFwiKzM5KDAjIykjIyMgIyMjXCIsXCIrMzkoMCMjKSMjICMjI1wiLFwiKzM5KDAjIykjIyAjI1wiLFwiKzM5KDAjKSMjICMjXCIsXCIrMzkoMyMjKSMjIyAjIyAjI1wiLFwiKzM5KDMjIykjIyAjIyAjI1wiXSxjb3VudHJ5Q29kZTpbXCJJVFwiXX0se2Zvcm1hdHM6W1wiKzEoODc2KSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkpNXCJdfSx7Zm9ybWF0czpbXCIrOTYyICMgIyMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkpPXCJdfSx7Zm9ybWF0czpbXCIrODEgIyMgIyMjIyAjIyMjXCIsXCIrODEoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiSlBcIl19LHtmb3JtYXRzOltcIisyNTQgIyMjICMjIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJLRVwiXX0se2Zvcm1hdHM6W1wiKzk5NigjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJLR1wiXX0se2Zvcm1hdHM6W1wiKzg1NSAjIyAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIktIXCJdfSx7Zm9ybWF0czpbXCIrNjg2ICMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJLSVwiXX0se2Zvcm1hdHM6W1wiKzI2OSAjIyAjIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJLTVwiXX0se2Zvcm1hdHM6W1wiKzEoODY5KSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIktOXCJdfSx7Zm9ybWF0czpbXCIrODUwIDE5MSAjIyMgIyMjI1wiLFwiKzg1MCAjIyAjIyMgIyMjXCIsXCIrODUwICMjIyAjIyMjICMjI1wiLFwiKzg1MCAjIyMgIyMjXCIsXCIrODUwICMjIyMgIyMjI1wiLFwiKzg1MCAjIyMjICMjIyMjIyMjIyMjIyNcIl0sY291bnRyeUNvZGU6W1wiS1BcIl19LHtmb3JtYXRzOltcIis4MiAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJLUlwiXX0se2Zvcm1hdHM6W1wiKzk2NSAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiS1dcIl19LHtmb3JtYXRzOltcIisxKDM0NSkjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJLWVwiXX0se2Zvcm1hdHM6W1wiKzcoNiMjKSMjIyAjIyAjI1wiLFwiKzcoNyMjKSMjIyAjIyAjI1wiXSxjb3VudHJ5Q29kZTpbXCJLWlwiXX0se2Zvcm1hdHM6W1wiKzg1NigyMCMjKSMjIyAjIyNcIixcIis4NTYgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJMQVwiXX0se2Zvcm1hdHM6W1wiKzk2MSAjIyAjIyMgIyMjXCIsXCIrOTYxICMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJMQlwiXX0se2Zvcm1hdHM6W1wiKzEoNzU4KSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkxDXCJdfSx7Zm9ybWF0czpbXCIrNDIzKCMjIykjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJMSVwiXX0se2Zvcm1hdHM6W1wiKzk0ICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkxLXCJdfSx7Zm9ybWF0czpbXCIrMjMxICMjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiTFJcIl19LHtmb3JtYXRzOltcIisyNjYgIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJMU1wiXX0se2Zvcm1hdHM6W1wiKzM3MCgjIyMpIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIkxUXCJdfSx7Zm9ybWF0czpbXCIrMzUyICMjIyAjIyNcIixcIiszNTIgIyMjIyAjIyNcIixcIiszNTIgIyMjIyMgIyMjXCIsXCIrMzUyICMjIyMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiTFVcIl19LHtmb3JtYXRzOltcIiszNzEgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJMVlwiXX0se2Zvcm1hdHM6W1wiKzIxOCAjIyAjIyMgIyMjXCIsXCIrMjE4IDIxICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIkxZXCJdfSx7Zm9ybWF0czpbXCIrMjEyICMjICMjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIk1BXCJdfSx7Zm9ybWF0czpbXCIrMzc3KCMjIykjIyMgIyMjXCIsXCIrMzc3ICMjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiTUNcIl19LHtmb3JtYXRzOltcIiszNzMgIyMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk1EXCJdfSx7Zm9ybWF0czpbXCIrMzgyICMjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiTUVcIl19LHtmb3JtYXRzOltcIisyNjEgIyMgIyMgIyMjIyNcIl0sY291bnRyeUNvZGU6W1wiTUdcIl19LHtmb3JtYXRzOltcIis2OTIgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiTUhcIl19LHtmb3JtYXRzOltcIiszODkgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNS1wiXX0se2Zvcm1hdHM6W1wiKzIyMyAjIyAjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk1MXCJdfSx7Zm9ybWF0czpbXCIrOTUgIyMgIyMjICMjI1wiLFwiKzk1ICMgIyMjICMjI1wiLFwiKzk1ICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiTU1cIl19LHtmb3JtYXRzOltcIis5NzYgIyMgIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNTlwiXX0se2Zvcm1hdHM6W1wiKzg1MyAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiTU9cIl19LHtmb3JtYXRzOltcIisxKDY3MCkjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNUFwiXX0se2Zvcm1hdHM6W1wiKzU5NigjIyMpIyMgIyMgIyNcIl0sY291bnRyeUNvZGU6W1wiTVFcIl19LHtmb3JtYXRzOltcIisyMjIgIyMgIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNUlwiXX0se2Zvcm1hdHM6W1wiKzEoNjY0KSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk1TXCJdfSx7Zm9ybWF0czpbXCIrMzU2ICMjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNVFwiXX0se2Zvcm1hdHM6W1wiKzIzMCAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNVVwiXX0se2Zvcm1hdHM6W1wiKzk2MCAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNVlwiXX0se2Zvcm1hdHM6W1wiKzI2NSAxICMjIyAjIyNcIixcIisyNjUgIyAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiTVdcIl19LHtmb3JtYXRzOltcIis1MigjIyMpIyMjICMjIyNcIixcIis1MiAjIyAjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk1YXCJdfSx7Zm9ybWF0czpbXCIrNjAgIyMgIyMjICMjIyNcIixcIis2MCAxMSAjIyMjICMjIyNcIixcIis2MCgjIyMpIyMjICMjI1wiLFwiKzYwICMjICMjIyAjIyNcIixcIis2MCAjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiTVlcIl19LHtmb3JtYXRzOltcIisyNTggIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJNWlwiXX0se2Zvcm1hdHM6W1wiKzI2NCAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJOQVwiXX0se2Zvcm1hdHM6W1wiKzY4NyAjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk5DXCJdfSx7Zm9ybWF0czpbXCIrMjI3ICMjICMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiTkVcIl19LHtmb3JtYXRzOltcIis2NzIgMyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJORlwiXX0se2Zvcm1hdHM6W1wiKzIzNCgjIyMpIyMjICMjIyNcIixcIisyMzQgIyMgIyMjICMjI1wiLFwiKzIzNCAjIyAjIyMgIyNcIixcIisyMzQoIyMjKSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk5HXCJdfSx7Zm9ybWF0czpbXCIrNTA1ICMjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJOSVwiXX0se2Zvcm1hdHM6W1wiKzMxICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk5MXCJdfSx7Zm9ybWF0czpbXCIrNDcoIyMjKSMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJOT1wiXX0se2Zvcm1hdHM6W1wiKzk3NyAjIyAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIk5QXCJdfSx7Zm9ybWF0czpbXCIrNjc0ICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIk5SXCJdfSx7Zm9ybWF0czpbXCIrNjgzICMjIyNcIl0sY291bnRyeUNvZGU6W1wiTlVcIl19LHtmb3JtYXRzOltcIis2NCgjIyMpIyMjICMjI1sjXVwiLFwiKzY0ICMjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiTlpcIl19LHtmb3JtYXRzOltcIis5NjggIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJPTVwiXX0se2Zvcm1hdHM6W1wiKzUwNyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJQQVwiXX0se2Zvcm1hdHM6W1wiKzUxKCMjIykjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIlBFXCJdfSx7Zm9ybWF0czpbXCIrNjg5ICMjICMjICMjXCJdLGNvdW50cnlDb2RlOltcIlBGXCJdfSx7Zm9ybWF0czpbXCIrNjc1KCMjIykjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiUEdcIl19LHtmb3JtYXRzOltcIis2MygjIyMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiUEhcIl19LHtmb3JtYXRzOltcIis5MigjIyMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiUEtcIl19LHtmb3JtYXRzOltcIis0OCgjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJQTFwiXX0se2Zvcm1hdHM6W1wiKzk3MCAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJQU1wiXX0se2Zvcm1hdHM6W1wiKzM1MSAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJQVFwiXX0se2Zvcm1hdHM6W1wiKzY4MCAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJQV1wiXX0se2Zvcm1hdHM6W1wiKzU5NSgjIyMpIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJQWVwiXX0se2Zvcm1hdHM6W1wiKzk3NCAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiUUFcIl19LHtmb3JtYXRzOltcIisyNjIgIyMjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJSRVwiXX0se2Zvcm1hdHM6W1wiKzQwICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlJPXCJdfSx7Zm9ybWF0czpbXCIrMzgxICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlJTXCJdfSx7Zm9ybWF0czpbXCIrNygjIyMpIyMjICMjICMjXCJdLGNvdW50cnlDb2RlOltcIlJVXCJdfSx7Zm9ybWF0czpbXCIrMjUwKCMjIykjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIlJXXCJdfSx7Zm9ybWF0czpbXCIrOTY2IDUgIyMjIyAjIyMjXCIsXCIrOTY2ICMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiU0FcIl19LHtmb3JtYXRzOltcIis2NzcgIyMjICMjIyNcIixcIis2NzcgIyMjIyNcIl0sY291bnRyeUNvZGU6W1wiU0JcIl19LHtmb3JtYXRzOltcIisyNDggIyAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIlNDXCJdfSx7Zm9ybWF0czpbXCIrMjQ5ICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNEXCJdfSx7Zm9ybWF0czpbXCIrNDYgIyMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiU0VcIl19LHtmb3JtYXRzOltcIis2NSAjIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiU0dcIl19LHtmb3JtYXRzOltcIisyOTAgIyMjI1wiLFwiKzI5MCAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNIXCJdfSx7Zm9ybWF0czpbXCIrMzg2ICMjICMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiU0lcIl19LHtmb3JtYXRzOltcIis0MjEoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiU0tcIl19LHtmb3JtYXRzOltcIisyMzIgIyMgIyMjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNMXCJdfSx7Zm9ybWF0czpbXCIrMzc4ICMjIyMgIyMjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNNXCJdfSx7Zm9ybWF0czpbXCIrMjIxICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNOXCJdfSx7Zm9ybWF0czpbXCIrMjUyICMjICMjIyAjIyNcIixcIisyNTIgIyAjIyMgIyMjXCIsXCIrMjUyICMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJTT1wiXX0se2Zvcm1hdHM6W1wiKzU5NyAjIyMgIyMjI1wiLFwiKzU5NyAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIlNSXCJdfSx7Zm9ybWF0czpbXCIrMjExICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNTXCJdfSx7Zm9ybWF0czpbXCIrMjM5ICMjICMjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNUXCJdfSx7Zm9ybWF0czpbXCIrNTAzICMjICMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiU1ZcIl19LHtmb3JtYXRzOltcIisxKDcyMSkjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJTWFwiXX0se2Zvcm1hdHM6W1wiKzk2MyAjIyAjIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJTWVwiXX0se2Zvcm1hdHM6W1wiKzI2OCAjIyAjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlNaXCJdfSx7Zm9ybWF0czpbXCIrMSg2NDkpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiVENcIl19LHtmb3JtYXRzOltcIisyMzUgIyMgIyMgIyMgIyNcIl0sY291bnRyeUNvZGU6W1wiVERcIl19LHtmb3JtYXRzOltcIisyMjggIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJUR1wiXX0se2Zvcm1hdHM6W1wiKzY2ICMjICMjIyAjIyMjXCIsXCIrNjYgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJUSFwiXX0se2Zvcm1hdHM6W1wiKzk5MiAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJUSlwiXX0se2Zvcm1hdHM6W1wiKzY5MCAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlRLXCJdfSx7Zm9ybWF0czpbXCIrNjcwICMjIyAjIyMjXCIsXCIrNjcwIDc3IyAjIyMjI1wiLFwiKzY3MCA3OCMgIyMjIyNcIl0sY291bnRyeUNvZGU6W1wiVExcIl19LHtmb3JtYXRzOltcIis5OTMgIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJUTVwiXX0se2Zvcm1hdHM6W1wiKzIxNiAjIyAjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIlROXCJdfSx7Zm9ybWF0czpbXCIrNjc2ICMjIyMjXCJdLGNvdW50cnlDb2RlOltcIlRPXCJdfSx7Zm9ybWF0czpbXCIrOTAoIyMjKSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlRSXCJdfSx7Zm9ybWF0czpbXCIrMSg4NjgpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiVFRcIl19LHtmb3JtYXRzOltcIis2ODggOTAjIyMjXCIsXCIrNjg4IDIjIyMjXCJdLGNvdW50cnlDb2RlOltcIlRWXCJdfSx7Zm9ybWF0czpbXCIrODg2ICMgIyMjIyAjIyMjXCIsXCIrODg2ICMjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJUV1wiXX0se2Zvcm1hdHM6W1wiKzI1NSAjIyAjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJUWlwiXX0se2Zvcm1hdHM6W1wiKzM4MCgjIykjIyMgIyMgIyNcIl0sY291bnRyeUNvZGU6W1wiVUFcIl19LHtmb3JtYXRzOltcIisyNTYoIyMjKSMjIyAjIyNcIl0sY291bnRyeUNvZGU6W1wiVUdcIl19LHtmb3JtYXRzOltcIis0NCAjIyMjICMjIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJHQlwiLFwiVUtcIl19LHtmb3JtYXRzOltcIis1OTggIyAjIyMgIyMgIyNcIl0sY291bnRyeUNvZGU6W1wiVVlcIl19LHtmb3JtYXRzOltcIis5OTggIyMgIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiVVpcIl19LHtmb3JtYXRzOltcIiszOSA2IDY5OCAjIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJWQVwiXX0se2Zvcm1hdHM6W1wiKzEoNzg0KSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlZDXCJdfSx7Zm9ybWF0czpbXCIrNTgoIyMjKSMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlZFXCJdfSx7Zm9ybWF0czpbXCIrMSgyODQpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiVkdcIl19LHtmb3JtYXRzOltcIisxKDM0MCkjIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJWSVwiXX0se2Zvcm1hdHM6W1wiKzg0ICMjICMjIyMgIyMjXCIsXCIrODQoIyMjKSMjIyMgIyMjXCJdLGNvdW50cnlDb2RlOltcIlZOXCJdfSx7Zm9ybWF0czpbXCIrNjc4ICMjICMjIyMjXCIsXCIrNjc4ICMjIyMjXCJdLGNvdW50cnlDb2RlOltcIlZVXCJdfSx7Zm9ybWF0czpbXCIrNjgxICMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiV0ZcIl19LHtmb3JtYXRzOltcIis2ODUgIyMgIyMjI1wiXSxjb3VudHJ5Q29kZTpbXCJXU1wiXX0se2Zvcm1hdHM6W1wiKzk2NyAjIyMgIyMjICMjI1wiLFwiKzk2NyAjICMjIyAjIyNcIixcIis5NjcgIyMgIyMjICMjI1wiXSxjb3VudHJ5Q29kZTpbXCJZRVwiXX0se2Zvcm1hdHM6W1wiKzI3ICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlpBXCJdfSx7Zm9ybWF0czpbXCIrMjYwICMjICMjIyAjIyMjXCJdLGNvdW50cnlDb2RlOltcIlpNXCJdfSx7Zm9ybWF0czpbXCIrMjYzICMgIyMjIyMjXCJdLGNvdW50cnlDb2RlOltcIlpXXCJdfSx7Zm9ybWF0czpbXCIrMSgjIyMpIyMjICMjIyNcIl0sY291bnRyeUNvZGU6W1wiVVNcIixcIkNBXCJdfV07ZnVuY3Rpb24gd28oZSl7bGV0IGE7dmFyIHQ7bnVsbCE9ZSYmZS5jb3VudHJ5Q29kZT9hPShudWxsPT0odD12by5maW5kKChhPT5hLmNvdW50cnlDb2RlLmluY2x1ZGVzKGUuY291bnRyeUNvZGUpKSkpP3ZvaWQgMDp0LmZvcm1hdHMpfHxbXTphPXZvLm1hcCgoKHtmb3JtYXRzOmV9KT0+ZSkpLmZsYXQoKTtyZXR1cm4gbihBcnJheS5mcm9tKHtsZW5ndGg6KG51bGw9PWU/dm9pZCAwOmUubGVuZ3RoKXx8MX0sKCgpPT5WdCh7bWFzazpyKGEpfSkpKSxlKX12YXIga289W1wiVHJ5IHRvIHByb2dyYW0gdGhlIEdCIGludGVyZmFjZSwgbWF5YmUgaXQgd2lsbCBjb3B5IHRoZSB3aXJlbGVzcyBoYXJkIGRyaXZlIVwiLFwiVHJ5IHRvIGJ5cGFzcyB0aGUgR0IgcGFuZWwsIG1heWJlIGl0IHdpbGwgc3ludGhlc2l6ZSB0aGUgYmFjay1lbmQgdHJhbnNtaXR0ZXIhXCIsXCJJZiB3ZSBwcm9ncmFtIHRoZSBwcm90b2NvbCwgd2UgY2FuIGdldCB0byB0aGUgU0REIGFwcGxpY2F0aW9uIHRocm91Z2ggdGhlIHZpcnR1YWwgUkFNIHBpeGVsIVwiLFwiVXNlIHRoZSBvcGVuLXNvdXJjZSBUSFggYXBwbGljYXRpb24sIHRoZW4geW91IGNhbiBxdWFudGlmeSB0aGUgc29saWQgc3RhdGUgdHJhbnNtaXR0ZXIhXCIsXCJZb3UgY2FudCB0cmFuc21pdCB0aGUgZmlyZXdhbGwgd2l0aG91dCBjb3B5aW5nIHRoZSAxMDgwcCBTREQgaW50ZXJmYWNlIVwiLFwiSWxsIGNvbXByZXNzIHRoZSBvcGVuLXNvdXJjZSBTQVMgYmFuZHdpZHRoLCB0aGF0IHNob3VsZCBhcnJheSB0aGUgRlRQIHBvcnQhXCIsXCJwcm9ncmFtbWluZyB0aGUgYWxhcm0gd29udCBkbyBhbnl0aGluZywgd2UgbmVlZCB0byBoYWNrIHRoZSBzb2xpZCBzdGF0ZSBBRFAgdHJhbnNtaXR0ZXIhXCIsXCJjYWxjdWxhdGluZyB0aGUgaW50ZXJmYWNlIHdvbnQgZG8gYW55dGhpbmcsIHdlIG5lZWQgdG8gYnlwYXNzIHRoZSBtb2JpbGUgSUIgcGFuZWwhXCIsXCJUcnkgdG8gY2FsY3VsYXRlIHRoZSBHQiB0cmFuc21pdHRlciwgbWF5YmUgaXQgd2lsbCBxdWFudGlmeSB0aGUgb25saW5lIHBpeGVsIVwiLFwiSWYgd2UgY2FsY3VsYXRlIHRoZSBjaXJjdWl0LCB3ZSBjYW4gZ2V0IHRvIHRoZSBIREQgZHJpdmVyIHRocm91Z2ggdGhlIG9wdGljYWwgWE1MIHBhbmVsIVwiLFwibmF2aWdhdGluZyB0aGUgcHJvZ3JhbSB3b250IGRvIGFueXRoaW5nLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgY3Jvc3MtcGxhdGZvcm0gU01TIGNhcGFjaXRvciFcIixcIlRyeSB0byBjYWxjdWxhdGUgdGhlIEpCT0QgZmlyZXdhbGwsIG1heWJlIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHJlZHVuZGFudCBwb3J0IVwiLFwiSWYgd2UgcXVhbnRpZnkgdGhlIGFsYXJtLCB3ZSBjYW4gZ2V0IHRvIHRoZSBGVFAgcGl4ZWwgdGhyb3VnaCB0aGUgb25saW5lIFNTTCBpbnRlcmZhY2UhXCIsXCJZb3UgY2FudCBvdmVycmlkZSB0aGUgY2FwYWNpdG9yIHdpdGhvdXQgaW5kZXhpbmcgdGhlIGJsdWV0b290aCBQTkcgcGl4ZWwhXCIsXCJxdWFudGlmeWluZyB0aGUgbWljcm9jaGlwIHdvbnQgZG8gYW55dGhpbmcsIHdlIG5lZWQgdG8gaW5kZXggdGhlIG9ubGluZSBTUUwgaGFyZCBkcml2ZSFcIixcImNvbm5lY3RpbmcgdGhlIHBvcnQgd29udCBkbyBhbnl0aGluZywgd2UgbmVlZCB0byBwcm9ncmFtIHRoZSBoYXB0aWMgUlNTIHBpeGVsIVwiLFwiV2UgbmVlZCB0byBiYWNrIHVwIHRoZSAxMDgwcCBKQk9EIGJhbmR3aWR0aCFcIixcIklmIHdlIGluZGV4IHRoZSBjYXJkLCB3ZSBjYW4gZ2V0IHRvIHRoZSBTTVMgaGFyZCBkcml2ZSB0aHJvdWdoIHRoZSBibHVldG9vdGggQUdQIGJ1cyFcIixcIklsbCBjb21wcmVzcyB0aGUgb3B0aWNhbCBTREQgaGFyZCBkcml2ZSwgdGhhdCBzaG91bGQgaW50ZXJmYWNlIHRoZSBYU1MgYmFuZHdpZHRoIVwiLFwiWW91IGNhbnQgY29weSB0aGUgZmVlZCB3aXRob3V0IGNvbXByZXNzaW5nIHRoZSBwcmltYXJ5IEpCT0QgY2lyY3VpdCFcIixcIklmIHdlIGJhY2sgdXAgdGhlIGFwcGxpY2F0aW9uLCB3ZSBjYW4gZ2V0IHRvIHRoZSBUQ1AgYnVzIHRocm91Z2ggdGhlIGF1eGlsaWFyeSBGVFAgaGFyZCBkcml2ZSFcIixcIlRyeSB0byBvdmVycmlkZSB0aGUgUlNTIHBvcnQsIG1heWJlIGl0IHdpbGwgcXVhbnRpZnkgdGhlIGhhcHRpYyBwb3J0IVwiLFwiV2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIGJsdWV0b290aCBKQk9EIGJ1cyFcIixcImJ5cGFzc2luZyB0aGUgYnVzIHdvbnQgZG8gYW55dGhpbmcsIHdlIG5lZWQgdG8gcHJvZ3JhbSB0aGUgd2lyZWxlc3MgU0REIGRyaXZlciFcIixcIlRyeSB0byBwYXJzZSB0aGUgUENJIGNhcGFjaXRvciwgbWF5YmUgaXQgd2lsbCBxdWFudGlmeSB0aGUgYmx1ZXRvb3RoIGludGVyZmFjZSFcIixcImNvcHlpbmcgdGhlIG1vbml0b3Igd29udCBkbyBhbnl0aGluZywgd2UgbmVlZCB0byBzeW50aGVzaXplIHRoZSBiYWNrLWVuZCBBRFAgYXBwbGljYXRpb24hXCIsXCJUcnkgdG8gaW5kZXggdGhlIFBORyBjYXJkLCBtYXliZSBpdCB3aWxsIHRyYW5zbWl0IHRoZSBuZXVyYWwgc3lzdGVtIVwiLFwiVHJ5IHRvIGJ5cGFzcyB0aGUgU0NTSSBzZW5zb3IsIG1heWJlIGl0IHdpbGwgZ2VuZXJhdGUgdGhlIDEwODBwIGNhcmQhXCIsXCJXZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgb3Blbi1zb3VyY2UgU0REIGRyaXZlciFcIixcIklmIHdlIHJlYm9vdCB0aGUgcG9ydCwgd2UgY2FuIGdldCB0byB0aGUgUlNTIGFwcGxpY2F0aW9uIHRocm91Z2ggdGhlIDEwODBwIFNRTCBtaWNyb2NoaXAhXCIsXCJVc2UgdGhlIGNyb3NzLXBsYXRmb3JtIEFJIHN5c3RlbSwgdGhlbiB5b3UgY2FuIGNvbm5lY3QgdGhlIGRpZ2l0YWwgY2FyZCFcIixcIldlIG5lZWQgdG8gbmF2aWdhdGUgdGhlIHZpcnR1YWwgU1NMIHRyYW5zbWl0dGVyIVwiLFwiVGhlIEpTT04gaGFyZCBkcml2ZSBpcyBkb3duLCBieXBhc3MgdGhlIHJlZHVuZGFudCBmaXJld2FsbCBzbyB3ZSBjYW4gY29weSB0aGUgRlRQIHBvcnQhXCIsXCJXZSBuZWVkIHRvIG5hdmlnYXRlIHRoZSBoYXB0aWMgSkJPRCBzeXN0ZW0hXCIsXCJXZSBuZWVkIHRvIGdlbmVyYXRlIHRoZSB2aXJ0dWFsIFVTQiBwaXhlbCFcIixcIklsbCBvdmVycmlkZSB0aGUgZGlnaXRhbCBBRFAgYWxhcm0sIHRoYXQgc2hvdWxkIG1pY3JvY2hpcCB0aGUgVVNCIGZpcmV3YWxsIVwiLFwiV2UgbmVlZCB0byBieXBhc3MgdGhlIHJlZHVuZGFudCBSQU0gcGl4ZWwhXCIsXCJJbGwgY29tcHJlc3MgdGhlIGNyb3NzLXBsYXRmb3JtIEVYRSBjYXJkLCB0aGF0IHNob3VsZCBjaXJjdWl0IHRoZSBBR1Agc2Vuc29yIVwiLFwiVGhlIEFHUCBwcm90b2NvbCBpcyBkb3duLCBjb21wcmVzcyB0aGUgb3Blbi1zb3VyY2UgY2FyZCBzbyB3ZSBjYW4gb3ZlcnJpZGUgdGhlIFhNTCBwcm9ncmFtIVwiLFwiSWxsIHJlYm9vdCB0aGUgYmx1ZXRvb3RoIEdCIGNhcGFjaXRvciwgdGhhdCBzaG91bGQgY2FyZCB0aGUgSEREIHBhbmVsIVwiLFwiSWxsIGNvbm5lY3QgdGhlIG5ldXJhbCBJQiBtYXRyaXgsIHRoYXQgc2hvdWxkIGFycmF5IHRoZSBDU1MgY2FyZCFcIixcIlRoZSBFWEUgbWF0cml4IGlzIGRvd24sIHRyYW5zbWl0IHRoZSB3aXJlbGVzcyBtYXRyaXggc28gd2UgY2FuIGluZGV4IHRoZSBSQU0gcGl4ZWwhXCIsXCJUaGUgVEhYIG1vbml0b3IgaXMgZG93biwgcmVib290IHRoZSBhdXhpbGlhcnkgYXJyYXkgc28gd2UgY2FuIHBhcnNlIHRoZSBYTUwgbWljcm9jaGlwIVwiLFwiVHJ5IHRvIG92ZXJyaWRlIHRoZSBIREQgZmlyZXdhbGwsIG1heWJlIGl0IHdpbGwgZ2VuZXJhdGUgdGhlIG9wZW4tc291cmNlIHBhbmVsIVwiLFwiV2UgbmVlZCB0byBpbmRleCB0aGUgZGlnaXRhbCBKQk9EIGJ1cyFcIixcIlVzZSB0aGUgbXVsdGktYnl0ZSBUSFggZmlyZXdhbGwsIHRoZW4geW91IGNhbiBiYWNrIHVwIHRoZSBkaWdpdGFsIHN5c3RlbSFcIixcIlVzZSB0aGUgMTA4MHAgSUIgZmVlZCwgdGhlbiB5b3UgY2FuIHJlYm9vdCB0aGUgaGFwdGljIGZlZWQhXCIsXCJUcnkgdG8gYnlwYXNzIHRoZSBTQVMgY2FyZCwgbWF5YmUgaXQgd2lsbCB0cmFuc21pdCB0aGUgc29saWQgc3RhdGUgc3lzdGVtIVwiLFwiVHJ5IHRvIHF1YW50aWZ5IHRoZSBUQ1AgYXJyYXksIG1heWJlIGl0IHdpbGwgaW5kZXggdGhlIHZpcnR1YWwgdHJhbnNtaXR0ZXIhXCIsXCJJbGwgb3ZlcnJpZGUgdGhlIGNyb3NzLXBsYXRmb3JtIFBDSSBwb3J0LCB0aGF0IHNob3VsZCBkcml2ZXIgdGhlIEZUUCBjYXJkIVwiLFwiSWYgd2Ugb3ZlcnJpZGUgdGhlIGJhbmR3aWR0aCwgd2UgY2FuIGdldCB0byB0aGUgU01UUCBjYXBhY2l0b3IgdGhyb3VnaCB0aGUgY3Jvc3MtcGxhdGZvcm0gUlNTIGFsYXJtIVwiLFwiVXNlIHRoZSByZWR1bmRhbnQgQUdQIHRyYW5zbWl0dGVyLCB0aGVuIHlvdSBjYW4gZ2VuZXJhdGUgdGhlIDEwODBwIGNpcmN1aXQhXCIsXCJVc2UgdGhlIGF1eGlsaWFyeSBFWEUgbW9uaXRvciwgdGhlbiB5b3UgY2FuIGhhY2sgdGhlIGhhcHRpYyBwb3J0IVwiLFwiVHJ5IHRvIHN5bnRoZXNpemUgdGhlIFNDU0kgY2FyZCwgbWF5YmUgaXQgd2lsbCBiYWNrIHVwIHRoZSAxMDgwcCBjaXJjdWl0IVwiLFwiV2UgbmVlZCB0byB0cmFuc21pdCB0aGUgYXV4aWxpYXJ5IEdCIHNlbnNvciFcIixcIlVzZSB0aGUgbW9iaWxlIEdCIHRyYW5zbWl0dGVyLCB0aGVuIHlvdSBjYW4gcXVhbnRpZnkgdGhlIHdpcmVsZXNzIHN5c3RlbSFcIixcIlRyeSB0byBxdWFudGlmeSB0aGUgU1FMIGFwcGxpY2F0aW9uLCBtYXliZSBpdCB3aWxsIGJ5cGFzcyB0aGUgcHJpbWFyeSBwaXhlbCFcIixcIllvdSBjYW50IG92ZXJyaWRlIHRoZSBwcm90b2NvbCB3aXRob3V0IHByb2dyYW1taW5nIHRoZSBtb2JpbGUgUkFNIGNhcmQhXCIsXCJUaGUgSkJPRCBwb3J0IGlzIGRvd24sIHByb2dyYW0gdGhlIHdpcmVsZXNzIGFycmF5IHNvIHdlIGNhbiBpbnB1dCB0aGUgUENJIHByb2dyYW0hXCIsXCJVc2UgdGhlIGF1eGlsaWFyeSBKU09OIGNhcmQsIHRoZW4geW91IGNhbiBjb3B5IHRoZSBvcHRpY2FsIG1hdHJpeCFcIixcIldlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZSB3aXJlbGVzcyBUQ1AgY2lyY3VpdCFcIixcIlVzZSB0aGUgYmFjay1lbmQgQUkgZmlyZXdhbGwsIHRoZW4geW91IGNhbiBwYXJzZSB0aGUgb3B0aWNhbCBwcm9ncmFtIVwiLFwibmF2aWdhdGluZyB0aGUgaGFyZCBkcml2ZSB3b250IGRvIGFueXRoaW5nLCB3ZSBuZWVkIHRvIHN5bnRoZXNpemUgdGhlIGF1eGlsaWFyeSBVU0IgY2lyY3VpdCFcIixcIklsbCBxdWFudGlmeSB0aGUgcmVkdW5kYW50IFRDUCBidXMsIHRoYXQgc2hvdWxkIGhhcmQgZHJpdmUgdGhlIEFEUCBiYW5kd2lkdGghXCIsXCJJZiB3ZSBiYWNrIHVwIHRoZSBzZW5zb3IsIHdlIGNhbiBnZXQgdG8gdGhlIEpCT0QgbWF0cml4IHRocm91Z2ggdGhlIG9wdGljYWwgRVhFIGFsYXJtIVwiLFwiVHJ5IHRvIGdlbmVyYXRlIHRoZSBUQ1AgYnVzLCBtYXliZSBpdCB3aWxsIG92ZXJyaWRlIHRoZSBuZXVyYWwgYmFuZHdpZHRoIVwiLFwiVGhlIEFEUCBwcm90b2NvbCBpcyBkb3duLCBwYXJzZSB0aGUgMTA4MHAgY2FyZCBzbyB3ZSBjYW4gcmVib290IHRoZSBBRFAgYXBwbGljYXRpb24hXCIsXCJjYWxjdWxhdGluZyB0aGUgZHJpdmVyIHdvbnQgZG8gYW55dGhpbmcsIHdlIG5lZWQgdG8gZ2VuZXJhdGUgdGhlIG9wdGljYWwgU01UUCBmZWVkIVwiLFwiSWxsIGNhbGN1bGF0ZSB0aGUgMTA4MHAgWE1MIHRyYW5zbWl0dGVyLCB0aGF0IHNob3VsZCBhbGFybSB0aGUgUlNTIGZpcmV3YWxsIVwiLFwiWW91IGNhbnQgY29ubmVjdCB0aGUgaW50ZXJmYWNlIHdpdGhvdXQgcHJvZ3JhbW1pbmcgdGhlIHZpcnR1YWwgUE5HIHByb3RvY29sIVwiLFwiVXNlIHRoZSBjcm9zcy1wbGF0Zm9ybSBUSFggYXJyYXksIHRoZW4geW91IGNhbiBwYXJzZSB0aGUgcHJpbWFyeSBjYXBhY2l0b3IhXCIsXCJnZW5lcmF0aW5nIHRoZSBzZW5zb3Igd29udCBkbyBhbnl0aGluZywgd2UgbmVlZCB0byBoYWNrIHRoZSBzb2xpZCBzdGF0ZSBBSSBidXMhXCIsXCJUcnkgdG8gY2FsY3VsYXRlIHRoZSBKQk9EIHByb2dyYW0sIG1heWJlIGl0IHdpbGwgc3ludGhlc2l6ZSB0aGUgbW9iaWxlIHN5c3RlbSFcIixcIldlIG5lZWQgdG8gcHJvZ3JhbSB0aGUgYmFjay1lbmQgUE5HIHBpeGVsIVwiLFwiSWxsIHByb2dyYW0gdGhlIHZpcnR1YWwgWE1MIG1pY3JvY2hpcCwgdGhhdCBzaG91bGQgdHJhbnNtaXR0ZXIgdGhlIFNERCBwcm90b2NvbCFcIixcIklmIHdlIGhhY2sgdGhlIGZpcmV3YWxsLCB3ZSBjYW4gZ2V0IHRvIHRoZSBVU0IgYXBwbGljYXRpb24gdGhyb3VnaCB0aGUgYmx1ZXRvb3RoIFNERCBzeXN0ZW0hXCIsXCJVc2UgdGhlIGF1eGlsaWFyeSBTREQgc3lzdGVtLCB0aGVuIHlvdSBjYW4gaW5wdXQgdGhlIHJlZHVuZGFudCBoYXJkIGRyaXZlIVwiLFwiVGhlIEdCIHBvcnQgaXMgZG93biwgcXVhbnRpZnkgdGhlIG1vYmlsZSBjaXJjdWl0IHNvIHdlIGNhbiBoYWNrIHRoZSBTTVRQIHN5c3RlbSFcIixcIllvdSBjYW50IHF1YW50aWZ5IHRoZSBkcml2ZXIgd2l0aG91dCB0cmFuc21pdHRpbmcgdGhlIG11bHRpLWJ5dGUgU1FMIG1pY3JvY2hpcCFcIixcIlRyeSB0byBwYXJzZSB0aGUgU01UUCBhcnJheSwgbWF5YmUgaXQgd2lsbCBnZW5lcmF0ZSB0aGUgbXVsdGktYnl0ZSBwb3J0IVwiLFwiY29weWluZyB0aGUgc3lzdGVtIHdvbnQgZG8gYW55dGhpbmcsIHdlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZSB2aXJ0dWFsIFNTTCBjaXJjdWl0IVwiLFwiVXNlIHRoZSBibHVldG9vdGggVENQIGNhcGFjaXRvciwgdGhlbiB5b3UgY2FuIHJlYm9vdCB0aGUgb3Blbi1zb3VyY2UgaGFyZCBkcml2ZSFcIixcIklmIHdlIG5hdmlnYXRlIHRoZSBjYXJkLCB3ZSBjYW4gZ2V0IHRvIHRoZSBBRFAgYXJyYXkgdGhyb3VnaCB0aGUgb3Blbi1zb3VyY2UgSUIgZmVlZCFcIixcIlRyeSB0byBpbnB1dCB0aGUgSFRUUCBmZWVkLCBtYXliZSBpdCB3aWxsIHJlYm9vdCB0aGUgbW9iaWxlIGNhcGFjaXRvciFcIixcIklmIHdlIGlucHV0IHRoZSBkcml2ZXIsIHdlIGNhbiBnZXQgdG8gdGhlIFJBTSBtb25pdG9yIHRocm91Z2ggdGhlIDEwODBwIEdCIGJ1cyFcIixcIklsbCBjYWxjdWxhdGUgdGhlIHdpcmVsZXNzIEFEUCBwb3J0LCB0aGF0IHNob3VsZCBiYW5kd2lkdGggdGhlIFNTTCBtaWNyb2NoaXAhXCIsXCJVc2UgdGhlIGhhcHRpYyBYU1MgZHJpdmVyLCB0aGVuIHlvdSBjYW4gY29ubmVjdCB0aGUgd2lyZWxlc3MgcHJvZ3JhbSFcIixcInF1YW50aWZ5aW5nIHRoZSBjaXJjdWl0IHdvbnQgZG8gYW55dGhpbmcsIHdlIG5lZWQgdG8gcGFyc2UgdGhlIGJhY2stZW5kIEZUUCBpbnRlcmZhY2UhXCIsXCJJbGwgcmVib290IHRoZSBvbmxpbmUgQ09NIGludGVyZmFjZSwgdGhhdCBzaG91bGQgc3lzdGVtIHRoZSBUSFggcHJvdG9jb2whXCIsXCJUcnkgdG8gdHJhbnNtaXQgdGhlIEhUVFAgY2FyZCwgbWF5YmUgaXQgd2lsbCBvdmVycmlkZSB0aGUgbXVsdGktYnl0ZSBoYXJkIGRyaXZlIVwiLFwiSWxsIHByb2dyYW0gdGhlIGJhY2stZW5kIFRIWCBtYXRyaXgsIHRoYXQgc2hvdWxkIGludGVyZmFjZSB0aGUgSEREIHBhbmVsIVwiLFwiSWxsIGdlbmVyYXRlIHRoZSB2aXJ0dWFsIFNRTCBwcm90b2NvbCwgdGhhdCBzaG91bGQgYnVzIHRoZSBBSSBoYXJkIGRyaXZlIVwiLFwiV2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIG1vYmlsZSBBR1AgcGFuZWwhXCIsXCJJbGwgY29tcHJlc3MgdGhlIGJhY2stZW5kIFBDSSBjaXJjdWl0LCB0aGF0IHNob3VsZCBtb25pdG9yIHRoZSBQTkcgZHJpdmVyIVwiLFwiV2UgbmVlZCB0byBxdWFudGlmeSB0aGUgcHJpbWFyeSBUQ1AgbWF0cml4IVwiLFwiSWxsIHN5bnRoZXNpemUgdGhlIHByaW1hcnkgQUkgY2FwYWNpdG9yLCB0aGF0IHNob3VsZCBhcnJheSB0aGUgSkJPRCBzZW5zb3IhXCIsXCJZb3UgY2FudCBoYWNrIHRoZSBjYXJkIHdpdGhvdXQgaW5kZXhpbmcgdGhlIHByaW1hcnkgWFNTIGNhcGFjaXRvciFcIixcIlRoZSBUQ1AgZmVlZCBpcyBkb3duLCBjb21wcmVzcyB0aGUgY3Jvc3MtcGxhdGZvcm0gYWxhcm0gc28gd2UgY2FuIHN5bnRoZXNpemUgdGhlIFhTUyBhcnJheSFcIixcIlRoZSBKU09OIGludGVyZmFjZSBpcyBkb3duLCBoYWNrIHRoZSBoYXB0aWMgdHJhbnNtaXR0ZXIgc28gd2UgY2FuIGJ5cGFzcyB0aGUgWE1MIHN5c3RlbSFcIixcIlVzZSB0aGUgb25saW5lIFNERCBwcm90b2NvbCwgdGhlbiB5b3UgY2FuIHBhcnNlIHRoZSBvcGVuLXNvdXJjZSBiYW5kd2lkdGghXCJdO2Z1bmN0aW9uIFNvKGUpe3JldHVybiBuKGtvLGUpfWZ1bmN0aW9uIENvKGUpe3JldHVybiBuKCgoKT0+Uyh7bWluOjAsbWF4OjY1NTM1fSkpLGUpfWZ1bmN0aW9uIEFvKGUpe3JldHVybiBuKCgoKT0+YSh7cmFuZG9tOlMoe21pbjowLG1heDoyNTUsbGVuZ3RoOjE2fSl9KSksZSl9ZnVuY3Rpb24gTW8oZSl7cmV0dXJuIG4oKCgpPT57dmFyIGEsdDtsZXQgbz1gJHtudWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLmZpcnN0TmFtZSk/YTp3YSgpfSAke251bGwhPSh0PW51bGw9PWU/dm9pZCAwOmUubGFzdE5hbWUpP3Q6U2EoKX1gLnJlcGxhY2UoXCIgXCIsbihbXCIuXCIsXCJfXCJdKSk7cmV0dXJuIHYoKSYmKG8rPVMoe21pbjowLG1heDoxMDB9KSksb30pLGUpfXZhciBUbz1bXCJLaW5nIERyaXZlc1wiLFwiR2VvcmdpYW5hIFRocm91Z2h3YXlcIixcIkFudG9uaWV0dGEgSGlnaHdheVwiLFwiRWxpYW4gUm9hZFwiLFwiUmV5bm9sZCBDcm9zc2luZ1wiLFwiTWF4IFdhbGxcIixcIkxlaG5lciBEcml2ZVwiLFwiR3JhaGFtIFdhbGtzXCIsXCJCdWNrcmlkZ2UgRHJpdmVzXCIsXCJTY2hpbW1lbCBGaWVsZHNcIixcIkRveWxlIEV4cHJlc3N3YXlcIixcIkNhZGUgRm9ya3NcIixcIk15cmlhbSBTcHVyXCIsXCJGYW5uaWUgTG9hZlwiLFwiRG9yaWFuIEdhdGV3YXlcIixcIlJ1ZWNrZXIgRmllbGRzXCIsXCJEYXVnaGVydHkgQ2VudGVyXCIsXCJFbWVyYWxkIEtleVwiLFwiSmF6bXluIElzbGVcIixcIlZpdmlhbmUgSnVuY3Rpb25zXCIsXCJQcmljZSBTcHJpbmdcIixcIkFyYWNlbHkgUm93XCIsXCJDaHluYSBQbGF6YVwiLFwiSGFybW9uIExvZGdlXCIsXCJLb25vcGVsc2tpIElubGV0XCIsXCJEYXZlIFN0cmF2ZW51ZVwiLFwiR295ZXR0ZSBDaXJjbGVcIixcIlN0b2tlcyBXZWxsc1wiLFwiQXJ0dXJvIE1hbm9yc1wiLFwiU2NodW1tIExhbmRcIixcIkJlY2h0ZWxhciBGaWVsZHNcIixcIk5hdGFsaWEgUG9pbnRzXCIsXCJEaWFubmEgSW5sZXRcIixcIkN1cnQgTG9ja3NcIixcIkR1cmdhbiBQYXJrd2F5c1wiLFwiRGFudGUgU3VtbWl0XCIsXCJIaWxtYSBNaWxsc1wiLFwiU3RpZWRlbWFubiBGaWVsZFwiLFwiR2VuZXNpcyBQbGF6YVwiLFwiQ2FybWVsbyBQbGF6YVwiLFwiR3V0a293c2tpIEZlcnJ5XCIsXCJBYmJvdHQgU3F1YXJlXCIsXCJIb2RraWV3aWN6IE92YWxcIixcIkhlYXRoY290ZSBDbGlmZlwiLFwiQ2FsaXN0YSBWaWFcIixcIktpaG4gRXhwcmVzc3dheVwiLFwiQ2Flc2FyIFBsYWNlXCIsXCJMb2NrbWFuIEdyZWVuc1wiLFwiQnJpc2EgSGlsbFwiLFwiUXVpZ2xleSBQYXJrd2F5c1wiLFwiSG93ZWxsIFZpc3RhXCIsXCJGaXNoZXIgTGlnaHRcIixcIlRyZW1ibGF5IFNwcmluZ3NcIixcIlN0cm9tYW4gVHVybnBpa2VcIixcIkhvd2VsbCBQbGF6YVwiLFwiV2lsbWEgR3JlZW5zXCIsXCJBZGVsbCBNZXdzXCIsXCJTaGFraXJhIENyb3Nzcm9hZFwiLFwiTW9pc2VzIENhdXNld2F5XCIsXCJGcmFuY2VzIEdyb3Zlc1wiLFwiU2FtbXkgQ3JlZWtcIixcIldvbGYgR2xlblwiLFwiRmF5IENvcm5lcnNcIixcIkNvbGxpbnMgTGFuZVwiLFwiU21pdGhhbSBEcml2ZVwiLFwiQ3JvbmluIFNob2FsXCIsXCJNaXNzb3VyaSBFeHRlbnNpb25cIixcIkxlZmZsZXIgRmllbGRzXCIsXCJMYXVyaWFubmUgR2xlbnNcIixcIlBhcmtlciBXYXlzXCIsXCJCZW5ueSBSaXZlclwiLFwiS3JlaWdlciBNaXNzaW9uXCIsXCJEYW1lb24gTW91bnRhaW5cIixcIkVtYXJkIEhpbGxcIixcIlF1aXR6b24gR3JlZW5cIixcIkNvcndpbiBNaXNzaW9uXCIsXCJSb3NlbmRvIFNwcmluZ1wiLFwiQ2FydGVyIFBpa2VcIixcIkhhcmJlciBWaWxsYWdlXCIsXCJKYWRlIFNob3JlXCIsXCJEYXJpYW5hIEp1bmN0aW9uXCIsXCJCZWVyIFBsYXphXCIsXCJIYXVjayBTdHJlYW1cIixcIkpvc2h1YWggRm9ya1wiLFwiUmF0aCBXYWxrXCIsXCJFdWdlbmlhIEhlaWdodHNcIixcIkt1cGhhbCBNb3VudGFpblwiLFwiWmJvbmNhayBIYXJib3JcIixcIlRvcnBoeSBGb3Jkc1wiLFwiSm9jZWx5biBUaHJvdWdod2F5XCIsXCJDb2xlIENlbnRlclwiLFwiRm9yZXN0IFBhdGhcIixcIk9zd2FsZCBKdW5jdGlvblwiLFwiS2luZyBTcHJpbmdzXCIsXCJadWxhdWYgQnJhbmNoXCIsXCJFc3RlYmFuIElubGV0XCIsXCJDb25uZXIgVmlzdGFcIixcIlpib25jYWsgQ2VudGVyXCIsXCJHbG92ZXIgTGlnaHRzXCIsXCJSb2hhbiBUdW5uZWxcIl07ZnVuY3Rpb24gQm8oZSl7cmV0dXJuIG4oVG8sZSl9ZnVuY3Rpb24gSW8oZSl7cmV0dXJuIG4oKCgpPT5gJHtTKHttaW46MCxtYXg6MTUwMH0pfSAke0JvKCl9YCksZSl9ZnVuY3Rpb24gUG8oZSl7cmV0dXJuIG4oKCgpPT57bGV0IGU9XCJcIitTKHttaW46MWU0LG1heDo5OTk5OX0pO3JldHVybiB2KCkmJihlKz1cIi1cIitTKHttaW46MWUzLG1heDo5OTk5fSkpLGV9KSxlKX1mdW5jdGlvbiB4byhlKXt2YXIgYSx0O2NvbnN0IG89bnVsbD09KGE9bnVsbD09ZT92b2lkIDA6ZS5pbmNsdWRlQ291bnR5KXx8YSxpPW51bGw9PSh0PW51bGw9PWU/dm9pZCAwOmUuaW5jbHVkZUNvdW50cnkpfHx0O3JldHVybiBuKCgoKT0+e2NvbnN0IGU9e3N0cmVldDpJbygpLGNpdHk6a2UoKSx6aXBDb2RlOlBvKCl9O3JldHVybiBvJiYoZS5jb3VudHk9RGUoKSksaSYmKGUuY291bnRyeT1QZSgpKSxlfSksZSl9ZnVuY3Rpb24gRG8oZSl7cmV0dXJuIG4oKCgpPT57Y29uc3QgZT13YSh7d2l0aEFjY2VudHM6ITF9KSxhPVNhKHt3aXRoQWNjZW50czohMX0pO3JldHVybntpZDpBbygpLGVtYWlsOkNhKHtmaXJzdE5hbWU6ZSxsYXN0TmFtZTphfSksZmlyc3ROYW1lOmUsbGFzdE5hbWU6YSxwaG9uZTp3bygpLGltZzp6KCksdXNlcm5hbWU6TW8oe2ZpcnN0TmFtZTplLGxhc3ROYW1lOmF9KSxhZGRyZXNzOnhvKCl9fSksZSl9ZnVuY3Rpb24gcW8oZSl7dmFyIGE7Y29uc3QgdD1udWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLmNoYXJDb3VudCk/YToxMDtpZih0PDF8fGlzTmFOKHQpKXRocm93XCJDaGFyYWN0ZXIgY291bnQgbXVzdCBiZSBncmVhdGVyIHRoYW4gMFwiO3JldHVybiBuKCgoKT0+e2xldCBlPUx0KCk7aWYoMT09PXQpcmV0dXJuIGIoKTtmb3IoO2UubGVuZ3RoPHQ7KWUrPWAgJHtMdCgpfWA7cmV0dXJuIGU9ZS5zdWJzdHJpbmcoMCx0LTIpLGUrPWAke2IoKX0uYCxlfSksZSl9ZnVuY3Rpb24gRm8oZSl7cmV0dXJuIG4oKCgpPT4oe2lkOkFvKCksdGl0bGU6cW8oe2NoYXJDb3VudDo0MH0pLGJvZHk6cW8oe2NoYXJDb3VudDo1MDB9KSxjb21tZW50czpBcnJheS5mcm9tKHtsZW5ndGg6Uyh7bWluOjEsbWF4OjV9KX0sKCgpPT4oe2lkOkFvKCksdGV4dDpxbyh7Y2hhckNvdW50OjEwMH0pLHVzZXI6RG8oKX0pKSl9KSksZSl9dmFyIEdvPVtcImxvd1wiLFwibWVkaXVtXCIsXCJoaWdoXCIsXCJjcml0aWNhbFwiLFwidXJnZW50XCIsXCJtYWpvclwiLFwibW9kZXJhdGVcIixcIm1pbm9yXCJdO2Z1bmN0aW9uIExvKGUpe3JldHVybiBuKEdvLGUpfXZhciBSbz1bXCJTbWFsbCBSdWJiZXIgU2hvZXNcIixcIkZhbnRhc3RpYyBXb29kZW4gU2F1c2FnZXNcIixcIkhhbmRtYWRlIEZyb3plbiBTYWxhZFwiLFwiSW50ZWxsaWdlbnQgU29mdCBDYXJcIixcIkludGVsbGlnZW50IENvbmNyZXRlIENoaXBzXCIsXCJIYW5kY3JhZnRlZCBDb25jcmV0ZSBCYWNvblwiLFwiU21hbGwgRnJlc2ggRmlzaFwiLFwiUnVzdGljIE1ldGFsIFRvd2Vsc1wiLFwiVW5icmFuZGVkIENvdHRvbiBIYXRcIixcIkZhbnRhc3RpYyBGcm96ZW4gQmlrZVwiLFwiR2VuZXJpYyBSdWJiZXIgU2hpcnRcIixcIlVuYnJhbmRlZCBXb29kZW4gS2V5Ym9hcmRcIixcIkF3ZXNvbWUgTWV0YWwgQ29tcHV0ZXJcIixcIkdvcmdlb3VzIEZyZXNoIFNob2VzXCIsXCJVbmJyYW5kZWQgQ29uY3JldGUgU2F1c2FnZXNcIixcIlByYWN0aWNhbCBXb29kZW4gQmFsbFwiLFwiRXJnb25vbWljIFNvZnQgVG93ZWxzXCIsXCJTbWFsbCBQbGFzdGljIFRhYmxlXCIsXCJBd2Vzb21lIE1ldGFsIFBhbnRzXCIsXCJMaWNlbnNlZCBTdGVlbCBTYXVzYWdlc1wiLFwiSGFuZGNyYWZ0ZWQgUnViYmVyIEJpa2VcIixcIkVyZ29ub21pYyBDb3R0b24gQ29tcHV0ZXJcIixcIkdlbmVyaWMgV29vZGVuIEJhbGxcIixcIkZhbnRhc3RpYyBGcm96ZW4gU29hcFwiLFwiR2VuZXJpYyBQbGFzdGljIEtleWJvYXJkXCIsXCJBd2Vzb21lIENvdHRvbiBQaXp6YVwiLFwiTGljZW5zZWQgTWV0YWwgQ2hpcHNcIixcIkhhbmRjcmFmdGVkIENvdHRvbiBUb3dlbHNcIixcIkhhbmRtYWRlIFBsYXN0aWMgVHVuYVwiLFwiUHJhY3RpY2FsIEdyYW5pdGUgS2V5Ym9hcmRcIixcIkludGVsbGlnZW50IENvbmNyZXRlIFNvYXBcIixcIlJ1c3RpYyBDb25jcmV0ZSBDaGlwc1wiLFwiRmFudGFzdGljIFN0ZWVsIEhhdFwiLFwiUnVzdGljIENvdHRvbiBDaGFpclwiLFwiR29yZ2VvdXMgTWV0YWwgUGFudHNcIixcIkludGVsbGlnZW50IE1ldGFsIEJhY29uXCIsXCJIYW5kbWFkZSBSdWJiZXIgQ2FyXCIsXCJUYXN0eSBDb25jcmV0ZSBLZXlib2FyZFwiLFwiSW5jcmVkaWJsZSBHcmFuaXRlIEhhdFwiLFwiUHJhY3RpY2FsIFJ1YmJlciBGaXNoXCIsXCJSdXN0aWMgQ290dG9uIEdsb3Zlc1wiLFwiUnVzdGljIENvdHRvbiBCYWxsXCIsXCJSZWZpbmVkIEZyZXNoIFNoaXJ0XCIsXCJHZW5lcmljIEdyYW5pdGUgU2F1c2FnZXNcIixcIlJ1c3RpYyBHcmFuaXRlIEZpc2hcIixcIlByYWN0aWNhbCBXb29kZW4gQmFjb25cIixcIlNsZWVrIFBsYXN0aWMgQ2hhaXJcIixcIkhhbmRjcmFmdGVkIEZyZXNoIE1vdXNlXCIsXCJTbWFsbCBDb25jcmV0ZSBTaG9lc1wiLFwiQXdlc29tZSBGcmVzaCBDaGFpclwiLFwiSW5jcmVkaWJsZSBTb2Z0IENvbXB1dGVyXCIsXCJUYXN0eSBDb25jcmV0ZSBDaGlwc1wiLFwiR2VuZXJpYyBSdWJiZXIgU2F1c2FnZXNcIixcIkludGVsbGlnZW50IENvbmNyZXRlIENoaWNrZW5cIixcIlJ1c3RpYyBTb2Z0IEJhbGxcIixcIkF3ZXNvbWUgU3RlZWwgVG93ZWxzXCIsXCJJbmNyZWRpYmxlIEZyZXNoIEJpa2VcIixcIlVuYnJhbmRlZCBHcmFuaXRlIENoaWNrZW5cIixcIlJ1c3RpYyBDb25jcmV0ZSBCaWtlXCIsXCJTbWFsbCBGcm96ZW4gU2F1c2FnZXNcIixcIkludGVsbGlnZW50IFBsYXN0aWMgR2xvdmVzXCIsXCJFcmdvbm9taWMgRnJvemVuIFRvd2Vsc1wiLFwiUmVmaW5lZCBGcm96ZW4gQmFsbFwiLFwiUmVmaW5lZCBDb3R0b24gQmFsbFwiLFwiTGljZW5zZWQgU3RlZWwgU2FsYWRcIixcIkludGVsbGlnZW50IFdvb2RlbiBCYWNvblwiLFwiVW5icmFuZGVkIE1ldGFsIFNob2VzXCIsXCJGYW50YXN0aWMgR3Jhbml0ZSBDYXJcIixcIkVyZ29ub21pYyBHcmFuaXRlIEJhY29uXCIsXCJBd2Vzb21lIFdvb2RlbiBTaGlydFwiLFwiUnVzdGljIFdvb2RlbiBQaXp6YVwiLFwiVGFzdHkgRnJvemVuIFRhYmxlXCIsXCJBd2Vzb21lIFdvb2RlbiBIYXRcIixcIkF3ZXNvbWUgUnViYmVyIFNhbGFkXCIsXCJMaWNlbnNlZCBDb25jcmV0ZSBGaXNoXCIsXCJGYW50YXN0aWMgU29mdCBDaGVlc2VcIixcIlJ1c3RpYyBGcm96ZW4gUGl6emFcIixcIlJlZmluZWQgQ29uY3JldGUgVHVuYVwiLFwiU21hbGwgRnJvemVuIFR1bmFcIixcIkxpY2Vuc2VkIEdyYW5pdGUgQ2hlZXNlXCIsXCJQcmFjdGljYWwgUnViYmVyIENhclwiLFwiUnVzdGljIFN0ZWVsIFNhdXNhZ2VzXCIsXCJBd2Vzb21lIENvbmNyZXRlIEhhdFwiLFwiQXdlc29tZSBHcmFuaXRlIFNhdXNhZ2VzXCIsXCJTbGVlayBQbGFzdGljIENoaXBzXCIsXCJIYW5kY3JhZnRlZCBXb29kZW4gR2xvdmVzXCIsXCJJbnRlbGxpZ2VudCBNZXRhbCBDb21wdXRlclwiLFwiRmFudGFzdGljIEZyZXNoIFNhdXNhZ2VzXCIsXCJGYW50YXN0aWMgUGxhc3RpYyBTYWxhZFwiLFwiVW5icmFuZGVkIFN0ZWVsIFNhdXNhZ2VzXCIsXCJIYW5kY3JhZnRlZCBXb29kZW4gRmlzaFwiLFwiU2xlZWsgV29vZGVuIEJhY29uXCIsXCJVbmJyYW5kZWQgUGxhc3RpYyBUb3dlbHNcIixcIlRhc3R5IFNvZnQgU2F1c2FnZXNcIixcIkdlbmVyaWMgTWV0YWwgU2hpcnRcIixcIkhhbmRtYWRlIEdyYW5pdGUgQ2hlZXNlXCIsXCJTbWFsbCBGcmVzaCBCYWNvblwiLFwiVGFzdHkgR3Jhbml0ZSBUb3dlbHNcIixcIkxpY2Vuc2VkIFN0ZWVsIENoaXBzXCJdO2Z1bmN0aW9uIEhvKGUpe3JldHVybiBuKFJvLGUpfXZhciBFbz1bXCJCb3N0b25zIG1vc3QgYWR2YW5jZWQgY29tcHJlc3Npb24gd2VhciB0ZWNobm9sb2d5IGluY3JlYXNlcyBtdXNjbGUgb3h5Z2VuYXRpb24sIHN0YWJpbGl6ZXMgYWN0aXZlIG11c2NsZXNcIixcIlRoZSBGb290YmFsbCBJcyBHb29kIEZvciBUcmFpbmluZyBBbmQgUmVjcmVhdGlvbmFsIFB1cnBvc2VzXCIsXCJOZXcgQUJDIDEzIDkzNzAsIDEzLjMsIDV0aCBHZW4gQ29yZUE1LTgyNTBVLCA4R0IgUkFNLCAyNTZHQiBTU0QsIHBvd2VyIFVIRCBHcmFwaGljcywgT1MgMTAgSG9tZSwgT1MgT2ZmaWNlIEEgJiBKIDIwMTZcIixcIlRoZSBhdXRvbW9iaWxlIGxheW91dCBjb25zaXN0cyBvZiBhIGZyb250LWVuZ2luZSBkZXNpZ24sIHdpdGggdHJhbnNheGxlLXR5cGUgdHJhbnNtaXNzaW9ucyBtb3VudGVkIGF0IHRoZSByZWFyIG9mIHRoZSBlbmdpbmUgYW5kIGZvdXIgd2hlZWwgZHJpdmVcIixcIlRoZSBOYWdhc2FraSBMYW5kZXIgaXMgdGhlIHRyYWRlbWFya2VkIG5hbWUgb2Ygc2V2ZXJhbCBzZXJpZXMgb2YgTmFnYXNha2kgc3BvcnQgYmlrZXMsIHRoYXQgc3RhcnRlZCB3aXRoIHRoZSAxOTg0IEFCQzgwMEpcIixcIlRoZSBzbGltICYgc2ltcGxlIE1hcGxlIEdhbWluZyBLZXlib2FyZCBmcm9tIERldiBCeXRlIGNvbWVzIHdpdGggYSBzbGVlayBib2R5IGFuZCA3LSBDb2xvciBSR0IgTEVEIEJhY2stbGlnaHRpbmcgZm9yIHNtYXJ0IGZ1bmN0aW9uYWxpdHlcIixcIkFuZHkgc2hvZXMgYXJlIGRlc2lnbmVkIHRvIGtlZXBpbmcgaW4gbWluZCBkdXJhYmlsaXR5IGFzIHdlbGwgYXMgdHJlbmRzLCB0aGUgbW9zdCBzdHlsaXNoIHJhbmdlIG9mIHNob2VzICYgc2FuZGFsc1wiLFwiVGhlIEFwb2xsb3RlY2ggQjM0MCBpcyBhbiBhZmZvcmRhYmxlIHdpcmVsZXNzIG1vdXNlIHdpdGggcmVsaWFibGUgY29ubmVjdGl2aXR5LCAxMiBtb250aHMgYmF0dGVyeSBsaWZlIGFuZCBtb2Rlcm4gZGVzaWduXCIsXCJDYXJib25pdGUgd2ViIGdvYWxrZWVwZXIgZ2xvdmVzIGFyZSBlcmdvbm9taWNhbGx5IGRlc2lnbmVkIHRvIGdpdmUgZWFzeSBmaXRcIixcIkVyZ29ub21pYyBleGVjdXRpdmUgY2hhaXIgdXBob2xzdGVyZWQgaW4gYm9uZGVkIGJsYWNrIGxlYXRoZXIgYW5kIFBWQyBwYWRkZWQgc2VhdCBhbmQgYmFjayBmb3IgYWxsLWRheSBjb21mb3J0IGFuZCBzdXBwb3J0XCIsXCJOZXcgcmFuZ2Ugb2YgZm9ybWFsIHNoaXJ0cyBhcmUgZGVzaWduZWQga2VlcGluZyB5b3UgaW4gbWluZC4gV2l0aCBmaXRzIGFuZCBzdHlsaW5nIHRoYXQgd2lsbCBtYWtlIHlvdSBzdGFuZCBhcGFydFwiLFwiVGhlIGJlYXV0aWZ1bCByYW5nZSBvZiBBcHBsZSBOYXR1cmFsw6kgdGhhdCBoYXMgYW4gZXhjaXRpbmcgbWl4IG9mIG5hdHVyYWwgaW5ncmVkaWVudHMuIFdpdGggdGhlIEdvb2RuZXNzIG9mIDEwMCUgTmF0dXJhbCBJbmdyZWRpZW50c1wiXTtmdW5jdGlvbiBXbyhlKXtyZXR1cm4gbihFbyxlKX12YXIgTm89W1wiQW50aXF1ZXNcIixcIkFwcGxpYW5jZXNcIixcIkF1dG9tb3RpdmUgUGFydHMgJiBBY2Nlc3Nvcmllc1wiLFwiQXV0b21vdGl2ZSBQYXJ0c1wiLFwiQmFieSAmIFBlcnNvbmFsIENhcmVcIixcIkJvb2tzXCIsXCJDRHMgJiBWaW55bFwiLFwiQ2xvdGhpbmdcIixcIkNvbGxlY3RpYmxlc1wiLFwiQ29tcHV0ZXJzICYgVGFibGV0c1wiLFwiQ3JhZnRzXCIsXCJFbGVjdHJvbmljc1wiLFwiR2FyZGVuXCIsXCJHcm9jZXJ5XCIsXCJIZWFsdGggJiBCZWF1dHlcIixcIktpbmRsZVwiLFwiTW92aWVzICYgVFZcIixcIk11c2ljYWwgSW5zdHJ1bWVudHNcIixcIlNtYXJ0cGhvbmVzICYgQWNjZXNzb3JpZXNcIixcIlNwb3J0aW5nIEdvb2RzXCIsXCJUb3lzXCIsXCJWaWRlbyBHYW1lc1wiXTtmdW5jdGlvbiB6byhlKXtyZXR1cm4gbihObyxlKX1mdW5jdGlvbiBLbyhlKXtyZXR1cm4gbigoKCk9Pih7aWQ6QW8oKSx0aXRsZTpIbygpLGRlc2NyaXB0aW9uOldvKCkscHJpY2U6cyh7ZnJhY3Rpb246Mn0pLnRvU3RyaW5nKCksY2F0ZWdvcnk6em8oKSxpbWFnZTpndCgpLHJhdGluZzp7cmF0ZTpzKHttaW46LjEsbWF4OjUsZnJhY3Rpb246MX0pLnRvU3RyaW5nKCksY291bnQ6cyh7bWluOjAsbWF4OjFlNH0pLnRvU3RyaW5nKCl9fSkpLGUpfXZhciBPbz1bXCJBd2Vzb21lXCIsXCJSdXN0aWNcIixcIlNtYWxsXCIsXCJHb3JnZW91c1wiLFwiRmFudGFzdGljXCIsXCJTbGVla1wiLFwiSW50ZWxsaWdlbnRcIixcIlVuYnJhbmRlZFwiLFwiUmVmaW5lZFwiLFwiTGljZW5zZWRcIixcIkdlbmVyaWNcIixcIlByYWN0aWNhbFwiLFwiRXJnb25vbWljXCIsXCJIYW5kY3JhZnRlZFwiLFwiVGFzdHlcIixcIkhhbmRtYWRlXCIsXCJJbmNyZWRpYmxlXCJdO2Z1bmN0aW9uIEpvKGUpe3JldHVybiBuKE9vLGUpfXZhciBWbz1bXCJNZXRhbFwiLFwiUGxhc3RpY1wiLFwiUnViYmVyXCIsXCJGcm96ZW5cIixcIlNvZnRcIixcIkNvbmNyZXRlXCIsXCJHcmFuaXRlXCIsXCJGcmVzaFwiLFwiU3RlZWxcIixcIkNvdHRvblwiLFwiV29vZGVuXCJdO2Z1bmN0aW9uIGpvKGUpe3JldHVybiBuKFZvLGUpfXZhciBVbz1bXCJQeXRob25cIixcIkphdmFcIixcIkphdmFTY3JpcHRcIixcIkNcIixcIkMrK1wiLFwiQyNcIixcIlBIUFwiLFwiS290bGluXCIsXCJSXCIsXCJUeXBlU2NyaXB0XCIsXCJBYmFwXCIsXCJTd2lmdFwiLFwiT2JqZWN0aXZlLUNcIixcIlZCQVwiLFwiTWF0bGFiXCIsXCJHb1wiLFwiU2NhbGFcIixcIlJ1YnlcIixcIkdyb292eVwiLFwiRGFydFwiLFwiQ29ib2xcIixcIlZpc3VhbCBCYXNpY1wiLFwiUGVybFwiLFwiSnVsaWFcIixcIlJ1c3RcIixcIkx1YVwiLFwiTGlzcFwiLFwiSGFza2VsbFwiLFwiRGVscGhpXCJdO2Z1bmN0aW9uIF9vKGUpe3JldHVybiBuKFVvLGUpfXZhciBZbz1bXCJUaGV5L1RoZW1cIixcIlNoZS9IZXJcIixcIkhlL0hpbVwiLFwiWmUvSGlyXCJdO2Z1bmN0aW9uIFFvKGUpe3JldHVybiBuKFlvLGUpfXZhciAkbz1bXCJodHRwc1wiLFwiaHR0cFwiLFwidGNwXCIsXCJ1ZHBcIixcImlwXCIsXCJwb3BcIixcInNtdHBcIixcImRoY3BcIixcImwydHBcIixcImZ0cFwiLFwiaW1hcFwiXSxYbz1bXCJIeXBlciBUZXh0IFRyYW5zZmVyIFByb3RvY29sIFNlY3VyZVwiLFwiSHlwZXIgVGV4dCBUcmFuc2ZlciBQcm90b2NvbFwiLFwiVHJhbnNtaXNzaW9uIENvbnRyb2wgUHJvdG9jb2xcIixcIlVzZXIgRGF0YWdyYW0gUHJvdG9jb2xcIixcIkludGVybmV0IFByb3RvY29sXCIsXCJQb3N0IG9mZmljZSBQcm90b2NvbFwiLFwiU2ltcGxlIG1haWwgdHJhbnNwb3J0IFByb3RvY29sXCIsXCJEeW5hbWljIEhvc3QgQ29uZmlndXJhdGlvbiBQcm90b2NvXCIsXCJMYXllciBUd28gVHVubmVsbGluZyBQcm90b2NvbFwiLFwiRmlsZSBUcmFuc2ZlciBQcm90b2NvbFwiLFwiSW50ZXJuZXQgTWVzc2FnZSBBY2Nlc3MgUHJvdG9jb2xcIl07ZnVuY3Rpb24gWm8oZSl7cmV0dXJuIG4obnVsbCE9ZSYmZS5mdWxsTmFtZT9YbzokbyxlKX12YXIgZWk9W1wiQSBzdHVtYmxlIG1heSBwcmV2ZW50IGEgZmFsbC5cIixcIlB1dCB5b3VyIGZ1dHVyZSBpbiBnb29kIGhhbmRzIHlvdXIgb3duLlwiLFwiV2hhdCB5b3Ugc2VlIGRlcGVuZHMgb24gd2hhdCB5b3UncmUgbG9va2luZyBmb3IuXCIsXCJXb3JyeSBnaXZlcyBhIHNtYWxsIHRoaW5nIGEgYmlnIHNoYWRvdy5cIixcIlRvIGdldCBzb21ldGhpbmcgeW91IG5ldmVyIGhhZCwgeW91IGhhdmUgdG8gZG8gc29tZXRoaW5nIHlvdSBuZXZlciBkaWQuXCIsXCJCZSB0aGFua2Z1bCB3aGVuIHlvdSBkb24ndCBrbm93IHNvbWV0aGluZyBmb3IgaXQgZ2l2ZXMgeW91IHRoZSBvcHBvcnR1bml0eSB0byBsZWFybi5cIixcIkxldHRpbmcgZ28gaXMgbm90IHRoZSBlbmQgb2YgdGhlIHdvcmxkOyBpdCBpcyB0aGUgYmVnaW5uaW5nIG9mIGEgbmV3IGxpZmUuXCIsXCJPdXIgZ3JlYXRlc3QgZ2xvcnkgaXMgbm90IGluIG5ldmVyIGZhaWxpbmcgYnV0IHJpc2luZyBldmVyeXRpbWUgd2UgZmFsbC5cIixcIkJlaW5nIHJpZ2h0IGlzIGhpZ2hseSBvdmVycmF0ZWQuIEV2ZW4gYSBzdG9wcGVkIGNsb2NrIGlzIHJpZ2h0IHR3aWNlIGEgZGF5LlwiLFwiTG92ZSBpcyBub3QgYmxpbmQ7IGl0IHNpbXBseSBlbmFibGVzIG9uZSB0byBzZWUgdGhpbmdzIG90aGVycyBmYWlsIHRvIHNlZS5cIixcIklmIHlvdSBnZXQgdXAgb25lIG1vcmUgdGltZSB0aGFuIHlvdSBmYWxsLCB5b3Ugd2lsbCBtYWtlIGl0IHRocm91Z2guXCIsXCJEb24ndCBmb2N1cyBvbiBtYWtpbmcgdGhlIHJpZ2h0IGRlY2lzaW9uLCBmb2N1cyBvbiBtYWtpbmcgdGhlIGRlY2lzaW9uIHRoZSByaWdodCBvbmUuXCIsXCJMb3ZlIGlzIGp1c3QgYSB3b3JkIHVudGlsIHNvbWVvbmUgY29tZXMgYWxvbmcgYW5kIGdpdmVzIGl0IG1lYW5pbmcuXCIsXCJXZSBhbGwgaGF2ZSBwcm9ibGVtcy4gVGhlIHdheSB3ZSBzb2x2ZSB0aGVtIGlzIHdoYXQgbWFrZXMgdXMgZGlmZmVyZW50LlwiLFwiSW52ZW50IHlvdXIgd29ybGQuIFN1cnJvdW5kIHlvdXJzZWxmIHdpdGggcGVvcGxlLCBjb2xvciwgc291bmRzLCBhbmQgd29yayB0aGF0IG5vdXJpc2ggeW91LlwiLFwiRXZlcnkgZGF5IG1heSBub3QgYmUgZ29vZCwgYnV0IHRoZXJlJ3Mgc29tZXRoaW5nIGdvb2QgaW4gZXZlcnkgZGF5LlwiLFwiU29tZSBwZW9wbGUgdGhpbmsgaXQncyBob2xkaW5nIHRoYXQgbWFrZXMgb25lIHN0cm9uZyBzb21ldGltZXMgaXQncyBsZXR0aW5nIGdvLlwiLFwiV2h5IHdvcnJ5IGFib3V0IHRoaW5ncyB5b3UgY2Fubm90IGNvbnRyb2wgd2hlbiB5b3UgY2FuIGtlZXAgeW91cnNlbGYgYnVzeSBjb250cm9sbGluZyB0aGUgdGhpbmdzIHRoYXQgZGVwZW5kIG9uIHlvdT9cIixcIkl0IGlzIGJldHRlciB0byB0YWtlIG1hbnkgc21hbGwgc3RlcHMgaW4gdGhlIHJpZ2h0IGRpcmVjdGlvbiB0aGFuIHRvIG1ha2UgYSBncmVhdCBsZWFwIGZvcndhcmQgb25seSB0byBzdHVtYmxlIGJhY2t3YXJkLlwiLFwiQXMgdGhlIHJlc3Qgb2YgdGhlIHdvcmxkIGlzIHdhbGtpbmcgb3V0IHRoZSBkb29yLCB5b3VyIGJlc3QgZnJpZW5kcyBhcmUgdGhlIG9uZXMgd2Fsa2luZyBpbi5cIixcIldoeSBjb21wYXJlIHlvdXJzZWxmIHdpdGggb3RoZXJzPyBObyBvbmUgaW4gdGhlIGVudGlyZSB3b3JsZCBjYW4gZG8gYSBiZXR0ZXIgam9iIG9mIGJlaW5nIHlvdSB0aGFuIHlvdS5cIixcIkEgZ29vZCB0ZWFjaGVyIGlzIGxpa2UgYSBjYW5kbGUgaXQgY29uc3VtZXMgaXRzZWxmIHRvIGxpZ2h0IHRoZSB3YXkgZm9yIG90aGVycy5cIixcIkxpZmUgaXMgbm90IG1lYXN1cmVkIGJ5IHRoZSBicmVhdGhzIHdlIHRha2UsIGJ1dCBieSB0aGUgbW9tZW50cyB0aGF0IHRha2Ugb3VyIGJyZWF0aC5cIixcIlRoZSByZWFsIG1lYXN1cmUgb2YgeW91ciB3ZWFsdGggaXMgaG93IG11Y2ggeW91ZCBiZSB3b3J0aCBpZiB5b3UgbG9zdCBhbGwgeW91ciBtb25leS5cIixcIlRob3VnaCBubyBvbmUgY2FuIGdvIGJhY2sgYW5kIG1ha2UgYSBicmFuZCBuZXcgc3RhcnQsIGFueW9uZSBjYW4gc3RhcnQgZnJvbSBub3cgYW5kIG1ha2UgYSBicmFuZCBuZXcgZW5kaW5nLlwiLFwiQSBmcmllbmQgaXMgc29tZW9uZSB3aG8gdW5kZXJzdGFuZHMgeW91ciBwYXN0LCBiZWxpZXZlcyBpbiB5b3VyIGZ1dHVyZSwgYW5kIGFjY2VwdHMgeW91IGp1c3QgdGhlIHdheSB5b3UgYXJlLlwiLFwiR2l2aW5nIHVwIGRvZXNuJ3QgYWx3YXlzIG1lYW4geW91IGFyZSB3ZWFrLiBTb21ldGltZXMgaXQgbWVhbnMgdGhhdCB5b3UgYXJlIHN0cm9uZyBlbm91Z2ggdG8gbGV0IGdvLlwiLFwiTmV2ZXIgbWlzcyBhbiBvcHBvcnR1bml0eSB0byBtYWtlIG90aGVycyBoYXBweSwgZXZlbiBpZiB5b3UgaGF2ZSB0byBsZWF2ZSB0aGVtIGFsb25lIGluIG9yZGVyIHRvIGRvIGl0LlwiLFwiWWVzdGVyZGF5IGlzIGhpc3RvcnkuIFRvbW9ycm93IGlzIGEgbXlzdGVyeS4gQW5kIHRvZGF5PyBUb2RheSBpcyBhIGdpZnQgdGhhdCdzIHdoeSB0aGV5IGNhbGwgaXQgdGhlIHByZXNlbnQuXCIsXCJXaGVuIHlvdSBkb24ndCBrbm93IHdoYXQgeW91IGJlbGlldmUsIGV2ZXJ5dGhpbmcgYmVjb21lcyBhbiBhcmd1bWVudC4gRXZlcnl0aGluZyBpcyBkZWJhdGFibGUuIEJ1dCB3aGVuIHlvdSBzdGFuZCBmb3Igc29tZXRoaW5nLCBkZWNpc2lvbnMgYXJlIG9idmlvdXMuXCIsXCJFdmVyeSBzaXh0eSBzZWNvbmRzIHlvdSBzcGVuZCBhbmdyeSwgdXBzZXQgb3IgbWFkLCBpcyBhIGZ1bGwgbWludXRlIG9mIGhhcHBpbmVzcyB5b3Ugd2lsbCBuZXZlciBnZXQgYmFjay5cIixcIklmIHdlIGFyZSBmYWNpbmcgaW4gdGhlIHJpZ2h0IGRpcmVjdGlvbiwgYWxsIHdlIGhhdmUgdG8gZG8gaXMga2VlcCBvbiB3YWxraW5nLlwiLFwiUGVhY2Ugb2YgbWluZCBpcyBub3QgdGhlIGFic2VuY2Ugb2YgY29uZmxpY3QgZnJvbSBsaWZlLCBidXQgdGhlIGFiaWxpdHkgdG8gY29wZSB3aXRoIGl0LlwiLFwiQW4gb2JzdGFjbGUgbWF5IGJlIGVpdGhlciBhIHN0ZXBwaW5nIHN0b25lIG9yIGEgc3R1bWJsaW5nIGJsb2NrLlwiLFwiSSd2ZSBuZXZlciBzZWVuIGEgc21pbGluZyBmYWNlIHRoYXQgd2FzIG5vdCBiZWF1dGlmdWwuXCIsXCJLaW5kbmVzcyBpcyB0aGUgZ3JlYXRlc3Qgd2lzZG9tLlwiLFwiRG9uJ3QgbWlzcyBhbGwgdGhlIGJlYXV0aWZ1bCBjb2xvcnMgb2YgdGhlIHJhaW5ib3cgbG9va2luZyBmb3IgdGhhdCBwb3Qgb2YgZ29sZC5cIixcIllvdSBkb24ndCBkcm93biBieSBmYWxsaW5nIGluIHdhdGVyLiBZb3UgZHJvd24gYnkgc3RheWluZyB0aGVyZS5cIixcIk5ldmVyIGJlIGFmcmFpZCB0byB0cnksIHJlbWVtYmVyLi4uIEFtYXRldXJzIGJ1aWx0IHRoZSBhcmssIFByb2Zlc3Npb25hbHMgYnVpbHQgdGhlIFRpdGFuaWMuXCIsXCJBIHNtaWxlIGlzIGEgbGlnaHQgaW4gdGhlIHdpbmRvdyBvZiB5b3VyIGZhY2UgdG8gc2hvdyB5b3VyIGhlYXJ0IGlzIGF0IGhvbWUuXCIsXCJZb3UgbWF5IG9ubHkgYmUgc29tZW9uZSBpbiB0aGUgd29ybGQsIGJ1dCB0byBzb21lb25lIGVsc2UsIHlvdSBtYXkgYmUgdGhlIHdvcmxkLlwiLFwiQSBiZW5kIGluIHRoZSByb2FkIGlzIG5vdCB0aGUgZW5kIG9mIHRoZSByb2FkLi4udW5sZXNzIHlvdSBmYWlsIHRvIG1ha2UgdGhlIHR1cm4uXCIsXCJPbmUgd2hvIGFza3MgYSBxdWVzdGlvbiBpcyBhIGZvb2wgZm9yIGZpdmUgbWludXRlczsgb25lIHdobyBkb2VzIG5vdCBhc2sgYSBxdWVzdGlvbiByZW1haW5zIGEgZm9vbCBmb3JldmVyLlwiLFwiQ291cmFnZSBpcyB0aGUgZGlzY292ZXJ5IHRoYXQgeW91IG1heSBub3Qgd2luLCBhbmQgdHJ5aW5nIHdoZW4geW91IGtub3cgeW91IGNhbiBsb3NlLlwiLFwiQSBnb29kIHJlc3QgaXMgaGFsZiB0aGUgd29yay5cIixcIkFsbCB0aGUgZmxvd2VycyBvZiBhbGwgdGhlIHRvbW9ycm93cyBhcmUgaW4gdGhlIHNlZWRzIG9mIHRvZGF5LlwiLFwiQSBtYW4gaXMgbm90IHdoZXJlIGhlIGxpdmVzIGJ1dCB3aGVyZSBoZSBsb3Zlcy5cIixcIlRoZSB3b3JsZCBkb2VzIG5vdCBoYXBwZW4gdG8geW91IGl0IGhhcHBlbnMgZnJvbSB5b3UuXCIsXCJNb3JlIHBvd2VyZnVsIHRoYW4gdGhlIHdpbGwgdG8gd2luIGlzIHRoZSBjb3VyYWdlIHRvIGJlZ2luLlwiLFwiV2hhdCB3ZSBzZWUgaXMgbWFpbmx5IHdoYXQgd2UgbG9vayBmb3IuXCIsXCJEb24ndCB3YWl0IGZvciBwZW9wbGUgdG8gYmUgZnJpZW5kbHkuIFNob3cgdGhlbSBob3cuXCIsXCJEb24ndCBsZXQgdG9kYXkncyBkaXNhcHBvaW50bWVudHMgY2FzdCBhIHNoYWRvdyBvbiB0b21vcnJvdydzIGRyZWFtcy5cIixcIk5ldmVyIGxldCBsYWNrIG9mIG1vbmV5IGludGVyZmVyZSB3aXRoIGhhdmluZyBmdW4uXCIsXCJIZSB3aG8gaGFzIGhlYWx0aCBoYXMgaG9wZSwgYW5kIGhlIHdobyBoYXMgaG9wZSBoYXMgZXZlcnl0aGluZy5cIixcIlRoZSBkaWZmaWN1bHRpZXMgb2YgbGlmZSBhcmUgaW50ZW5kZWQgdG8gbWFrZSB1cyBiZXR0ZXIsIG5vdCBiaXR0ZXIuXCIsXCJDaGFuZ2UgeW91ciB3b3Jkcy4gQ2hhbmdlIHlvdXIgd29ybGQuXCIsXCJPcGVuIG1pbmRzIGxlYWQgdG8gb3BlbiBkb29ycy5cIixcIkVhY2ggdGltZSB3ZSBmYWNlIGEgZmVhciwgd2UgZ2FpbiBzdHJlbmd0aCwgY291cmFnZSwgYW5kIGNvbmZpZGVuY2UgaW4gdGhlIGRvaW5nLlwiLFwiSWYgeW91IGNvbWUgdG8gYSBmb3JrIGluIHRoZSByb2FkLCB0YWtlIGl0LlwiLFwiTm9ib2R5IGNhbiBkbyBldmVyeXRoaW5nLCBidXQgZXZlcnlib2R5IGNhbiBkbyBzb21ldGhpbmcuXCIsXCJXaHkgd29ycnkgYWJvdXQgdG9tb3Jyb3csIHdoZW4gdG9kYXkgaXMgYWxsIHdlIGhhdmU/XCIsXCJNb3N0IHNtaWxlcyBhcmUgc3RhcnRlZCBieSBhbm90aGVyIHNtaWxlLlwiLFwiV2hlbiB5b3UgbG9zZSwgZG9uJ3QgbG9zZSB0aGUgbGVzc29uLlwiLFwiSWYgSSBjb3VsZCByZWFjaCB1cCBhbmQgaG9sZCBhIHN0YXIgZm9yIGV2ZXJ5IHRpbWUgeW91J3ZlIG1hZGUgbWUgc21pbGUsIHRoZSBlbnRpcmUgZXZlbmluZyBza3kgd291bGQgYmUgaW4gdGhlIHBhbG0gb2YgbXkgaGFuZC5cIixcIlRoZSBzdGVlcGVyIHRoZSBtb3VudGFpbiB0aGUgaGFyZGVyIHRoZSBjbGltYiB0aGUgYmV0dGVyIHRoZSB2aWV3IGZyb20gdGhlIGZpbmlzaGluZyBsaW5lXCIsXCJEb24ndCBsZXQgd2hhdCB5b3UgY2FuJ3QgZG8gc3RvcCB5b3UgZnJvbSBkb2luZyB3aGF0IHlvdSBjYW4gZG8uXCIsXCJZb3UgY2FuIG5ldmVyIGNyb3NzIHRoZSBvY2VhbiB1bmxlc3MgeW91IGhhdmUgdGhlIGNvdXJhZ2UgdG8gbG9zZSBzaWdodCBvZiB0aGUgc2hvcmUuXCIsXCJUaGUgYmVzdCBwbGFjZSB0byBmaW5kIGEgaGVscGluZyBoYW5kIGlzIGF0IHRoZSBlbmQgb2YgeW91ciBvd24gYXJtLlwiLFwiRG9uJ3QgZmVhciBmYWlsdXJlIHNvIG11Y2ggdGhhdCB5b3UgcmVmdXNlIHRvIHRyeSBuZXcgdGhpbmdzLiBUaGUgc2FkZGVzdCBzdW1tYXJ5IG9mIGxpZmUgY29udGFpbnMgdGhyZWUgZGVzY3JpcHRpb25zOiBjb3VsZCBoYXZlLCBtaWdodCBoYXZlLCBhbmQgc2hvdWxkIGhhdmUuXCIsXCJXZSBjYW5ub3QgZGlyZWN0IHRoZSB3aW5kIGJ1dCB3ZSBjYW4gYWRqdXN0IHRoZSBzYWlscy5cIixcIkdpdmluZyB1cCBkb2Vzbid0IGFsd2F5cyBtZWFuIHlvdSBhcmUgd2Vhazsgc29tZXRpbWVzIGl0IG1lYW5zIHRoYXQgeW91IGFyZSBzdHJvbmcgZW5vdWdoIHRvIGxldCBnby5cIixcIk1hbnkgcGVvcGxlIGhhdmUgZ29uZSBmdXJ0aGVyIHRoYW4gdGhleSB0aG91Z2h0IHRoZXkgY291bGQgYmVjYXVzZSBzb21lb25lIGVsc2UgdGhvdWdodCB0aGV5IGNvdWxkLlwiLFwiTmV2ZXIgdGVsbCBtZSB0aGUgc2t5IGlzIHRoZSBsaW1pdCB3aGVuIHRoZXJlIGFyZSBmb290cHJpbnRzIG9uIHRoZSBtb29uLlwiLFwiQ291bnQgeW91ciBqb3lzIGluc3RlYWQgb2YgeW91ciB3b2VzLiBDb3VudCB5b3VyIGZyaWVuZHMgaW5zdGVhZCBvZiB5b3VyIGZvZXMuXCIsXCJCZXdhcmUgb2YgdGhlIGhhbGYgdHJ1dGguIFlvdSBtYXkgaGF2ZSBnb3R0ZW4gaG9sZCBvZiB0aGUgd3JvbmcgaGFsZi5cIixcIkl0J3Mgbm90IHdobyB5b3UgYXJlIHRoYXQgaG9sZHMgeW91IGJhY2ssIGl0J3Mgd2hvIHlvdSB0aGluayB5b3UncmUgbm90LlwiLFwiQ2hvb3NpbmcgdG8gYmUgcG9zaXRpdmUgYW5kIGhhdmluZyBhIGdyYXRlZnVsIGF0dGl0dWRlIGlzIGdvaW5nIHRvIGRldGVybWluZSBob3cgeW91J3JlIGdvaW5nIHRvIGxpdmUgeW91ciBsaWZlLlwiLFwiTXkgYXR0aXR1ZGUgaXMgdGhhdCBpZiB5b3UgcHVzaCBtZSB0b3dhcmRzIHNvbWV0aGluZyB0aGF0IHlvdSB0aGluayBpcyBhIHdlYWtuZXNzLCB0aGVuIEkgd2lsbCB0dXJuIHRoYXQgcGVyY2VpdmVkIHdlYWtuZXNzIGludG8gYSBzdHJlbmd0aC5cIixcIldlYWtuZXNzIG9mIGF0dGl0dWRlIGJlY29tZXMgd2Vha25lc3Mgb2YgY2hhcmFjdGVyLlwiLFwiTm90aGluZyBjYW4gc3RvcCB0aGUgbWFuIHdpdGggdGhlIHJpZ2h0IG1lbnRhbCBhdHRpdHVkZSBmcm9tIGFjaGlldmluZyBoaXMgZ29hbCBub3RoaW5nIG9uIGVhcnRoIGNhbiBoZWxwIHRoZSBtYW4gd2l0aCB0aGUgd3JvbmcgbWVudGFsIGF0dGl0dWRlLlwiLFwiQXR0aXR1ZGUgaXMgYSBsaXR0bGUgdGhpbmcgdGhhdCBtYWtlcyBhIGJpZyBkaWZmZXJlbmNlLlwiLFwiWW91ciBhdHRpdHVkZSwgbm90IHlvdXIgYXB0aXR1ZGUsIHdpbGwgZGV0ZXJtaW5lIHlvdXIgYWx0aXR1ZGUuXCIsXCJUaGVyZSBpcyBsaXR0bGUgZGlmZmVyZW5jZSBpbiBwZW9wbGUsIGJ1dCB0aGF0IGxpdHRsZSBkaWZmZXJlbmNlIG1ha2VzIGEgYmlnIGRpZmZlcmVuY2UuIFRoZSBsaXR0bGUgZGlmZmVyZW5jZSBpcyBhdHRpdHVkZS4gVGhlIGJpZyBkaWZmZXJlbmNlIGlzIHdoZXRoZXIgaXQgaXMgcG9zaXRpdmUgb3IgbmVnYXRpdmUuXCIsXCJEZXZlbG9wIGFuIGF0dGl0dWRlIG9mIGdyYXRpdHVkZSwgYW5kIGdpdmUgdGhhbmtzIGZvciBldmVyeXRoaW5nIHRoYXQgaGFwcGVucyB0byB5b3UsIGtub3dpbmcgdGhhdCBldmVyeSBzdGVwIGZvcndhcmQgaXMgYSBzdGVwIHRvd2FyZCBhY2hpZXZpbmcgc29tZXRoaW5nIGJpZ2dlciBhbmQgYmV0dGVyIHRoYW4geW91ciBjdXJyZW50IHNpdHVhdGlvbi5cIixcIkV2ZXJ5dGhpbmcgY2FuIGJlIHRha2VuIGZyb20gYSBtYW4gYnV0IG9uZSB0aGluZzogdGhlIGxhc3Qgb2YgaHVtYW4gZnJlZWRvbXMgLSB0byBjaG9vc2Ugb25lJ3MgYXR0aXR1ZGUgaW4gYW55IGdpdmVuIHNldCBvZiBjaXJjdW1zdGFuY2VzLCB0byBjaG9vc2Ugb25lJ3Mgb3duIHdheS5cIixcIkEgcG9zaXRpdmUgYXR0aXR1ZGUgY2F1c2VzIGEgY2hhaW4gcmVhY3Rpb24gb2YgcG9zaXRpdmUgdGhvdWdodHMsIGV2ZW50cyBhbmQgb3V0Y29tZXMuIEl0IGlzIGEgY2F0YWx5c3QgYW5kIGl0IHNwYXJrcyBleHRyYW9yZGluYXJ5IHJlc3VsdHMuXCIsXCJNb3JhbGl0eSBpcyBzaW1wbHkgdGhlIGF0dGl0dWRlIHdlIGFkb3B0IHRvd2FyZHMgcGVvcGxlIHdob20gd2UgcGVyc29uYWxseSBkaXNsaWtlLlwiLFwiSXQgaXMgbm90IHRoZSBib2R5J3MgcG9zdHVyZSwgYnV0IHRoZSBoZWFydCdzIGF0dGl0dWRlIHRoYXQgY291bnRzIHdoZW4gd2UgcHJheS5cIixcIlBlb3BsZSBtYXkgaGVhciB5b3VyIHdvcmRzLCBidXQgdGhleSBmZWVsIHlvdXIgYXR0aXR1ZGUuXCIsXCJCdXQgdGhlIGF0dGl0dWRlIG9mIGZhaXRoIGlzIHRvIGxldCBnbywgYW5kIGJlY29tZSBvcGVuIHRvIHRydXRoLCB3aGF0ZXZlciBpdCBtaWdodCB0dXJuIG91dCB0byBiZS5cIixcIkNoYXJhY3RlciBpcyB0aGUgcmVzdWx0IG9mIHR3byB0aGluZ3M6IG1lbnRhbCBhdHRpdHVkZSBhbmQgdGhlIHdheSB3ZSBzcGVuZCBvdXIgdGltZS5cIixcIk91ciBhdHRpdHVkZSB0b3dhcmRzIG90aGVycyBkZXRlcm1pbmVzIHRoZWlyIGF0dGl0dWRlIHRvd2FyZHMgdXMuXCIsXCJBZG9wdGluZyB0aGUgcmlnaHQgYXR0aXR1ZGUgY2FuIGNvbnZlcnQgYSBuZWdhdGl2ZSBzdHJlc3MgaW50byBhIHBvc2l0aXZlIG9uZS5cIixcIlRha2UgdGhlIGF0dGl0dWRlIG9mIGEgc3R1ZGVudCwgbmV2ZXIgYmUgdG9vIGJpZyB0byBhc2sgcXVlc3Rpb25zLCBuZXZlciBrbm93IHRvbyBtdWNoIHRvIGxlYXJuIHNvbWV0aGluZyBuZXcuXCIsXCJUaGUgcmVhY3Rpb25hcnkgaXMgYWx3YXlzIHdpbGxpbmcgdG8gdGFrZSBhIHByb2dyZXNzaXZlIGF0dGl0dWRlIG9uIGFueSBpc3N1ZSB0aGF0IGlzIGRlYWQuXCIsXCJBYmlsaXR5IGlzIHdoYXQgeW91J3JlIGNhcGFibGUgb2YgZG9pbmcuIE1vdGl2YXRpb24gZGV0ZXJtaW5lcyB3aGF0IHlvdSBkby4gQXR0aXR1ZGUgZGV0ZXJtaW5lcyBob3cgd2VsbCB5b3UgZG8gaXQuXCIsXCJDb2NrIHlvdXIgaGF0IC0gYW5nbGVzIGFyZSBhdHRpdHVkZXMuXCIsXCJXaGVuIHlvdSBwcmF5IGZvciBhbnlvbmUgeW91IHRlbmQgdG8gbW9kaWZ5IHlvdXIgcGVyc29uYWwgYXR0aXR1ZGUgdG93YXJkIGhpbS5cIixcIklmIHlvdSBhcmUgZ29pbmcgdG8gYWNoaWV2ZSBleGNlbGxlbmNlIGluIGJpZyB0aGluZ3MsIHlvdSBkZXZlbG9wIHRoZSBoYWJpdCBpbiBsaXR0bGUgbWF0dGVycy4gRXhjZWxsZW5jZSBpcyBub3QgYW4gZXhjZXB0aW9uLCBpdCBpcyBhIHByZXZhaWxpbmcgYXR0aXR1ZGUuXCIsXCJJJ20gb25seSBnb2luZyB0byBzdGFuZCBiZWZvcmUgR29kIGFuZCBnaXZlIGFuIGFjY291bnQgZm9yIG15IGxpZmUsIG5vdCBmb3Igc29tZWJvZHkgZWxzZSdzIGxpZmUuIElmIEkgaGF2ZSBhIGJhZCBhdHRpdHVkZSwgdGhlbiBJIG5lZWQgdG8gc2F5IHRoZXJlJ3Mgbm8gcG9pbnQgaW4gbWUgYmxhbWluZyB5b3UgZm9yIHdoYXQncyB3cm9uZyBpbiBteSBsaWZlLlwiLFwiSXQgaXMgb3VyIGF0dGl0dWRlIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBkaWZmaWN1bHQgdGFzayB3aGljaCwgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UsIHdpbGwgYWZmZWN0IGl0cyBzdWNjZXNzZnVsIG91dGNvbWUuXCIsXCJNeSBhdHRpdHVkZSBpcywgaWYgc29tZW9uZSdzIGdvaW5nIHRvIGNyaXRpY2l6ZSBtZSwgdGVsbCBtZSB0byBteSBmYWNlLlwiLFwiSGF2aW5nIGEgcG9zaXRpdmUgbWVudGFsIGF0dGl0dWRlIGlzIGFza2luZyBob3cgc29tZXRoaW5nIGNhbiBiZSBkb25lIHJhdGhlciB0aGFuIHNheWluZyBpdCBjYW4ndCBiZSBkb25lLlwiLFwiTXkgZ2VuZXJhbCBhdHRpdHVkZSB0byBsaWZlIGlzIHRvIGVuam95IGV2ZXJ5IG1pbnV0ZSBvZiBldmVyeSBkYXkuIEkgbmV2ZXIgZG8gYW55dGhpbmcgd2l0aCBhIGZlZWxpbmcgb2YsICdPaCBHb2QsIEkndmUgZ290IHRvIGRvIHRoaXMgdG9kYXkuJ1wiLFwiQSBjb21wbGFpbmVyIGlzIGxpa2UgYSBEZWF0aCBFYXRlciBiZWNhdXNlIHRoZXJlJ3MgYSBzdWN0aW9uIG9mIG5lZ2F0aXZlIGVuZXJneS4gWW91IGNhbiBjYXRjaCBhIGdyZWF0IGF0dGl0dWRlIGZyb20gZ3JlYXQgcGVvcGxlLlwiLFwiVGhlIG1lYW5pbmcgb2YgdGhpbmdzIGxpZXMgbm90IGluIHRoZSB0aGluZ3MgdGhlbXNlbHZlcywgYnV0IGluIG91ciBhdHRpdHVkZSB0b3dhcmRzIHRoZW0uXCIsXCJQaW5rIGlzbid0IGp1c3QgYSBjb2xvciwgaXQncyBhbiBhdHRpdHVkZSFcIixcIlRoZSByZW1hcmthYmxlIHRoaW5nIGlzLCB3ZSBoYXZlIGEgY2hvaWNlIGV2ZXJ5ZGF5IHJlZ2FyZGluZyB0aGUgYXR0aXR1ZGUgd2Ugd2lsbCBlbWJyYWNlIGZvciB0aGF0IGRheS5cIixcIkEgcG9zaXRpdmUgYXR0aXR1ZGUgY2FuIHJlYWxseSBtYWtlIGRyZWFtcyBjb21lIHRydWUgLSBpdCBkaWQgZm9yIG1lLlwiLFwiR29vZCBodW1vciBpcyBvbmUgb2YgdGhlIGJlc3QgYXJ0aWNsZXMgb2YgZHJlc3Mgb25lIGNhbiB3ZWFyIGluIHNvY2lldHkuXCIsXCJXaGVuIHlvdSBhcmUgdGh3YXJ0ZWQsIGl0IGlzIHlvdXIgb3duIGF0dGl0dWRlIHRoYXQgaXMgb3V0IG9mIG9yZGVyLlwiLFwiSSB0aGluayBpdCdzIG15IGFkdmVudHVyZSwgbXkgdHJpcCwgbXkgam91cm5leSwgYW5kIEkgZ3Vlc3MgbXkgYXR0aXR1ZGUgaXMsIGxldCB0aGUgY2hpcHMgZmFsbCB3aGVyZSB0aGV5IG1heS5cIixcIkJhZCBhdHRpdHVkZXMgd2lsbCBydWluIHlvdXIgdGVhbS5cIixcIkZvciBzdWNjZXNzLCBhdHRpdHVkZSBpcyBlcXVhbGx5IGFzIGltcG9ydGFudCBhcyBhYmlsaXR5LlwiLFwiSGFwcGluZXNzIGlzIGFuIGF0dGl0dWRlIG9mIG1pbmQsIGJvcm4gb2YgdGhlIHNpbXBsZSBkZXRlcm1pbmF0aW9uIHRvIGJlIGhhcHB5IHVuZGVyIGFsbCBvdXR3YXJkIGNpcmN1bXN0YW5jZXMuXCIsXCJHcmVhdCBlZmZvcnQgc3ByaW5ncyBuYXR1cmFsbHkgZnJvbSBncmVhdCBhdHRpdHVkZS5cIixcIkF0dGl0dWRlcyBhcmUgbW9yZSBpbXBvcnRhbnQgdGhhbiBmYWN0cy5cIixcIkF0dGl0dWRlIGlzIGV2ZXJ5dGhpbmcuXCIsXCJBdHRpdHVkZSBkZXRlcm1pbmVzIHRoZSBhbHRpdHVkZSBvZiBsaWZlLlwiLFwiT3VyIGF0dGl0dWRlIHRvd2FyZCBsaWZlIGRldGVybWluZXMgbGlmZSdzIGF0dGl0dWRlIHRvd2FyZHMgdXMuXCIsXCJUaGUgZ3JlYXRlc3QgZGlzY292ZXJ5IG9mIG15IGdlbmVyYXRpb24gaXMgdGhhdCBtYW4gY2FuIGFsdGVyIGhpcyBsaWZlIHNpbXBseSBieSBhbHRlcmluZyBoaXMgYXR0aXR1ZGUgb2YgbWluZC5cIixcIkJ1dCBteSBhdHRpdHVkZSBhYm91dCBpdCBpcyBJIGhhdmUgbWlsZXMgdG8gZ28gYmVmb3JlIEkgc2xlZXAuXCIsXCJUaGUgYXR0aXR1ZGUgaXMgdmVyeSBpbXBvcnRhbnQuIEJlY2F1c2UsIHlvdXIgYmVoYXZpb3IgcmFkaWF0ZXMgaG93IHlvdSBmZWVsLlwiLFwiV2hlbiB5b3UgYWluJ3QgZ290IG5vIG1vbmV5LCB5b3UgZ290dGEgZ2V0IGFuIGF0dGl0dWRlLlwiLFwiQ2l2aWxpemF0aW9uIGlzIGEgbWV0aG9kIG9mIGxpdmluZywgYW4gYXR0aXR1ZGUgb2YgZXF1YWwgcmVzcGVjdCBmb3IgYWxsIG1lbi5cIixcIk1vc3Qgb2YgdXMgc3RhcnQgb3V0IHdpdGggYSBwb3NpdGl2ZSBhdHRpdHVkZSBhbmQgYSBwbGFuIHRvIGRvIG91ciBiZXN0LlwiLFwiVGhlcmUgYXJlIG5vIG1lbmlhbCBqb2JzLCBvbmx5IG1lbmlhbCBhdHRpdHVkZXMuXCIsXCJGdW5ueSBpcyBhbiBhdHRpdHVkZS5cIixcIlRoZSBiaWdnZXN0IGNoYWxsZW5nZSBpcyBob3cgdG8gYWZmZWN0IHB1YmxpYyBhdHRpdHVkZXMgYW5kIG1ha2UgcGVvcGxlIGNhcmUuXCIsXCJJZiB5b3UgZG9uJ3QgbGlrZSBzb21ldGhpbmcsIGNoYW5nZSBpdC4gSWYgeW91IGNhbid0IGNoYW5nZSBpdCwgY2hhbmdlIHlvdXIgYXR0aXR1ZGUuXCIsXCJJdCBpcyB2ZXJ5IGltcG9ydGFudCB0byBnZW5lcmF0ZSBhIGdvb2QgYXR0aXR1ZGUsIGEgZ29vZCBoZWFydCwgYXMgbXVjaCBhcyBwb3NzaWJsZS4gRnJvbSB0aGlzLCBoYXBwaW5lc3MgaW4gYm90aCB0aGUgc2hvcnQgdGVybSBhbmQgdGhlIGxvbmcgdGVybSBmb3IgYm90aCB5b3Vyc2VsZiBhbmQgb3RoZXJzIHdpbGwgY29tZS5cIixcIllvdXIgbGl2aW5nIGlzIGRldGVybWluZWQgbm90IHNvIG11Y2ggYnkgd2hhdCBsaWZlIGJyaW5ncyB0byB5b3UgYXMgYnkgdGhlIGF0dGl0dWRlIHlvdSBicmluZyB0byBsaWZlIG5vdCBzbyBtdWNoIGJ5IHdoYXQgaGFwcGVucyB0byB5b3UgYXMgYnkgdGhlIHdheSB5b3VyIG1pbmQgbG9va3MgYXQgd2hhdCBoYXBwZW5zLlwiLFwiSGFwcGluZXNzIGRvZXNuJ3QgZGVwZW5kIG9uIGFueSBleHRlcm5hbCBjb25kaXRpb25zLCBpdCBpcyBnb3Zlcm5lZCBieSBvdXIgbWVudGFsIGF0dGl0dWRlLlwiLFwiV2hlbmV2ZXIgeW91J3JlIGluIGNvbmZsaWN0IHdpdGggc29tZW9uZSwgdGhlcmUgaXMgb25lIGZhY3RvciB0aGF0IGNhbiBtYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gZGFtYWdpbmcgeW91ciByZWxhdGlvbnNoaXAgYW5kIGRlZXBlbmluZyBpdC4gVGhhdCBmYWN0b3IgaXMgYXR0aXR1ZGUuXCIsXCJLZWVwIGEgZ29vZCBhdHRpdHVkZSBhbmQgZG8gdGhlIHJpZ2h0IHRoaW5nIGV2ZW4gd2hlbiBpdCdzIGhhcmQuIFdoZW4geW91IGRvIHRoYXQgeW91IGFyZSBwYXNzaW5nIHRoZSB0ZXN0LiBBbmQgR29kIHByb21pc2VzIHlvdSB5b3VyIG1hcmtlZCBtb21lbnRzIGFyZSBvbiB0aGVpciB3YXkuXCIsXCJTdWNjZXNzIG9yIGZhaWx1cmUgZGVwZW5kcyBtb3JlIHVwb24gYXR0aXR1ZGUgdGhhbiB1cG9uIGNhcGFjaXR5IHN1Y2Nlc3NmdWwgbWVuIGFjdCBhcyB0aG91Z2ggdGhleSBoYXZlIGFjY29tcGxpc2hlZCBvciBhcmUgZW5qb3lpbmcgc29tZXRoaW5nLiBTb29uIGl0IGJlY29tZXMgYSByZWFsaXR5LiBBY3QsIGxvb2ssIGZlZWwgc3VjY2Vzc2Z1bCwgY29uZHVjdCB5b3Vyc2VsZiBhY2NvcmRpbmdseSwgYW5kIHlvdSB3aWxsIGJlIGFtYXplZCBhdCB0aGUgcG9zaXRpdmUgcmVzdWx0cy5cIixcIkxpa2Ugc3VjY2VzcywgZmFpbHVyZSBpcyBtYW55IHRoaW5ncyB0byBtYW55IHBlb3BsZS4gV2l0aCBQb3NpdGl2ZSBNZW50YWwgQXR0aXR1ZGUsIGZhaWx1cmUgaXMgYSBsZWFybmluZyBleHBlcmllbmNlLCBhIHJ1bmcgb24gdGhlIGxhZGRlciwgYSBwbGF0ZWF1IGF0IHdoaWNoIHRvIGdldCB5b3VyIHRob3VnaHRzIGluIG9yZGVyIGFuZCBwcmVwYXJlIHRvIHRyeSBhZ2Fpbi5cIixcIlRoZSBvbmx5IGRpc2FiaWxpdHkgaW4gbGlmZSBpcyBhIGJhZCBhdHRpdHVkZS5cIixcIklmIHlvdSBoYXZlIGEgcG9zaXRpdmUgYXR0aXR1ZGUgYW5kIGNvbnN0YW50bHkgc3RyaXZlIHRvIGdpdmUgeW91ciBiZXN0IGVmZm9ydCwgZXZlbnR1YWxseSB5b3Ugd2lsbCBvdmVyY29tZSB5b3VyIGltbWVkaWF0ZSBwcm9ibGVtcyBhbmQgZmluZCB5b3UgYXJlIHJlYWR5IGZvciBncmVhdGVyIGNoYWxsZW5nZXMuXCIsXCJZb3UgY2Fubm90IGNvbnRyb2wgd2hhdCBoYXBwZW5zIHRvIHlvdSwgYnV0IHlvdSBjYW4gY29udHJvbCB5b3VyIGF0dGl0dWRlIHRvd2FyZCB3aGF0IGhhcHBlbnMgdG8geW91LCBhbmQgaW4gdGhhdCwgeW91IHdpbGwgYmUgbWFzdGVyaW5nIGNoYW5nZSByYXRoZXIgdGhhbiBhbGxvd2luZyBpdCB0byBtYXN0ZXIgeW91LlwiLFwiVGhlIGdyZWF0ZXN0IGRpc2NvdmVyeSBvZiBhbGwgdGltZSBpcyB0aGF0IGEgcGVyc29uIGNhbiBjaGFuZ2UgaGlzIGZ1dHVyZSBieSBtZXJlbHkgY2hhbmdpbmcgaGlzIGF0dGl0dWRlLlwiLFwiQSBoZWFsdGh5IGF0dGl0dWRlIGlzIGNvbnRhZ2lvdXMgYnV0IGRvbid0IHdhaXQgdG8gY2F0Y2ggaXQgZnJvbSBvdGhlcnMuIEJlIGEgY2Fycmllci5cIixcIkFueSBmYWN0IGZhY2luZyB1cyBpcyBub3QgYXMgaW1wb3J0YW50IGFzIG91ciBhdHRpdHVkZSB0b3dhcmQgaXQsIGZvciB0aGF0IGRldGVybWluZXMgb3VyIHN1Y2Nlc3Mgb3IgZmFpbHVyZS4gVGhlIHdheSB5b3UgdGhpbmsgYWJvdXQgYSBmYWN0IG1heSBkZWZlYXQgeW91IGJlZm9yZSB5b3UgZXZlciBkbyBhbnl0aGluZyBhYm91dCBpdC4gWW91IGFyZSBvdmVyY29tZSBieSB0aGUgZmFjdCBiZWNhdXNlIHlvdSB0aGluayB5b3UgYXJlLlwiLFwiRXhjZWxsZW5jZSBpcyBub3QgYSBza2lsbC4gSXQgaXMgYW4gYXR0aXR1ZGUuXCIsXCJJIGhvcGUgdGhlIG1pbGxpb25zIG9mIHBlb3BsZSBJJ3ZlIHRvdWNoZWQgaGF2ZSB0aGUgb3B0aW1pc20gYW5kIGRlc2lyZSB0byBzaGFyZSB0aGVpciBnb2FscyBhbmQgaGFyZCB3b3JrIGFuZCBwZXJzZXZlcmUgd2l0aCBhIHBvc2l0aXZlIGF0dGl0dWRlLlwiLFwiV2UgY2Fubm90IGNoYW5nZSBvdXIgcGFzdC4gV2UgY2FuIG5vdCBjaGFuZ2UgdGhlIGZhY3QgdGhhdCBwZW9wbGUgYWN0IGluIGEgY2VydGFpbiB3YXkuIFdlIGNhbiBub3QgY2hhbmdlIHRoZSBpbmV2aXRhYmxlLiBUaGUgb25seSB0aGluZyB3ZSBjYW4gZG8gaXMgcGxheSBvbiB0aGUgb25lIHN0cmluZyB3ZSBoYXZlLCBhbmQgdGhhdCBpcyBvdXIgYXR0aXR1ZGUuXCIsXCJJIHdhcyBsb29raW5nIGZvciBzb21ldGhpbmcgYSBsb3QgaGVhdmllciwgeWV0IG1lbG9kaWMgYXQgdGhlIHNhbWUgdGltZS4gU29tZXRoaW5nIGRpZmZlcmVudCBmcm9tIGhlYXZ5IG1ldGFsLCBhIGRpZmZlcmVudCBhdHRpdHVkZS5cIixcIlNwZW5kIHNvbWUgdGltZSB0aGlzIHdlZWtlbmQgb24gaG9tZSBpbXByb3ZlbWVudCBpbXByb3ZlIHlvdXIgYXR0aXR1ZGUgdG93YXJkIHlvdXIgZmFtaWx5LlwiLFwiV2UgYXdha2VuIGluIG90aGVycyB0aGUgc2FtZSBhdHRpdHVkZSBvZiBtaW5kIHdlIGhvbGQgdG93YXJkIHRoZW0uXCIsXCJUaGVyZSBpcyBsaXR0bGUgZGlmZmVyZW5jZSBpbiBwZW9wbGUsIGJ1dCB0aGF0IGxpdHRsZSBkaWZmZXJlbmNlIG1ha2VzIGEgYmlnIGRpZmZlcmVuY2UuIFRoYXQgbGl0dGxlIGRpZmZlcmVuY2UgaXMgYXR0aXR1ZGUuIFRoZSBiaWcgZGlmZmVyZW5jZSBpcyB3aGV0aGVyIGl0IGlzIHBvc2l0aXZlIG9yIG5lZ2F0aXZlLlwiLFwiQWJpbGl0eSBpcyB3aGF0IHlvdSdyZSBjYXBhYmxlIG9mIGRvaW5nLiBNb3RpdmF0aW9uIGRldGVybWluZXMgd2hhdCB5b3UgZG8uIEF0dGl0dWRlIGRldGVybWluZXMgaG93IHdlbGwgeW91IGRvIGl0LlwiLFwiVGhlIGxhc3Qgb2YgaHVtYW4gZnJlZWRvbXMgLSB0aGUgYWJpbGl0eSB0byBjaG9zZSBvbmUncyBhdHRpdHVkZSBpbiBhIGdpdmVuIHNldCBvZiBjaXJjdW1zdGFuY2VzLlwiLFwiQXR0aXR1ZGUgaXMgbW9yZSBpbXBvcnRhbnQgdGhhbiB0aGUgcGFzdCwgdGhhbiBlZHVjYXRpb24sIHRoYW4gbW9uZXksIHRoYW4gY2lyY3Vtc3RhbmNlcywgdGhhbiB3aGF0IHBlb3BsZSBkbyBvciBzYXkuIEl0IGlzIG1vcmUgaW1wb3J0YW50IHRoYW4gYXBwZWFyYW5jZSwgZ2lmdGVkbmVzcywgb3Igc2tpbGwuXCIsXCJCZWluZyBibGFjayBpcyBub3QgYSBtYXR0ZXIgb2YgcGlnbWVudGF0aW9uIC0gYmVpbmcgYmxhY2sgaXMgYSByZWZsZWN0aW9uIG9mIGEgbWVudGFsIGF0dGl0dWRlLlwiLFwiUGVvcGxlIGluIHRvdWdoIHRpbWVzIC0gaXQgZG9lc24ndCBtZWFuIHRoZXkgZG9uJ3QgaGF2ZSBhIGdyZWF0IGF0dGl0dWRlLlwiLFwiQSBzdHJvbmcgcG9zaXRpdmUgbWVudGFsIGF0dGl0dWRlIHdpbGwgY3JlYXRlIG1vcmUgbWlyYWNsZXMgdGhhbiBhbnkgd29uZGVyIGRydWcuXCIsXCJDZXJ0YWluIHRob3VnaHRzIGFyZSBwcmF5ZXJzLiBUaGVyZSBhcmUgbW9tZW50cyB3aGVuLCB3aGF0ZXZlciBiZSB0aGUgYXR0aXR1ZGUgb2YgdGhlIGJvZHksIHRoZSBzb3VsIGlzIG9uIGl0cyBrbmVlcy5cIixcIkxlYWRlcnNoaXAgaXMgcHJhY3RpY2VkIG5vdCBzbyBtdWNoIGluIHdvcmRzIGFzIGluIGF0dGl0dWRlIGFuZCBpbiBhY3Rpb25zLlwiLFwiSWYgYSBwZXJzb24gZ2V0cyBoaXMgYXR0aXR1ZGUgdG93YXJkIG1vbmV5IHN0cmFpZ2h0LCBpdCB3aWxsIGhlbHAgc3RyYWlnaHRlbiBvdXQgYWxtb3N0IGV2ZXJ5IG90aGVyIGFyZWEgaW4gaGlzIGxpZmUuXCIsXCJJJ3ZlIHJlYWNoZWQgYSBwb2ludCBpbiBteSBsaWZlIHdoZXJlIGl0J3MgdGhlIGxpdHRsZSB0aGluZ3MgdGhhdCBtYXR0ZXIuLi4gSSB3YXMgYWx3YXlzIGEgcmViZWwgYW5kIHByb2JhYmx5IGNvdWxkIGhhdmUgZ290IG11Y2ggZmFydGhlciBoYWQgSSBjaGFuZ2VkIG15IGF0dGl0dWRlLiBCdXQgd2hlbiB5b3UgdGhpbmsgYWJvdXQgaXQsIEkgZ290IHByZXR0eSBmYXIgd2l0aG91dCBjaGFuZ2luZyBhdHRpdHVkZXMuIEknbSBoYXBwaWVyIHdpdGggdGhhdC5cIixcIkZhaXJuZXNzIGlzIG5vdCBhbiBhdHRpdHVkZS4gSXQncyBhIHByb2Zlc3Npb25hbCBza2lsbCB0aGF0IG11c3QgYmUgZGV2ZWxvcGVkIGFuZCBleGVyY2lzZWQuXCIsXCJJIHRoaW5rIHdoZXRoZXIgeW91J3JlIGhhdmluZyBzZXRiYWNrcyBvciBub3QsIHRoZSByb2xlIG9mIGEgbGVhZGVyIGlzIHRvIGFsd2F5cyBkaXNwbGF5IGEgd2lubmluZyBhdHRpdHVkZS5cIixcIkJlIHN1cmUgd2hhdCB5b3Ugd2FudCBhbmQgYmUgc3VyZSBhYm91dCB5b3Vyc2VsZi4gRmFzaGlvbiBpcyBub3QganVzdCBiZWF1dHksIGl0J3MgYWJvdXQgZ29vZCBhdHRpdHVkZS4gWW91IGhhdmUgdG8gYmVsaWV2ZSBpbiB5b3Vyc2VsZiBhbmQgYmUgc3Ryb25nLlwiLFwiSGl0bGVyIGFuZCBNdXNzb2xpbmkgd2VyZSBvbmx5IHRoZSBwcmltYXJ5IHNwb2tlc21lbiBmb3IgdGhlIGF0dGl0dWRlIG9mIGRvbWluYXRpb24gYW5kIGNyYXZpbmcgZm9yIHBvd2VyIHRoYXQgYXJlIGluIHRoZSBoZWFydCBvZiBhbG1vc3QgZXZlcnlvbmUuIFVudGlsIHRoZSBzb3VyY2UgaXMgY2xlYXJlZCwgdGhlcmUgd2lsbCBhbHdheXMgYmUgY29uZnVzaW9uIGFuZCBoYXRlLCB3YXJzIGFuZCBjbGFzcyBhbnRhZ29uaXNtcy5cIixcIlRoZXJlIG11c3QgYmUgc29tZXRoaW5nIHNvbGVtbiwgc2VyaW91cywgYW5kIHRlbmRlciBhYm91dCBhbnkgYXR0aXR1ZGUgd2hpY2ggd2UgZGVub21pbmF0ZSByZWxpZ2lvdXMuIElmIGdsYWQsIGl0IG11c3Qgbm90IGdyaW4gb3Igc25pY2tlciBpZiBzYWQsIGl0IG11c3Qgbm90IHNjcmVhbSBvciBjdXJzZS5cIixcIlNhbGVzIGFyZSBjb250aW5nZW50IHVwb24gdGhlIGF0dGl0dWRlIG9mIHRoZSBzYWxlc21hbiAtIG5vdCB0aGUgYXR0aXR1ZGUgb2YgdGhlIHByb3NwZWN0LlwiLFwiQSBwb3NpdGl2ZSBhdHRpdHVkZSBpcyBub3QgZ29pbmcgdG8gc2F2ZSB5b3UuIFdoYXQgaXQncyBnb2luZyB0byBkbyBpcywgZXZlcnlkYXksIGJldHdlZW4gbm93IGFuZCB0aGUgZGF5IHlvdSBkaWUsIHdoZXRoZXIgdGhhdCdzIGEgc2hvcnQgdGltZSBmcm9tIG5vdyBvciBhIGxvbmcgdGltZSBmcm9tIG5vdywgdGhhdCBldmVyeSBkYXksIHlvdSdyZSBnb2luZyB0byBhY3R1YWxseSBsaXZlLlwiLFwiQWx3YXlzIGtlZXAgdGhhdCBoYXBweSBhdHRpdHVkZS4gUHJldGVuZCB0aGF0IHlvdSBhcmUgaG9sZGluZyBhIGJlYXV0aWZ1bCBmcmFncmFudCBib3VxdWV0LlwiLFwiQmxhY2sgQ29uc2Npb3VzbmVzcyBpcyBhbiBhdHRpdHVkZSBvZiB0aGUgbWluZCBhbmQgYSB3YXkgb2YgbGlmZSwgdGhlIG1vc3QgcG9zaXRpdmUgY2FsbCB0byBlbWFuYXRlIGZyb20gdGhlIGJsYWNrIHdvcmxkIGZvciBhIGxvbmcgdGltZS5cIixcIkkgdGhpbmsgbXVzaWMgaXMgdGhlIGdyZWF0ZXN0IGFydCBmb3JtIHRoYXQgZXhpc3RzLCBhbmQgSSB0aGluayBwZW9wbGUgbGlzdGVuIHRvIG11c2ljIGZvciBkaWZmZXJlbnQgcmVhc29ucywgYW5kIGl0IHNlcnZlcyBkaWZmZXJlbnQgcHVycG9zZXMuIFNvbWUgb2YgaXQgaXMgYmFja2dyb3VuZCBtdXNpYywgYW5kIHNvbWUgb2YgaXQgaXMgdGhpbmdzIHRoYXQgbWlnaHQgYWZmZWN0IGEgcGVyc29uJ3MgZGF5LCBpZiBub3QgdGhlaXIgbGlmZSwgb3IgY2hhbmdlIGFuIGF0dGl0dWRlLiBUaGUgYmVzdCBzb25ncyBhcmUgdGhlIG9uZXMgdGhhdCBtYWtlIHlvdSBmZWVsIHNvbWV0aGluZy5cIixcIldlIHN1Ym1pdCB0byB0aGUgbWFqb3JpdHkgYmVjYXVzZSB3ZSBoYXZlIHRvLiBCdXQgd2UgYXJlIG5vdCBjb21wZWxsZWQgdG8gY2FsbCBvdXIgYXR0aXR1ZGUgb2Ygc3ViamVjdGlvbiBhIHBvc3R1cmUgb2YgcmVzcGVjdC5cIixcIlRoZSB3aW5uZXIncyBlZGdlIGlzIG5vdCBpbiBhIGdpZnRlZCBiaXJ0aCwgYSBoaWdoIElRLCBvciBpbiB0YWxlbnQuIFRoZSB3aW5uZXIncyBlZGdlIGlzIGFsbCBpbiB0aGUgYXR0aXR1ZGUsIG5vdCBhcHRpdHVkZS4gQXR0aXR1ZGUgaXMgdGhlIGNyaXRlcmlvbiBmb3Igc3VjY2Vzcy5cIixcIkhhdmluZyBhIGNsZWFyIGZhaXRoLCBiYXNlZCBvbiB0aGUgY3JlZWQgb2YgdGhlIGNodXJjaCBpcyBvZnRlbiBsYWJlbGVkIHRvZGF5IGFzIGZ1bmRhbWVudGFsaXNtLiBXaGVyZWFzIHJlbGF0aXZpc20sIHdoaWNoIGlzIGxldHRpbmcgb25lc2VsZiBiZSB0b3NzZWQgYW5kIHN3ZXB0IGFsb25nIGJ5IGV2ZXJ5IHdpbmQgb2YgdGVhY2hpbmcsIGxvb2sgbGlrZSB0aGUgb25seSBhdHRpdHVkZSBhY2NlcHRhYmxlIHRvIHRvZGF5J3Mgc3RhbmRhcmRzLlwiLFwiVG9kYXkncyBzdHVkZW50cyBjYW4gcHV0IGRvcGUgaW4gdGhlaXIgdmVpbnMgb3IgaG9wZSBpbiB0aGVpciBicmFpbnMuIElmIHRoZXkgY2FuIGNvbmNlaXZlIGl0IGFuZCBiZWxpZXZlIGl0LCB0aGV5IGNhbiBhY2hpZXZlIGl0LiBUaGV5IG11c3Qga25vdyBpdCBpcyBub3QgdGhlaXIgYXB0aXR1ZGUgYnV0IHRoZWlyIGF0dGl0dWRlIHRoYXQgd2lsbCBkZXRlcm1pbmUgdGhlaXIgYWx0aXR1ZGUuXCIsXCJJIHRoaW5rIGEgbG90IG9mIHRpbWVzIHdlIGRvbid0IHBheSBlbm91Z2ggYXR0ZW50aW9uIHRvIHBlb3BsZSB3aXRoIGEgcG9zaXRpdmUgYXR0aXR1ZGUgYmVjYXVzZSB3ZSBhc3N1bWUgdGhleSBhcmUgbmFpdmUgb3Igc3R1cGlkIG9yIHVuc2Nob29sZWQuXCIsXCJBIGdyZWF0IGF0dGl0dWRlIGRvZXMgbXVjaCBtb3JlIHRoYW4gdHVybiBvbiB0aGUgbGlnaHRzIGluIG91ciB3b3JsZHMgaXQgc2VlbXMgdG8gbWFnaWNhbGx5IGNvbm5lY3QgdXMgdG8gYWxsIHNvcnRzIG9mIHNlcmVuZGlwaXRvdXMgb3Bwb3J0dW5pdGllcyB0aGF0IHdlcmUgc29tZWhvdyBhYnNlbnQgYmVmb3JlIHRoZSBjaGFuZ2UuXCIsXCJDaGFvdGljIHBlb3BsZSBvZnRlbiBoYXZlIGNoYW90aWMgbGl2ZXMsIGFuZCBJIHRoaW5rIHRoZXkgY3JlYXRlIHRoYXQuIEJ1dCBpZiB5b3UgdHJ5IGFuZCBoYXZlIGFuIGlubmVyIHBlYWNlIGFuZCBhIHBvc2l0aXZlIGF0dGl0dWRlLCBJIHRoaW5rIHlvdSBhdHRyYWN0IHRoYXQuXCIsXCJJIGFtIENsYXNzaWMgUm9jayBSZXZpc2l0ZWQuIEkgcmV2aXNpdCBpdCBldmVyeSB3YWtpbmcgbW9tZW50IG9mIG15IGxpZmUgYmVjYXVzZSBpdCBoYXMgdGhlIHNwaXJpdCBhbmQgdGhlIGF0dGl0dWRlIGFuZCB0aGUgZmlyZSBhbmQgdGhlIG1pZGRsZSBmaW5nZXIuIEkgYW0gUm9zYSBQYXJrcyB3aXRoIGEgR2lic29uIGd1aXRhci5cIixcIkFuZCB0aGUgYXR0aXR1ZGUgb2YgZmFpdGggaXMgdGhlIHZlcnkgb3Bwb3NpdGUgb2YgY2xpbmdpbmcgdG8gYmVsaWVmLCBvZiBob2xkaW5nIG9uLlwiLFwiT3VyIGxpdmVzIGFyZSBub3QgZGV0ZXJtaW5lZCBieSB3aGF0IGhhcHBlbnMgdG8gdXMgYnV0IGhvdyB3ZSByZWFjdCB0byB3aGF0IGhhcHBlbnMsIG5vdCBieSB3aGF0IGxpZmUgYnJpbmdzIHVzIGJ1dCB0aGUgYXR0aXR1ZGUgd2UgYnJpbmcgdG8gbGlmZS5cIixcIkJlaW5nIGEgc2V4IHN5bWJvbCBoYXMgdG8gZG8gd2l0aCBhbiBhdHRpdHVkZSwgbm90IGxvb2tzLiBNb3N0IG1lbiB0aGluayBpdCdzIGxvb2tzLCBtb3N0IHdvbWVuIGtub3cgb3RoZXJ3aXNlLlwiLFwiSSBhbSByZXNwb25zaWJsZS4gQWx0aG91Z2ggSSBtYXkgbm90IGJlIGFibGUgdG8gcHJldmVudCB0aGUgd29yc3QgZnJvbSBoYXBwZW5pbmcsIEkgYW0gcmVzcG9uc2libGUgZm9yIG15IGF0dGl0dWRlIHRvd2FyZCB0aGUgaW5ldml0YWJsZSBtaXNmb3J0dW5lcyB0aGF0IGRhcmtlbiBsaWZlLlwiLFwiTm8gcmF0aW9uYWwgYXJndW1lbnQgd2lsbCBoYXZlIGEgcmF0aW9uYWwgZWZmZWN0IG9uIGEgbWFuIHdobyBkb2VzIG5vdCB3YW50IHRvIGFkb3B0IGEgcmF0aW9uYWwgYXR0aXR1ZGUuXCIsXCJXaGVuIEkgd2FzIGEgY2hpbGQgSSBhc2tlZCBteSBtb3RoZXIgd2hhdCBob21vc2V4dWFsaXR5IHdhcyBhYm91dCBhbmQgc2hlIHNhaWQgLSBhbmQgdGhpcyB3YXMgMTAwIHllYXJzIGFnbyBpbiBHZXJtYW55IGFuZCBzaGUgd2FzIHZlcnkgb3Blbi1taW5kZWQgLSAnSXQncyBsaWtlIGhhaXIgY29sb3IuIEl0J3Mgbm90aGluZy4gU29tZSBwZW9wbGUgYXJlIGJsb25kIGFuZCBzb21lIHBlb3BsZSBoYXZlIGRhcmsgaGFpci4gSXQncyBub3QgYSBzdWJqZWN0LicgVGhpcyB3YXMgYSB2ZXJ5IGhlYWx0aHkgYXR0aXR1ZGUuXCIsXCJTdWNjZXNzIG9yIGZhaWx1cmUgaW4gYnVzaW5lc3MgaXMgY2F1c2VkIG1vcmUgYnkgdGhlIG1lbnRhbCBhdHRpdHVkZSBldmVuIHRoYW4gYnkgbWVudGFsIGNhcGFjaXRpZXMuXCIsXCJPYmFtYSBkb2VzIG5vdCByZXByZXNlbnQgQW1lcmljYS4gTm9yIGRvZXMgaGUgcmVwcmVzZW50IGFueXRoaW5nIHdoYXQgb3VyIGZvcmVmYXRoZXJzIHN0b29kIGZvci4gVGhpcyBjb3VudHJ5IGlzIGJhc2ljYWxseSBidWlsdCBvbiBhbiBhdHRpdHVkZS4gSXQncyBhIHdheSBvZiBsaWZlLiBJdCdzIG5vdCBiZWNhdXNlIHlvdSdyZSBib3JuIGhlcmUuIEl0J3Mgbm90IHRoYXQgeW91J3JlIHN1cHBvc2VkIHRvIHRha2UgZnJvbSB0aG9zZSB3aG8gaGF2ZSBhbmQgZ2l2ZSB0byB0aG9zZSB3aG8gaGF2ZW4ndC4gVGhhdCBraWxscyBhIGNvdW50cnkuIEl0IGtpbGxlZCBSdXNzaWEuXCIsXCJTdG9wIHRoaXMgYXR0aXR1ZGUgdGhhdCBvbGRlciBwZW9wbGUgYWluJ3QgYW55IGdvb2QgYW55bW9yZSEgV2UncmUgYXMgZ29vZCBhcyB3ZSBldmVyIHdlcmUgLSBpZiB3ZSBldmVyIHdlcmUgYW55IGdvb2QuXCIsXCJNeSBhdHRpdHVkZSB0byBwZWFjZSBpcyByYXRoZXIgYmFzZWQgb24gdGhlIEJ1cm1lc2UgZGVmaW5pdGlvbiBvZiBwZWFjZSAtIGl0IHJlYWxseSBtZWFucyByZW1vdmluZyBhbGwgdGhlIG5lZ2F0aXZlIGZhY3RvcnMgdGhhdCBkZXN0cm95IHBlYWNlIGluIHRoaXMgd29ybGQuIFNvIHBlYWNlIGRvZXMgbm90IG1lYW4ganVzdCBwdXR0aW5nIGFuIGVuZCB0byB2aW9sZW5jZSBvciB0byB3YXIsIGJ1dCB0byBhbGwgb3RoZXIgZmFjdG9ycyB0aGF0IHRocmVhdGVuIHBlYWNlLCBzdWNoIGFzIGRpc2NyaW1pbmF0aW9uLCBzdWNoIGFzIGluZXF1YWxpdHksIHBvdmVydHkuXCIsXCJZb3VyIGF0dGl0dWRlIGlzIGxpa2UgYSBib3ggb2YgY3JheW9ucyB0aGF0IGNvbG9yIHlvdXIgd29ybGQuIENvbnN0YW50bHkgY29sb3IgeW91ciBwaWN0dXJlIGdyYXksIGFuZCB5b3VyIHBpY3R1cmUgd2lsbCBhbHdheXMgYmUgYmxlYWsuIFRyeSBhZGRpbmcgc29tZSBicmlnaHQgY29sb3JzIHRvIHRoZSBwaWN0dXJlIGJ5IGluY2x1ZGluZyBodW1vciwgYW5kIHlvdXIgcGljdHVyZSBiZWdpbnMgdG8gbGlnaHRlbiB1cC5cIixcIkNyaW1lIGlzIHRlcnJpYmx5IHJldmVhbGluZy4gVHJ5IGFuZCB2YXJ5IHlvdXIgbWV0aG9kcyBhcyB5b3Ugd2lsbCwgeW91ciB0YXN0ZXMsIHlvdXIgaGFiaXRzLCB5b3VyIGF0dGl0dWRlIG9mIG1pbmQsIGFuZCB5b3VyIHNvdWwgaXMgcmV2ZWFsZWQgYnkgeW91ciBhY3Rpb25zLlwiLFwiU29tZSBwZW9wbGUgc2F5IEkgaGF2ZSBhdHRpdHVkZSAtIG1heWJlIEkgZG8uLi4gYnV0IEkgdGhpbmsgeW91IGhhdmUgdG8uIFlvdSBoYXZlIHRvIGJlbGlldmUgaW4geW91cnNlbGYgd2hlbiBubyBvbmUgZWxzZSBkb2VzIC0gdGhhdCBtYWtlcyB5b3UgYSB3aW5uZXIgcmlnaHQgdGhlcmUuXCIsXCJUaGUgbWludXRlIHlvdSB0cnkgdG8gdGFsayBidXNpbmVzcyB3aXRoIGhpbSBoZSB0YWtlcyB0aGUgYXR0aXR1ZGUgdGhhdCBoZSBpcyBhIGdlbnRsZW1hbiBhbmQgYSBzY2hvbGFyLCBhbmQgdGhlIG1vbWVudCB5b3UgdHJ5IHRvIGFwcHJvYWNoIGhpbSBvbiB0aGUgbGV2ZWwgb2YgaGlzIG1vcmFsIGludGVncml0eSBoZSBzdGFydHMgdG8gdGFsayBidXNpbmVzcy5cIixcIlN0aWxldHRvLCBJIGxvb2sgYXQgaXQgbW9yZSBhcyBhbiBhdHRpdHVkZSBhcyBvcHBvc2VkIHRvIGEgaGlnaC1oZWVsZWQgc2hvZS5cIixcIklmIHNvbWVib2R5IHNheXMgbm8gdG8geW91LCBvciBpZiB5b3UgZ2V0IGN1dCwgTWljaGFlbCBKb3JkYW4gd2FzIGN1dCBoaXMgZmlyc3QgeWVhciwgYnV0IGhlIGNhbWUgYmFjayBhbmQgaGUgd2FzIHRoZSBiZXN0IGV2ZXIuIFRoYXQgaXMgd2hhdCB5b3UgaGF2ZSB0byBoYXZlLiBUaGUgYXR0aXR1ZGUgdGhhdCBJJ20gZ29pbmcgdG8gc2hvdyBldmVyeWJvZHksIEknbSBnb2luZyB0byB3b3JrIGhhcmQgdG8gZ2V0IGJldHRlciBhbmQgYmV0dGVyLlwiLFwiV2hlbiB5b3UgaGF2ZSB2aXNpb24gaXQgYWZmZWN0cyB5b3VyIGF0dGl0dWRlLiBZb3VyIGF0dGl0dWRlIGlzIG9wdGltaXN0aWMgcmF0aGVyIHRoYW4gcGVzc2ltaXN0aWMuXCIsXCJXaGF0IG1hdHRlcnMgdG8gbWUgaXMgdGhhdCBJIGRvIHdoYXQgSSB0aGluayBpcyByaWdodCBhbmQgSSBzZWUsIEknbSBhIG51bWJlcnMgZ3V5LCB0aGF0J3MgbXkgYXR0aXR1ZGUuIEkga25vdyB3ZSBoYXZlIGEgZGVidCB0c3VuYW1pIGNvbWluZywgd2UgYXJlIGJhbmtydXB0aW5nIHRoaXMgY291bnRyeSBhbmQgSSdtIGluIGEgcG9zaXRpb24gd2hlcmUgSSBjYW4gYWN0dWFsbHkgYWR2YW5jZSBpZGVhcyB0byBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcuIFRoYXQncyBleGFjdGx5IHdoYXQgSSBzaG91bGQgYmUgZG9pbmcuXCIsXCJJIGRldmVsb3BlZCBhIG51dHR5IGF0dGl0dWRlIHdoZXJlIEknZCB0aGluaywgSWYgc29tZSBndXkgcmVhbGx5IGxvdmVzIG1lIGhlIGRvZXNuJ3QgY2FyZSBpZiBJJ20gZmF0LiBJJ2QgY29tZSB1cCB3aXRoIGFsbCB0aGVzZSBzdHVwaWQgcmVhc29ucyB3aHkgaXQgd291bGQgYmUgT0sgdG8gYmUgZmF0LlwiLFwiUmVhbGx5IHlvdSBqdXN0IGdvdHRhIGtlZXAgY2h1Z2dpbmcgYWxvbmcgYW5kIGtlZXAgYSBwb3NpdGl2ZSBhdHRpdHVkZSBhbmQgZ2V0IHRocm91Z2ggYWxsIHRoZSBwcm9ibGVtcy4gWW91IGdvdHRhIGZhY2UgdGhlbSwgb3RoZXJ3aXNlIHlvdSBkb24ndCBnZXQgdGhyb3VnaC5cIixcIlNvbGlkYXJpdHkgaXMgYW4gYXR0aXR1ZGUgb2YgcmVzaXN0YW5jZSwgSSBzdXBwb3NlLCBvciBpdCBzaG91bGQgYmUuXCIsXCJUaGVyZSdzIGFsd2F5cyB0aGUgbW90aXZhdGlvbiBvZiB3YW50aW5nIHRvIHdpbi4gRXZlcnlib2R5IGhhcyB0aGF0LiBCdXQgYSBjaGFtcGlvbiBuZWVkcywgaW4gaGlzIGF0dGl0dWRlLCBhIG1vdGl2YXRpb24gYWJvdmUgYW5kIGJleW9uZCB3aW5uaW5nLlwiLFwiQW1lcmljYW5zIGFyZSB0aGUgbW9zdCBnZW5lcm91cyBjb3VudHJ5IG9uIHRoZSBwbGFuZXQuIEkndmUgd29ya2VkIGluIEV1cm9wZSwgSSd2ZSB3b3JrZWQgaW4gQXVzdHJhbGlhLiBUaGVyZSBpcyBubyB3aGVyZSBlbHNlIHdoZXJlIHlvdSBnZXQgYWJzb2x1dGVseSBubyBhdHRpdHVkZSBmb3IgYmVpbmcgYSBmb3JlaWduZXIuIElmIHlvdSBkbyB5b3VyIGpvYiB3ZWxsLCB0aGV5IGVtYnJhY2UgeW91LlwiLFwiV2hlbiBJIGdvIHRvIHRoZSBjbGluaWMgbmV4dCBhbmQgc2l0IHdpdGggYSB0dWJlIGluIG15IGFybSBhbmQgd2F0Y2ggdGhlIHBvaXNvbiBnbyBpbiwgSSdtIGluIGFuIGF0dGl0dWRlIG9mIGFiamVjdCBwYXNzaXZpdHkuIEl0IGRvZXNuJ3QgZmVlbCBsaWtlIGZpZ2h0aW5nIGF0IGFsbCBpdCBqdXN0IGZlZWxzIGxpa2Ugc3VibWl0dGluZy5cIixcIk91ciBqdWRnbWVudHMganVkZ2UgdXMsIGFuZCBub3RoaW5nIHJldmVhbHMgdXMsIGV4cG9zZXMgb3VyIHdlYWtuZXNzZXMsIG1vcmUgaW5nZW5pb3VzbHkgdGhhbiB0aGUgYXR0aXR1ZGUgb2YgcHJvbm91bmNpbmcgdXBvbiBvdXIgZmVsbG93cy5cIixcIlBlc3NpbWlzbSBvbmx5IGRlc2NyaWJlcyBhbiBhdHRpdHVkZSwgYW5kIG5vdCBmYWN0cywgYW5kIGhlbmNlIGlzIGVudGlyZWx5IHN1YmplY3RpdmUuXCIsXCJJIHdhcyBraWNrZWQgb3V0IG9mIHNjaG9vbCBiZWNhdXNlIG9mIG15IGF0dGl0dWRlLiBJIHdhcyBub3QgYXNzaW1pbGF0aW5nLiBTbyBJIHdlbnQgdG8gd29yaywgdGFraW5nIGFueSBqb2JzIEkgY291bGQgZ2V0LlwiLFwiQSBsb3Qgb2YgdGltZXMgSSBmaW5kIHRoYXQgcGVvcGxlIHdobyBhcmUgYmxlc3NlZCB3aXRoIHRoZSBtb3N0IHRhbGVudCBkb24ndCBldmVyIGRldmVsb3AgdGhhdCBhdHRpdHVkZSwgYW5kIHRoZSBvbmVzIHdobyBhcmVuJ3QgYmxlc3NlZCBpbiB0aGF0IHdheSBhcmUgdGhlIG1vc3QgY29tcGV0aXRpdmUgYW5kIGhhdmUgdGhlIGJpZ2dlc3QgaGVhcnQuXCIsXCJTbyBsb25nIGFzIHlvdSd2ZSBnb3QgeW91ciBmcmllbmRzIGFib3V0IHlvdSwgYW5kIGEgZ29vZCBwb3NpdGl2ZSBhdHRpdHVkZSwgeW91IGRvbid0IHJlYWxseSBoYXZlIHRvIGNhcmUgd2hhdCBldmVyeW9uZSBlbHNlIHRoaW5rcy5cIixcIkkgc2VwYXJhdGVkIGZyb20gdGhlIFNvdXRoZXJuIEJhcHRpc3RzIHdoZW4gdGhleSBhZG9wdGVkIHRoZSBkaXNjcmltaW5hdG9yeSBhdHRpdHVkZSB0b3dhcmRzIHdvbWVuLCBiZWNhdXNlIEkgYmVsaWV2ZSB3aGF0IFBhdWwgdGF1Z2h0IGluIEdhbGF0aWFucyB0aGF0IHRoZXJlIGlzIG5vIGRpc3RpbmN0aW9uIGluIEdvZCdzIGV5ZXMgYmV0d2VlbiBtZW4gYW5kIHdvbWVuLCBzbGF2ZXMgYW5kIG1hc3RlcnMsIEpld3MgYW5kIG5vbi1KZXdzIC0gZXZlcnlib2R5IGlzIGNyZWF0ZWQgZXF1YWxseSBpbiB0aGUgZXllcyBvZiBHb2QuXCIsXCJNeSBhdHRpdHVkZSB0b3dhcmQgbWVuIHdobyBtZXNzIGFyb3VuZCBpcyBzaW1wbGU6IElmIHlvdSBmaW5kICdlbSwga2lsbCAnZW0uXCIsXCJQcmF5ZXIgaXMgdGFsa2luZyB3aXRoIEdvZC4gR29kIGtub3dzIHlvdXIgaGVhcnQgYW5kIGlzIG5vdCBzbyBjb25jZXJuZWQgd2l0aCB5b3VyIHdvcmRzIGFzIEhlIGlzIHdpdGggdGhlIGF0dGl0dWRlIG9mIHlvdXIgaGVhcnQuXCIsXCJZb3UgY2FuJ3Qgc3R1ZHkgY29tZWR5IGl0J3Mgd2l0aGluIHlvdS4gSXQncyBhIHBlcnNvbmFsaXR5LiBNeSBodW1vciBpcyBhbiBhdHRpdHVkZS5cIixcIllvdSBjYWxsIHRvIGEgZG9nIGFuZCBhIGRvZyB3aWxsIGJyZWFrIGl0cyBuZWNrIHRvIGdldCB0byB5b3UuIERvZ3MganVzdCB3YW50IHRvIHBsZWFzZS4gQ2FsbCB0byBhIGNhdCBhbmQgaXRzIGF0dGl0dWRlIGlzLCAnV2hhdCdzIGluIGl0IGZvciBtZT8nXCIsXCJUaGUgY29tcHVsc2lvbiB0byBkbyBnb29kIGlzIGFuIGlubmF0ZSBBbWVyaWNhbiB0cmFpdC4gT25seSBOb3J0aCBBbWVyaWNhbnMgc2VlbSB0byBiZWxpZXZlIHRoYXQgdGhleSBhbHdheXMgc2hvdWxkLCBtYXksIGFuZCBhY3R1YWxseSBjYW4gY2hvb3NlIHNvbWVib2R5IHdpdGggd2hvbSB0byBzaGFyZSB0aGVpciBibGVzc2luZ3MuIFVsdGltYXRlbHkgdGhpcyBhdHRpdHVkZSBsZWFkcyB0byBib21iaW5nIHBlb3BsZSBpbnRvIHRoZSBhY2NlcHRhbmNlIG9mIGdpZnRzLlwiLFwiSSBrZWVwIGd1aXRhcnMgdGhhdCBhcmUsIHlvdSBrbm93LCB0aGUgbmVjaydzIGEgbGl0dGxlIGJpdCBiZW50IGFuZCBpdCdzIGEgbGl0dGxlIGJpdCBvdXQgb2YgdHVuZS4gSSB3YW50IHRvIHdvcmsgYW5kIGJhdHRsZSBpdCBhbmQgY29ucXVlciBpdCBhbmQgbWFrZSBpdCBleHByZXNzIHdoYXRldmVyIGF0dGl0dWRlIEkgaGF2ZSBhdCB0aGF0IG1vbWVudC4gSSB3YW50IGl0IHRvIGJlIGEgc3RydWdnbGUuXCIsXCJNb3N0IG9mIG15IGFyZ3VtZW50cyB3aXRoIG11c2ljaWFucyB0aHJvdWdoIHRoZSB5ZWFycyBoYXZlIGhhZCBtb3JlIHRvIGRvIHdpdGggdGhlaXIgYXR0aXR1ZGUgYWJvdXQgbXVzaWMsIG9yIHRoZWlyIGF0dGl0dWRlIGFib3V0IHRoZWlyIG93biBsaXZlcywgb3IgdGhlaXIgcGVyc29uYWwgcmVzcG9uc2liaWxpdHkuIE11c2ljIGhhcyBuZXZlciByZWFsbHkgYmVlbiB0aGUgYmlnIGNlbnRlcnBpZWNlIG9mIHRoZSBmaWdodC5cIixcIkkgbG92ZSBldmVyeWJvZHkuIE9uZSBvZiB0aGUgZ3JlYXQgdGhpbmdzIGFib3V0IG1lIGlzIHRoYXQgSSBoYXZlIGEgdmVyeSBwb3NpdGl2ZSBhdHRpdHVkZS5cIixcIk1hbmtpbmQncyB0cnVlIG1vcmFsIHRlc3QsIGl0cyBmdW5kYW1lbnRhbCB0ZXN0ICh3aGljaCBsaWVzIGRlZXBseSBidXJpZWQgZnJvbSB2aWV3KSwgY29uc2lzdHMgb2YgaXRzIGF0dGl0dWRlIHRvd2FyZHMgdGhvc2Ugd2hvIGFyZSBhdCBpdHMgbWVyY3k6IGFuaW1hbHMuIEFuZCBpbiB0aGlzIHJlc3BlY3QgbWFua2luZCBoYXMgc3VmZmVyZWQgYSBmdW5kYW1lbnRhbCBkZWJhY2xlLCBhIGRlYmFjbGUgc28gZnVuZGFtZW50YWwgdGhhdCBhbGwgb3RoZXJzIHN0ZW0gZnJvbSBpdC5cIixcIkl0J3Mgc29ydCBvZiBhIG1lbnRhbCBhdHRpdHVkZSBhYm91dCBjcml0aWNhbCB0aGlua2luZyBhbmQgY3VyaW9zaXR5LiBJdCdzIGFib3V0IG1pbmRzZXQgb2YgbG9va2luZyBhdCB0aGUgd29ybGQgaW4gYSBwbGF5ZnVsIGFuZCBjdXJpb3VzIGFuZCBjcmVhdGl2ZSB3YXkuXCIsXCJQdW5rIHdhcyBkZWZpbmVkIGJ5IGFuIGF0dGl0dWRlIHJhdGhlciB0aGFuIGEgbXVzaWNhbCBzdHlsZS5cIixcIkl0J3MgYSBmdW5kYW1lbnRhbCwgc29jaWFsIGF0dGl0dWRlIHRoYXQgdGhlIDElIHN1cHBvcnRzIHN5bXBob25pZXMgYW5kIG9wZXJhcyBhbmQgZG9lc24ndCBzdXBwb3J0IEpvaG5ueSBsZWFybmluZyB0byBwcm9ncmFtIGhpcC1ob3AgYmVhdHMuIFdoZW4gSSBwdXQgaXQgbGlrZSB0aGF0LCBpdCBzb3VuZHMgbGlrZSwgJ1dlbGwsIHllYWgsJyBidXQgeW91IHN0YXJ0IHRvIHRoaW5rLCAnV2h5IG5vdCwgdGhvdWdoPycgV2hhdCBtYWtlcyBvbmUgbW9yZSB2YWx1YWJsZSB0aGFuIGFub3RoZXI/XCIsXCJJIHRoaW5rIHBlb3BsZSBmZWVsIHRocmVhdGVuZWQgYnkgaG9tb3NleHVhbGl0eS4gVGhlIHByb2JsZW0gaXNuJ3QgYWJvdXQgZ2F5IHBlb3BsZSwgdGhlIHByb2JsZW0gaXMgYWJvdXQgdGhlIGF0dGl0dWRlIHRvd2FyZHMgZ2F5IHBlb3BsZS4gUGVvcGxlIHRoaW5rIHRoYXQgYWxsIGdheXMgYXJlIEhhbm5pYmFsIExlY3RlcnMuIEJ1dCBnYXkgcGVvcGxlIGFyZSBzb25zIGFuZCBkYXVnaHRlcnMsIHBvbGl0aWNpYW5zIGFuZCBkb2N0b3JzLCBBbWVyaWNhbiBoZXJvZXMgYW5kIGRhdWdodGVycyBvZiBBbWVyaWNhbiBoZXJvZXMuXCIsXCJJIGhhdmUgdGhpcyB0aGVvcnkgdGhhdCwgZGVwZW5kaW5nIG9uIHlvdXIgYXR0aXR1ZGUsIHlvdXIgbGlmZSBkb2Vzbid0IGhhdmUgdG8gYmVjb21lIHRoaXMgcmlkaWN1bG91cyBjaGFyYWRlIHRoYXQgaXQgc2VlbXMgc28gbWFueSBwZW9wbGUgZW5kIHVwIGxpdmluZy5cIixcIkl0IHdhcyBqdXN0IGxpa2UgYSBkcmVhbS4gSSBjb3VsZCBoYXZlIGVuZGVkIHVwIHdpdGggYW4gYWxidW0gdGhhdCdzIG5vdCBhbGwgdGhhdCBkaWZmZXJlbnQgZnJvbSBhbnl0aGluZyBlbHNlIGNvbWluZyBvdXQgb2YgTmFzaHZpbGxlLiBNdXR0IG1hZGUgdGhlIGRpZmZlcmVuY2UuIEhlIHRvb2sgdGhlc2Ugc29uZ3MsIG15IGF0dGl0dWRlLCBteSBjcmVhdGl2aXR5LCBhbmQgY29sb3JlZCB0aGVtIGluIGEgd2F5IHRoYXQgaXMgdW5pcXVlLlwiLFwiSSBsb29rIGF0IEphZ2dlciBhbmQgdGhlIGxpa2UgYW5kIGlmIEkgc2VlIGEgZ29vZCBhdHRpdHVkZSBJJ2xsIGFkbWlyZSBpdCBidXQgSSB3b3VsZG4ndCBjb3B5IHRoZWlyIHN0eWxlLlwiLFwiTXkgYXR0aXR1ZGUgaXMgbmV2ZXIgdG8gYmUgc2F0aXNmaWVkLCBuZXZlciBlbm91Z2gsIG5ldmVyLlwiLFwiVG9kYXkncyB5b3V0aCBhcmUgdG9sZCB0byBnZXQgcmljaCBvciBkaWUgdHJ5aW5nIGFuZCB0aGV5IHJlYWxseSBzaG91bGRuJ3QgdGFrZSB0aGF0IGF0dGl0dWRlIGZvcndhcmQgd2l0aCB0aGVtLlwiLFwiVGhlIHB1cmVseSBhZ2l0YXRpb25hbCBhdHRpdHVkZSBpcyBub3QgZ29vZCBlbm91Z2ggZm9yIGEgZGV0YWlsZWQgY29uc2lkZXJhdGlvbiBvZiBhIHN1YmplY3QuXCIsXCJOb3QgZXZlcnkgcmVsaWdpb24gaGFzIHRvIGhhdmUgU3QuIEF1Z3VzdGluZSdzIGF0dGl0dWRlIHRvIHNleC4gV2h5IGV2ZW4gaW4gb3VyIGN1bHR1cmUgbWFycmlhZ2VzIGFyZSBjZWxlYnJhdGVkIGluIGEgY2h1cmNoLCBldmVyeW9uZSBwcmVzZW50IGtub3dzIHdoYXQgaXMgZ29pbmcgdG8gaGFwcGVuIHRoYXQgbmlnaHQsIGJ1dCB0aGF0IGRvZXNuJ3QgcHJldmVudCBpdCBiZWluZyBhIHJlbGlnaW91cyBjZXJlbW9ueS5cIixcIk5ldmVyIHJlZnVzZSBhbiBhc3NpZ25tZW50IGV4Y2VwdCB3aGVuIHRoZXJlIGlzIGEgY29uZmxpY3Qgb2YgaW50ZXJlc3QsIGEgcG90ZW50aWFsIG9mIGRhbmdlciB0byB5b3Ugb3IgeW91ciBmYW1pbHksIG9yIHlvdSBob2xkIGEgc3Ryb25nbHkgYmlhc2VkIGF0dGl0dWRlIGFib3V0IHRoZSBzdWJqZWN0IHVuZGVyIGZvY3VzLlwiLFwiV2UgY2FuIHJldm9sdXRpb25pemUgdGhlIGF0dGl0dWRlIG9mIGlubmVyIGNpdHkgYnJvd24gYW5kIGJsYWNrIGtpZHMgdG8gbGVhcm5pbmcuIFdlIG5lZWQgYSBjaXZpbCByaWdodHMgbW92ZW1lbnQgd2l0aGluIHRoZSBBZnJpY2FuLUFtZXJpY2FuIGNvbW11bml0eS5cIixcIkl0J3MgYSBxdWVzdGlvbiBvZiBrZWVwaW5nIG9uZSdzIGV5ZXMgYW5kIGVhcnMgb3BlbiBhbmQgd2F0Y2hpbmcgaG93IG90aGVyIHBlb3BsZSBwbGF5IHRoZSBnYW1lLiBUaGV5J3JlIHdhdGNoaW5nIG1lIHRvbywgdG8gc2VlIHdoYXQgbXkgYXR0aXR1ZGUgaXMgbGlrZS5cIixcIlllcywgd2UncmUgc3RpbGwgZml2ZSBsaXR0bGUgcGVvcGxlIHdpdGggYSBub2lzeSBhdHRpdHVkZS5cIixcIkluIGluZGl2aWR1YWwgaW5kdXN0cmllcyB3aGVyZSBmZW1hbGUgbGFib3VyIHBheXMgYW4gaW1wb3J0YW50IHJvbGUsIGFueSBtb3ZlbWVudCBhZHZvY2F0aW5nIGJldHRlciB3YWdlcywgc2hvcnRlciB3b3JraW5nIGhvdXJzLCBldGMuLCB3b3VsZCBub3QgYmUgZG9vbWVkIGZyb20gdGhlIHN0YXJ0IGJlY2F1c2Ugb2YgdGhlIGF0dGl0dWRlIG9mIHRob3NlIHdvbWVuIHdvcmtlcnMgd2hvIGFyZSBub3Qgb3JnYW5pemVkLlwiLFwiT24gJ1ZhbiBIYWxlbiwnIEkgd2FzIGEgeW91bmcgcHVuaywgYW5kIGV2ZXJ5dGhpbmcgcmV2b2x2ZWQgYXJvdW5kIHRoZSBmYXN0ZXN0IGtpZCBpbiB0b3duLCBndW5zbGluZ2VyIGF0dGl0dWRlLiBCdXQgSSdkIHNheSB0aGF0IGF0IHRoZSB0aW1lIG9mICdGYWlyIFdhcm5pbmcsJyBJIHN0YXJ0ZWQgY29uY2VudHJhdGluZyBtb3JlIG9uIHNvbmd3cml0aW5nLiBCdXQgSSBndWVzcyBpbiBtb3N0IHBlb3BsZSdzIG1pbmRzIEknbSBqdXN0IGEgZ3Vuc2xpbmdlci5cIixcIkRlc2lnbiBpcyBhYm91dCBwb2ludCBvZiB2aWV3LCBhbmQgdGhlcmUgc2hvdWxkIGJlIHNvbWUgc29ydCBvZiB3b21hbiBvciBsaWZlc3R5bGUgb3IgYXR0aXR1ZGUgaW4gb25lJ3MgaGVhZCBhcyBhIGRlc2lnbmVyLlwiLFwiTGliZXJhbGlzbSBpcyBhbiBhdHRpdHVkZSByYXRoZXIgdGhhbiBhIHNldCBvZiBkb2dtYXMgLSBhbiBhdHRpdHVkZSB0aGF0IGluc2lzdHMgdXBvbiBxdWVzdGlvbmluZyBhbGwgcGxhdXNpYmxlIGFuZCBzZWxmLWV2aWRlbnQgcHJvcG9zaXRpb25zLCBzZWVraW5nIG5vdCB0byByZWplY3QgdGhlbSBidXQgdG8gZmluZCBvdXQgd2hhdCBldmlkZW5jZSB0aGVyZSBpcyB0byBzdXBwb3J0IHRoZW0gcmF0aGVyIHRoYW4gdGhlaXIgcG9zc2libGUgYWx0ZXJuYXRpdmVzLlwiLFwiVGhlIERvbGxzIHdlcmUgYW4gYXR0aXR1ZGUuIElmIG5vdGhpbmcgZWxzZSB0aGV5IHdlcmUgYSBncmVhdCBhdHRpdHVkZS5cIixcIkkgd2FzIGltcHJlc3NlZCBieSBIZW5kcml4LiBIaXMgYXR0aXR1ZGUgd2FzIGJyaWxsaWFudC4gRXZlbiB0aGUgd2F5IGhlIHdhbGtlZCB3YXMgYW1hemluZy5cIixcIlRoZSBiZXN0IHdheSB0byBpbnNwaXJlIHBlb3BsZSB0byBzdXBlcmlvciBwZXJmb3JtYW5jZSBpcyB0byBjb252aW5jZSB0aGVtIGJ5IGV2ZXJ5dGhpbmcgeW91IGRvIGFuZCBieSB5b3VyIGV2ZXJ5ZGF5IGF0dGl0dWRlIHRoYXQgeW91IGFyZSB3aG9sZWhlYXJ0ZWRseSBzdXBwb3J0aW5nIHRoZW0uXCIsXCJJIHRoaW5rIGl0J3MgeW91ciBtZW50YWwgYXR0aXR1ZGUuIFNvIG1hbnkgb2YgdXMgc3RhcnQgZHJlYWRpbmcgYWdlIGluIGhpZ2ggc2Nob29sIGFuZCB0aGF0J3MgYSB3YXN0ZSBvZiBhIGxvdmVseSBsaWZlLiAnT2guLi4gSSdtIDMwLCBvaCwgSSdtIDQwLCBvaCwgNTAuJyBNYWtlIHRoZSBtb3N0IG9mIGl0LlwiLFwiVGhlIGF0dGl0dWRlIHRoYXQgbmF0dXJlIGlzIGNoYW90aWMgYW5kIHRoYXQgdGhlIGFydGlzdCBwdXRzIG9yZGVyIGludG8gaXQgaXMgYSB2ZXJ5IGFic3VyZCBwb2ludCBvZiB2aWV3LCBJIHRoaW5rLiBBbGwgdGhhdCB3ZSBjYW4gaG9wZSBmb3IgaXMgdG8gcHV0IHNvbWUgb3JkZXIgaW50byBvdXJzZWx2ZXMuXCIsXCJCcml0aXNobmVzcyBpcyBqdXN0IGEgd2F5IG9mIHB1dHRpbmcgdGhpbmdzIHRvZ2V0aGVyIGFuZCBhIGNlcnRhaW4gZG9uJ3QgY2FyZSBhdHRpdHVkZSBhYm91dCBjbG90aGVzLiBZb3UgZG9uJ3QgY2FyZSwgeW91IGp1c3QgZG8gaXQgYW5kIGl0IGxvb2tzIGdyZWF0LlwiLFwiSXQgcmVtYWlucyB0byBjb25zaWRlciB3aGF0IGF0dGl0dWRlIHRob3VnaHRmdWwgbWVuIGFuZCBDaHJpc3RpYW4gYmVsaWV2ZXJzIHNob3VsZCB0YWtlIHJlc3BlY3RpbmcgdGhlbSwgYW5kIGhvdyB0aGV5IHN0YW5kIHJlbGF0ZWQgdG8gYmVsaWVmcyBvZiBhbm90aGVyIG9yZGVyLlwiLFwiU3VyZmVycyBoYXZlIHRoZSBtb3N0IGF0dGl0dWRlLlwiLFwiSSd2ZSBuZXZlciBydW4gaW50byBhIGd1eSB3aG8gY291bGQgd2luIGF0IHRoZSB0b3AgbGV2ZWwgaW4gYW55dGhpbmcgdG9kYXkgYW5kIGRpZG4ndCBoYXZlIHRoZSByaWdodCBhdHRpdHVkZSwgZGlkbid0IGdpdmUgaXQgZXZlcnl0aGluZyBoZSBoYWQsIGF0IGxlYXN0IHdoaWxlIGhlIHdhcyBkb2luZyBpdCB3YXNuJ3QgcHJlcGFyZWQgYW5kIGRpZG4ndCBoYXZlIHRoZSB3aG9sZSBwcm9ncmFtIHdvcmtlZCBvdXQuXCIsXCJUaGF0J3Mgd2hhdCBJIGxvdmUgZnJvbSBtZXRhbCwgYW5kIHRoYXQncyB3aGF0IEkgbG92ZSBmcm9tIGhpcC1ob3AuIFRoYXQncyB3aGF0IEkgbG92ZSBmcm9tIGFueSBtdXNpYyB0aGF0J3MgaGFyZCwgdGhhdCdzIGdvdCBhbiBlZGdlIHRvIGl0LVRoZSBhdHRpdHVkZSBpbiBpdC5cIixcIlRoYXQgYXR0aXR1ZGUgdGhhdCBmaWdodGluZyBpcyBwcm9iYWJseSBub3QgZmFpciwgYnV0IHlvdSBoYXZlIHRvIGRlZmVuZCB5b3Vyc2VsZiBhbnl3YXkgYW5kIGRhbWFnZSB0aGUgZW5lbXksIGhhcyBiZWVuIHByb2ZvdW5kbHkgY29uc2VxdWVudGlhbCBhcyBmYXIgYXMgbXkgcG9saXRpY2FsIGFjdGl2aXNtIGdvZXMuXCIsXCJTZWVrIG91dCB0aGF0IHBhcnRpY3VsYXIgbWVudGFsIGF0dHJpYnV0ZSB3aGljaCBtYWtlcyB5b3UgZmVlbCBtb3N0IGRlZXBseSBhbmQgdml0YWxseSBhbGl2ZSwgYWxvbmcgd2l0aCB3aGljaCBjb21lcyB0aGUgaW5uZXIgdm9pY2Ugd2hpY2ggc2F5cywgJ1RoaXMgaXMgdGhlIHJlYWwgbWUsJyBhbmQgd2hlbiB5b3UgaGF2ZSBmb3VuZCB0aGF0IGF0dGl0dWRlLCBmb2xsb3cgaXQuXCIsXCJQZW9wbGUgdGhpbmssICdTaGUncyBhIG1vZGVsLiBTaGUgbXVzdCBoYXZlIHN1Y2ggYW4gYXR0aXR1ZGUuIFNoZSBtdXN0IGJlIHNvIHN0dWNrIHVwLicgQnV0IEknbSBub3JtYWwuIEkgY3J5LiBJJ20gbm90IHJpY2guIEkgZHJpdmUgYSAxOTg3IENoZXZyb2xldCBDZWxlYnJpdHkuXCIsXCJNeSBncmFuZGZhdGhlciB3YXMgYSBtYW4sIHdoZW4gaGUgdGFsa2VkIGFib3V0IGZyZWVkb20sIGhpcyBhdHRpdHVkZSB3YXMgcmVhbGx5IGludGVyZXN0aW5nLiBIaXMgdmlldyB3YXMgdGhhdCB5b3UgaGFkIG9ibGlnYXRpb25zIG9yIHlvdSBoYWQgcmVzcG9uc2liaWxpdGllcywgYW5kIHdoZW4geW91IGZ1bGZpbGxlZCB0aG9zZSBvYmxpZ2F0aW9ucyBvciByZXNwb25zaWJpbGl0aWVzLCB0aGF0IHRoZW4gZ2F2ZSB5b3UgdGhlIGxpYmVydHkgdG8gZG8gb3RoZXIgdGhpbmdzLlwiLFwiSSB0aGluayBmYWlsdXJlIGlzIG5vdGhpbmcgbW9yZSB0aGFuIGxpZmUncyB3YXkgb2YgbnVkZ2luZyB5b3UgdGhhdCB5b3UgYXJlIG9mZiBjb3Vyc2UuIE15IGF0dGl0dWRlIHRvIGZhaWx1cmUgaXMgbm90IGF0dGFjaGVkIHRvIG91dGNvbWUsIGJ1dCBpbiBub3QgdHJ5aW5nLiBJdCBpcyBsaWJlcmF0aW5nLiBNb3N0IHBlb3BsZSBhdHRhY2ggZmFpbHVyZSB0byBzb21ldGhpbmcgbm90IHdvcmtpbmcgb3V0IG9yIGhvdyBwZW9wbGUgcGVyY2VpdmUgeW91LiBUaGlzIHdheSwgaXQgaXMgYWJvdXQgYW5zd2VyaW5nIHRvIHlvdXJzZWxmLlwiLFwiUGFydCBvZiBvdXIgd2VzdGVybiBvdXRsb29rIHN0ZW1zIGZyb20gdGhlIHNjaWVudGlmaWMgYXR0aXR1ZGUgYW5kIGl0cyBtZXRob2Qgb2YgaXNvbGF0aW5nIHRoZSBwYXJ0cyBvZiBhIHBoZW5vbWVub24gaW4gb3JkZXIgdG8gYW5hbHl6ZSB0aGVtLlwiLFwiVGhlcmUgaXMgYSBzaW5nbGUgdGhyZWFkIG9mIGF0dGl0dWRlLCBhIHNpbmdsZSBkaXJlY3Rpb24gb2YgZmxvdywgdGhhdCBqb2lucyBvdXIgcHJlc2VudCB0aW1lIHRvIGl0cyBlYXJseSBidXJnZW9uaW5nIGluIE1lZGl0ZXJyYW5lYW4gY2l2aWxpemF0aW9uLlwiLFwiV2UgbGl2ZSBpbiBhIGNvdW50cnkgdGhhdCB1c2VkIHRvIGhhdmUgYSBjYW4tZG8gYXR0aXR1ZGUsIGFuZCBub3cgd2UgaGF2ZSBhICd3aGF0LWNhbi15b3UtZG8tZm9yLW1lPycgYXR0aXR1ZGUsIGFuZCB3aGF0IEkgdHJ5IHRvIGRvIGlzIGZpbmQgd2F5cyB0aGF0IHdlIGNhbiBkZXZlbG9wIGNvbW1vbiBncm91bmQuXCIsXCJDb3VsZCB3ZSBjaGFuZ2Ugb3VyIGF0dGl0dWRlLCB3ZSBzaG91bGQgbm90IG9ubHkgc2VlIGxpZmUgZGlmZmVyZW50bHksIGJ1dCBsaWZlIGl0c2VsZiB3b3VsZCBjb21lIHRvIGJlIGRpZmZlcmVudC5cIixcIlRoZSBpZGVhbCBhdHRpdHVkZSBpcyB0byBiZSBwaHlzaWNhbGx5IGxvb3NlIGFuZCBtZW50YWxseSB0aWdodC5cIixcIkFuIGF0dGl0dWRlIHRvIGxpZmUgd2hpY2ggc2Vla3MgZnVsZmlsbG1lbnQgaW4gdGhlIHNpbmdsZS1taW5kZWQgcHVyc3VpdCBvZiB3ZWFsdGggLSBpbiBzaG9ydCwgbWF0ZXJpYWxpc20gLSBkb2VzIG5vdCBmaXQgaW50byB0aGlzIHdvcmxkLCBiZWNhdXNlIGl0IGNvbnRhaW5zIHdpdGhpbiBpdHNlbGYgbm8gbGltaXRpbmcgcHJpbmNpcGxlLCB3aGlsZSB0aGUgZW52aXJvbm1lbnQgaW4gd2hpY2ggaXQgaXMgcGxhY2VkIGlzIHN0cmljdGx5IGxpbWl0ZWQuXCIsXCJZb3UgbWF5IG5vdCBiZSBhYmxlIHRvIGNoYW5nZSBhIHNpdHVhdGlvbiwgYnV0IHdpdGggaHVtb3IgeW91IGNhbiBjaGFuZ2UgeW91ciBhdHRpdHVkZSBhYm91dCBpdC5cIixcIldoYXQgd2FzIHBhc3Qgd2FzIHBhc3QuIEkgc3VwcG9zZSB0aGF0IHdhcyB0aGUgZ2VuZXJhbCBhdHRpdHVkZS5cIixcIklyYXEgaXMganVzdCBhIHN5bWJvbCBvZiB0aGUgYXR0aXR1ZGUgb2Ygd2VzdGVybiBkZW1vY3JhY2llcyB0byB0aGUgcmVzdCBvZiB0aGUgd29ybGQuXCIsXCJJIGRvbid0IG1lYW4gdGhpcyBpbiBhIHN0dWNrLXVwIHdheSwgYnV0IEkgbmVlZGVkIGFuIGF0dGl0dWRlIHNvbmcuXCIsXCJJIG1ldCBteSBncmFuZGZhdGhlciBqdXN0IGJlZm9yZSBoZSBkaWVkLCBhbmQgaXQgd2FzIHRoZSBmaXJzdCB0aW1lIHRoYXQgSSBoYWQgc2VlbiBEYWQgd2l0aCBhIHJlbGF0aXZlIG9mIGhpcy4gSXQgd2FzIGludGVyZXN0aW5nIHRvIHNlZSBteSBvd24gZmF0aGVyIGFzIGEgc29uIGFuZCB0aGUgYm9keSBsYW5ndWFnZSBhbmQgYWx0ZXJhdGlvbiBpbiBhdHRpdHVkZSB0aGF0IGNvbWVzIHdpdGggdGhhdCwgYW5kIGl0IHNvcnQgb2YgY2hhbmdlZCBvdXIgcmVsYXRpb25zaGlwIGZvciB0aGUgYmV0dGVyLlwiLFwiSSBkb24ndCB0aGluayBpdCdzIGEgZ29vZCBhdHRpdHVkZSBpbiB5b3VyIGxpZmUgdG8gZmVlbCB0aGF0IHlvdSBoYXZlIHRvIGJlIHJpY2ggdG8gaGF2ZSBzZWxmLWVzdGVlbS5cIixcIkFsbCB3ZSBuZWVkLCByZWFsbHksIGlzIGEgY2hhbmdlIGZyb20gYSBuZWFyIGZyaWdpZCB0byBhIHRyb3BpY2FsIGF0dGl0dWRlIG9mIG1pbmQuXCIsXCJBbiBhcmlzdG9jcmF0aWMgY3VsdHVyZSBkb2VzIG5vdCBhZHZlcnRpc2UgaXRzIGVtb3Rpb25zLiBJbiBpdHMgZm9ybXMgb2YgZXhwcmVzc2lvbiBpdCBpcyBzb2JlciBhbmQgcmVzZXJ2ZWQuIEl0cyBnZW5lcmFsIGF0dGl0dWRlIGlzIHN0b2ljLlwiLFwiSSB3YXMgaW1wcmVzc2VkIGJ5IEhlbmRyaXguIE5vdCBzbyBtdWNoIGJ5IGhpcyBwbGF5aW5nLCBhcyBoaXMgYXR0aXR1ZGUgLSBoZSB3YXNuJ3QgYSBncmVhdCBwbGF5ZXIsIGJ1dCBldmVyeXRoaW5nIGVsc2UgYWJvdXQgaGltIHdhcyBicmlsbGlhbnQuXCIsXCJBdHRpdHVkZSBpcyBhdHRpdHVkZSwgd2hldGhlciB5b3UncmUgYSBXZXN0IENvYXN0IGdhbmdzdGVyIG9yIEVhc3QgQ29hc3QgZ2FuZ3N0ZXIsIHlvdSBrbm93P1wiLFwiWW91IGtub3csIEkgYWx3YXlzIHNheSB3aGl0ZSBpcyBub3QgYSBjb2xvdXIsIHdoaXRlIGlzIGFuIGF0dGl0dWRlLCBhbmQgaWYgeW91IGhhdmVuJ3QgZ290IHRyaWxsaW9ucyBvZiBkb2xsYXJzIGluIHRoZSBiYW5rIHRoYXQgeW91IGRvbid0IG5lZWQsIHlvdSBjYW4ndCBiZSB3aGl0ZS5cIixcIkJlaW5nIGEgcGFydCBvZiBTS0VDSEVSUyBpcyBleGNpdGluZy4gSXQgaXMgc3VjaCBhIGhpcCBjb21wYW55IHdpdGggYSBncmVhdCBhdHRpdHVkZSBhbmQgaW1hZ2UuXCIsXCJJdCBpcyBwcmVjaXNlbHkgdGhlIHB1cnBvc2Ugb2YgdGhlIHB1YmxpYyBvcGluaW9uIGdlbmVyYXRlZCBieSB0aGUgcHJlc3MgdG8gbWFrZSB0aGUgcHVibGljIGluY2FwYWJsZSBvZiBqdWRnaW5nLCB0byBpbnNpbnVhdGUgaW50byBpdCB0aGUgYXR0aXR1ZGUgb2Ygc29tZW9uZSBpcnJlc3BvbnNpYmxlLCB1bmluZm9ybWVkLlwiLFwiQ29hY2hlcyB3aWxsIGV2ZW50dWFsbHkgbm90aWNlIGEgZ3JlYXQgYXR0aXR1ZGUsIGFuZCB0aGV5IHJlc3BlY3QgdGhhdC5cIixcIlRoZSBub3ZlbGlzdCB0ZWFjaGVzIHRoZSByZWFkZXIgdG8gY29tcHJlaGVuZCB0aGUgd29ybGQgYXMgYSBxdWVzdGlvbi4gVGhlcmUgaXMgd2lzZG9tIGFuZCB0b2xlcmFuY2UgaW4gdGhhdCBhdHRpdHVkZS4gSW4gYSB3b3JsZCBidWlsdCBvbiBzYWNyb3NhbmN0IGNlcnRhaW50aWVzIHRoZSBub3ZlbCBpcyBkZWFkLlwiLFwiTm8gb25lJ3MgZ29pbmcgdG8gYmUgYWJsZSB0byBvcGVyYXRlIHdpdGhvdXQgYSBncm91bmRpbmcgaW4gdGhlIGJhc2ljIHNjaWVuY2VzLiBMYW5ndWFnZSB3b3VsZCBiZSBoZWxwZnVsLCBhbHRob3VnaCBFbmdsaXNoIGlzIGJlY29taW5nIGluY3JlYXNpbmdseSBpbnRlcm5hdGlvbmFsLiBBbmQgdHJhdmVsLiBZb3UgaGF2ZSB0byBoYXZlIGEgZ2xvYmFsIGF0dGl0dWRlLlwiLFwiTXkgc2Vjb25kIGh1c2JhbmQgYmVsaWV2ZWQgSSBoYWQgc3VjaCBhIGZpY2tsZSBhdHRpdHVkZSB0byBmcmllbmRzaGlwIHRoYXQgZWFjaCBGcmlkYXkgaGUgd291bGQgdXBkYXRlIHRoZSBsaXN0IG9mIG15ICdUb3AgVGVuJyBmcmllbmRzIGluIHRoZSBtYW5uZXIgb2YgYSBUb3AgT2YgVGhlIFBvcHMgY2hhcnQgY291bnRkb3duLlwiLFwiSWYgeW91IGNhbiBraWxsIGFuaW1hbHMsIHRoZSBzYW1lIGF0dGl0dWRlIGNhbiBraWxsIGh1bWFuIGJlaW5ncy4gVGhlIG1lbnRhbGl0eSBpcyB0aGUgc2FtZSB3aGljaCBleHBsb2l0cyBuYXR1cmUgYW5kIHdoaWNoIGNyZWF0ZXMgd2Fycy5cIixcIk15IGF0dGl0dWRlIGlzLCBkbyBhcyBtdWNoIGFzIEkgY2FuIHdoaWxlIEknbSBmcmVlLiBBbmQgaWYgSSdtIGFycmVzdGVkIEknbGwgc3RpbGwgZG8gYXMgbXVjaCBhcyBJIGNhbi5cIixcIlRoZXJlIGFyZSBhIGxvdCBvZiBtb3ZpZXMgSSdkIGxpa2UgdG8gdGhyb3cgYXdheS4gVGhhdCdzIG5vdCB0byBzYXkgdGhhdCBJIHdlbnQgaW4gd2l0aCB0aGF0IGF0dGl0dWRlLiBBbnkgZmlsbSBJIGV2ZXIgc3RhcnRlZCwgSSB3ZW50IGluIHdpdGggYWxsIHRoZSBob3BlIGFuZCBiZXN0IGludGVudGlvbnMgaW4gdGhlIHdvcmxkLCBidXQgc29tZSBmaWxtcyBqdXN0IGRvbid0IHdvcmsuXCIsXCJCeSBtYWtpbmcgYSBjb21lYmFjaywgSSdtIGNoYW5naW5nIHRoZSBhdHRpdHVkZSBvZiBwZW9wbGUgdG93YXJkIG1lLiBJZiBJJ2Qga25vd24gdGhhdCBwZW9wbGUgd291bGQgcmVhY3Qgc28gZW50aHVzaWFzdGljYWxseSwgSSdkIGhhdmUgZG9uZSBpdCB5ZWFycyBhZ28uXCIsXCJUb2RheSwgSSB0aGluayB0aGUgYXR0aXR1ZGUgaXMgdGhhdCBnb3Zlcm5pbmcgaXMgbm90IG5lY2Vzc2FyaWx5IGdvb2QgcG9saXRpY3MsIGFuZCB0aGUgcmVzdWx0IGlzIHRoYXQgaXQncyBtdWNoIG1vcmUgcGFydGlzYW4gYW5kIG11Y2ggbW9yZSBkaXZpZGVkLlwiLFwiVGhhdCB0ZXJtJ3MgZGVmaW5pdGVseSBnb3QgYSBuZWdhdGl2ZSBhdXJhIHRvIGl0LCBiZWNhdXNlIHBlb3BsZSB0aGluayBhIGRpdmEgaXMgc29tZWJvZHkgd2l0aCBhbiBhdHRpdHVkZSB3aG8gZGVtYW5kcyB0aGluZ3MgYWxsIHRoZSB0aW1lLiBPZiBjb3Vyc2UgdGhlcmUgaXMgdGhhdCB0eXBlIG9mIGRpdmEsIGJ1dCBteSBpZGVhIG9mIGEgZGl2YSBoYXMgYWx3YXlzIGJlZW4gYSBzaW5nZXIgLSB3aGV0aGVyIG1hbGUgb3IgZmVtYWxlIC0gd2hvIGdldHMgb24gdGhhdCBzdGFnZSBhbmQgY2FwdGl2YXRlcyB5b3Ugd2l0aCB0aGVpciBwcmVzZW5jZSBhbmQgdGhlaXIgdm9pY2UuXCIsXCJPaCwgSSBkb24ndCB0aGluayBUb20gU293ZWxsIHdvdWxkIHRlbGwgYW55Ym9keSB0byBqb2luIHRoZSBhZG1pbmlzdHJhdGlvbi4gVGhhdCdzIG5vdCBoaXMgc3R5bGUuIEJ1dCBJIHRoaW5rIGhpcyBhdHRpdHVkZSBoYXMgYWx3YXlzIGJlZW4gaWYgaXQgaGFkIHRvIGJlIGRvbmUgaGUnZCBwcmVmZXIgbWUgdG8gZG8gaXQgdGhhbiBzb21lYm9keSBlbHNlLlwiLFwiVGhlIFNlbmF0b3IgZnJvbSBNYXNzYWNodXNldHRzIGhhcyBnaXZlbiB1cyBhbXBsZSBncm91bmRzIHRvIGRvdWJ0IHRoZSBqdWRnbWVudCBhbmQgdGhlIGF0dGl0dWRlIGhlIGJyaW5ncyB0byBiZWFyIG9uIHZpdGFsIGlzc3VlcyBvZiBuYXRpb25hbCBzZWN1cml0eS5cIixcIkkgcGVyZmVjdGx5IHVuZGVyc3Rvb2QgUHJlc2lkZW50IE9iYW1hJ3MgYXR0aXR1ZGUgdGhyb3VnaG91dCB0aGUgRnJlbmNoIHByZXNpZGVudGlhbCBjYW1wYWlnbi4gSGUgaGFkIG5vIHJlYXNvbiB0byBkaXN0YW5jZSBoaW1zZWxmIGZyb20gTmljb2xhcyBTYXJrb3p5LiBJdCdzIHRoZSBiYXNpYyBzb2xpZGFyaXR5IHRoYXQgbGVhZGVycyB3aG8gd29ya2VkIHRvZ2V0aGVyIG93ZSB0byBlYWNoIG90aGVyLlwiLFwiSSB0aGluayBpdCBoYXMgc29tZXRoaW5nIHRvIGRvIHdpdGggYmVpbmcgQnJpdGlzaC4gV2UgZG9uJ3QgdGFrZSBvdXJzZWx2ZXMgYXMgc2VyaW91c2x5IGFzIHNvbWUgb3RoZXIgY291bnRyaWVzIGRvLiBJIHRoaW5rIGEgbG90IG9mIHBlb3BsZSB0YWtlIHRoZW1zZWx2ZXMgZmFyIHRvbyBzZXJpb3VzbHkgSSBmaW5kIHRoYXQgYSB2ZXJ5IHRlZGlvdXMgYXR0aXR1ZGUuXCIsXCJJIGZhaWxlZCB0aGUgTFNBVC4gQmFzaWNhbGx5LCBpZiBJIGhhZCBub3QgZmFpbGVkLCBJJ2QgaGF2ZSBiZWVuIGEgbGF3eWVyIGFuZCB0aGVyZSB3b3VsZCBiZSBubyBTcGFueC4gSSB0aGluayBmYWlsdXJlIGlzIG5vdGhpbmcgbW9yZSB0aGFuIGxpZmUncyB3YXkgb2YgbnVkZ2luZyB5b3UgdGhhdCB5b3UgYXJlIG9mZiBjb3Vyc2UuIE15IGF0dGl0dWRlIHRvIGZhaWx1cmUgaXMgbm90IGF0dGFjaGVkIHRvIG91dGNvbWUsIGJ1dCBpbiBub3QgdHJ5aW5nLiBJdCBpcyBsaWJlcmF0aW5nLlwiLFwiTXkgYXR0aXR1ZGUgdG8gd3JpdGluZyBpcyBsaWtlIHdoZW4geW91IGRvIHdhbGxwYXBlcmluZywgeW91IHJlbWVtYmVyIHdoZXJlIGFsbCB0aGUgbGl0dGxlIGJpdHMgYXJlIHRoYXQgZG9uJ3QgbWVldC4gQW5kIHRoZW4geW91ciBmcmllbmRzIHNheTogSXQncyB0ZXJyaWZpYyFcIixcIkxpYmVyYWxpc20gaXMgYSByZWFsbHkgb2xkIEJyaXRpc2ggdHJhZGl0aW9uIGFuZCBpdCBoYXMgYSBjb21wbGV0ZWx5IGRpZmZlcmVudCBhdHRpdHVkZSB0b3dhcmRzIHRoZSBpbmRpdmlkdWFsIGFuZCB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIGluZGl2aWR1YWwgYW5kIHRoZSBzdGF0ZSB0aGFuIHRoZSBjb2xsZWN0aXZpc3QgcmVzcG9uc2Ugb2YgTGFib3VyLCBhbmQgcGFydGljdWxhcmx5IE9sZCBMYWJvdXIsIGRvZXMuXCIsXCJJJ3ZlIGFsd2F5cyBoYWQgYSAnV29yayBoYXJkLCBwbGF5IGhhcmQnIGF0dGl0dWRlIHRvIGxpZmUgLSBJIHN0aWxsIGRvIC0gYnV0IHNvbWV0aW1lcyB5b3UgZ2V0IGludm9sdmVkIGluIHNvbWV0aGluZyB0aGF0IG5lZWRzIGEgY2FsbSwgbWV0aG9kaWNhbCBhcHByb2FjaC5cIixcIkkndmUgYWx3YXlzIGNvbnNpZGVyZWQgbXlzZWxmIHRvIGJlIGZpZXJjZWx5IHBhdHJpb3RpYy4gSSBsb3ZlIEJyaXRhaW4gLSBpdHMgaGlzdG9yeSBhbmQgdGhlIGRvd24tdG8tZWFydGggYXR0aXR1ZGUgcGVvcGxlIGhhdmUuXCIsXCJUaGVyZSBpcyBhIGJyaWVmIG1vbWVudCB3aGVuIGFsbCB0aGVyZSBpcyBpbiBhIG1hbidzIG1pbmQgYW5kIHNvdWwgYW5kIHNwaXJpdCBpcyByZWZsZWN0ZWQgdGhyb3VnaCBoaXMgZXllcywgaGlzIGhhbmRzLCBoaXMgYXR0aXR1ZGUuIFRoaXMgaXMgdGhlIG1vbWVudCB0byByZWNvcmQuXCIsXCJJIHdhcyBmb3J0dW5hdGUgdG8gcGxheSBmb3IgUGV0ZSBSb3NlIGFuZCBoYXZlIHRlYW1tYXRlcyBsaWtlIEtlbiBHcmlmZmV5IFNyLiwgVG9ueSBQZXJleiBhbmQgRGF2ZSBDb25jZXBjaW9uLiBJIGdyZXcgdXAgaW4gdGhlIGdhbWUgd2l0aCBhIG1hdHVyZSBhdHRpdHVkZS4gSSd2ZSBhbHdheXMga25vd24gaXQgd2FzIGJldHRlciB0byBiZSBzZWVuIGFuZCBub3QgaGVhcmQuXCIsXCJJJ3ZlIG5ldmVyIGJlZW4gb3V0IHdpdGggYW55IG9mIHRoZSBjYXN0IG9mIENvcm9uYXRpb24gU3RyZWV0LiBXZSdyZSBhbGwgdmVyeSBjbG9zZSBmcmllbmRzIHNvIGl0J3MgdmVyeSBtdWNoIGEgcHJvZmVzc2lvbmFsIGF0dGl0dWRlLlwiLFwiTm90aGluZy4gV2UncmUgYWxsIGZyaWVuZHMgYW5kIGZyaWVuZGx5LiBTbyB3aGVuIHRoZSBjYW1lcmFzIGdvIGRvd24sIGRlcGVuZGluZyBvbiB0aGUgbW9vZCBvciB0aGUgbmF0dXJlIG9mIHRoZSBtYXRlcmlhbCB3ZSdyZSBkZWFsaW5nIHdpdGgsIHRoZXJlJ3MgdXN1YWxseSBhIGtpbmQgb2YgYSBwcmV2YWlsaW5nIGxpZ2h0IGF0dGl0dWRlIHRoYXQncyBmbG9hdGluZyBhcm91bmQuXCIsXCJJIHdpbGwga2VlcCBzbWlsaW5nLCBiZSBwb3NpdGl2ZSBhbmQgbmV2ZXIgZ2l2ZSB1cCEgSSB3aWxsIGdpdmUgMTAwIHBlcmNlbnQgZWFjaCB0aW1lIEkgcGxheS4gVGhlc2UgYXJlIGFsd2F5cyBteSBnb2FscyBhbmQgbXkgYXR0aXR1ZGUuXCIsXCJJJ20gdGFraW5nIGEgYml0IG9mIGEgd2FpdC1hbmQtc2VlIGF0dGl0dWRlIHRvd2FyZHMgM0QuXCIsXCJNeSBmYXRoZXIgaW5zdGlsbGVkIGluIG1lIHRoZSBhdHRpdHVkZSBvZiBwcmV2YWlsaW5nLiBJZiB0aGVyZSdzIGEgY2hhbGxlbmdlLCBnbyBmb3IgaXQuIElmIHRoZXJlJ3MgYSB3YWxsIHRvIGJyZWFrIGRvd24sIGJyZWFrIGl0IGRvd24uXCIsXCJKdXN0IGFzIHRoZSBsZWZ0IGhhcyB0byBiZSBtb3JlIHdpbGxpbmcgdG8gcXVlc3Rpb24gJ0dvdmVybm1lbnQga25vd3MgYmVzdCwnIHRoZSByaWdodCBoYXMgdG8gcmV0aGluayBpdHMgbGFpc3Nlei1mYWlyZSBhdHRpdHVkZSB0b3dhcmQgZ292ZXJubWVudC5cIixcIlRoZSBhdHRpdHVkZSBvZiBpbnNvbGVudCBoYXVnaHRpbmVzcyBpcyBjaGFyYWN0ZXJpc3RpYyBvZiB0aGUgcmVsYXRpb25zaGlwcyBBbWVyaWNhbnMgZm9ybSB3aXRoIHdoYXQgaXMgYWxpZW4gdG8gdGhlbSwgd2l0aCBvdGhlcnMuXCIsXCJBbHRob3VnaCBhcyBhIHNhaWxvciBJIGRlc3Bpc2VkIHBvbGl0aWNzIC0gZm9yIEkgbG92ZWQgbXkgc2FpbG9yJ3MgbGlmZSBhbmQgc3RpbGwgbG92ZSBpdCB0b2RheSAtIGNvbmRpdGlvbnMgZm9yY2VkIG1lIHRvIHRha2UgdXAgYSBkZWZpbml0ZSBhdHRpdHVkZSB0b3dhcmRzIHBvbGl0aWNhbCBwcm9ibGVtcy5cIixcIkhvdyBkbyB5b3UgbnVydHVyZSBhIHBvc2l0aXZlIGF0dGl0dWRlIHdoZW4gYWxsIHRoZSBzdGF0aXN0aWNzIHNheSB5b3UncmUgYSBkZWFkIG1hbj8gWW91IGdvIHRvIHdvcmsuXCIsXCJUaGUgcGlsb3QgbG9va2VkIGF0IGhpcyBjdWVzIG9mIGF0dGl0dWRlIGFuZCBzcGVlZCBhbmQgb3JpZW50YXRpb24gYW5kIHNvIG9uIGFuZCByZXNwb25kZWQgYXMgaGUgd291bGQgZnJvbSB0aGUgc2FtZSBjdWVzIGluIGFuIGFpcnBsYW5lLCBidXQgdGhlcmUgd2FzIG5vIHdheSBpdCBmbGV3IHRoZSBzYW1lLiBUaGUgc2ltdWxhdG9ycyBoYWQgc2hvd2VkIHVzIHRoYXQuXCIsXCJJdCB3YXMgbXkgZmF0aGVyIHdobyBpbnN0aWxsZWQgdGhlICduZXZlciBzYXkgbm8nIGF0dGl0dWRlIEkgY2FycnkgYXJvdW5kIHdpdGggbWUgdG9kYXksIGFuZCB3aG8gaW5zdGlsbGVkIGluIG1lIGEgc2Vuc2Ugb2Ygd29uZGVyLCBhbHdheXMgdGFraW5nIHVzIG9uIGFkdmVudHVyZXMgaW4gdGhlIGNhciwgbmV2ZXIgdGVsbGluZyB1cyB0aGUgZGVzdGluYXRpb24uXCIsXCJJIHdlbnQgdG8gRW5nbGFuZCBpbiB0aGUgJzcwcywgYW5kIEkgd2FzIGluIG15IGVhcmx5IDIwcy4gVGhlcmUgd2FzIHN0aWxsIGEgcmVzaWR1ZSBvZiB0aGF0IGVyYSBvZiBiZWluZyBhbiB1bmRlcmNsYXNzIG9yIGNvbG9uaWFsLiBJIGFzc3VtZSBpdCBtdXN0IGhhdmUgYmVlbiBhIG1vcmUgYWdncmVzc2l2ZSBhbmQgcHJvbWluZW50IGF0dGl0dWRlIDQwIHllYXJzIGJlZm9yZSB0aGF0LCBiZWNhdXNlIEF1c3RyYWxpYSBpbnRlcm5hdGlvbmFsbHkgd2Fzbid0IHJlZ2FyZGVkIGFzIGhhdmluZyBtdWNoIGN1bHR1cmFsIHZhbHVlLiBXZSB3ZXJlIGEgY291bnRyeSBmdWxsIG9mIHNoZWVwIGFuZCBjb252aWN0cy5cIixcIkZvciBhIHdyaXRlciBvbmx5IG9uZSBmb3JtIG9mIHBhdHJpb3Rpc20gZXhpc3RzOiBoaXMgYXR0aXR1ZGUgdG93YXJkIGxhbmd1YWdlLlwiLFwiR2FyZGVuaW5nIGlzIG5vdCB0cml2aWFsLiBJZiB5b3UgYmVsaWV2ZSB0aGF0IGl0IGlzLCBjbG9zZWx5IGV4YW1pbmUgd2h5IHlvdSBmZWVsIHRoYXQgd2F5LiBZb3UgbWF5IGRpc2NvdmVyIHRoYXQgdGhpcyBhdHRpdHVkZSBoYXMgYmVlbiBmb3JjZWQgdXBvbiB5b3UgYnkgbWFzcyBtZWRpYSBhbmQgdGhlIGNyYXNzIGN1bHR1cmUgaXQgY3JlYXRlcyBhbmQgbWFpbnRhaW5zLiBUaGUgZmFjdCBpcywgZ2FyZGVuaW5nIGlzIGp1c3QgdGhlIG9wcG9zaXRlIC0gaXQgaXMsIG9yIHNob3VsZCBiZSwgYSBjZW50cmFsLCBiYXNpYyBleHByZXNzaW9uIG9mIGh1bWFuIGxpZmUuXCIsXCJCZWNvbWluZyBhbiBhdXRob3IgY2hhbmdlcyB5b3VyIGF0dGl0dWRlIHRvby4gT25jZSB5b3Ugc2VlIHdoZXJlIGJvb2tzIGNvbWUgZnJvbSwgYW5kIGhvdyB0aGV5J3JlIG1hZGUsIHRoZXkgbmV2ZXIgc2VlbSBxdWl0ZSBhcyBzYWNyZWQgYWdhaW4uXCIsXCJJIHdhcyBicmluZ2luZyBteSBhdHRpdHVkZSBhcyBhIHJlZ3VsYXIgcGVyc29uICdjYXVzZSB0aGlzIGlzIG15IGF0dGl0dWRlLlwiLFwiSWYgeW91IGNhbiBhdHRyaWJ1dGUgeW91ciBzdWNjZXNzIGVudGlyZWx5IHRvIHlvdXIgb3duIG1lbnRhbCBlZmZvcnQsIHRvIHlvdXIgb3duIGF0dGl0dWRlLCB0byBzb21lIHNwaXJpdHVhbCBlc3NlbmNlIHRoYXQgeW91IGhhdmUgdGhhdCBpcyBiZXR0ZXIgdGhhbiBvdGhlciBwZW9wbGUncywgdGhlbiB0aGF0IG11c3QgZmVlbCBwcmV0dHkgZ29vZC5cIixcIkkgZmVsbCBpbiBsb3ZlIHdpdGggRXJpY2EgS2FuZSB0aGUgc3VtbWVyIGJlZm9yZSBteSBmcmVzaG1hbiB5ZWFyIG9mIGhpZ2ggc2Nob29sLiBMaWtlIGFsbCByZWQtYmxvb2RlZCB0ZWVuIEFtZXJpY2FuIGJveXMsIEknZCBjb21lIGhvbWUgZnJvbSB3YXRlciBwb2xvIHByYWN0aWNlIGFuZCBlYXQgYSBib3ggb2YgRW50ZW5tYW5uJ3MgUG9wJ0VtcyBkb251dCBob2xlcyBpbiBmcm9udCBvZiB0aGUgVFYgd2hpbGUgb2JzZXNzaXZlbHkgZmF3bmluZyBvdmVyICdBbGwgTXkgQ2hpbGRyZW4nIGFuZCBFcmljYSwgaGVyIGNsb3RoZXMsIGFuZCBoZXIgbmFyY2lzc2lzdGljIGF0dGl0dWRlLlwiLFwiRmlsbXMgZm9yIFRWIGhhdmUgdG8gYmUgbXVjaCBjbG9zZXIgdG8gdGhlIGJvb2ssIG1haW5seSBiZWNhdXNlIHRoZSBvYmplY3RpdmUgd2l0aCBhIFRWIG1vdmllIHRoYXQgdHJhbnNsYXRlcyBsaXRlcmF0dXJlIGlzIHRvIGdldCB0aGUgYXVkaWVuY2UsIGFmdGVyIHNlZWluZyB0aGlzIHZlcnNpb24sIHRvIHBpY2sgdXAgdGhlIGJvb2sgYW5kIHJlYWQgaXQgdGhlbXNlbHZlcy4gTXkgYXR0aXR1ZGUgaXMgdGhhdCBUViBjYW4gbmV2ZXIgcmVhbGx5IGJlIGFueSBmb3JtIG9mIGFydCwgYmVjYXVzZSBpdCBzZXJ2ZXMgYXVkaWVuY2UgZXhwZWN0YXRpb25zLlwiLFwiWW91IGNhbid0IGJlYXQgdGhlIGJlZWhpdmUgZm9yIGdsYW0gcHVua2V0dGUgYXR0aXR1ZGUuXCIsXCJJIGhhdmVuJ3Qgc2VlbiBDbG9uZXMsIHdoaWNoIGhhcyBiZWVuIGR1cmluZyB0aGlzIHBlcmlvZCB3aGVuIEkgaGF2ZW4ndCBzZWVuIG11Y2ggb2YgYW55dGhpbmcsIGJ1dCBJIGRpZCBzZWUgUGhhbnRvbSBNZW5hY2UsIGFuZCBzZWUgbXkgZmVlbGluZ3MgYWJvdXQgaXQgLSBzZWUsIGZpcnN0IG9mIGFsbCwgSSB0aGluayB0aGF0IHdoZW4geW91IG1ha2UgYSBsb3Qgb2YgbW92aWVzLCB5b3VyIGF0dGl0dWRlIGFib3V0IHRoZSBtb3ZpZXMgY2hhbmdlcy5cIixcIk15IGF0dGl0dWRlIGlzIGFsd2F5cyBvbmUgb2Ygc2Vuc3VhbGl0eSwgYWdncmVzc2l2ZSBlbnRodXNpYXNtIGFuZCBhIGtpbmQgb2Ygb3V0cmFnZW91c25lc3MgaW4gbXkgZXhwcmVzc2lvbi5cIixcIkVwaWMgcG9ldHJ5IGV4aGliaXRzIGxpZmUgaW4gc29tZSBncmVhdCBzeW1ib2xpYyBhdHRpdHVkZS4gSXQgY2Fubm90IHN0cmljdGx5IGJlIHNhaWQgdG8gc3ltYm9saXplIGxpZmUgaXRzZWxmLCBidXQgYWx3YXlzIHNvbWUgbWFubmVyIG9mIGxpZmUuXCIsXCJXaGVuIHlvdSByZXRpcmUsIGl0J3MgYSBwbGFjZSBpbiBsaWZlLCBhIHBhcnQgb2YgdGhlIGpvdXJuZXkuIFlvdSBqdXN0IGRvbid0IHF1aXQgd29yayB5b3UgZGV2ZWxvcCBhbiBhdHRpdHVkZSB3aGVyZSB5b3UgY2FuIGRvIHdoYXQgeW91IHBsZWFzZS5cIixcIldoZW4gYSBwYXJlbnQgc2hvd3MgdXAgd2l0aCBhbiBhdHRpdHVkZSBvZiBlbnRpdGxlbWVudCwgdW5kZXJzdGFuZCB0aGF0IHVuZGVyIGl0IGlzIGEgYm9hdGxvYWQgb2YgYW54aWV0eS5cIixcIldoYXQgcmVhZGVyIHdhbnRzIHRvIGJlIHRvbGQgd2hhdCBhdHRpdHVkZSB0byBzdHJpa2U/XCIsXCJNeSBkZW5pYWwgYW5kIGlycmVzcG9uc2libGUgYXR0aXR1ZGUgYWJvdXQgYXN0aG1hIHB1dCBtZSBhdCBncmVhdCByaXNrIGFuZCBjYXVzZWQgbWUgc28gbXVjaCBuZWVkbGVzcyBzdWZmZXJpbmcuIE15IGhvcGUgaXMgdGhhdCB0aGUga2lkcyBJIHRhbGsgdG8gbGVhcm4gdG8gb3BlbiB1cCBhYm91dCB0aGVpciBhc3RobWEsIGJlY29tZSBlZHVjYXRlZCBhYm91dCB0aGVpciBjb25kaXRpb24sIGFuZCBzZWVrIGhlbHAuXCIsXCJXb21hbiBtdXN0IGhhdmUgaGVyIGZyZWVkb20sIHRoZSBmdW5kYW1lbnRhbCBmcmVlZG9tIG9mIGNob29zaW5nIHdoZXRoZXIgb3Igbm90IHNoZSB3aWxsIGJlIGEgbW90aGVyIGFuZCBob3cgbWFueSBjaGlsZHJlbiBzaGUgd2lsbCBoYXZlLiBSZWdhcmRsZXNzIG9mIHdoYXQgbWFuJ3MgYXR0aXR1ZGUgbWF5IGJlLCB0aGF0IHByb2JsZW0gaXMgaGVycyAtIGFuZCBiZWZvcmUgaXQgY2FuIGJlIGhpcywgaXQgaXMgaGVycyBhbG9uZS5cIixcIkV2ZW4gYXMgYSBsaXR0bGUgY2hpbGQsIEkndmUgYWx3YXlzIGhhZCB0aGF0IGNvbWVkaWFuIGtpbmQgb2YgYXR0aXR1ZGUuXCIsXCJJIG1lYW4sIHRoZSBzaG9lIC0gdGhlcmUgaXMgYSBtdXNpYyB0byBpdCwgdGhlcmUgaXMgYXR0aXR1ZGUsIHRoZXJlIGlzIHNvdW5kLCBpdCdzIGEgbW92ZW1lbnQuIENsb3RoZXMgLSBpdCdzIGEgZGlmZmVyZW50IHN0b3J5LiBUaGVyZSBhcmUgYSBtaWxsaW9uIHRoaW5ncyBJJ2QgcmF0aGVyIGRvIGJlZm9yZSBkZXNpZ25pbmcgY2xvdGhlczogZGlyZWN0aW5nLCBsYW5kc2NhcGluZy5cIixcIkluIGp1c3QgdGhlIHNhbWUgd2F5IHRoZSB0aG91c2FuZHMgb2Ygc3VjY2Vzc2l2ZSBwb3NpdGlvbnMgb2YgYSBydW5uZXIgYXJlIGNvbnRyYWN0ZWQgaW50byBvbmUgc29sZSBzeW1ib2xpYyBhdHRpdHVkZSwgd2hpY2ggb3VyIGV5ZSBwZXJjZWl2ZXMsIHdoaWNoIGFydCByZXByb2R1Y2VzLCBhbmQgd2hpY2ggYmVjb21lcyBmb3IgZXZlcnlvbmUgdGhlIGltYWdlIG9mIGEgbWFuIHdobyBydW5zLlwiLFwiSW4gdGhlIGxhdGUgJzcwcywgbWF5YmUganVzdCBiZWZvcmUgSSBzdGFydGVkLCB0aGVyZSB3YXMgc3RpbGwgYW4gYXR0aXR1ZGUgdGhhdCBpZiB5b3UgZGlkIGZpbG0geW91IGRpZG4ndCBkbyBUViBhbmQgdmljZSB2ZXJzYSwgYnV0IHRoYXQncyBnb25lIG5vdy5cIixcIkkgY2Fubm90IHNheSB0aGF0IHRoZSBhdHRpdHVkZSBvZiB0aGUgVW5pdGVkIE5hdGlvbnMgYWx3YXlzIGlzIGZvciB0aGUgSXNyYWVsaSBhdHRpdHVkZS4gSXNyYWVsLCBJIHRoaW5rLCBoYXMgYmVlbiB1bmRlciBzZXZlcmUgYXR0YWNrcyBieSBtZW1iZXJzIG9mIHRoZSBVbml0ZWQgTmF0aW9ucyBtYW55IHRpbWVzLlwiLFwiSSBsb3ZlIGhlciBhdHRpdHVkZSwgYnV0IGFzIG11Y2ggYXMgSSdkIGxpa2UgdG8gYnJpbmcgbXkgbWVkYWxzIHRvIGEgc3BlZWNoIG9yIGFwcGVhcmFuY2UsIEkgbmV2ZXIgZG8uXCIsXCJXZSBtdXN0IGFkdmVydGlzZSB0byBVLlMuIGJ1c2luZXNzIHRoYXQgd2UgYXJlIHRoZXJlLCB0aGF0IG91ciBhdHRpdHVkZSBoYXMgY2hhbmdlZCwgYW5kIHRoYXQgd2UgY2FyZS4gV2hlbiB3ZSBhcmUgYXNrZWQgdG8gaGVscCwgd2UgaGF2ZSB0byBwZXJmb3JtIGFuZCBwcm92aWRlIHRoZSByaWdodCBhZHZpY2UuXCIsXCJUaGUgQW1lcmljYW4gYXR0aXR1ZGUgdG93YXJkcyBlZmZpY2llbmN5IGFuZCBleGVjdXRpb24gc2hvdWxkIGFsd2F5cyB1bmRlcmxpZSBhcmNoaXRlY3R1cmUuXCIsXCJJIGhhdmUgc3VjaCBhbiBleHRyZW1lIGF0dGl0dWRlIGFib3V0IHdvcmssIHdoZXJlIEkgY2FuIGp1c3QgY29tcGxldGVseSBiZSBkZXJlbGljdCBvZiBteSByZXNwb25zaWJpbGl0aWVzIGFuZCB0aGVuIHdoZW4gSSBhbSBub3QgZGVyZWxpY3QsIEkgYW0gY29tcGxldGVseSBpbmR1bGdlZCBpbiBpdC4gSSBzd2luZyBwcmV0dHkgd2lsZGx5IGZyb20gdGhlIHR3byBleHRyZW1lcy5cIixcIkkgaGF2ZSBhIHBvbGl0aWNhbCBhdHRpdHVkZSwgYnV0IEknbSBjZXJ0YWlubHkgbm90IGEgcG9saXRpY2lhbi5cIixcIkkgdGhpbmsgbXkgYXR0aXR1ZGUgdG8gaHVtYW4gYmVpbmdzIGhhcyBjaGFuZ2VkIHNpbmNlIGxlYXZpbmcgcHJpc29uLlwiLFwiSSB3ZW50IHRvIHRoZSBQZXJmb3JtaW5nIEFydHMgU2Nob29sIGFuZCBzdHVkaWVkIGNsYXNzaWNhbCBiYWxsZXQuIFRoYXQgYXR0aXR1ZGUgaXMgc29tZXRoaW5nIHRoYXQncyBwdXQgaW50byB5b3VyIGhlYWQuIFlvdSBhcmUgbmV2ZXIgdGhpbiBlbm91Z2guXCIsXCJJIGhhdmUgYWx3YXlzIGRldGVzdGVkIGFueSBkZXBhcnR1cmUgZnJvbSByZWFsaXR5LCBhbiBhdHRpdHVkZSB3aGljaCBJIHJlbGF0ZSB0byBteSBtb3RoZXIncyBwb29yIG1lbnRhbCBoZWFsdGguXCIsXCJXaXRoIGp1c3QgYWJvdXQgZXZlcnkgcGxheWVyIGluIEF1c3RyYWxpYSwgaGlzIHdob2xlIGdvYWwgYW5kIGFtYml0aW9uIGlzIHRvIHBsYXkgZm9yIEF1c3RyYWxpYS4gVGhhdCdzIHdoeSB0aGV5J3JlIHBsYXlpbmcgZmlyc3QgY2xhc3MgY3JpY2tldC4gSXQncyBqdXN0IGEgZGlmZmVyZW50IGF0dGl0dWRlLlwiLFwiUmlnaHQgYWZ0ZXIgJ1JheW1vbmQnIEkgaGFkIGEgd29ybGQtaXMtbXktb3lzdGVyIGF0dGl0dWRlLCBidXQgSSBmb3VuZCBvdXQgSSBkb24ndCBsaWtlIG95c3RlcnMuIEkgaGFkIHRoaXMgZXhpc3RlbnRpYWwgZW1wdGluZXNzLiAnV2hhdCBpcyBteSBwdXJwb3NlPyBXaG8gYW0gST8nIEkgaGFkIGEgYmlnIGlkZW50aXR5IGNyaXNpcy5cIixcIldoYXQgc2N1bHB0b3JzIGRvIGlzIHJlcHJlc2VudCB0aGUgZXNzZW5jZSBvZiBnZXN0dXJlLiBXaGF0IGlzIGltcG9ydGFudCBpbiBtaW1lIGlzIGF0dGl0dWRlLlwiLFwiSXQgcmVhbGx5IHdhcyBoYW5kLXRvLW1vdXRoIGFuZCB5b3UgY2FuIHNheSwgJ1Bvb3IgbGl0dGxlIG1lLCBob3cgZHJlYWRmdWwsIHdoYXQgYSBkZXByaXZlZCBjaGlsZGhvb2QnLCBidXQgSSBkaWRuJ3QgZmVlbCB0aGF0IHdheSBhdCBhbGwuIEl0J3MgYWxsIGFib3V0IHRoZSBhdHRpdHVkZSBhdCBob21lLlwiLFwiSGF2aW5nIGEgY2xlYXIgZmFpdGgsIGJhc2VkIG9uIHRoZSBjcmVlZCBvZiB0aGUgY2h1cmNoIGlzIG9mdGVuIGxhYmVsZWQgdG9kYXkgYXMgZnVuZGFtZW50YWxpc20uIFdoZXJlYXMgcmVsYXRpdmlzbSwgd2hpY2ggaXMgbGV0dGluZyBvbmVzZWxmIGJlIHRvc3NlZCBhbmQgc3dlcHQgYWxvbmcgYnkgZXZlcnkgd2luZCBvZiB0ZWFjaGluZywgbG9vayBsaWtlIHRoZSBvbmx5IGF0dGl0dWRlIGFjY2VwdGFibGUgdG8gdG9kYXkncyBzdGFuZGFyZHMuXCIsXCJZb3Uga25vdyB3aGF0J3MgZnVubnkgdG8gbWU/IEF0dGl0dWRlLlwiLFwiVGhlIGNoYXJhY3RlcmlzdGljIHBvbGl0aWNhbCBhdHRpdHVkZSBvZiB0b2RheSBpcyBub3Qgb25lIG9mIHBvc2l0aXZlIGJlbGllZiwgYnV0IG9mIGRlc3BhaXIuXCIsXCJJZiB5b3UgY2FuJ3QgY2hhbmdlIHlvdXIgZmF0ZSwgY2hhbmdlIHlvdXIgYXR0aXR1ZGUuXCIsXCJNYWlubHkgd2hhdCBJIGxlYXJuZWQgZnJvbSBCdWRkeS4uLiB3YXMgYW4gYXR0aXR1ZGUuIEhlIGxvdmVkIG11c2ljLCBhbmQgaGUgdGF1Z2h0IG1lIHRoYXQgaXQgc2hvdWxkbid0IGhhdmUgYW55IGJhcnJpZXJzIHRvIGl0LlwiLFwiSSB0aGluayBmdW4gaXMgYW4gaW1wb3J0YW50IHBhcnQgb2YgdGhlIGVudGVydGFpbm1lbnQgaW5kdXN0cnksIGFuZCBpdCBzaG91bGQgYmUuIEFueWJvZHkgd2hvJ3Mgbm90IGluY29ycG9yYXRpbmcgc29tZSBvZiB0aGF0IGludG8gdGhlaXIgd29yayBuZWVkcyB0byB0YWtlIGEgYnJlYWssIGdvIGF3YXksIGFuZCBoYXZlIGFuIGF0dGl0dWRlIGFkanVzdG1lbnQuXCIsXCJJIGhhdmUgcGxheWVkIG9uIG1hbnkgdGVhbXMgdGhyb3VnaG91dCBteSBjYXJlZXIsIGFuZCBJIGtub3cgd2hlbiBhIHRlYW0gaGFzIHRoZSB0b29scywgYW5kIHRoZSByaWdodCBwb3NpdGl2ZSBhdHRpdHVkZSB0b3dhcmRzIHdpbm5pbmcuXCIsXCJWYW1waXJlcyBhcmUgc28gb2xkIHRoYXQgdGhleSBkb24ndCBuZWVkIHRvIGltcHJlc3MgYW55b25lIGFueW1vcmUuIFRoZXkncmUgY29tZm9ydGFibGUgaW4gdGhlaXIgb3duIHNraW4uIEl0J3MgdGhpcyBlbmlnbWF0aWMgc3RyZW5ndGggdGhhdCdzIHZlcnkgcm9tYW50aWMgYW5kIG9sZC1mYXNoaW9uZWQuIEkgdGhpbmsgaXQgZ29lcyBiYWNrIHRvIHNvbWV0aGluZyBvZiBhIFZpY3RvcmlhbiBhdHRpdHVkZSBvZiBmaW5kaW5nIGEgc3Ryb25nIG1hbiB3aG8ncyBnb2luZyB0byBsb29rIGFmdGVyIGhpcyB3b21hbi5cIixcIldoYXQgSSB3aXNoIEkgaGFkLCBpcyB0aGF0IEkgd2lzaCBJIHdhcyBhIGxpdHRsZSBtb3JlIEdyZWVrLCBpbiB0aGF0IEkgd2lzaCBJIGNvdWxkIGxvc2UgbXkgTm9ydGggQW1lcmljYW4gZHJpdmVuIGF0dGl0dWRlIGFuZCB0aGF0IEkgY291bGQgYmUgYSBsaXR0bGUgYml0IG1vcmUgcG9ldGljIGFuZCBsYWlzc2V6IGZhaXJlLlwiLFwiSSB3YXMgYWx3YXlzIHRoZSBndXkgZ2V0dGluZyBraWNrZWQgb3V0IG9mIG15IGNsYXNzZXMgYXQgc2Nob29sIGZvciBoYXZpbmcgYW4gYXR0aXR1ZGUgcHJvYmxlbS5cIixcIkFuZCBJIHRlbGwgeW91LCBoYXZpbmcgZ2lybHMgaGFzIG1hZGUgbWUgYSBtdWNoIGJldHRlciBtYW4uIEkgaGF2ZSBmcmllbmRzIHdobyBhcmUgZmF0aGVycywgYnV0IHRoZXkgb25seSBoYXZlIGJveXMsIGFuZCB0aGV5IGhhdmUgdGhlIHNhbWUgYXR0aXR1ZGUgdG93YXJkIHdvbWVuIHRoZXkgYWx3YXlzIGhhZCwgeW91IGtub3c/IEFuZCBJIGRvbid0IHBsYXkgdGhhdC4uLiBNeSBnaXJscywgeW91IG1lc3Mgd2l0aCB0aGVtPyBJIHdpbGwgYnVyeSB5b3UgdW5kZXJncm91bmQuXCIsXCJTdHlsZSBpcyBhIHJlZmxlY3Rpb24gb2YgeW91ciBhdHRpdHVkZSBhbmQgeW91ciBwZXJzb25hbGl0eS5cIixcIklmIGEgcGVyc29uIGNhbiBiZSBzYWlkIHRvIGhhdmUgdGhlIHdyb25nIGF0dGl0dWRlLCB0aGVyZSBpcyBubyBuZWVkIHRvIHBheSBhdHRlbnRpb24gdG8gaGlzIGFyZ3VtZW50cy5cIixcIlRoZSBhdHRpdHVkZSBpcyB3ZSBsaXZlIGFuZCBsZXQgbGl2ZS4gVGhpcyBpcyBhY3R1YWxseSBhbiBhbWF6aW5nIGNoYW5nZSBpbiB2YWx1ZXMgaW4gYSByYXRoZXIgc2hvcnQgdGltZSBhbmQgaXQncyBhbiBleGFtcGxlIG9mIGZyZWVkb20gZnJvbSByZWxpZ2lvbi5cIixcIk5vdCB0byBkaXNjcmltaW5hdGUgZXZlcnkgbW9tZW50IHNvbWUgcGFzc2lvbmF0ZSBhdHRpdHVkZSBpbiB0aG9zZSBhYm91dCB1cywgYW5kIGluIHRoZSB2ZXJ5IGJyaWxsaWFuY3kgb2YgdGhlaXIgZ2lmdHMgc29tZSB0cmFnaWMgZGl2aWRpbmcgb24gdGhlaXIgd2F5cywgaXMsIG9uIHRoaXMgc2hvcnQgZGF5IG9mIGZyb3N0IGFuZCBzdW4sIHRvIHNsZWVwIGJlZm9yZSBldmVuaW5nLlwiLFwiUGxheWVycyBzaG91bGQga25vdyB0aGF0IGlmIHlvdSBjYW4ndCBtYWtlIHRoZSBjb250cmlidXRpb24gb2YgdGhlIHdpbm5pbmcgc2hvdCwgdGhhdCB5b3VyIGF0dGl0dWRlIGV2ZXJ5IGRheSB3aGVuIHlvdSBjb21lIHRvIHByYWN0aWNlLCBvciB0aGUgcG9zaXRpdmUgY29udHJpYnV0aW9uIHlvdSBtYWtlIHRocm91Z2ggY2hlZXJpbmcgYW5kIGtlZXBpbmcgdXAgdGVhbSBtb3JhbGUsIGlzIGp1c3QgYXMgaW1wb3J0YW50IGluIHRoZSBvdmVyYWxsIHBpY3R1cmUuXCIsXCJJdCdzIG5vdCB0aGUgc3R5bGUgdGhhdCBtb3RpdmF0ZXMgbWUsIGFzIG11Y2ggYXMgYW4gYXR0aXR1ZGUgb2Ygb3Blbm5lc3MgdGhhdCBJIGhhdmUgd2hlbiBJIGdvIGludG8gYSBwcm9qZWN0LlwiLFwiVGhlIHBsYWNlIG9mIGNoZXNzIGluIHRoZSBzb2NpZXR5IGlzIGNsb3NlbHkgcmVsYXRlZCB0byB0aGUgYXR0aXR1ZGUgb2YgeW91bmcgcGVvcGxlIHRvd2FyZHMgb3VyIGdhbWUuXCIsXCJXZSBhc3N1bWUgdGhhdCB3ZSd2ZSBjb21lIHNvIGZhciBhcyBjb21wYXNzaW9uYXRlIGNpdGl6ZW5zIG9mIHRoZSB3b3JsZCBpZiB3ZSBkbyBjaG9vc2UgdG8gcmVhZCB0aGUgbmV3cywgeWV0IHRoZSBhdHRpdHVkZSB0b3dhcmRzIGxpZmUgY2FuIGJlIG9uZSB3aGVyZSB3ZSBwdXQgYmxpbmRlcnMgb24gYW5kIGZvcmdldCB0aGF0IHRoZXJlIGFyZSBjaXZpbCB3YXJzIGdvaW5nIG9uLiBJdCdzIGVhc3kgdG8gZm9yZ2V0IHRoYXQgdGhlcmUgYXJlIHNvIG1hbnkgcGVvcGxlIHN0YXJ2aW5nIHRvIGRlYXRoIGV2ZXJ5IHNpbmdsZSBkYXkuXCIsXCJUaGUgam9rZXMgYXJlIGdyZWF0IGJ1dCB3aGF0IHJlYWxseSBtYXR0ZXJzIGZvciBhIGNvbWVkaWFuIGlzIGhpcyBwZXJmb3JtYW5jZSwgaGlzIHdob2xlIGF0dGl0dWRlLCBhbmQgdGhlIGxhdWdocyB0aGF0IGhlIGdldHMgYmV0d2VlbiB0aGUgam9rZXMgcmF0aGVyIHRoYW4gb24gdG9wIG9mIHRoZSBqb2tlcy5cIixcIlRoZXJlIHdlcmUgYSBmZXcgdGVhY2hlcnMgd2hvIGp1c3QgZGlkIG5vdCBsaWtlIG1lIGJlY2F1c2Ugb2YgbXkgZmFjZS4gT25jZSwgSSB3YXMgdG9sZCB0byBzdGFuZCBpbiB0aGUgY29ybmVyIHVudGlsIEkgY2hlZXJlZCB1cC4gVGhlIGF0dGl0dWRlIHdhcywgJ09oLCBmb3IgR29kJ3Mgc2FrZSwgd2hhdCdzIHRoZSBtYXR0ZXIgd2l0aCBoaW0/JyBCdXQgaXQncyBqdXN0IGEgbmF0dXJhbCBleHByZXNzaW9uLlwiLFwiSSdtIGp1c3QgcGFydCBvZiBhIHRyYWRpdGlvbiBvZiBwZW9wbGUgd2hvIGFyZW4ndCBwbGVhc2VkLiBJIHdvdWxkIG5ldmVyIHRoaW5rIGFueW9uZSBlbHNlIHdobyBoYXMgdGhlIHNhbWUgYXR0aXR1ZGUgd2FzIGdldHRpbmcgaXQgZnJvbSBtZS4gSSdkIGp1c3QgdGhpbmsgdGhleSdyZS4uLiBzZW5zaWJsZS5cIixcIlRoZSBrZXkgdG8gbGlmZSBpcyB5b3VyIGF0dGl0dWRlLiBXaGV0aGVyIHlvdSdyZSBzaW5nbGUgb3IgbWFycmllZCBvciBoYXZlIGtpZHMgb3IgZG9uJ3QgaGF2ZSBraWRzLCBpdCdzIGhvdyB5b3UgbG9vayBhdCB5b3VyIGxpZmUsIHdoYXQgeW91IG1ha2Ugb2YgaXQuIEl0J3MgYWJvdXQgbWFraW5nIHRoZSBiZXN0IG9mIHlvdXIgbGlmZSB3aGVyZXZlciB5b3UgYXJlIGluIGxpZmUuXCIsXCJJZiB5b3UgZ2V0IGEgZGlhZ25vc2lzLCBnZXQgb24gYSB0aGVyYXB5LCBrZWVwIGEgZ29vZCBhdHRpdHVkZSBhbmQga2VlcCB5b3VyIHNlbnNlIG9mIGh1bW9yLlwiLFwiV2hlbiBhIHdvbWFuIHB1dHMgb24gYSBoZWVsLCBzaGUgaGFzIGEgZGlmZmVyZW50IHBvc3R1cmUsIGEgZGlmZmVyZW50IGF0dGl0dWRlLiBTaGUgcmVhbGx5IHN0YW5kcyB1cCBhbmQgaGFzIGEgY29uc2Npb3VzbmVzcyBvZiBoZXIgYm9keS5cIixcIldoZW5ldmVyIEknbSBoYXZpbmcgYSBiYWQgZGF5IGFuZCBoYXZlIGFuIGF0dGl0dWRlLCBJIHN0YXkgaG9tZS4gSSBrZWVwIGl0IGF0IGhvbWUuXCIsXCJZb3UgZG9uJ3QgaGF2ZSB0byBoYXZlIGFuIGF0dGl0dWRlIGlmIHlvdSdyZSBmYW1vdXMuXCIsXCJJIG5lZWQgdGhhdCBhZ2dyZXNzaXZlIGF0dGl0dWRlIHRvIHBsYXkgbXkgbXVzaWMgYW5kIG1vcmUgbWVuIGhhdmUgdGhhdCBhdHRpdHVkZSB0aGFuIHdvbWVuLlwiLFwiQnV0IEplc3VzIGNoYW5nZXMgeW91ciBhdHRpdHVkZSB0b3dhcmRzIHlvdXJzZWxmIGFuZCB0b3dhcmRzIG90aGVyIHBlb3BsZS5cIixcIkJ1dCBJIHRoaW5rIGJhbmRzIHRoYXQgcm9sbGVkIGluIHdpdGggYSBiaWcgYXR0aXR1ZGUsIGxpa2UgdGhleSB3ZXJlIHNvbWUgYmlnIGRlYWwsIEkganVzdCBmb3VuZCB0aGF0IHZlcnkgc3RyYW5nZS5cIixcIldoYXQgaXJyaXRhdGVzIG1lIGlzIHRoZSBibGFuZCB3YXkgcGVvcGxlIGdvIGFyb3VuZCBzYXlpbmcsICdPaCwgb3VyIGF0dGl0dWRlIGhhcyBjaGFuZ2VkLiBXZSBkb24ndCBkaXNsaWtlIHRoZXNlIHBlb3BsZSBhbnkgbW9yZS4nIEJ1dCBieSB0aGUgc3RyYW5nZXN0IGNvaW5jaWRlbmNlLCB0aGV5IGhhdmVuJ3QgdGFrZW4gYXdheSB0aGUgaW5qdXN0aWNlIHRoZSBsYXdzIGFyZSBzdGlsbCBvbiB0aGUgYm9va3MuXCIsXCJUaGVyZSBpcyBkZWZpbml0ZWx5IHNvbWV0aGluZyBzZXh5IGFib3V0IGEgZ2lybCB3aXRoIGFuIGF0dGl0dWRlIGFuZCBhIHBhaXIgb2YgbGVhdGhlciBwYW50cy5cIixcIlRoZSBwaGVub21lbm9uIG9mIGhvbWUgc2Nob29saW5nIGlzIGEgd29uZGVyZnVsIGV4YW1wbGUgb2YgdGhlIEFtZXJpY2FuIGNhbi1kbyBhdHRpdHVkZS4gR3Jvd2luZyBudW1iZXJzIG9mIHBhcmVudHMgaGF2ZSBiZWNvbWUgZGlzZW5jaGFudGVkIHdpdGggZ292ZXJubWVudC1ydW4gcHVibGljIHNjaG9vbHMuIE1hbnkgcGFyZW50cyBoYXZlIHNpbXBseSB0YWtlbiBtYXR0ZXJzIGludG8gdGhlaXIgb3duIGhhbmRzLCBsaXRlcmFsbHkuXCIsXCJSZWdhcmRsZXNzIG9mIHdoYXQgb25lJ3MgYXR0aXR1ZGUgdG93YXJkcyBwcm9oaWJpdGlvbiBtYXkgYmUsIHRlbXBlcmFuY2UgaXMgc29tZXRoaW5nIGFnYWluc3Qgd2hpY2gsIGF0IGEgdGltZSBvZiB3YXIsIG5vIHJlYXNvbmFibGUgcHJvdGVzdCBjYW4gYmUgbWFkZS5cIixcIkF0IGhvbWUgaW4gSXJlbGFuZCwgdGhlcmUncyBhIGhhYml0IG9mIGF2b2lkYW5jZSwgYW4gaXJvbmljYWwgYXR0aXR1ZGUgdG93YXJkcyB0aGUgYXV0aG9yaXR5IGZpZ3VyZS5cIixcIkV2ZW4gaWYgcGVvcGxlIGRvIHdyb25nLCB3ZSdyZSBzb2NpYWwgYW5pbWFscywgc28gd2hhdCBjYW4gd2UgZG8gYWJvdXQgc3RvcHBpbmcgdGhlbSBkb2luZyB0aGUgc2FtZSB0aGluZ3MgaW4gZnV0dXJlPyBTYXlpbmcgcGVvcGxlIGFyZSAnYmFkJyBvciAnZXZpbCcgaXMganVzdCBhbiB1bndpbGxpbmduZXNzIHRvIGVuZ2FnZSBhbiB1bndpbGxpbmduZXNzIHRvIHRyeSB0byBlbXBhdGhpc2UuIFRoYXQgc2FuY3RpbW9uaW91cyBhdHRpdHVkZSBkb2Vzbid0IGhlbHAgYW55b25lLlwiLFwiUGVvcGxlIGhhdmUgb2Z0ZW4gYXNrZWQgaWYgSSdtIGdheSBiZWNhdXNlIEkgZG9uJ3QgZ28gb3V0IG9mIG15IHdheSB0byBzcGl0IGFuZCBzY3JhdGNoIGFuZCBnaXZlIHBlb3BsZSBhdHRpdHVkZS5cIixcIkkgZG9uJ3QgcmV0dXJuIGFueWJvZHkncyBjYWxscyB1bmxlc3MgaXQncyBnb2luZyB0byBtZWFuIGV4dHJhIG1vbmV5IGZvciBtZS4gQW5kIEkndmUgY29tcGxldGVseSBjdXQgb2ZmIGFsbCByZWxhdGlvbnNoaXBzIHdpdGggYW55IGZyaWVuZHMgdGhhdCBJIGhhZCBiZWZvcmUgdGhlIHNob3cuIEFuZCBJJ3ZlIGNvcHBlZCBhbiBhdHRpdHVkZS5cIixcIkEgcG9zaXRpdmUgYXR0aXR1ZGUgaXMgc29tZXRoaW5nIGV2ZXJ5b25lIGNhbiB3b3JrIG9uLCBhbmQgZXZlcnlvbmUgY2FuIGxlYXJuIGhvdyB0byBlbXBsb3kgaXQuXCIsXCJNeSBmZWVsaW5ncyBhYm91dCBteSBtb3J0YWxpdHkgYXJlIGxlc3Mgc2VsZmlzaCB0aGFuIHRoZXkgdXNlZCB0byBiZS4gSSB1c2VkIHRvIGFmZmVjdCBhIGNhdmFsaWVyIGF0dGl0dWRlIHRvIGRlYXRoIG5vdyBJIHNlZSBpdCBmcm9tIG15IHNvbidzIHBlcnNwZWN0aXZlLlwiLFwiVGhlIFUuUy4gdHJpZXMgdG8gcHJvdmlkZSBpbW1pZ3JhbnRzIHdobyBncm93IHVwIGhlcmUgd2l0aCBhIHdvcmxkLWNsYXNzIGVkdWNhdGlvbiBhbmQgaW1idWUgdGhlbSB3aXRoIHRoZSBjYW4tZG8gYXR0aXR1ZGUgdGhhdCBoYXMgbG9uZyBkZWZpbmVkIEFtZXJpY2FuIGlubm92YXRpb24uXCIsXCJUaGUgYXR0aXR1ZGUgb2YgaW5kZXBlbmRlbmNlIHRvd2FyZCBhIGNvbnN0cnVjdGVkIGxhbmd1YWdlIHdoaWNoIGFsbCBuYXRpb25hbCBzcGVha2VycyBtdXN0IGFkb3B0IGlzIHJlYWxseSBhIGdyZWF0IGFkdmFudGFnZSwgYmVjYXVzZSBpdCB0ZW5kcyB0byBtYWtlIG1hbiBzZWUgaGltc2VsZiBhcyB0aGUgbWFzdGVyIG9mIGxhbmd1YWdlIGluc3RlYWQgb2YgaXRzIG9iZWRpZW50IHNlcnZhbnQuXCIsXCJJIGZlZWwgbGlrZSBJIGhhdmUgYXMgZ29vZCBhIHNob3QgYXMgYW55Ym9keSBvdXQgdGhlcmUgYW5kIEkgaGF2ZSBnb3R0ZW4gY2xvc2UgaW4gdGhlIHBhc3QsIHNvIHdoeSBub3QgaGF2ZSB0aGUgYXR0aXR1ZGUgdGhhdCBJIGNhbiBjb21lIG91dCBhbmQgcGxheSBncmVhdCB0ZW5uaXMgYW5kIG1heWJlIGV2ZW4gd2luIHRoaXMgdG91cm5hbWVudC5cIixcIkFydCBpcyB0aGUgY2hpbGQgb2YgTmF0dXJlIHllcywgaGVyIGRhcmxpbmcgY2hpbGQsIGluIHdob20gd2UgdHJhY2UgdGhlIGZlYXR1cmVzIG9mIHRoZSBtb3RoZXIncyBmYWNlLCBoZXIgYXNwZWN0IGFuZCBoZXIgYXR0aXR1ZGUuXCIsXCJJIGp1c3QgdGhpbmsgdGhhdCBwZW9wbGUgdGFrZSBtZSBhIGxpdHRsZSBtb3JlIHNlcmlvdXNseSBhcyBhIGJydW5ldHRlLiBJIGRvbid0IGtub3cgaWYgdGhhdCdzIGp1c3QgYmVjYXVzZSBvZiBhIHNvY2lldGFsIHByZWNvbmNlaXZlZCBub3Rpb24gdGhhdCBhbGwgYmxvbmRlcyBhcmUgc3R1cGlkLCBidXQgaXQncyBhIGRpZmZlcmVudCBraW5kIG9mIGF0dGl0dWRlLlwiLFwiSSBjYW1lIGJhY2sgdG8gcGVyZm9ybWluZyB3aXRoIGEgZGlmZmVyZW50IGF0dGl0dWRlIGFib3V0IHBlcmZvcm1pbmcgYW5kIG15c2VsZi4gSSB3YXNuJ3QgZXhwZWN0aW5nIHBlcmZlY3Rpb24gYW55IG1vcmUsIGp1c3QgaG9waW5nIGZvciBhbiBvY2Nhc2lvbmFsIGluc3BpcmF0aW9uLlwiLFwiVGhlIHB1cmVseSBhZ2l0YXRpb24gYXR0aXR1ZGUgaXMgbm90IGdvb2QgZW5vdWdoIGZvciBhIGRldGFpbGVkIGNvbnNpZGVyYXRpb24gb2YgYSBzdWJqZWN0LlwiLFwiQW5pbWFscyBoYXZlIGEgbXVjaCBiZXR0ZXIgYXR0aXR1ZGUgdG8gbGlmZSBhbmQgZGVhdGggdGhhbiB3ZSBkby4gVGhleSBrbm93IHdoZW4gdGhlaXIgdGltZSBoYXMgY29tZS4gV2UgYXJlIHRoZSBvbmVzIHRoYXQgc3VmZmVyIHdoZW4gdGhleSBwYXNzLCBidXQgaXQncyBhIGhlYWxpbmcga2luZCBvZiBncmllZiB0aGF0IGVuYWJsZXMgdXMgdG8gZGVhbCB3aXRoIG90aGVyIGdyaWVmcyB0aGF0IGFyZSBub3Qgc28gZWFzeSB0byBncmFiIGhvbGQgb2YuXCIsXCJPbmx5IG9uZSB0aGluZyBjYW4gY29ucXVlciB3YXIgLSB0aGF0IGF0dGl0dWRlIG9mIG1pbmQgd2hpY2ggY2FuIHNlZSBub3RoaW5nIGluIHdhciBidXQgZGVzdHJ1Y3Rpb24gYW5kIGFubmloaWxhdGlvbi5cIixcIkl0J3Mgbm90IHRvbyBnb29kIHRvIGhhdmUgdGhpcyBhdHRpdHVkZSBpbiBGMS4gSXQgY291bGQgYmUgYSBkaXNhZHZhbnRhZ2UuXCIsXCJJIGp1c3QgcmVhbGx5IHRoaW5rIGV2ZXJ5IGpvYiBJIGRvLCBJIGdldCB0aGlzIGd5cHN5IGF0dGl0dWRlIHRvIG1vbmV5LlwiLFwiTXkgcGVyc29uYWwgdmlldyBpcyB0aGF0IHN1Y2ggdG90YWwgcGxhbm5pbmcgYnkgdGhlIHN0YXRlIGlzIGFuIGFic29sdXRlIGdvb2QgYW5kIG5vdCBzaW1wbHkgYSByZWxhdGl2ZSBnb29kLi4uIEkgZG8gbm90IG15c2VsZiB0aGluayBvZiB0aGUgYXR0aXR1ZGUgSSB0YWtlIGFzIGRlcml2aW5nIGZyb20gTWFyeCAtIHRob3VnaCB0aGlzIHVuZG91YnRlZGx5IHdpbGwgYmUgc3VnZ2VzdGVkIC0gYnV0IGZyb20gRmljaHRlIGFuZCBIZWdlbC5cIixcIlRoZXJlJ3MgYSBwdW5rLXJvY2sgYXR0aXR1ZGUsIGNsZWFybHksIHRvICdIYXRlZC4nIFRoZXJlJ3MgZXZlbiBhIHB1bmstcm9jayBhdHRpdHVkZSB0byAnVGhlIEhhbmdvdmVyLCcgSSB0aGluay4gV2Ugc3RhcnQgdGhlIG1vdmllIHdpdGggYSBHbGVubiBEYW56aWcgc29uZy5cIixcIlRoZSBBbWVyaWNhbiBhdHRpdHVkZSBpcyAnV2UncmUgdGhlIGJlc3QnLiBUaGF0J3Mgd2h5IHRoZSBOQkEgZ3V5cyB3aG8gY29tZSBmcm9tIG90aGVyIGNvdW50cmllcywgdGhlIEV1cm9wZWFucywgYWxsIHNvcnQgb2Ygc3RpY2sgdG9nZXRoZXIgYXdheSBmcm9tIHRoZSBnYW1lLlwiLFwiVGhlIHByb2JsZW0gd2FzIGp1c3QgYSBtZWFuIGF0dGl0dWRlIHRoYXQgZmVzdGVycyBhbmQgaGFzIHRvIGJlIGNoYWxsZW5nZWQuXCIsXCJJJ20gbm90IGFudGktZmFzaGlvbiwgYnV0IEkndmUgYWx3YXlzIGhhZCBhIGJpdCBvZiBhIHB1bmsgYXR0aXR1ZGUuIFRoYXQncyBpbXBvcnRhbnQsIEkgdGhpbmsuIEkgZG8gbXkgb3duIHRoaW5nLlwiLFwiVG8gc28gZW50ZXIgaW50byBpdCBpbiBuYXR1cmUgYW5kIGFydCB0aGF0IHRoZSBlbmpveWVkIG1lYW5pbmdzIG9mIGxpZmUgbWF5IGJlY29tZSBhIHBhcnQgb2YgbGl2aW5nIGlzIHRoZSBhdHRpdHVkZSBvZiBhZXN0aGV0aWMgYXBwcmVjaWF0aW9uLlwiLFwiVGhlIHRyYWRpdGlvbmFsIENocmlzdGlhbiBhdHRpdHVkZSB0b3dhcmQgaHVtYW4gcGVyc29uYWxpdHkgd2FzIHRoYXQgaHVtYW4gbmF0dXJlIHdhcyBlc3NlbnRpYWxseSBnb29kIGFuZCB0aGF0IGl0IHdhcyBmb3JtZWQgYW5kIG1vZGlmaWVkIGJ5IHNvY2lhbCBwcmVzc3VyZXMgYW5kIHRyYWluaW5nLlwiLFwiTXkgcGFyZW50cyBoYXZlIGEgc3Ryb25nIHdvcmsgZXRoaWMsIGJ1dCB0aGVpciBhdHRpdHVkZSB0byBsaWZlLCB0aGVpciBwaGlsb3NvcGh5LCBpczogJ3doYXRldmVyIG1ha2VzIHlvdSBoYXBweS4nXCIsXCJCb2IgQWx0bWFuIGhhZCB0aGlzIHJlbGF4ZWQgYnV0IHNlcmlvdXMgYXR0aXR1ZGUuIEV2ZXJ5Ym9keSBsb3ZlZCBoaW0uIEkgd2FudGVkIGhpbSB0byBhZG9wdCBtZS5cIixcIlRoZSBwb29sIGlzIHRlcnJpYmxlLCBidXQgdGhhdCBkb2Vzbid0IGhhdmUgbXVjaCB0byBkbyB3aXRoIG15IHJlY29yZCBzd2ltcy4gVGhhdCdzIGFsbCBtZW50YWwgYXR0aXR1ZGUuXCIsXCJGYW1lIGNhbiBiZSBqdXN0IHNvIGFubm95aW5nIGJlY2F1c2UgcGVvcGxlIGFyZSBzbyBjcml0aWNhbCBvZiB5b3UuIFlvdSBjYW4ndCBqdXN0IHNheSwgJ2hpJy4gWW91IHNheSBoaSBhbmQgcGVvcGxlIHdoaXNwZXInIG1hbiBkaWQgeW91IHNlZSB0aGUgd2F5IHNoZSBzYWlkIGhpPyBXaGF0IGFuIGF0dGl0dWRlLlwiLFwiTXkgZGFkIGluc3RpbGxlZCBpbiBtZSBhIGdyZWF0IHNlbnNlIG9mIGh1bW9yLiBJIHdhc24ndCBidWxsaWVkIGF0IHNjaG9vbCBiZWNhdXNlIG15IG91dHdhcmQgYXR0aXR1ZGUgd2FzIGNvbmZpZGVudCwgYW5kIHRoYXQgaGVscHMuXCIsXCJUaGUgYXR0aXR1ZGUgYW5kIGNhcGFjaXR5IG9mIHRoZSBmYWN0b3J5LCB0aGUgb2xkIG1ldGFsIHRhYmxlIGFuZCB0aGUgbmV3IGlkZWFzIG9mIHRoZSB3b29kZW4gZnVybml0dXJlIHF1aWNrbHkgYW5kIG5hdHVyYWxseSBzdWdnZXN0ZWQgdGhlIHBvc3NpYmlsaXR5IG9mIG1ldGFsIGZ1cm5pdHVyZS5cIixcIllvdSBjYW4gbWVhc3VyZSBhIHByb2dyYW1tZXIncyBwZXJzcGVjdGl2ZSBieSBub3RpbmcgaGlzIGF0dGl0dWRlIG9uIHRoZSBjb250aW51aW5nIHZpdGFsaXR5IG9mIEZPUlRSQU4uXCIsXCJMZXQgdXMgY2hhbmdlIG91ciB0cmFkaXRpb25hbCBhdHRpdHVkZSB0byB0aGUgY29uc3RydWN0aW9uIG9mIHByb2dyYW1zLiBJbnN0ZWFkIG9mIGltYWdpbmluZyB0aGF0IG91ciBtYWluIHRhc2sgaXMgdG8gaW5zdHJ1Y3QgYSBjb21wdXRlciB3aGF0IHRvIGRvLCBsZXQgdXMgY29uY2VudHJhdGUgcmF0aGVyIG9uIGV4cGxhaW5pbmcgdG8gaHVtYW4gYmVpbmdzIHdoYXQgd2Ugd2FudCBhIGNvbXB1dGVyIHRvIGRvLlwiLFwiSXQgZ29lcyB3aXRob3V0IHNheWluZyB0aGF0IHRoZSBKZXdpc2ggcGVvcGxlIGNhbiBoYXZlIG5vIG90aGVyIGdvYWwgdGhhbiBQYWxlc3RpbmUgYW5kIHRoYXQsIHdoYXRldmVyIHRoZSBmYXRlIG9mIHRoZSBwcm9wb3NpdGlvbiBtYXkgYmUsIG91ciBhdHRpdHVkZSB0b3dhcmQgdGhlIGxhbmQgb2Ygb3VyIGZhdGhlcnMgaXMgYW5kIHNoYWxsIHJlbWFpbiB1bmNoYW5nZWFibGUuXCIsXCJUaGF0IGF0dGl0dWRlIHRvd2FyZCB3b21lbiBhcyBvYmplY3RzIG1heSBoYXZlIHdvcmtlZCBmb3IgdGhlIGxhdGUgU2l4dGllcywgYnV0IGl0IGRvZXNuJ3QgZG8gc28gbm93LlwiLFwiVGhlIHRpbWUgSSBzcGVudCB0aGlua2luZyBhYm91dCBob3cgSSB3YXMgYmV0dGVyIHRoYW4gc29tZWJvZHkgZWxzZSBvciB3b3JyeWluZyBhYm91dCBzb21lYm9keSBlbHNlJ3MgYXR0aXR1ZGUgd2FzIHRpbWUgSSBjb3VsZCBwdXQgdG8gYmV0dGVyIHVzZS5cIixcIkkgcmVhbGx5IGJlbGlldmUgeW91IGNhbiBwcmVkaWN0IHdoZW4gc29tZW9uZSBoYXMgYSBncmVhdCBhdHRpdHVkZSwgYSByZWFsIHdlbGwgb2YgdGFsZW50LlwiLFwiSXQgaXMgaW1wb3NzaWJsZSB0byBleGFnZ2VyYXRlIHRoZSB3aWRlLCBhbmQgd2lkZW5pbmcsIGd1bGYgYmV0d2VlbiB0aGUgQW1lcmljYW4gYXR0aXR1ZGUgb24gdGhlIElyYXEgd2FyIGFuZCB0aGUgdmlldyBmcm9tIG91ciBmcmllbmRzIGFjcm9zcyB0aGUgQXRsYW50aWMuXCIsXCJBcyBhIHRlYW0sIHlvdSBuZWVkIHRvIGNvbWUgZnJvbSBiZWhpbmQgZXZlcnkgb25jZSBpbiBhd2hpbGUganVzdCB0byBkbyBpdC4gR29vZCBmb3IgdGhlIGF0dGl0dWRlLiBJdCBtYWtlcyBpdCBleGNpdGluZy4gQW5kIHdoZW4gZXZlcnlib2R5IGtub3dzIHlvdSBoYXZlIHRvIHRocm93IGl0Li4uIHRoYXQgbWFrZXMgaXQgZnVuIHRvby5cIixcIkkgaG9wZSAnVGhlIFZvaWNlJyBoYXMgYSBmaWZ0ZWVuLXllYXIgcnVuLCBkb24ndCBnZXQgbWUgd3JvbmcuIEJ1dCBJIGNvbWUgZnJvbSBub3RoaW5nLCBhbmQgbWF5YmUgaXQncyB0aGUgSXJpc2ggaW4gbWUsIGJ1dCBteSBhdHRpdHVkZSBpcyBhbHdheXMgbGlrZSwgJ1RoZXknbGwgZmlndXJlIG1lIG91dCBzb29uLidcIixcIlRpbWUgcGxheXMgYSByb2xlIGluIGFsbW9zdCBldmVyeSBkZWNpc2lvbi4gQW5kIHNvbWUgZGVjaXNpb25zIGRlZmluZSB5b3VyIGF0dGl0dWRlIGFib3V0IHRpbWUuXCIsXCInVUZPJ3MnIGF0dGl0dWRlIHRvd2FyZCB0aGUgc3ViamVjdCBpcyB2ZXJ5IHNpbWlsYXIgdG8gbWluZS4gSXQncyBub3QgYW4gYWR2b2NhY3kgaXRzIHBoaWxvc29waHkgaXMgbW9yZSAnSSB3YW50IHRvIGJlbGlldmUgdGhpcywgYnV0IEkgd2FudCBpdCBwcm92ZWQuJ1wiLFwiVGhlIG11c2ljIGlzIGZpcnN0IGFuZCBmb3JlbW9zdCBldmVyeXRoaW5nIC0gbm8gZWdvcywgbm8gYXR0aXR1ZGUsIG5vdGhpbmcgLSBpdCdzIGFib3V0IHRoZSBtdXNpYy5cIixcIkJ1dCBoYXZpbmcgc2FpZCB0aGF0LCB0aGVyZSdzIGFsc28gYSBzZWEgY2hhbmdlIGluIGF0dGl0dWRlIHRvd2FyZHMgbWVkaWEuXCIsXCJJbiB0aGUgV2VzdCwgeW91IGhhdmUgYWx3YXlzIGFzc29jaWF0ZWQgdGhlIElzbGFtaWMgZmFpdGggMTAwIHBlcmNlbnQgd2l0aCBBcmFiIGN1bHR1cmUuIFRoaXMgaW4gaXRzZWxmIGlzIGEgZnVuZGFtZW50YWxpc3QgYXR0aXR1ZGUgYW5kIGl0IGlzIG1pc3Rha2VuLlwiLFwiSmF6eiBpbiBpdHNlbGYgaXMgbm90IHN0cnVnZ2xpbmcuIFRoYXQgaXMsIHRoZSBtdXNpYyBpdHNlbGYgaXMgbm90IHN0cnVnZ2xpbmcuLi4gSXQncyB0aGUgYXR0aXR1ZGUgdGhhdCdzIGluIHRyb3VibGUuIE15IHBsYXlzIGluc2lzdCB0aGF0IHdlIHNob3VsZCBub3QgZm9yZ2V0IG9yIHRvc3MgYXdheSBvdXIgaGlzdG9yeS5cIixcIkFzIHRoZSB0aW1lIGdvZXMgYnksIHlvdSBjaGFuZ2UsIHlvdXIgbGVhcm4gbmV3IHRoaW5ncywgeW91ciBhdHRpdHVkZSBpcyBkaWZmZXJlbnQuIEZvciB0aGUgbW9tZW50LCBJJ20gc3RpbGwgZW5qb3lpbmcgc2tpIHJhY2luZyBzbyBtdWNoIHRoYXQgaXQgd291bGQgYmUgZGlmZmljdWx0IGZvciBtZSB0byB0aGluayBhYm91dCBlbmRpbmcgbXkgY2FyZWVyLlwiLFwiTXkgYXR0aXR1ZGUgb24gc2tpcyBpcyBkaWZmZXJlbnQgbm93LiBJIGhhdmUgbGVhcm5lZCB0byBwdXQgbGVzcyBwcmVzc3VyZSBvbiBteXNlbGYgYW5kIG9uIHRoZSBlZGdlcyBvZiBteSBza2lzIHdoZW4gSSdtIHJhY2luZywgdG8gYmUga2VlcCBteXNlbGYgbW9yZSB1bmRlciBjb250cm9sLlwiLFwiT3VyIGF0dGl0dWRlIGlzIHRoYXQgd2Ugd2FudCB0byBjcm9zcyBvdmVyLiBZb3UgY2FuJ3QgZ28gb24gbWFraW5nIHJlY29yZHMganVzdCBmb3IgeW91ciBvd24gaG9tZXRvd24uXCIsXCJJIGRvIG5vdCBzaGFyZSB0aGUgaGFsZi1pbiwgaGFsZi1vdXQgYXR0aXR1ZGUgdG8gdGhlIEVVIG9mIHNvbWUgaW4gQnJpdGFpbi4gQnJpdGFpbidzIHBsYWNlIGlzIGluIEV1cm9wZS5cIixcIkkgdGhpbmsgdGhhdCB0aGUgVS5TLiBkb2VzIGhhdmUgdGhpcyB2ZXJ5IG11Y2ggbW9yZSBvcGVuIGF0dGl0dWRlLCBhbmQgSSBhZG1pcmUgaXQgdmVyeSBtdWNoIGFuZCBJIHRoaW5rIGl0J3MgdmVyeSBpbXBvcnRhbnQgdG8gdGhlIHdvcmxkLiBCdXQgdGhlIGluZm9ybWF0aW9uIGFuZCB0aGUgZGlzY3Vzc2lvbiBzb21ldGltZXMgY29tZSB0b28gbGF0ZSwgYWZ0ZXIgdGhlIGVmZmVjdGl2ZSBkZWNpc2lvbiBoYXMgYmVlbiBtYWRlLlwiLFwiVGhlIFN0b25lcyBhcmUgYSBkaWZmZXJlbnQga2luZCBvZiBncm91cC4gSSByZWFsaXplZCB0aGF0IHdoZW4gSSBqb2luZWQgdGhlbS4gSXQncyBub3QgcmVhbGx5IHNvIG11Y2ggdGhlaXIgbXVzaWNhbCBhYmlsaXR5LCBpdCdzIGp1c3QgdGhleSBoYXZlIGEgY2VydGFpbiBraW5kIG9mIHN0eWxlIGFuZCBhdHRpdHVkZSB3aGljaCBpcyB1bmlxdWUuXCIsXCJFdmVuIHdpdGgsIG9yIHBlcmhhcHMsIGJlY2F1c2Ugb2YsIHRoaXMgYmFja2dyb3VuZCwgSSBoYXZlIG92ZXIgdGhlIHBhc3QgZmV3IHllYXJzIHNlbnNlZCBhIHZlcnkgZHJhbWF0aWMgY2hhbmdlIGluIGF0dGl0dWRlIG9uIHRoZSBwYXJ0IG9mIFByaW5jZSBFZHdhcmQgSXNsYW5kZXJzIHRvd2FyZHMgdGhlIG9uLWdvaW5nIHJ1c2ggZm9yIHNvLWNhbGxlZCBtb2Rlcm5pemF0aW9uLlwiLFwiSWYgeW91J3JlIGxvb2tpbmcgZm9yIGNhbi1kbywgZWFydGh5LWNydW5jaHkgYXR0aXR1ZGUgdGhlbiB5b3UndmUgZ290IHRvIGdvIHRvIFdpc2NvbnNpbi5cIixcIldoZW4gSSB3YXMgaW4gbXkgMjBzIGl0IGRpZCBvY2N1ciB0byBtZSB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgcGVydmVydGVkIGFib3V0IGFuIGF0dGl0dWRlIHRoYXQgdGhvdWdodCB0aGF0IGtpbGxpbmcgc29tZWJvZHkgd2FzIGEgbWlub3Igb2ZmZW5jZSBjb21wYXJlZCB0byBraXNzaW5nIHNvbWVib2R5LlwiLFwiWW91IGNhbiBoYXZlIGEgbGF1Z2ggaW4gTG9zIEFuZ2VsZXMsIG9yIHlvdSBjYW4gd2VlcCBpbiBMb3MgQW5nZWxlcywgZGVwZW5kaW5nIG9uIHlvdXIgYXR0aXR1ZGUgdG93YXJkcyBpdC5cIixcIlBlb3BsZSBhcmUgcGF0cm9uaXppbmcgdGhlIHRoZWF0cmVzIHdpdGggcmVuZXdlZCBlbnRodXNpYXNtIC0gdGhlcmUgaXMgYW4gZW50aXJlIHBpY25pYy1saWtlIGF0dGl0dWRlIHdoZW4gZmFtaWxpZXMgZ28gb3V0IHRvIHNlZSBtb3ZpZXMsIHdoaWNoIGlzIGEgdmVyeSBnb29kIHNpZ24uIFRoZXkgd2FudCB0byBzZWUgbGFyZ2VyLXRoYW4tbGlmZSBjaGFyYWN0ZXJzIG9uIHRoZSBiaWcgc2NyZWVuIGFuZCBub3QganVzdCB3YXRjaCBtb3ZpZXMgb24gdGVsZXZpc2lvbiBvciBvbiBEVkRzLlwiLFwiSSBqdXN0IHdhbnQgdG8gZ28gaW4gd2l0aCB0aGUgcmlnaHQgYXR0aXR1ZGUgYW5kIGZyb20gRGF5IDEgbWFrZSBhIGRpZmZlcmVuY2UuXCIsXCJUaGUgdGhlYXRyZSBvbmx5IGtub3dzIHdoYXQgaXQncyBkb2luZyBuZXh0IHdlZWssIG5vdCBsaWtlIHRoZSBvcGVyYSwgd2hlcmUgdGhleSBzYXk6IFdoYXQgYXJlIHdlIGdvaW5nIHRvIGRvIGluIGZpdmUgeWVhcnMnIHRpbWU/IEEgY29tcGxldGVseSBkaWZmZXJlbnQgYXR0aXR1ZGUuXCIsXCJJJ20gbm90IGEgbXVzaWMgbG92ZXIgaW4gdGhlIHNlbnNlIHRoYXQgSSBsb29rIGZvciBzb21ldGhpbmcgdG8gaGF2ZSBvbi4gSSd2ZSBuZXZlciBoYWQgdGhhdCBhdHRpdHVkZSB0byBtdXNpYy5cIixcIkkgdGhpbmsgb25lIG9mIHRoZSB0aGluZ3MgdGhhdCBsYW5ndWFnZSBwb2V0cyBhcmUgdmVyeSBpbnZvbHZlZCB3aXRoIGlzIGdldHRpbmcgYXdheSBmcm9tIGNvbnZlbnRpb25hbCBpZGVhcyBvZiBiZWF1dHksIGJlY2F1c2UgdGhvc2UgaWRlYXMgY29udGFpbiBhIGNlcnRhaW4gYXR0aXR1ZGUgdG93YXJkIHdvbWVuLCBjZXJ0YWluIGF0dGl0dWRlcyB0b3dhcmQgc2V4LCBjZXJ0YWluIGF0dGl0dWRlcyB0b3dhcmQgcmFjZSwgZXRjLlwiLFwiV2hlbiB5b3UgR29vZ2xlIG1lLCB5b3UnbGwgZmluZCBhIGxvdCBvZiBwZW9wbGUgZG9uJ3QgbGlrZSBSaWNoYXJkIERyZXlmdXNzLiBCZWNhdXNlIEknbSBjb2NreSBhbmQgSSBwcmVzZW50IGEgY29ja3kgYXR0aXR1ZGUuIEJ1dCBubyBvbmUgaGFzIGV2ZXIgZGlzYWdyZWVkIHdpdGggdGhlIG5vdGlvbiBJIHJlcHJlc2VudCwgdGhhdCB3ZSBuZWVkIG1vcmUgY2l2aWMgZWR1Y2F0aW9uLiBTbyBmYXIgdGhlcmUncyAxMDAgcGVyY2VudCBzdXBwb3J0IGZvciB0aGF0LlwiLFwiTXkgbW90aGVyLCBzaGUgaGFkIGEgdmVyeSBnb29kIGF0dGl0dWRlIHRvd2FyZCBtb25leS4gSSdtIHZlcnkgZ3JhdGVmdWwgZm9yIHRoZSBmYWN0IHRoYXQgd2UgaGFkIHRvIGxlYXJuIHRvIHNhdmUuIEkgdXNlZCB0byBnZXQgbGlrZSA1MCBwZW5jZSBhIHdlZWssIGFuZCBJJ2Qgc2F2ZSBpdCBmb3IgbGlrZSBmaXZlIG1vbnRocy4gQW5kIHRoZW4gSSdkIHNwZW5kIGl0IG9uIENocmlzdG1hcyBwcmVzZW50cy4gSSdkIHNhdmUgdXAgbGlrZSBlaWdodCBwb3VuZHMuIEl0J3Mgbm90aGluZywgYnV0IHdlIGRpZCB0aGF0LlwiLFwiVG9vIG1hbnkgcGVvcGxlIHNheSB0byB0aGVpciBicm9rZXJzLCBJIGNhbid0IGRlYWwgd2l0aCB0aGlzLiBUYWtlIG15IG1vbmV5LiBEbyB3aGF0IHlvdSB3YW50LiBUaGF0J3MgdGhlIHdvcnN0IGF0dGl0dWRlIHlvdSBjYW4gaGF2ZS5cIixcIklmIHBoaWxvc29waHkgaXMgcHJhY3RpY2UsIGEgZGVtYW5kIHRvIGtub3cgdGhlIG1hbm5lciBpbiB3aGljaCBpdHMgaGlzdG9yeSBpcyB0byBiZSBzdHVkaWVkIGlzIGVudGFpbGVkOiBhIHRoZW9yZXRpY2FsIGF0dGl0dWRlIHRvd2FyZCBpdCBiZWNvbWVzIHJlYWwgb25seSBpbiB0aGUgbGl2aW5nIGFwcHJvcHJpYXRpb24gb2YgaXRzIGNvbnRlbnRzIGZyb20gdGhlIHRleHRzLlwiLFwiSSBhbSBzaG9ja2VkIGJ5IHRoZSBlYXN5IGF0dGl0dWRlIG9mIG1hbnkgaW4gdGhlIG1lZGlhIHRvd2FyZHMgZGlzY2xvc2luZyBvdXIgTmF0aW9uJ3Mgc2VjcmV0cy5cIixcIkkgYWx3YXlzIGdpdmUgTGluZHNheSBzbyBtdWNoIGNyZWRpdCBmb3IgaGVyIHRlbm5pcyBnYW1lLCBmb3IgaGVyIGF0dGl0dWRlLCBmb3IgaGVyIHBlcnNvbiwgYW5kIGJlY2F1c2Ugb2YgaG93IHNoZSBkZWFscyB3aXRoIGFsbCB0aGUgdGhpbmdzLiBJIGRvbid0IHRoaW5rIHBlb3BsZSBnaXZlIGhlciBlbm91Z2ggY3JlZGl0IGZvciBob3cgd2VsbCBzaGUncyBkb2luZy5cIixcIkkgZG9uJ3Qga25vdyB0aGF0IEkgaGF2ZSBhbnkgcm9sZSBtb2RlbHMgbm93IHRoYXQgYXJlIGZpeGVkLiBEZWZpbml0ZWx5IG15IG1vbSAtIHNoZSdzIHRoZSBjb29sZXN0LiBTaGUncyB3b3JrZWQgcmVhbGx5IGhhcmQgaGVyIHdob2xlIGxpZmUgYW5kIEkganVzdCB0aGluayBzaGUncyBnb3QgYSBncmVhdCBhdHRpdHVkZS4gTW9tcyBqdXN0IGtub3cgc28gbXVjaCBpdCdzIHNvIHNpbGx5LlwiLFwiSXQncyB0cmlja3kuIEkndmUgbmV2ZXIgYmVlbiBzdGFuZGluZyBhdCB0aGUgdG9wIG9mIHRoZSB0cmVlIHdpdGggdG9ucyBvZiBtb25leSB0aHJvd24gYXQgbWUuIEkndmUgbmV2ZXIgcmVhbGx5IGhhZCBhIHByb2ZpbGUuIFNvIGluIGEgd2F5IEkgaGF2ZSB0aGlzICdub3RoaW5nIHRvIGxvc2UnIGF0dGl0dWRlLlwiLFwiTGVhZCBzaW5nZXJzIG5vdCBvbmx5IGRvIHRoZSBtYWpvcml0eSBvZiB0aGUgd29yaywgYnV0IHRoZWlyIHBlcnNvbmFsaXRpZXMgYXJlIHNpbmdsZWQgb3V0IGFuZCB0YWtlbiBhcyB0aGUgZ2VuZXJhbCBhdHRpdHVkZSBvZiB0aGUgdW5pdC5cIixcIkl0J3MgYmV0dGVyIGZvciBtZSB0byBwbGF5IHdpdGggZ3V5cyBiZWNhdXNlIFJvY2sgJ24nIFJvbGwgaGFzIHN1Y2ggYW4gYWdncmVzc2l2ZSBhdHRpdHVkZS5cIixcIkkgdGhpbmsgTmluYSBTaW1vbmUgaGFzIGhhZCBhbiBhbWF6aW5nIGpvdXJuZXkuIFNoZSB3YXMgc3BpY3kgYW5kIHNoZSBoYWQgYXR0aXR1ZGUgYW5kIHNoZSBkaWRuJ3QgY2FyZSwgc2hlIHdhbnRlZCBoZXIgbW9uZXkgaW4gYSBwYXBlciBiYWcgYW5kIGRvbid0IG1lc3Mgd2l0aCBtZSBhbmQgSSd2ZSBiZWVuIGRvaW5nIHNvbWUgcmVzZWFyY2ggb24gdGhhdCBzby5cIixcIkkga2luZCBvZiByZXNlbnQgdGhpcyBhdHRpdHVkZSBvZiBtZW4gdGhhdCB3ZSBzb21laG93IG11c3QgYWx3YXlzIGxvb2sgZ29vZC5cIixcIkJhbWJpIGNhbid0IGFjdC4gQmFtYmkgaGFkIG1ham9yIGF0dGl0dWRlLlwiLFwiSSdtIGEgYmlnIGZhbiBvZiBDb3VydG5leSBMb3ZlLiBJIGxvdmUgSG9sZSBhbmQgSSBsb3ZlIGhlciBhY3RpbmcgYW5kIEkgbG92ZSBoZXIgYXR0aXR1ZGUuIEkganVzdCBob3BlIEkgbmV2ZXIgbWVldCBoZXIgaW4gYSBkYXJrIGFsbGV5LlwiLFwiSSBkbyBzdXBwb3J0IGEgc2V4LXBvc2l0aXZlIGF0dGl0dWRlIGZvciB5b3VuZyBwZW9wbGUuIFVzZSBjb25kb21zLCB0aGF0J3MgaW1wb3J0YW50LiBJIGxvdmUgdGhlIGlkZWEgdGhhdCBwcm9taXNjdWl0eSBjYW4gYmUgaGVhbHRoeSBidXQgaXQncyBnb3Qgc29tZSBkb2RneSBjcmV2YXNzZXMuIE9vaCwgdGhhdCdzIGEgYmFkIHJlZmVyZW5jZSEgQnV0IGl0J3MgZ290IHNvbWUgZGFuZ2Vyb3VzIGNhdml0aWVzIHRoZXJlLiBZb3Uga25vdyB3aGF0IEknbSBzYXlpbmcuXCIsXCJUaGUgd2FyIGNoYW5nZWQgZXZlcnlib2R5J3MgYXR0aXR1ZGUuIFdlIGJlY2FtZSBpbnRlcm5hdGlvbmFsIGFsbW9zdCBvdmVybmlnaHQuXCIsXCJBcyBJIHdyb3RlLCBJIGZvdW5kIHRoYXQgQWliaWxlZW4gaGFkIHNvbWUgdGhpbmdzIHRvIHNheSB0aGF0IHJlYWxseSB3ZXJlbid0IGluIGhlciBjaGFyYWN0ZXIuIFNoZSB3YXMgb2xkZXIsIHNvZnQtc3Bva2VuLCBhbmQgc2hlIHN0YXJ0ZWQgc2hvd2luZyBzb21lIGF0dGl0dWRlLlwiLFwiSSBsaWtlIEVuZ2xhbmQgbW9yZSB0aGFuIEkgZGlkIHdoZW4gSSBsZWZ0LiBJdCdzIGJlY29tZSBhIGJpdCBvZiBhIGJldHRlciBjb3VudHJ5IGluIHRoZSBsYXN0IHRlbiB5ZWFycywgaW4gdGhlIGF0dGl0dWRlIG9mIGl0LiBBIGJpdCBtb3JlIEFtZXJpY2FuaXplZCwgd2hpY2ggaXMgYm90aCBnb29kIGFuZCBiYWQuIEF0IGxlYXN0IHdoZW4geW91IG9yZGVyIGEgY3VwIG9mIGNvZmZlZSB0aGV5IGRvbid0IGdpdmUgeW91IGEgaGFyZCB0aW1lLlwiLFwiV2hhdCBhIHN0dXBpZCBhdHRpdHVkZSB3ZSBoYXZlIGluIHRoaXMgY291bnRyeSB0byBwZXJzb25hbCBzdG9yaWVzLlwiLFwiSSBoYXZlIGEgV29vZHkgQWxsZW4gSmV3aXNoIGF0dGl0dWRlIHRvIGxpZmU6IHRoYXQgaXQncyBhbGwgZ29pbmcgdG8gYmUgZGlzYXN0cm91cy4gVGhhdCBpdCBoYXNuJ3QgYWxsIGJlZW4gdGhhdCB3YXkgaXMgc2ltcGx5IGRvd24gdG8gc29tZSByYW5kb20gcXVpcmsgb2YgZmF0ZS5cIixcIk15IGF0dGl0dWRlIHRvd2FyZCBncmFkdWF0ZSBzdHVkZW50cyB3YXMgZGlmZmVyZW50LCBJIG11c3Qgc2F5LiBJIHVzZWQgZ3JhZHVhdGUgc3R1ZGVudHMgYXMgY29sbGVhZ3VlczogSSBnYXZlIHRoZW0gdGhlIGJlc3QgcHJvYmxlbXMgdG8gd29yayBvbiwgYW5kIEkgZW5jb3VyYWdlZCB0aGVtLlwiLFwiVG9tbWllIEFhcm9uIHRhdWdodCBtZSBob3cgdG8gaGF2ZSBhIGdvb2QgYXR0aXR1ZGUsIHRvIGJlIGVhc3kgZ29pbmcgYW5kIG5vdCBnZXQgdXB0aWdodC5cIixcIkluIGFpZCwgdGhlIHByb3BlciBhdHRpdHVkZSBpcyBvbmUgb21pdHRpbmcgZ3JhdGl0dWRlLlwiLFwiSW4gU2NvdGxhbmQgb3ZlciBtYW55IHllYXJzIHdlIGhhdmUgY3VsdGl2YXRlZCB0aHJvdWdoIG91ciBqdXN0aWNlIHN5c3RlbSB3aGF0IEkgaG9wZSBjYW4gYmUgZGVzY3JpYmVkIGFzIGEgJ2N1bHR1cmUgb2YgY29tcGFzc2lvbi4nIE9uIHRoZSBvdGhlciBoYW5kLCB0aGVyZSBzdGlsbCBleGlzdHMgaW4gbWFueSBwYXJ0cyBvZiB0aGUgVS5TLiwgaWYgbm90IG5hdGlvbmFsbHksIGFuIGF0dGl0dWRlIHRvd2FyZHMgdGhlIGNvbmNlcHQgb2YganVzdGljZSB3aGljaCBjYW4gb25seSBiZSBkZXNjcmliZWQgYXMgYSAnY3VsdHVyZSBvZiB2ZW5nZWFuY2UuJ1wiLFwiQW55IHRpbWUgSSBuZWVkIHRvIGdldCBhIHNlcmlvdXMgYXR0aXR1ZGUgYWRqdXN0bWVudCwgSSBwdXQgb24gb25lIG9mIHRoZWlyIHJlY29yZHMsIGFuZCB0aGVyZSBhcmUgZXhhbXBsZXMgdGhlcmUgZm9yIGFsbCB0aW1lIHRvIGtlZXAgdXMgaG9uZXN0IGFuZCBrZWVwIHVzIHJlYWNoaW5nIHRoZXknbGwgbmV2ZXIgYmUgZWNsaXBzZWQuXCIsXCJJIGFsd2F5cyBoYWQgdGhlIGF0dGl0dWRlIHRoYXQgSSB3YW50ZWQgdG8gdGhyb3cgYSBuby1oaXR0ZXIgZXZlcnkgZ2FtZS5cIixcIkkgbGlrZSBhY3RvcnMgdGhhdCBhcmUgZ29vZCB3aXRoIHBhbnRvbWltZSBhbmQgdGhhdCBjYW4gdHJhbnNtaXQgYSBsb3QgYnkgdGhlaXIgcHJlc2VuY2UgYW5kIGF0dGl0dWRlIG1vcmUgdGhhbiB0aHJvdWdoIHRoZWlyIGRpYWxvZ3VlLlwiLFwiSGF2aW5nIGEgY2hpbGQgbWFrZXMgeW91IHN0cm9uZyBhbmQgZ2l2ZXMgeW91IGNodXR6cGFoLiBJdCByZWxheGVkIG15IGF0dGl0dWRlIHRvIHRoZSBqb2IgbXkgY2VudGVyIG9mIGZvY3VzIHNoaWZ0ZWQsIHdoaWNoIEkgdGhpbmsgaXMgdmVyeSBoZWxwZnVsLCBiZWNhdXNlIGV2ZW4gaWYgeW91J3JlIG5vdCBhIHZlcnkgaW5kdWxnZW50IGFjdG9yIHlvdSBzcGVuZCBhIGxvdCBvZiB0aW1lIHRoaW5raW5nIGFib3V0IHlvdXJzZWxmLiBJIGRvbid0IHRoaW5rIHRoYXQgaXMgcGFydGljdWxhcmx5IGhlYWx0aHkuXCIsXCJJIGFsd2F5cyBzYWlkIHB1bmsgd2FzIGFuIGF0dGl0dWRlLiBJdCB3YXMgbmV2ZXIgYWJvdXQgaGF2aW5nIGEgTW9oaWNhbiBoYWlyY3V0IG9yIHdlYXJpbmcgYSByaXBwZWQgVC1zaGlydC4gSXQgd2FzIGFsbCBhYm91dCBkZXN0cnVjdGlvbiwgYW5kIHRoZSBjcmVhdGl2ZSBwb3RlbnRpYWwgd2l0aGluIHRoYXQuXCIsXCJTaWQgVmljaW91cyBiZWdhbiB0aGUgYWdlIG9mIHBhcnRpY2lwYXRpb24gaW4gd2hpY2ggZXZlcnlvbmUgY291bGQgYmUgdGhlIGFydGlzdC4gU2lkIHByb3ZlZCB0aGF0IHlvdSBkb24ndCBoYXZlIHRvIHBsYXkgd2VsbCB0byBiZSB0aGUgc3Rhci4gWW91IGNhbiBwbGF5IGJhZGx5LCBvciBub3QgZXZlbiBhdCBhbGwuIEkgZW5kb3JzZWQgdGhhdCBhdHRpdHVkZS4gSWYgeW91IGNhbid0IHdyaXRlIHNvbmdzLCBubyBwcm9ibGVtIC0gc2ltcGx5IHN0ZWFsIG9uZSBhbmQgY2hhbmdlIGl0IHRvIHlvdXIgdGFzdGUuXCIsXCJBYmhvcnJlbmNlIG9mIGFwYXJ0aGVpZCBpcyBhIG1vcmFsIGF0dGl0dWRlLCBub3QgYSBwb2xpY3kuXCIsXCJFdmVyeSBiYXNlYmFsbCBjcm93ZCwgbGlrZSBldmVyeSB0aGVhdHJlIGF1ZGllbmNlLCBoYXMgaXRzIG93biBkaXN0aW5jdGl2ZSBhdHRpdHVkZSBhbmQgYXRtb3NwaGVyZS5cIixcIkZvb3RiYWxsIGlzIG15IHByb2Zlc3Npb24gbm93LiBJJ20gZ2V0dGluZyBtYXJyaWVkIGluIEF1Z3VzdC4uLiBJdCdzIGEgbmV3IGV4cGVyaWVuY2UgZm9yIG1lIGFzIHNvbWVvbmUganVzdCBnZXR0aW5nIG91dCBvZiBjb2xsZWdlLiBJIHN0aWxsIGhhdmUgdGhlIHNhbWUgYXR0aXR1ZGUgYWJvdXQgZm9vdGJhbGwgSSBhbHdheXMgaGFkLiBJIHBsYXkgaGFyZC4gSSBlbmpveSBwcmFjdGljZS4gSSdkIHJhdGhlciBiZSB0aHJvd2luZyBpbiBwYXNzaW5nIGRyaWxscyB0aGFuIHNpdHRpbmcgYXJvdW5kIGFuZCB3YXRjaGluZyBUVi5cIixcIlRoZSBhdHRpdHVkZSB3ZSBoYXZlIHRvd2FyZHMgb3VyIHBlcnNvbmFsIHBldHMgYXMgb3Bwb3NlZCB0byB0aGUgYW5pbWFscyB0aGF0IHN1ZmZlciB1bmRlciB0aGUgZmFjdG9yeSBmYXJtIGlzIGh5cG9jcml0aWNhbCBhbmQgZGVsdXNpb25hbC5cIixcIkNlcnRhaW4ga2luZHMgb2Ygc3BlZWQsIGZsb3csIGludGVuc2l0eSwgZGVuc2l0eSBvZiBhdHRhY2tzLCBkZW5zaXR5IG9mIGludGVyYWN0aW9uLi4uIE11c2ljIHRoYXQgY29uY2VudHJhdGVzIG9uIHRob3NlIHF1YWxpdGllcyBpcywgSSB0aGluaywgZWFzaWVyIGFjaGlldmVkIGJ5IGZyZWUgaW1wcm92aXNhdGlvbiBiZXR3ZWVuIHBlb3BsZSBzaGFyaW5nIGEgY29tbW9uIGF0dGl0dWRlLCBhIGNvbW1vbiBsYW5ndWFnZS5cIixcIkkgc2F3ICdUYXhpIERyaXZlciwnIGFuZCAnVGF4aSBEcml2ZXInIGtpbmQgb2Ygc2F2ZWQgbXkgbGlmZS4gVGhlIHNjZW5lIHdoZXJlIFJvYmVydCBEZSBOaXJvIGlzIGxvb2tpbmcgYXQgaGltc2VsZiBpbiB0aGUgbWlycm9yIHNheWluZywgJ1lvdSB0YWxraW4nIHRvIG1lPyBZb3UgdGFsa2luJyB0byBtZT8gV2hvIHRoZSBoZWxsIGVsc2UgYXJlIHlvdSB0YWxraW4nIHRvPycgVGhhdCdzIHRoZSBzY2VuZSB0aGF0IGNoYW5nZWQgbXkgbGlmZSBieSBjaGFuZ2luZyBteSBhdHRpdHVkZSBhYm91dCBhY3RpbmcuXCIsXCJJJ3ZlIGFsd2F5cyBiZWVuIGEgZ3V5IHdobydzIHByZXR0eSBzdXBwb3J0aXZlLCBpdHMganVzdCBteSBuYXR1cmUsIHNvIEkgY2FtZSBpbiB0byB0aGUgc2l0dWF0aW9uIHdpdGggdGhlIGF0dGl0dWRlIHRoYXQgSSB3YW50ZWQgdG8gc3VwcG9ydCBKb2hubnkgYW5kIG1ha2UgaXQgd29yay5cIixcIkkgdGhvdWdodCBJIHdhcyBnb2luZyB0byBiZSBraWxsZWQuIFRoZSBjYXN1YWx0aWVzIHdlcmUgc28gaGVhdnksIGl0IHdhcyBqdXN0IGEgZ2l2ZW4uIEkgbGVhcm5lZCB0byB0YWtlIGVhY2ggZGF5LCBlYWNoIG1pc3Npb24sIGFzIGl0IGNhbWUuIFRoYXQncyBhbiBhdHRpdHVkZSBJJ3ZlIGNhcnJpZWQgaW50byBteSBwcm9mZXNzaW9uYWwgbGlmZS4gSSB0YWtlIGVhY2ggY2FzZSwgZWFjaCBqb2IsIGFzIGl0IGNvbWVzLlwiLFwiV2hhdCBoYXMgaGFwcGVuZWQgaXMgdGhhdCB0byBzb21lIGRlZ3JlZSB0aGV5IGhhdmUgdGFrZW4gYW4gYXR0aXR1ZGUgd2hlcmUgdGhleSBkb24ndCBsaXN0ZW4gdG8gZGVtb3Mgb2YgZGl2ZXJzZSBzdWJqZWN0IG1hdHRlcnMuIFRoZXkncmUgbG9va2luZyBmb3IgZGVtb3MgbGlrZSB0aGUgcmVjb3JkIHRoZSBndXkgb24gdGhlIGxlZnQganVzdCBkaWQuXCIsXCJIZXJlIHlvdSBkbyBoYXZlIGZvcmVzdHMsIHdoZXJlIHBpZ3MgY291bGQgYmUgcmFpc2VkIGJ5IGxldHRpbmcgdGhlbSByb290IGFib3V0IGluIHRoZSBmb3Jlc3RzIGZvciBhIGdvb2QgcGFydCBvZiB0aGUgeWVhci4gVGhlcmVmb3JlLCB5b3UgaGF2ZSBhIGRpZmZlcmVudCBhdHRpdHVkZSB0b3dhcmQgdGhlbSBjb21wYXJlZCB3aXRoIHdoYXQgY29udGludWVzIHRvIGV4aXN0IGluIHRoZSBNaWRkbGUgRWFzdC5cIixcIlRoZSBhdHRpdHVkZSBvZiBwaHlzaW9sb2dpY2FsIHBzeWNob2xvZ3kgdG8gc2Vuc2F0aW9ucyBhbmQgZmVlbGluZ3MsIGNvbnNpZGVyZWQgYXMgcHN5Y2hpY2FsIGVsZW1lbnRzLCBpcywgbmF0dXJhbGx5LCB0aGUgYXR0aXR1ZGUgb2YgcHN5Y2hvbG9neSBhdCBsYXJnZS5cIixcIlRoaXMgZ2VuZXJhdGlvbi4uLiB0aGV5IGhhdmUgYSBkaWZmZXJlbnQgYXR0aXR1ZGUuIEluc3RlYWQgb2Ygc2l0dGluZyBhbmQgd2F0Y2hpbmcgc29tZXRoaW5nLCB0aGV5IHdhbnQgdG8gYmUgYSBwYXJ0IG9mIGl0IC0gdGhleSdyZSB2ZXJ5IGhlZG9uaXN0aWMgYW5kIHNlbnN1YWwuXCIsXCJXZSBoYXZlIGJlY29tZSBhd2FyZSBvZiB0aGUgcmVzcG9uc2liaWxpdHkgZm9yIG91ciBhdHRpdHVkZSB0b3dhcmRzIHRoZSBkYXJrIHBhZ2VzIGluIG91ciBoaXN0b3J5LiBXZSBoYXZlIHVuZGVyc3Rvb2QgdGhhdCBiYWQgc2VydmljZSBpcyBkb25lIHRvIHRoZSBuYXRpb24gYnkgdGhvc2Ugd2hvIGFyZSBpbXBlbGxpbmcgdG8gcmVub3VuY2UgdGhhdCBwYXN0LlwiLFwiQnV0IEkgZG8gdGhpbmsgdGhhdCB3ZSBhcHByb2FjaCBtdXNpYywgaW4gb2YgaXRzZWxmLCB3aXRoIGEgcmVsaWdpb3VzIGF0dGl0dWRlLlwiLFwiSSB0aGluayB0aGF0IGdlbmVyYWxseSBtdXNpYyBzaG91bGQgYmUgYSBwb3NpdGl2ZSB0aGluZywgSSBsaWtlIEJvYiBNYXJsZXkncyBhdHRpdHVkZTogaGUgc2FpZCB0aGF0IGhpcyBnb2FsIGluIGxpZmUgd2FzIHRvIHNpbmdsZSBoYW5kZWRseSBmaWdodCBhbGwgdGhlIGV2aWwgaW4gdGhlIHdvcmxkIHdpdGggbm90aGluZyBidXQgbXVzaWMsIGFuZCB3aGVuIGhlIHdlbnQgdG8gYSBwbGFjZSBoZSBkaWRuJ3QgZ28gdG8gcGxheSwgaGUgd2VudCB0byBjb25xdWVyLlwiLFwiSW4gMTk3NywgYXQgbGVhc3QsIGhlIHdpc2hlZCB0byBoYXZlIHBlb3BsZSBiZWxpZXZlIHRoYXQgaGUgc2hhcmVkIGFuZCB3YXMgcHJvdWQgb2YgYW4gYXR0aXR1ZGUgdG93YXJkIHdvbWVuIHRoYXQgaXMgbm90IGFjY2VwdGFibGUgaW4gYSBwb2xpdGljaWFuLiBJbiAyMDAzLCBhbGwgaGUgaGFzIHNhaWQgaXMgdGhhdCBoZSBkb2Vzbid0IHJlbWVtYmVyIHRoZSBpbnRlcnZpZXcuXCIsXCJZb3UnZCBsaWtlIG1vcmUgcGVvcGxlIHRvIHJlY29nbmlzZSB3aGF0IHlvdSBkbyBpcyBzcGVjaWFsLiBCdXQgSSB0YWtlIHRoZSBhdHRpdHVkZSB0aGF0IHRoZSBiZXN0IHRoaW5nIEkgY2FuIGRvIGZvciBteSBzcG9ydCBpcyB0byBiZSB0aGUgYmVzdCBhdCBpdC4gVGhlIGJlc3Qgd2F5IHBlb3BsZSB3aWxsIGNvbWUgdG8gcmVjb2duaXNlIHRoYXQgdHJhY2sgYW5kIGZpZWxkIGlzIGEgZ3JlYXQgc3BvcnQgaXMgdG8gc2VlIGF0aGxldGVzIGV4Y2VsbGluZyBhdCBpdC4gV2hpY2ggaXMgd2hhdCBJIGludGVuZCB0byBkby5cIixcIlNvIGF0IGEgdGltZSBpbiB3aGljaCB0aGUgbWVkaWEgZ2l2ZSB0aGUgcHVibGljIGV2ZXJ5dGhpbmcgaXQgd2FudHMgYW5kIGRlc2lyZXMsIG1heWJlIGFydCBzaG91bGQgYWRvcHQgYSBtdWNoIG1vcmUgYWdncmVzc2l2ZSBhdHRpdHVkZSB0b3dhcmRzIHRoZSBwdWJsaWMuIEkgbXlzZWxmIGFtIHZlcnkgbXVjaCBpbmNsaW5lZCB0byB0YWtlIHRoaXMgcG9zaXRpb24uXCIsXCJNb2Rlcm4gT3J0aG9kb3h5IGhhcyBhIGhpZ2hseSBwb3NpdGl2ZSBhdHRpdHVkZSB0b3dhcmQgdGhlIFN0YXRlIG9mIElzcmFlbC4gT3VyIFVsdHJhLU9ydGhvZG94IGJyZXRocmVuIHJlY29nbml6ZSBvbmx5IHRoZSBIb2x5IExhbmQsIGJ1dCBub3QgdGhlIHN0YXRlLlwiLFwiSSBqdXN0IHRyeSB0byB0cnkgdG8ga2VlcCBhbiBhdHRpdHVkZSB0aGF0IEkgZG9uJ3Qga25vdyB3aGF0IEknbSBkb2luZy4gTm90IHRvIHRoZSBwb2ludCB3aGVyZSBJJ20gYmVhdGluZyBteXNlbGYgdXAsIGJ1dCBJIGp1c3QgZ28gaW4gdGhpbmtpbmcgdGhhdCBJIGhhdmUgYSBsb3QgdG8gbGVhcm4uIEFuZCBJIGhvcGUgSSBzdGlsbCBoYXZlIHRoYXQgYXR0aXR1ZGUgMzAgeWVhcnMgZnJvbSBub3cuXCIsXCJJJ20gbm90IGdvaW5nIHRvIHRha2UgdGhpcyBkZWZlYXRpc3QgYXR0aXR1ZGUgYW5kIGxpc3RlbiB0byBhbGwgdGhpcyBjcmFwIGFueSBtb3JlIGZyb20gYWxsIHRoZXNlIHBlb3BsZSB3aG8gaGF2ZSBub3RoaW5nIGV4Y2VwdCBkb29tc2RheSB0byBwcmVkaWN0LlwiLFwiQSBzZXJpZXMgb2YgcnVtb3JzIGFib3V0IG15IGF0dGl0dWRlLCBhcyB3ZWxsIGFzIGRlcm9nYXRvcnkgcmVtYXJrcyBhYm91dCBteXNlbGYgYW5kIG15IGZhbWlseSBzaG93ZWQgbWUgdGhhdCB0aGUgcGVyc29uYWwgcmVzZW50bWVudCBvZiB0aGUgRGV0cm9pdCBnZW5lcmFsIG1hbmFnZXIgdG93YXJkIG1lIHdvdWxkIG1ha2UgaXQgaW1wb3NzaWJsZSBmb3IgbWUgdG8gY29udGludWUgcGxheWluZyBob2NrZXkgaW4gRGV0cm9pdC5cIixcIkJlZm9yZSAnR2FuZ25hbSBTdHlsZScgSSB3YXMgbm90IGEgZ29vZCBhdHRpdHVkZSBhcnRpc3QuXCIsXCJXb21lbiBkaWRuJ3Qgd2FudCB0byBiZSBvbiB0aGUgc3RhZ2Ugd2l0aCBvdGhlciB3b21lbiBiZWNhdXNlIHRoZXkgZGlkbid0IHdhbnQgdGhlaXIgYm9kaWVzIHRvIGJlIGNvbXBhcmVkLiBUaGV5IGRpZG4ndCB3YW50IGFub3RoZXIgZmVtYWxlIGFjdCBvcGVuaW5nIGZvciB0aGVtIGJlY2F1c2Ugb2YgdGhpcyB3ZWlyZCBjb21wZXRpdGl2ZSBhbmQgdG9rZW5pc3RpYyBhdHRpdHVkZS5cIixcIkxpc3Rlbiwgd2hhdGV2ZXIgbWFrZXMgdGhlIG1vdmllIGJldHRlci4gVGhhdCdzIHRoZSBhdHRpdHVkZSB5b3UgaGF2ZSB0byBoYXZlLlwiLFwiUmVhc29uIGlzIGFuIGFjdGlvbiBvZiB0aGUgbWluZCBrbm93bGVkZ2UgaXMgYSBwb3NzZXNzaW9uIG9mIHRoZSBtaW5kIGJ1dCBmYWl0aCBpcyBhbiBhdHRpdHVkZSBvZiB0aGUgcGVyc29uLiBJdCBtZWFucyB5b3UgYXJlIHByZXBhcmVkIHRvIHN0YWtlIHlvdXJzZWxmIG9uIHNvbWV0aGluZyBiZWluZyBzby5cIixcIkhhcmRib2lsZWQgY3JpbWUgZmljdGlvbiBjYW1lIG9mIGFnZSBpbiAnQmxhY2sgTWFzaycgbWFnYXppbmUgZHVyaW5nIHRoZSBUd2VudGllcyBhbmQgVGhpcnRpZXMuIFdyaXRlcnMgbGlrZSBEYXNoaWVsbCBIYW1tZXR0IGFuZCBSYXltb25kIENoYW5kbGVyIGxlYXJudCB0aGVpciBjcmFmdCBhbmQgZGV2ZWxvcGVkIGEgZGlzdGluY3QgbGl0ZXJhcnkgc3R5bGUgYW5kIGF0dGl0dWRlIHRvd2FyZCB0aGUgbW9kZXJuIHdvcmxkLlwiLFwiSSBkb24ndCB0aGluayBwZW9wbGUgYXJlIGZvb2xzLCBhbmQgSSB0aGluayB0aGV5IGRlc2VydmUgYSBnb29kIGF0dGl0dWRlIGFuZCBzbWFydCBlbnRlcnRhaW5tZW50LlwiLFwiSG9sbHl3b29kJ3MgYSB2ZXJ5IHdlaXJkIHBsYWNlLiBJIHRoaW5rIHRoZXJlJ3MgbGVzcyBvZiBldmVyeXRoaW5nIGV4Y2VwdCBmb3IgYXR0aXR1ZGUuXCIsXCJNeSBhZ2VudCBzYXlzIHRoYXQgSSdtIGEgJ3JlcGVhdCBidXNpbmVzcyBndXkuJyBJZiB5b3UgaGlyZSBtZSB0byBjb21lIGRvIGEgbW92aWUsIEknbGwgYmUgb24gdGltZSwga25vdyBhbGwgbXkgbWF0ZXJpYWwsIGJlIHJlYWR5IHRvIGdvLCBoYXZlIGEgZ29vZCBhdHRpdHVkZS4gSSdtIGhlcmUgdG8gd29yaywgc28gSSBnZXQgaGlyZWQgb3ZlciBhbmQgb3ZlciBhZ2FpbiBieSB0aGUgc2FtZSBwcm9kdWNlcnMuIElmIHlvdSBqdXN0IGJlIGEgdGVhbSBwbGF5ZXIgb24gc2V0IHlvdSBjYW4gd29yayBzbyBtdWNoIG1vcmUgb2Z0ZW4uXCIsXCJXaGF0IGRvIHlvdSBtZWFuIGJ5IGZhaXRoPyBJcyBmYWl0aCBlbm91Z2ggZm9yIE1hbj8gU2hvdWxkIGhlIGJlIHNhdGlzZmllZCB3aXRoIGZhaXRoIGFsb25lPyBJcyB0aGVyZSBubyB3YXkgb2YgZmluZGluZyBvdXQgdGhlIHRydXRoPyBJcyB0aGUgYXR0aXR1ZGUgb2YgZmFpdGgsIG9mIGJlbGlldmluZyBpbiBzb21ldGhpbmcgZm9yIHdoaWNoIHRoZXJlIGNhbiBiZSBubyBtb3JlIHRoYW4gcGhpbG9zb3BoaWMgcHJvb2YsIHRoZSB0cnVlIG1hcmsgb2YgYSBDaHJpc3RpYW4/XCIsXCJJIHN0aWxsIGhhdmUgYSB5b3VuZyBhdHRpdHVkZS5cIixcIkVsdmlzIENvc3RlbGxvIGhhZCBhIGJyYW5kIG5ldyBiYWcuIEhlIHdhcyBhIG11c2ljaWFuLCBidXQgaGUga25ldyBhbGwgYWJvdXQgdGhlIGF0dGl0dWRlIHBhcnQgb2YgaXQuXCIsXCJUaGUgd29ybGQgaXMgZnVsbCBvZiBtdXNpY2lhbnMgd2hvIGNhbiBwbGF5IGdyZWF0LCBhbmQgeW91IHdvdWxkbid0IGNyb3NzIHRoZSByb2FkIHRvIHNlZSB0aGVtLiBJdCdzIHBlb3BsZSB3aG8gaGF2ZSB0aGlzIGluZGVmaW5hYmxlIGF0dGl0dWRlIHRoYXQgYXJlIHRoZSBnb29kIG9uZXMuXCIsXCJBZnRlciB3b3JraW5nIGZvciB5ZWFycyBpbiBIb2xseXdvb2Qgd2hlcmUgdGhlIGFjdG9ycyBoYXZlIHRha2VuIG92ZXIsIGl0IHdhcyBhIHJlYWwgcmVsaWVmIHRvIGdldCBkb3duIHRoZXJlIGFuZCBub3Qgb25seSBoYXZlIHNvbWUgY2hpbGRyZW4sIGJ1dCBhbHNvIGhhdmUgc29tZSBhY3RvcnMgdGhhdCBoYWQgbm8gYXR0aXR1ZGUuXCIsXCJXaGVuIHlvdSBhcmUgZmFjaW5nIHRoZSB3aWxkZXJuZXNzIG9uIHlvdXIgb3duLCB5b3UgaGF2ZSBhIHRvdGFsbHkgZGlmZmVyZW50IGF0dGl0dWRlIHRvIHNvbWVvbmUgd2hvIHdvcmtzIGluIGdvdmVybm1lbnQgb3Igd2hvIGhhcyBhIG1vbnRobHkgY2hlcXVlLlwiLFwiSWYgeW91IHRha2UgdGhlIGNvbnRlbXB0IHNvbWUgQW1lcmljYW5zIGhhdmUgZm9yIHl1cHBpZXMgYW5kIG11bHRpcGx5IGl0IGJ5IDEwIHlvdSBtaWdodCBjb21lIGNsb3NlIHRvIHVuZGVyc3RhbmRpbmcgdGhlaXIgYXR0aXR1ZGUgdG93YXJkcyB0aGUgQ2l0eSwgYXMgdGhleSBjYWxsIGl0IC0gTG9uZG9uLCB0aGUgcGVvcGxlIG9mIHRoZSBzb3V0aC5cIixcIklmIHlvdSBnbyBvbiBzdGFnZSB3aXRoIHRoZSB3cm9uZyBhdHRpdHVkZSwgb3Igc29tZXRoaW5nIGluIHlvdXIgcGVyZm9ybWFuY2UgaXMgb2ZmLCB5b3UgY2FuIGxvc2UgYW4gYXVkaWVuY2UgaW4gdGhlIGZpcnN0IG1pbnV0ZS4gVGhhdCBmaXJzdCBtaW51dGUgaXMgY3J1Y2lhbC5cIixcIldlIGNhbiBkbyBiZXR0ZXIgaW4gaGlnaGVyIGVkdWNhdGlvbi4gQW5kIGl0IGlzIG1vcmUgdGhhbiBqdXN0IHRlY2hub2xvZ3kuIEl0J3MgYWxzbyBhbiBhdHRpdHVkZSBvbiB0aGUgcGFydCBvZiBmYWN1bHR5LiBXZSBuZWVkIHRvIHRoaW5rIHRocm91Z2ggaG93IHdlIGNhbiBwcm9kdWNlIGEgYmV0dGVyIHF1YWxpdHkgcHJvZHVjdCBhdCBsZXNzIGNvc3QuXCIsXCJJbiB0ZXJtcyBvZiB3b3JrIEkndmUgYWx3YXlzIGhhZCBhIEJhZCBBdHRpdHVkZSBpbiB0aGF0IEkgd29uJ3Qgd29yayBhbnl3aGVyZSB3aGljaCByZXF1aXJlcyBtZSB0byB3b3JrIHN0cmljdCBob3VycyBvciBmb2xsb3cgYSBkcmVzcyBjb2RlLiBJIGRvbid0IGtub3cgaWYgdGhhdCdzIGFuIEFzcGVyZ2VyJ3MgdGhpbmcgb3Igbm90LCBJIHRoaW5rIGl0J3MganVzdCBiZWluZyByZWFzb25hYmxlLlwiXTtmdW5jdGlvbiBhaShlKXtyZXR1cm4gbihlaSxlKX12YXIgdGk9W1wiU2F0aW5cIixcIkdpYW50IEFuZ29yYVwiLFwiVGFuXCIsXCJIYXZhbmFcIixcIkhhcmxlcXVpblwiLFwiUmhpbmVsYW5kZXJcIixcIkNpbm5hbW9uXCIsXCJBbWVyaWNhblwiLFwiRmxvcmlkYSBXaGl0ZVwiLFwiQ2hlY2tlcmVkIEdpYW50XCIsXCJFbmdsaXNoIExvcFwiLFwiUG9saXNoXCIsXCJFbmdsaXNoIEFuZ29yYVwiLFwiQmVsZ2lhbiBIYXJlXCIsXCJTdGFuZGFyZCBDaGluY2hpbGxhXCIsXCJHaWFudCBDaGluY2hpbGxhXCIsXCJFbmdsaXNoIFNwb3RcIixcIkR1dGNoXCJdO2Z1bmN0aW9uIG9pKGUpe3JldHVybiBuKHRpLGUpfWZ1bmN0aW9uIGlpKGUpe3ZhciBhO2NvbnN0IHQ9bnVsbCE9KGE9bnVsbD09ZT92b2lkIDA6ZS5kYXlzKT9hOjE7aWYodDwxKXRocm93IG5ldyBFcnJvcihcImRheXMgbXVzdCBiZSBwb3NpdGl2ZSwgdXNlIHNvb24oKSBpbnN0ZWFkXCIpO2NvbnN0IG89MjQqdCo2MCo2MCoxZTMsaT1uZXcgRGF0ZSxyPW5ldyBEYXRlKGkuZ2V0VGltZSgpLW8pO3JldHVybiBuKCgoKT0+JCh7ZnJvbTpyLHRvOml9KSksZSl9ZnVuY3Rpb24gbmkoZSl7cmV0dXJuIG4oKCgpPT57Y29uc3RbYSx0LG8saV09W3Moe21pbjowLG1heDoyNTV9KSxzKHttaW46MCxtYXg6MjU1fSkscyh7bWluOjAsbWF4OjI1NX0pLFJhKHttaW46LjEsbWF4OjF9KV07cmV0dXJuIG51bGwhPWUmJmUuYWxwaGE/YHJnYmEoJHthfSwgJHt0fSwgJHtvfSwgJHtpfSlgOmByZ2IoJHthfSwgJHt0fSwgJHtvfSlgfSksZSl9dmFyIHJpPVtcIkFkbWluXCIsXCJFZGl0b3JcIixcIk93bmVyXCIsXCJDb250cmlidXRvclwiLFwiVmlld2VyXCIsXCJEZXZlbG9wZXJcIl07ZnVuY3Rpb24gc2koZSl7cmV0dXJuIG4ocmksZSl9ZnVuY3Rpb24gbGkoZSl7cmV0dXJuIG4oKCgpPT5TKHttaW46MWU3LG1heDo5OTk5OTk5OX0pKSxlKX1mdW5jdGlvbiB1aShlKXtyZXR1cm4gbigoKCk9Pntjb25zdCBhPUFycmF5LmZyb20oe2xlbmd0aDozfSwoKCk9PlMoe21pbjowLG1heDoyMH0pKSkuam9pbihcIi5cIik7cmV0dXJuYCR7KG51bGw9PWU/dm9pZCAwOmUucHJlZml4KXx8XCJcIn0ke2F9YH0pLGUpfXZhciBjaT1bXCJUcmlhbmdsZVwiLFwiQ2lyY2xlXCIsXCJTcXVhcmVcIixcIlJlY3RhbmdsZVwiLFwiUGFyYWxsZWxvZ3JhbVwiLFwiUmhvbWJ1c1wiLFwiVHJhcGV6aXVtXCIsXCJLaXRlXCIsXCJQb2x5Z29uc1wiLFwiU3BoZXJlXCIsXCJDdWJlXCIsXCJDdWJvaWRcIixcIkNvbmVcIixcIkN5bGluZGVyXCJdO2Z1bmN0aW9uIGRpKGUpe3JldHVybiBuKGNpLGUpfXZhciBoaT1bXCJBY2NvdW50aW5nIG9yIGJvb2trZWVwaW5nXCIsXCJBY3RpdmUgbGlzdGVuaW5nXCIsXCJBZGFwdGFiaWxpdHlcIixcIkFuYWx5dGljYWwgYW5kIHByb2JsZW0gc29sdmluZ1wiLFwiQXR0ZW50aW9uIHRvIGRldGFpbFwiLFwiQnJhbmQgZGV2ZWxvcG1lbnRcIixcIkNvbGxhYm9yYXRpb25cIixcIkNvbW11bmljYXRpb25cIixcIkNyZWF0aXZpdHlcIixcIkNyaXRpY2FsIHRoaW5raW5nXCIsXCJDdXN0b21lciBzZXJ2aWNlXCIsXCJEYXRhIGFuYWx5c2lzXCIsXCJEYXRhIG1pbmluZ1wiLFwiRGF0YSBwcml2YWN5XCIsXCJEZWNpc2lvbiBtYWtpbmdcIixcIkRlcGVuZGFiaWxpdHlcIixcIkRpcGxvbWFjeVwiLFwiRW1wYXRoeVwiLFwiRW50ZXJwcmlzZSByZXNvdXJjZSBwbGFubmluZ1wiLFwiSHVtYW4gcmVzb3VyY2VzXCIsXCJMZWFkZXJzaGlwXCIsXCJNaWNyb3NvZnQgb2ZmaWNlIHByb2ZpY2llbmN5XCIsXCJNdWx0aWxpbmd1YWxpc21cIixcIk11bHRpdGFza2luZ1wiLFwiTmVnb3RpYXRpb25cIixcIk9yZ2FuaXphdGlvblwiLFwiUGF0aWVuY2VcIixcIlBvc2l0aXZpdHlcIixcIlByb2JsZW0gc29sdmluZ1wiLFwiUHJvY2VzcyBhdXRvbWF0aW9uXCIsXCJQcm9kdWN0IGRlc2lnblwiLFwiUHJvamVjdCBtYW5hZ2VtZW50XCIsXCJSZXNlYXJjaCBza2lsbHNcIixcIlNlYXJjaCBlbmdpbmUgb3B0aW1pemF0aW9uXCIsXCJTZWxmLW1vdGl2YXRpb25cIixcIlNvY2lhbCBza2lsbHNcIixcIlNvZnR3YXJlIHByb2ZpY2llbmN5XCIsXCJTdG9yeXRlbGxpbmdcIixcIlRlYW13b3JrXCIsXCJUaW1lIG1hbmFnZW1lbnRcIixcIlRyb3VibGVzaG9vdGluZ1wiLFwiVHlwaW5nIHNraWxsc1wiLFwiVmVyYmFsIGFuZCBwcmVzZW50YXRpb25cIixcIldvcmsgZXRoaWNcIixcIldyaXRpbmcgYW5kIGVkaXRpbmdcIl07ZnVuY3Rpb24gbWkoZSl7cmV0dXJuIG4oaGksZSl9ZnVuY3Rpb24gcGkoZSl7cmV0dXJuIG4oKCgpPT5tYSh7bGVuZ3RoOnMoe21pbjozLG1heDoxMH0pfSkuam9pbihcIi1cIikpLGUpfXZhciB5aT1bXCJCbHVudG5vc2UgdmlwZXJcIixcIll1bm5hbiBrZWVsYmFja1wiLFwiRWFzdGVybiBob2dub3NlIHNuYWtlXCIsXCJTb3V0aHdlc3Rlcm4gYmxhY2sgc3BpdHRpbmcgY29icmFcIixcIk1hY2hldGUgc2F2YW5lXCIsXCJBbmdvbGFuIHB5dGhvblwiLFwiSHV0dG9ucyB0cmVlIHZpcGVyXCIsXCJFYXN0ZXJuIHRpZ2VyIHNuYWtlXCIsXCJDZW50cmFsIHJhbmdlcyB0YWlwYW5cIixcIlNjaHVsdHplcyBwaXR2aXBlclwiLFwiTWV4aWNhbiB3ZXN0IGNvYXN0IHJhdHRsZXNuYWtlXCIsXCJJbmRpZ28gc25ha2VcIixcIkRvZy10b290aGVkIGNhdCBzbmFrZVwiLFwiQmlzbWFyY2sgcmluZ2VkIHB5dGhvblwiLFwiQm9vbXNsYW5nXCIsXCJNYW5nc2hhbiBwaXR2aXBlclwiLFwiV2hpcCBzbmFrZVwiLFwiTW91bnRhaW4gYWRkZXJcIl07ZnVuY3Rpb24gZ2koZSl7cmV0dXJuIG4oeWksZSl9dmFyIGZpPVt7bmFtZTpcIlRyaWxsZXJcIixsaW5rOlwiaHR0cHM6Ly93d3cudHJpbGxlci5jby9cIn0se25hbWU6XCJQZXJpc2NvcGVcIixsaW5rOlwiaHR0cHM6Ly93d3cucGVyaXNjb3BlLnR2L1wifSx7bmFtZTpcIlZpbWVvXCIsbGluazpcImh0dHBzOi8vdmltZW8uY29tL1wifSx7bmFtZTpcIlZhbGVuY2VcIixsaW5rOlwiaHR0cHM6Ly92YWxlbmNlLmNvbW11bml0eS9cIn0se25hbWU6XCJVbnRhcHBkXCIsbGluazpcImh0dHBzOi8vdW50YXBwZC5jb20vXCJ9LHtuYW1lOlwiRWxwaGFcIixsaW5rOlwiaHR0cHM6Ly9lbHBoYS5jb20vXCJ9LHtuYW1lOlwiWXVib1wiLGxpbms6XCJodHRwczovL3l1Ym8ubGl2ZS9cIn0se25hbWU6XCJQZWFudXRcIixsaW5rOlwiaHR0cHM6Ly93d3cucGVhbnV0LWFwcC5pby9cIn0se25hbWU6XCJIb3VzZXBhcnR5XCIsbGluazpcImh0dHBzOi8vaG91c2VwYXJ0eS5jb20vXCJ9LHtuYW1lOlwiQ2FmZmVpbmVcIixsaW5rOlwiaHR0cHM6Ly93d3cuY2FmZmVpbmUudHYvXCJ9LHtuYW1lOlwiU3RlZW1pdFwiLGxpbms6XCJodHRwczovL3N0ZWVtaXQuY29tL1wifSx7bmFtZTpcIkJhaWR1IFRpZWJhXCIsbGluazpcImh0dHBzOi8vdGllYmEuYmFpZHUuY29tL1wifSx7bmFtZTpcIjIzc25hcHNcIixsaW5rOlwiaHR0cHM6Ly93d3cuMjNzbmFwcy5jb20vXCJ9LHtuYW1lOlwiTGlrZWVcIixsaW5rOlwiaHR0cHM6Ly9saWtlZS52aWRlby9cIn0se25hbWU6XCI4dHJhY2tzXCIsbGluazpcImh0dHBzOi8vOHRyYWNrcy5jb20vXCJ9LHtuYW1lOlwiQWNhZGVtaWFcIixsaW5rOlwiaHR0cHM6Ly93d3cuYWNhZGVtaWEuZWR1L1wifSx7bmFtZTpcIkFtaWt1bXVcIixsaW5rOlwiaHR0cHM6Ly9hbWlrdW11LmNvbS9cIn0se25hbWU6XCJhTm9iaWlcIixsaW5rOlwiaHR0cHM6Ly93d3cuYW5vYmlpLmNvbS9cIn0se25hbWU6XCJBU01BTExXT1JMRFwiLGxpbms6XCJodHRwczovL3d3dy5hc21hbGx3b3JsZC5jb20vXCJ9LHtuYW1lOlwiQXRobGlua3NcIixsaW5rOlwiaHR0cHM6Ly93d3cuYXRobGlua3MuY29tL1wifSx7bmFtZTpcIkJBTkRcIixsaW5rOlwiaHR0cHM6Ly9iYW5kLnVzL2VuXCJ9LHtuYW1lOlwiYmVCZWVcIixsaW5rOlwiaHR0cHM6Ly93d3cuYmViZWUuY29tL3VzL1wifSx7bmFtZTpcImJsaW5kXCIsbGluazpcImh0dHBzOi8vd3d3LnRlYW1ibGluZC5jb20vXCJ9LHtuYW1lOlwiZGlhc3BvcmEqXCIsbGluazpcImh0dHBzOi8vZGlhc3BvcmFmb3VuZGF0aW9uLm9yZy9cIn0se25hbWU6XCJGYXJrXCIsbGluazpcImh0dHBzOi8vd3d3LmZhcmsuY29tL1wifSx7bmFtZTpcIk1lV2VcIixsaW5rOlwiaHR0cHM6Ly9tZXdlLmNvbS9cIn0se25hbWU6XCJGYWNlYm9va1wiLGxpbms6XCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vXCJ9LHtuYW1lOlwiSW5zdGFncmFtXCIsbGluazpcImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vXCJ9LHtuYW1lOlwiVHdpdHRlclwiLGxpbms6XCJodHRwczovL3R3aXR0ZXIuY29tL1wifSx7bmFtZTpcIlR1bWJsclwiLGxpbms6XCJodHRwczovL3d3dy50dW1ibHIuY29tL1wifSx7bmFtZTpcIkxpbmtlZEluXCIsbGluazpcImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9cIn0se25hbWU6XCJXaGF0c0FwcFwiLGxpbms6XCJodHRwczovL3d3dy53aGF0c2FwcC5jb20vXCJ9LHtuYW1lOlwiU25hcGNoYXRcIixsaW5rOlwiaHR0cHM6Ly93d3cuc25hcGNoYXQuY29tL1wifSx7bmFtZTpcIlBpbnRlcmVzdFwiLGxpbms6XCJodHRwczovL3d3dy5waW50ZXJlc3QuY29tL1wifSx7bmFtZTpcIlJlZGRpdFwiLGxpbms6XCJodHRwczovL3d3dy5yZWRkaXQuY29tL1wifSx7bmFtZTpcIllvdVR1YmVcIixsaW5rOlwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vXCJ9LHtuYW1lOlwiTWl4XCIsbGluazpcImh0dHBzOi8vbWl4LmNvbS9cIn0se25hbWU6XCJUYWdnZWRcIixsaW5rOlwiaHR0cHM6Ly93d3cudGFnZ2VkLmNvbS9cIn0se25hbWU6XCJOZXh0ZG9vclwiLGxpbms6XCJodHRwczovL25leHRkb29yLmNvbS9cIn0se25hbWU6XCJEZXZpYW50QXJ0XCIsbGluazpcImh0dHBzOi8vd3d3LmRldmlhbnRhcnQuY29tL1wifSx7bmFtZTpcIlF1b3JhXCIsbGluazpcImh0dHBzOi8vd3d3LnF1b3JhLmNvbS9cIn0se25hbWU6XCJNZWV0dXBcIixsaW5rOlwiaHR0cHM6Ly93d3cubWVldHVwLmNvbS9cIn0se25hbWU6XCJSZXZlcmJOYXRpb25cIixsaW5rOlwiaHR0cHM6Ly93d3cucmV2ZXJibmF0aW9uLmNvbS9cIn0se25hbWU6XCJGbGl4c3RlclwiLGxpbms6XCJodHRwczovL3d3dy5mbGl4c3Rlci5jb20vXCJ9LHtuYW1lOlwiR29vZHJlYWRzXCIsbGluazpcImh0dHBzOi8vd3d3Lmdvb2RyZWFkcy5jb20vXCJ9LHtuYW1lOlwiVHdpdGNoXCIsbGluazpcImh0dHBzOi8vd3d3LnR3aXRjaC50di9cIn0se25hbWU6XCJDYXJpbmdCcmlkZ2VcIixsaW5rOlwiaHR0cHM6Ly93d3cuY2FyaW5nYnJpZGdlLm9yZy9cIn0se25hbWU6XCJXYXR0cGFkXCIsbGluazpcImh0dHBzOi8vd3d3LndhdHRwYWQuY29tL1wifSx7bmFtZTpcIlZpYWRlb1wiLGxpbms6XCJodHRwOi8vd3d3LnZpYWRlby5jb20vXCJ9LHtuYW1lOlwiQ3J1bmNoeXJvbGxcIixsaW5rOlwiaHR0cHM6Ly93d3cuY3J1bmNoeXJvbGwuY29tL1wifSx7bmFtZTpcIlNreXJvY2tcIixsaW5rOlwiaHR0cHM6Ly93d3cuc2t5cm9jay5jb20vXCJ9LHtuYW1lOlwiVktcIixsaW5rOlwiaHR0cHM6Ly92ay5jb20vXCJ9LHtuYW1lOlwiTXlIZXJpdGFnZVwiLGxpbms6XCJodHRwczovL3d3dy5teWhlcml0YWdlLmNvbS9cIn0se25hbWU6XCJMaXZlSm91cm5hbFwiLGxpbms6XCJodHRwczovL3d3dy5saXZlam91cm5hbC5jb20vXCJ9LHtuYW1lOlwiQ2xhc3NtYXRlc1wiLGxpbms6XCJodHRwczovL3d3dy5jbGFzc21hdGVzLmNvbS9cIn0se25hbWU6XCJTb3VuZENsb3VkXCIsbGluazpcImh0dHBzOi8vc291bmRjbG91ZC5jb20vXCJ9LHtuYW1lOlwiQnViYmx5XCIsbGluazpcImh0dHA6Ly9idWJibHkubmV0L1wifSx7bmFtZTpcIkZsaWNrclwiLGxpbms6XCJodHRwczovL3d3dy5mbGlja3IuY29tL1wifSx7bmFtZTpcIldlIEhlYXJ0IEl0XCIsbGluazpcImh0dHBzOi8vd2VoZWFydGl0LmNvbS9cIn0se25hbWU6XCJJbmZsdWVuc3RlclwiLGxpbms6XCJodHRwczovL3d3dy5pbmZsdWVuc3Rlci5jb20vXCJ9LHtuYW1lOlwiRmlsbUFmZmluaXR5XCIsbGluazpcImh0dHBzOi8vd3d3LmZpbG1hZmZpbml0eS5jb20vZW4vbWFpbi5odG1sXCJ9LHtuYW1lOlwiT3BlbiBEaWFyeVwiLGxpbms6XCJodHRwczovL3d3dy5vcGVuZGlhcnkuY29tL1wifSx7bmFtZTpcIlllbHBcIixsaW5rOlwiaHR0cHM6Ly93d3cueWVscC5jb20vXCJ9LHtuYW1lOlwiQ29sbGVnZUh1bW9yXCIsbGluazpcImh0dHA6Ly93d3cuY29sbGVnZWh1bW9yLmNvbS9cIn0se25hbWU6XCJHYWlhIE9ubGluZVwiLGxpbms6XCJodHRwczovL3d3dy5nYWlhb25saW5lLmNvbS9cIn0se25hbWU6XCJNb2NvU3BhY2VcIixsaW5rOlwiaHR0cHM6Ly93d3cubW9jb3NwYWNlLmNvbS9cIn0se25hbWU6XCJDb3VjaFN1cmZpbmdcIixsaW5rOlwiaHR0cHM6Ly93d3cuY291Y2hzdXJmaW5nLmNvbS9cIn0se25hbWU6XCJGdW5ueSBvciBEaWVcIixsaW5rOlwiaHR0cHM6Ly93d3cuZnVubnlvcmRpZS5jb20vXCJ9LHtuYW1lOlwiaXRhbGtpXCIsbGluazpcImh0dHBzOi8vd3d3Lml0YWxraS5jb20vaG9tZVwifSx7bmFtZTpcImVUb3JvXCIsbGluazpcImh0dHBzOi8vd3d3LmV0b3JvLmNvbS9cIn0se25hbWU6XCJYSU5HXCIsbGluazpcImh0dHBzOi8vd3d3LnhpbmcuY29tL2VuXCJ9LHtuYW1lOlwiTWVldE1lXCIsbGluazpcImh0dHBzOi8vd3d3Lm1lZXRtZS5jb20vXCJ9LHtuYW1lOlwiUmF2ZWxyeVwiLGxpbms6XCJodHRwczovL3d3dy5yYXZlbHJ5LmNvbS9hY2NvdW50L2xvZ2luXCJ9LHtuYW1lOlwiQ2FyZTJcIixsaW5rOlwiaHR0cHM6Ly93d3cuY2FyZTIuY29tL1wifSx7bmFtZTpcIllZXCIsbGluazpcImh0dHA6Ly93d3cueXkuY29tL1wifSx7bmFtZTpcIlZlcm9cIixsaW5rOlwiaHR0cHM6Ly93d3cudmVyby5jby9cIn0se25hbWU6XCJNZWRpdW1cIixsaW5rOlwiaHR0cHM6Ly9tZWRpdW0uY29tL1wifSx7bmFtZTpcIkdJUEhZXCIsbGluazpcImh0dHBzOi8vZ2lwaHkuY29tL1wifSx7bmFtZTpcIlRyaWJlXCIsbGluazpcImh0dHBzOi8vdHJpYmUuc28vXCJ9LHtuYW1lOlwiVGVuY2VudCBRUVwiLGxpbms6XCJodHRwczovL3d3dy5xcS5jb20vXCJ9LHtuYW1lOlwiV2VDaGF0XCIsbGluazpcImh0dHBzOi8vd3d3LndlY2hhdC5jb20vZW5cIn0se25hbWU6XCJRem9uZVwiLGxpbms6XCJodHRwczovL3F6b25lLnFxLmNvbS9cIn0se25hbWU6XCJUaWtUb2tcIixsaW5rOlwiaHR0cHM6Ly93d3cudGlrdG9rLmNvbS90cmVuZGluZz9sYW5nPWVuXCJ9LHtuYW1lOlwiU2luYSBXZWlib1wiLGxpbms6XCJodHRwczovL3d3dy53ZWliby5jb20vb3ZlcnNlYXNcIn0se25hbWU6XCJLdWFpc2hvdVwiLGxpbms6XCJodHRwczovL3d3dy5rdWFpc2hvdS5jb20vXCJ9LHtuYW1lOlwiU2t5cGVcIixsaW5rOlwiaHR0cHM6Ly93d3cuc2t5cGUuY29tL2VuL1wifSx7bmFtZTpcIlZpYmVyXCIsbGluazpcImh0dHBzOi8vd3d3LnZpYmVyLmNvbS9lbi9cIn0se25hbWU6XCJMSU5FXCIsbGluazpcImh0dHBzOi8vbGluZS5tZS9lbi9cIn0se25hbWU6XCJMSU5FIFBMQVlcIixsaW5rOlwiaHR0cDovL2xwLnBsYXkubGluZS5tZS9lbi5odG1sXCJ9LHtuYW1lOlwiVGhlIERvdHNcIixsaW5rOlwiaHR0cHM6Ly90aGUtZG90cy5jb20vXCJ9LHtuYW1lOlwiVGVsZWdyYW1cIixsaW5rOlwiaHR0cHM6Ly90ZWxlZ3JhbS5vcmcvXCJ9LHtuYW1lOlwiRm91cnNxdWFyZSBTd2FybVwiLGxpbms6XCJodHRwczovL3d3dy5zd2FybWFwcC5jb20vXCJ9LHtuYW1lOlwiRG91YmFuXCIsbGluazpcImh0dHBzOi8vd3d3LmRvdWJhbi5jb20vXCJ9LHtuYW1lOlwiRGlzY29yZFwiLGxpbms6XCJodHRwczovL2Rpc2NvcmQuY29tL1wifSx7bmFtZTpcIkJhZG9vXCIsbGluazpcImh0dHBzOi8vYmFkb28uY29tL1wifSx7bmFtZTpcIk15c3BhY2VcIixsaW5rOlwiaHR0cHM6Ly9teXNwYWNlLmNvbS9cIn0se25hbWU6XCJNaXhpXCIsbGluazpcImh0dHBzOi8vbWl4aS5qcC9cIn0se25hbWU6XCJSYXZlbHJ5XCIsbGluazpcImh0dHBzOi8vd3d3LnJhdmVscnkuY29tL2FjY291bnQvbG9naW5cIn0se25hbWU6XCJDZWxsdWZ1blwiLGxpbms6XCJodHRwOi8vd3d3LmNlbGx1ZnVuLmNvbS9nYW1lcy5hc3A/dj01OWJmdVd4TnYwMFwifSx7bmFtZTpcIlhhbmdhXCIsbGluazpcImh0dHA6Ly94YW5nYS5jb20vXCJ9LHtuYW1lOlwiSW1ndXJcIixsaW5rOlwiaHR0cHM6Ly9pbWd1ci5jb20vXCJ9LHtuYW1lOlwiRWxsb1wiLGxpbms6XCJodHRwczovL2VsbG8uY28vXCJ9XTtmdW5jdGlvbiBiaShlKXtyZXR1cm4gbihmaSxlKX1mdW5jdGlvbiB2aShlKXt2YXIgYTtjb25zdCB0PW51bGwhPShhPW51bGw9PWU/dm9pZCAwOmUuZGF5cyk/YToxO2lmKHQ8MSl0aHJvdyBuZXcgRXJyb3IoXCJkYXlzIG11c3QgYmUgcG9zaXRpdmUsIHVzZSByZWNlbnQoKSBpbnN0ZWFkXCIpO2NvbnN0IG89MjQqdCo2MCo2MCoxZTMsaT1uZXcgRGF0ZSxyPW5ldyBEYXRlKGkuZ2V0VGltZSgpK28pO3JldHVybiBuKCgoKT0+JCh7ZnJvbTppLHRvOnJ9KSksZSl9dmFyIHdpLGtpPXtvbHltcGljOltcIkFyY2hlcnlcIixcIkFydGlzdGljIEd5bW5hc3RpY3NcIixcIkFydGlzdGljIFN3aW1taW5nXCIsXCJBdGhsZXRpY3NcIixcIkJhZG1pbnRvblwiLFwiQmFzZWJhbGwgU29mdGJhbGxcIixcIkJhc2tldGJhbGxcIixcIkJlYWNoIFZvbGxleWJhbGxcIixcIkJNWCBGcmVlc3R5bGVcIixcIkJNWCBSYWNpbmdcIixcIkJveGluZ1wiLFwiS2F5YWsgRmxhdHdhdGVyXCIsXCJLYXlhayBTbGFsb21cIixcIkRpdmluZ1wiLFwiRXF1ZXN0cmlhblwiLFwiRmVuY2luZ1wiLFwiRm9vdGJhbGxcIixcIkdvbGZcIixcIkhhbmRiYWxsXCIsXCJIb2NrZXlcIixcIkp1ZG9cIixcIkthcmF0ZVwiLFwiTWFyYXRob24gU3dpbW1pbmdcIixcIk1vZGVybiBQZW50YXRobG9uXCIsXCJNb3VudGFpbiBCaWtlXCIsXCJSaHl0aG1pYyBHeW1uYXN0aWNzXCIsXCJSb2FkIEN5Y2xpbmdcIixcIlJvd2luZ1wiLFwiUnVnYnlcIixcIlNhaWxpbmdcIixcIlNob290aW5nXCIsXCJTa2F0ZWJvYXJkaW5nXCIsXCJTcG9ydCBDbGltYmluZ1wiLFwiU3VyZmluZ1wiLFwiU3dpbW1pbmdcIixcIlRhYmxlIFRlbm5pc1wiLFwiVGFla3dvbmRvXCIsXCJUZW5uaXNcIixcIlRyYWNrIEN5Y2xpbmdcIixcIlRyYW1wb2xpbmVcIixcIlRyaWF0aGxvblwiLFwiVm9sbGV5YmFsbFwiLFwiV2F0ZXIgUG9sb1wiLFwiV2VpZ2h0bGlmdGluZ1wiLFwiV3Jlc3RsaW5nXCJdLHdpbnRlck9seW1waWM6W1wiQWxwaW5lIFNraWluZ1wiLFwiQmlhdGhsb25cIixcIkJvYnNsZWlnaFwiLFwiQ3Jvc3MtQ291bnRyeSBTa2lpbmdcIixcIkN1cmxpbmdcIixcIkZpZ3VyZSBTa2F0aW5nXCIsXCJGcmVlc3R5bGUgU2tpaW5nXCIsXCJJY2UgSG9ja2V5XCIsXCJMdWdlXCIsXCJOb3JkaWMgQ29tYmluZWRcIixcIlNob3J0IFRyYWNrIFNwZWVkIFNrYXRpbmdcIixcIlNrZWxldG9uXCIsXCJTa2kgSnVtcGluZ1wiLFwiU25vd2JvYXJkXCIsXCJTcGVlZCBTa2F0aW5nXCJdLG91dGRvb3I6W1wiQXJjaGVyeVwiLFwiQXRobGV0aWNzXCIsXCJCYWRtaW50b25cIixcIkJhc2ViYWxsXCIsXCJCYXNrZXRiYWxsXCIsXCJCb3dsaW5nXCIsXCJCb3hpbmdcIixcIkNhbXBpbmdcIixcIkNhbm9laW5nXCIsXCJDbGltYmluZ1wiLFwiQ3JpY2tldFwiLFwiQ3VybGluZ1wiLFwiQ3ljbGluZ1wiLFwiRXF1ZXN0cmlhblwiLFwiRmVuY2luZ1wiLFwiRm9vdGJhbGxcIixcIkdvbGZcIixcIkd5bW5hc3RpY3NcIixcIkhhbmRiYWxsXCIsXCJIYW5nIEdsaWRpbmdcIixcIkhpZ2ggSnVtcGluZ1wiLFwiSG9ja2V5XCIsXCJJY2UgSG9ja2V5XCIsXCJKdWRvXCIsXCJLYXJhdGVcIixcIktpdGUgRmx5aW5nXCIsXCJNb25rZXkgQmFyc1wiLFwiTW90b3JzcG9ydHNcIixcIk5ldGJhbGxcIixcIlJvd2luZ1wiLFwiUnVnYnlcIixcIlJ1bm5pbmdcIixcIlNhaWxpbmdcIixcIlNrYXRlYm9hcmRpbmdcIixcIlNsaWRlXCIsXCJTbm93IFNraWluZ1wiLFwiU29jY2VyXCIsXCJTdHJlZXQgSG9ja2V5XCIsXCJTdXJmaW5nXCIsXCJTd2ltbWluZ1wiLFwiVGFibGUgVGVubmlzXCIsXCJUZW5uaXNcIixcIlRyZWtraW5nXCIsXCJUcmlhdGhsb25cIixcIlZvbGxleWJhbGxcIixcIldlaWdodGxpZnRpbmdcIixcIldyZXN0bGluZ1wiXX07Y29uc3QgU2k9bnVsbD09KHdpPU9iamVjdC5rZXlzKGtpKSk/dm9pZCAwOndpLmxlbmd0aDtmdW5jdGlvbiBDaShlKXtjb25zdCBhPWtpLHQ9bnVsbD09ZT92b2lkIDA6ZS5jYXRlZ29yeTtpZighU2kpdGhyb3dcIk5vIFNwb3J0IENhdGVnb3JpZXMgZm91bmRcIjtpZih0JiYhYVt0XSl0aHJvd2BObyBTcG9ydHMgZm91bmQgZm9yIHNlbGVjdGVkIGNhdGVnb3J5ICgke3R9KWA7cmV0dXJuIG4oKCgpPT57aWYodClyZXR1cm4gcihhW3RdKTtjb25zdCBlPXMoe21pbjowLG1heDpTaS0xLGZyYWN0aW9uOjB9KSxvPU9iamVjdC5rZXlzKGEpW2VdO3JldHVybiByKGFbb10pfSksZSl9ZnVuY3Rpb24gQWkoZSl7Y29uc3QgYT1bTSgpLGooKSxfKCksVmEoKSx5dCgpXTtyZXR1cm4gbigoKCk9PnIoYSkpLGUpfXZhciBNaT1bXCJPa2xhaG9tYVwiLFwiU291dGggRGFrb3RhXCIsXCJNYXNzYWNodXNldHRzXCIsXCJNaW5uZXNvdGFcIixcIlJob2RlIElzbGFuZFwiLFwiRmxvcmlkYVwiLFwiRGVsYXdhcmVcIixcIlV0YWhcIixcIk1hcnlsYW5kXCIsXCJQZW5uc3lsdmFuaWFcIixcIldlc3QgVmlyZ2luaWFcIixcIk5ldmFkYVwiLFwiTmV3IFlvcmtcIixcIkFsYWJhbWFcIixcIkFyaXpvbmFcIixcIld5b21pbmdcIixcIldhc2hpbmd0b25cIixcIk5lYnJhc2thXCIsXCJNaXNzaXNzaXBwaVwiLFwiTWlzc291cmlcIixcIkFya2Fuc2FzXCIsXCJWZXJtb250XCIsXCJOb3J0aCBEYWtvdGFcIixcIklvd2FcIixcIkdlb3JnaWFcIixcIktlbnR1Y2t5XCIsXCJXaXNjb25zaW5cIixcIk5ldyBIYW1wc2hpcmVcIixcIkhhd2FpaVwiLFwiSWRhaG9cIixcIk1pY2hpZ2FuXCIsXCJPaGlvXCIsXCJDb2xvcmFkb1wiLFwiS2Fuc2FzXCIsXCJNYWluZVwiLFwiQWxhc2thXCIsXCJJbmRpYW5hXCIsXCJTb3V0aCBDYXJvbGluYVwiLFwiT3JlZ29uXCIsXCJJbGxpbm9pc1wiLFwiVGVubmVzc2VlXCIsXCJDYWxpZm9ybmlhXCIsXCJWaXJnaW5pYVwiLFwiVGV4YXNcIixcIk1vbnRhbmFcIixcIk5ldyBKZXJzZXlcIixcIk5vcnRoIENhcm9saW5hXCJdO2Z1bmN0aW9uIFRpKGUpe3JldHVybiBuKE1pLGUpfXZhciBCaT1bXCJPUlwiLFwiRkxcIixcIk5NXCIsXCJBS1wiLFwiTU9cIixcIk5FXCIsXCJSSVwiLFwiTUlcIixcIlBBXCIsXCJXSVwiLFwiQUxcIixcIk1BXCIsXCJNTlwiLFwiVE5cIixcIk5EXCIsXCJNU1wiLFwiQVJcIixcIkhJXCIsXCJVVFwiLFwiSURcIixcIlNDXCIsXCJDQVwiLFwiTkpcIixcIkNUXCIsXCJPS1wiLFwiQVpcIixcIklBXCIsXCJTRFwiLFwiTVRcIixcIk1EXCIsXCJXWVwiLFwiS1NcIixcIldWXCIsXCJDT1wiLFwiVFhcIixcIlZUXCIsXCJOVlwiLFwiREVcIixcIk1FXCIsXCJHQVwiLFwiTEFcIixcIklOXCIsXCJWQVwiXTtmdW5jdGlvbiBJaShlKXtyZXR1cm4gbihCaSxlKX12YXIgUGk9W3tzdGF0dXM6XCJQZW5kaW5nXCIsdHlwZTpbXCJQcm9qZWN0XCIsXCJVc2VyIFN0b3J5XCJdfSx7c3RhdHVzOlwiVG9kb1wiLHR5cGU6W1wiVXNlciBTdG9yeVwiLFwiVGFza1wiXX0se3N0YXR1czpcIkluIHByb2dyZXNzXCIsdHlwZTpbXCJUYXNrXCJdfSx7c3RhdHVzOlwiSW4gRGlzY3Vzc2lvblwiLHR5cGU6W1wiVXNlciBTdG9yeVwiXX0se3N0YXR1czpcIkluIERldmVsb3BtZW50XCIsdHlwZTpbXCJVc2VyIFN0b3J5XCIsXCJUYXNrXCJdfSx7c3RhdHVzOlwiTmVlZHMgQ29uZmlybWF0aW9uXCIsdHlwZTpbXCJVc2VyIFN0b3J5XCJdfSx7c3RhdHVzOlwiQ29tcGxldGVkXCIsdHlwZTpbXCJVc2VyIFN0b3J5XCIsXCJUYXNrXCIsXCJQcm9qZWN0XCJdfSx7c3RhdHVzOlwiVXBjb21pbmdcIix0eXBlOltcIlByb2plY3RcIl19LHtzdGF0dXM6XCJPdmVyZHVlXCIsdHlwZTpbXCJQcm9qZWN0XCJdfSx7c3RhdHVzOlwiTm90IHN0YXJ0ZWRcIix0eXBlOltcIlByb2plY3RcIl19LHtzdGF0dXM6XCJBY3RpdmVcIix0eXBlOltcIlByb2plY3RcIl19LHtzdGF0dXM6XCJQcmlvcml0eVwiLHR5cGU6W1wiUHJvamVjdFwiXX0se3N0YXR1czpcIkNhbmNlbGVkXCIsdHlwZTpbXCJQcm9qZWN0XCJdfSx7c3RhdHVzOlwiQ2xvc2VkXCIsdHlwZTpbXCJQcm9qZWN0XCIsXCJUYXNrXCJdfSx7c3RhdHVzOlwiTmV3XCIsdHlwZTpbXCJQcm9qZWN0XCIsXCJUYXNrXCIsXCJVc2VyIFN0b3J5XCJdfSx7c3RhdHVzOlwiT24gaG9sZFwiLHR5cGU6W1wiUHJvamVjdFwiXX1dO2Z1bmN0aW9uIHhpKGUpe2xldCBhO2lmKG51bGwhPWUmJmUudHlwZSl7YT1QaS5maWx0ZXIoKGE9PmEudHlwZS5pbmNsdWRlcyhlLnR5cGUpKSkubWFwKCgoe3N0YXR1czplfSk9PmUpKS5mbGF0KCl8fFtdfWVsc2UgYT1QaS5tYXAoKCh7c3RhdHVzOmV9KT0+ZSkpLmZsYXQoKTtyZXR1cm4gbihhLGUpfXZhciBEaT1bXCJCYXNpY1wiLFwiUHJlbWl1bVwiLFwiRnJlZVwiLFwiR29sZFwiLFwiVW5saW1pdGVkXCIsXCJTdGFydGVyXCIsXCJCdXNpbmVzc1wiLFwiUHJvZmVzc2lvbmFsXCIsXCJBZHZhbmNlZFwiLFwiU2lsdmVyXCIsXCJCcm9uemVcIixcIlN0YW5kYXJkXCIsXCJQcm9cIixcIkVudGVycHJpc2VcIixcIlBsYXRpbnVtXCJdO2Z1bmN0aW9uIHFpKGUpe3JldHVybiBuKERpLGUpfXZhciBGaT1be3JlYWxOYW1lOlwiUGV0ZXIgUGFya2VyXCIsYWx0ZXJFZ286XCJTcGlkZXItbWFuXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJNYXR0IE11cmRvY2tcIixhbHRlckVnbzpcIkRhcmVkZXZpbFwiLGNvbXBhbnk6XCJNYXJ2ZWxcIn0se3JlYWxOYW1lOlwiVCdDaGFsbGFcIixhbHRlckVnbzpcIkJsYWNrIFBhbnRoZXJcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIlN0ZXZlIFJvZ2Vyc1wiLGFsdGVyRWdvOlwiQ2FwdGFpbiBBbWVyaWNhXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJUaG9yIE9kaW5zb25cIixhbHRlckVnbzpcIlRob3JcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIlJlbXkgRXRpZW5uZSBMZUJlYXVcIixhbHRlckVnbzpcIkdhbWJpdFwiLGNvbXBhbnk6XCJNYXJ2ZWxcIn0se3JlYWxOYW1lOidKYW1lcyBcIkxvZ2FuXCIgSG93bGV0dCcsYWx0ZXJFZ286XCJXb2x2ZXJpbmVcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIkZyYW5rIENhc3RsZVwiLGFsdGVyRWdvOlwiUHVuaXNoZXJcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIkRyLiBTdGVwaGVuIFN0cmFuZ2VcIixhbHRlckVnbzpcIkRvY3RvciBTdHJhbmdlXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJUb255IFN0YXJrXCIsYWx0ZXJFZ286XCJJcm9uIE1hblwiLGNvbXBhbnk6XCJNYXJ2ZWxcIn0se3JlYWxOYW1lOlwiV2FkZSBXaWxzb25cIixhbHRlckVnbzpcIkRlYWRwb29sXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJTdGV2ZW4gR3JhbnRcIixhbHRlckVnbzpcIk1vb24gS25pZ2h0XCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJGcm9nIFRob3JcIixhbHRlckVnbzpcIkZyb2cgVGhvclwiLGNvbXBhbnk6XCJNYXJ2ZWxcIn0se3JlYWxOYW1lOlwiRG91ZyBSYW1zZXlcIixhbHRlckVnbzpcIkN5cGhlclwiLGNvbXBhbnk6XCJNYXJ2ZWxcIn0se3JlYWxOYW1lOlwiTmF0YXNoYSBBbGlhbm92bmEgUm9tYW5vdmFcIixhbHRlckVnbzpcIkJsYWNrIFdpZG93XCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJNcy4gTWFydmVsXCIsYWx0ZXJFZ286XCJDYXJvbCBEYW52ZXJzXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJTaGFkb3djYXRcIixhbHRlckVnbzpcIktpdHR5IFByeWRlXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJTdXNhbiBTdG9ybVwiLGFsdGVyRWdvOlwiSW52aXNpYmxlIFdvbWFuXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJFbGVrdHJhIE5hdGNoaW9zXCIsYWx0ZXJFZ286XCJFbGVrdHJhXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJKYW5ldCBWYW4gRHluZVwiLGFsdGVyRWdvOlwiV2FzcFwiLGNvbXBhbnk6XCJNYXJ2ZWxcIn0se3JlYWxOYW1lOlwiQ2xhcmljZSBGZXJndXNvblwiLGFsdGVyRWdvOlwiQmxpbmtcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIk9yb3JvIE11bnJvZVwiLGFsdGVyRWdvOlwiU3Rvcm1cIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIldhbmRhIE1heGltb2ZmXCIsYWx0ZXJFZ286XCJTY2FybGV0IFdpdGNoXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJBbm5hIE1hcmllIExlQmVhdVwiLGFsdGVyRWdvOlwiUm9ndWVcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIkplbm5pZmVyIFdhbHRlclwiLGFsdGVyRWdvOlwiU2hlLUh1bGtcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIlNpbHZpamEgU2FibGlub3ZhXCIsYWx0ZXJFZ286XCJTaWx2ZXIgU2FibGVcIixjb21wYW55OlwiTWFydmVsXCJ9LHtyZWFsTmFtZTpcIkdhbW9yYSBaZW4gV2hvYmVyaSBCZW4gVGl0YW5cIixhbHRlckVnbzpcIkdhbW9yYVwiLGNvbXBhbnk6XCJNYXJ2ZWxcIn0se3JlYWxOYW1lOlwiSmVzc2ljYSBEcmV3XCIsYWx0ZXJFZ286XCJYLTIzXCIsY29tcGFueTpcIk1hcnZlbFwifSx7cmVhbE5hbWU6XCJCcnVjZSBXYXluZVwiLGFsdGVyRWdvOlwiQmF0bWFuXCIsY29tcGFueTpcIkRDXCJ9LHtyZWFsTmFtZTpcIkNsYXJrIEtlbnRcIixhbHRlckVnbzpcIlN1cGVybWFuXCIsY29tcGFueTpcIkRDXCJ9LHtyZWFsTmFtZTpcIkhhbCBKb3JkYW5cIixhbHRlckVnbzpcIkdyZWVuIExhbnRlcm5cIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiQmFycnkgQWxsZW5cIixhbHRlckVnbzpcIlRoZSBGbGFzaFwiLGNvbXBhbnk6XCJEQ1wifSx7cmVhbE5hbWU6XCJKJ29ubiBKJ29uenpcIixhbHRlckVnbzpcIk1hcnRpYW4gTWFuaHVudGVyXCIsY29tcGFueTpcIkRDXCJ9LHtyZWFsTmFtZTpcIkFydGh1ciBDdXJyeVwiLGFsdGVyRWdvOlwiQXF1YW1hblwiLGNvbXBhbnk6XCJEQ1wifSx7cmVhbE5hbWU6XCJPbGl2ZXIgUXVlZW5cIixhbHRlckVnbzpcIkdyZWVuIEFycm93XCIsY29tcGFueTpcIkRDXCJ9LHtyZWFsTmFtZTpcIlJ5YW4gQ2hvaVwiLGFsdGVyRWdvOlwiVGhlIEF0b21cIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiQ2FydGVyIEhhbGxcIixhbHRlckVnbzpcIkhhd2ttYW5cIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiTmF0aGFuaWVsIEFkYW1cIixhbHRlckVnbzpcIkNhcHRhaW4gQXRvbVwiLGNvbXBhbnk6XCJEQ1wifSx7cmVhbE5hbWU6XCJKZWZmZXJzb24gTWljaGFlbCBQaWVyY2VcIixhbHRlckVnbzpcIkJsYWNrIExpZ2h0bmluZ1wiLGNvbXBhbnk6XCJEQ1wifSx7cmVhbE5hbWU6XCJEaWFuYSBQcmluY2VcIixhbHRlckVnbzpcIldvbmRlciBXb21hblwiLGNvbXBhbnk6XCJEQ1wifSx7cmVhbE5hbWU6XCJDaGF5LUFyYVwiLGFsdGVyRWdvOlwiSGF3a2dpcmxcIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiVG9yYSBPbGFmc2RvdHRlclwiLGFsdGVyRWdvOlwiSWNlXCIsY29tcGFueTpcIkRDXCJ9LHtyZWFsTmFtZTpcIkthcmEgWm9yLUVsXCIsYWx0ZXJFZ286XCJTdXBlcmdpcmxcIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiSmVubmlmZXItTHlubiBIYXlkZW5cIixhbHRlckVnbzpcIkphZGVcIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiS2FyYSBab3ItTFwiLGFsdGVyRWdvOlwiUG93ZXIgR2lybFwiLGNvbXBhbnk6XCJEQ1wifSx7cmVhbE5hbWU6XCJEYXduIEdyYW5nZXJcIixhbHRlckVnbzpcIkhhd2tcIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiRGluYWggTGFuY2VcIixhbHRlckVnbzpcIkJsYWNrIENhbmFyeVwiLGNvbXBhbnk6XCJEQ1wifSx7cmVhbE5hbWU6XCJIZWxlbmEgQmVydGluZWxsaVwiLGFsdGVyRWdvOlwiSHVudHJlc3NcIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiQmFyYmFyYSBHb3Jkb25cIixhbHRlckVnbzpcIkJhdGdpcmxcIixjb21wYW55OlwiRENcIn0se3JlYWxOYW1lOlwiWmluZGEgQmxha2VcIixhbHRlckVnbzpcIkxhZHkgQmxhY2toYXdrXCIsY29tcGFueTpcIkRDXCJ9XTtmdW5jdGlvbiBHaShlKXtyZXR1cm4gbigoKCk9Pntjb25zdCBhPW51bGwhPWUmJmUuY29tcGFueT9GaS5maWx0ZXIoKCh7Y29tcGFueTphfSk9PmE9PT1lLmNvbXBhbnkpKTpGaTtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxyKGEpLHtpZDpBbygpfSl9KSxlKX1mdW5jdGlvbiBMaShlKXtyZXR1cm4gbigoKCk9PnIobnVsbCE9ZSYmZS5jb21wYW55P0ZpLmZpbHRlcigoKHtjb21wYW55OmF9KT0+YT09PWUuY29tcGFueSkpOkZpKS5hbHRlckVnbyksZSl9dmFyIFJpPVsnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4uc3Qwe2ZpbGw6I0ZGRkZGRjt9PC9zdHlsZT48Zz48cGF0aCBkPVwiTTI4LDE0SDE0Yy0xLjEsMC0yLTAuOS0yLTJzMC45LTIsMi0yaDFoMTNjMC42LDAsMS0wLjQsMS0xcy0wLjQtMS0xLTFIMTVoLTFIN0M1LjksOCw1LDcuMSw1LDZzMC45LTIsMi0yaDE0YzAuNiwwLDEtMC40LDEtMXMtMC40LTEtMS0xSDdDNC44LDIsMywzLjgsMyw2djE1YzAsMi4yLDEuOCw0LDQsNGgzdjJjMCwyLjIsMS44LDQsNCw0aDE0YzAuNiwwLDEtMC40LDEtMVYxNUMyOSwxNC40LDI4LjYsMTQsMjgsMTR6XCIvPjxwYXRoIGQ9XCJNMjgsMTFIMTRjLTAuNiwwLTEsMC40LTEsMXMwLjQsMSwxLDFoMTRjMC42LDAsMS0wLjQsMS0xUzI4LjYsMTEsMjgsMTF6XCIvPjxwYXRoIGQ9XCJNMjEsNUg3QzYuNCw1LDYsNS40LDYsNnMwLjQsMSwxLDFoMTRjMC42LDAsMS0wLjQsMS0xUzIxLjYsNSwyMSw1elwiLz48L2c+PC9zdmc+JywnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4uc3Qwe2ZpbGw6I0ZGRkZGRjt9PC9zdHlsZT48Zz48cGF0aCBkPVwiTTMxLDI1SDEwLjVDOCwyNSw2LDIzLDYsMjAuNVM4LDE2LDEwLjUsMTZIMzFjMC42LDAsMSwwLjQsMSwxcy0wLjQsMS0xLDFIMTAuNUM5LjEsMTgsOCwxOS4xLDgsMjAuNVM5LjEsMjMsMTAuNSwyM0gzMSBjMC42LDAsMSwwLjQsMSwxUzMxLjYsMjUsMzEsMjV6XCIvPjwvZz48Zz48cGF0aCBkPVwiTTMwLDI1Yy0wLjMsMC0wLjctMC4yLTAuOS0wLjVjLTEuNC0yLjUtMS40LTUuNSwwLThjMC4zLTAuNSwwLjktMC42LDEuNC0wLjRjMC41LDAuMywwLjYsMC45LDAuNCwxLjRjLTEuMSwxLjktMS4xLDQuMSwwLDZjMC4zLDAuNSwwLjEsMS4xLTAuNCwxLjRDMzAuMywyNSwzMC4yLDI1LDMwLDI1elwiLz48L2c+PGc+PHBhdGggZD1cIk0yNSwzMkg0LjVDMiwzMiwwLDMwLDAsMjcuNVMyLDIzLDQuNSwyM0gyNWMwLjYsMCwxLDAuNCwxLDFzLTAuNCwxLTEsMUg0LjVDMy4xLDI1LDIsMjYuMSwyLDI3LjVTMy4xLDMwLDQuNSwzMEgyNSBjMC42LDAsMSwwLjQsMSwxUzI1LjYsMzIsMjUsMzJ6XCIvPjwvZz48Zz48cGF0aCBkPVwiTTI0LDMyYy0wLjMsMC0wLjctMC4yLTAuOS0wLjVjLTEuNC0yLjUtMS40LTUuNSwwLThjMC4zLTAuNSwwLjktMC42LDEuNC0wLjRjMC41LDAuMywwLjYsMC45LDAuNCwxLjRjLTEuMSwxLjktMS4xLDQuMSwwLDZjMC4zLDAuNSwwLjEsMS4xLTAuNCwxLjRDMjQuMywzMiwyNC4yLDMyLDI0LDMyelwiLz48L2c+PGc+PHBhdGggZD1cIk0xNi45LDVjLTAuNiwwLTEtMC40LTEtMWMwLTAuNy0wLjYtMS41LTEuNS0ybC0wLjItMC4xYy0wLjUtMC4zLTAuNy0wLjktMC40LTEuM2MwLjMtMC41LDAuOS0wLjcsMS4zLTAuNGwwLjIsMC4xYzEuNiwwLjksMi42LDIuMywyLjYsMy44QzE3LjksNC42LDE3LjUsNSwxNi45LDV6XCIvPjwvZz48cGF0aCBkPVwiTTIxLjUsMy4xTDIxLjUsMy4xYy0xLjItMC4yLTIuNCwwLjEtMy40LDAuN2MtMC4zLDAuMi0wLjgsMC4yLTEuMSwwYy0wLjMtMC4yLTAuNy0wLjQtMS4xLTAuNWMwLDAuMiwwLjEsMC41LDAuMSwwLjdjMCwwLjYtMC40LDEtMSwxcy0xLTAuNC0xLTFjMC0wLjMtMC4xLTAuNi0wLjMtMC45YzAsMC0wLjEsMC0wLjEsMGMtMi45LDAuNS00LjksMy41LTQuNSw2LjdjMC4zLDIuMywxLjksNS44LDMuOSw3LjNjMC43LDAuNSwxLjQsMC44LDIsMC44YzAuMSwwLDAuMywwLDAuNCwwYzAuNS0wLjEsMC45LTAuMywxLjMtMC42YzAuNC0wLjMsMS4xLTAuMywxLjUsMGMwLjQsMC4zLDAuOSwwLjUsMS4zLDAuNmMwLjgsMC4xLDEuNi0wLjEsMi41LTAuN2MyLTEuNSwzLjYtNSwzLjktNy4zQzI2LjMsNi42LDI0LjMsMy41LDIxLjUsMy4xelwiLz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMTQsMjRjMC01LjUsNC41LTEwLDEwLTEwYzEsMCwyLjEsMC4yLDMsMC41VjljMC0wLjYtMC40LTEtMS0xSDExSDlDNy45LDgsNyw3LjEsNyw2czAuOS0yLDItMmgxN2MwLjYsMCwxLTAuNCwxLTFzLTAuNC0xLTEtMUg5QzYuOCwyLDUsMy44LDUsNnYyMGMwLDIuMiwxLjgsNCw0LDRoMmg1QzE0LjgsMjguMywxNCwyNi4zLDE0LDI0elwiLz48cGF0aCBkPVwiTTI0LDE2Yy00LjQsMC04LDMuNi04LDhzMy42LDgsOCw4czgtMy42LDgtOFMyOC40LDE2LDI0LDE2eiBNMjcsMjVoLTZjLTAuNiwwLTEtMC40LTEtMXMwLjQtMSwxLTFoNmMwLjYsMCwxLDAuNCwxLDFTMjcuNiwyNSwyNywyNXpcIi8+PGc+PHBhdGggZD1cIk0yNiw3SDlDOC40LDcsOCw2LjYsOCw2czAuNC0xLDEtMWgxN2MwLjYsMCwxLDAuNCwxLDFTMjYuNiw3LDI2LDd6XCIvPjwvZz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMTguMywxOC4zYy0zLjEsMy4xLTMuMSw4LjIsMCwxMS4zczguMiwzLjEsMTEuMywwczMuMS04LjIsMC0xMS4zUzIxLjUsMTUuMiwxOC4zLDE4LjN6IE0yNi44LDIyLjZMMjUuNCwyNGwxLjQsMS40YzAuNCwwLjQsMC40LDEsMCwxLjRjLTAuNCwwLjQtMSwwLjQtMS40LDBMMjQsMjUuNGwtMS40LDEuNGMtMC40LDAuNC0xLDAuNC0xLjQsMGMtMC40LTAuNC0wLjQtMSwwLTEuNGwxLjQtMS40bC0xLjQtMS40Yy0wLjQtMC40LTAuNC0xLDAtMS40YzAuNC0wLjQsMS0wLjQsMS40LDBsMS40LDEuNGwxLjQtMS40YzAuNC0wLjQsMS0wLjQsMS40LDBDMjcuMiwyMS42LDI3LjIsMjIuMiwyNi44LDIyLjZ6XCIvPjxwYXRoIGQ9XCJNMTQsMjRjMC01LjUsNC41LTEwLDEwLTEwYzEsMCwyLjEsMC4yLDMsMC41VjljMC0wLjYtMC40LTEtMS0xSDExSDlDNy45LDgsNyw3LjEsNyw2czAuOS0yLDItMmgxN2MwLjYsMCwxLTAuNCwxLTFzLTAuNC0xLTEtMUg5QzYuOCwyLDUsMy44LDUsNnYyMGMwLDIuMiwxLjgsNCw0LDRoMmg1QzE0LjgsMjguMywxNCwyNi4zLDE0LDI0elwiLz48Zz48cGF0aCBkPVwiTTI2LDdIOUM4LjQsNyw4LDYuNiw4LDZzMC40LTEsMS0xaDE3YzAuNiwwLDEsMC40LDEsMVMyNi42LDcsMjYsN3pcIi8+PC9nPjwvc3ZnPicsJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzIgMzI7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnN0MHtmaWxsOiNGRkZGRkY7fTwvc3R5bGU+PGc+PHBhdGggZD1cIk0yMCwyNGMtMi44LDAtNS0yLjItNS01czIuMi01LDUtNXM1LDIuMiw1LDVTMjIuOCwyNCwyMCwyNHpcIi8+PC9nPjxwYXRoIGQ9XCJNMjksNUgzQzIuNCw1LDIsNS40LDIsNnYyMGMwLDAuNiwwLjQsMSwxLDFoMTF2LTQuNGMtMC42LTEuMS0xLTIuMy0xLTMuNmMwLTMuOSwzLjEtNyw3LTdzNywzLjEsNyw3YzAsMS4zLTAuNCwyLjUtMSwzLjZWMjdoM2MwLjYsMCwxLTAuNCwxLTFWNkMzMCw1LjQsMjkuNiw1LDI5LDV6IE0xMCwxNkg2Yy0wLjYsMC0xLTAuNC0xLTFzMC40LTEsMS0xaDRjMC42LDAsMSwwLjQsMSwxUzEwLjYsMTYsMTAsMTZ6IE0xMywxMkg2Yy0wLjYsMC0xLTAuNC0xLTFzMC40LTEsMS0xaDdjMC42LDAsMSwwLjQsMSwxUzEzLjYsMTIsMTMsMTJ6XCIvPjxwYXRoIGQ9XCJNMjAsMjZjLTEuNSwwLTIuOS0wLjUtNC0xLjNWMzFjMCwwLjMsMC4yLDAuNiwwLjQsMC44YzAuMywwLjIsMC42LDAuMiwwLjksMC4xbDIuNy0wLjlsMi43LDAuOWMwLjEsMCwwLjIsMC4xLDAuMywwLjFjMC4yLDAsMC40LTAuMSwwLjYtMC4yYzAuMy0wLjIsMC40LTAuNSwwLjQtMC44di02LjNDMjIuOSwyNS41LDIxLjUsMjYsMjAsMjZ6XCIvPjwvc3ZnPicsJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzIgMzI7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnN0MHtmaWxsOiNGRkZGRkY7fTwvc3R5bGU+PGc+PHBhdGggZD1cIk0yNiw3SDlDOC40LDcsOCw2LjYsOCw2czAuNC0xLDEtMWgxN2MwLjYsMCwxLDAuNCwxLDFTMjYuNiw3LDI2LDd6XCIvPjwvZz48cGF0aCBkPVwiTTI2LDhIMTFIOUM3LjksOCw3LDcuMSw3LDZzMC45LTIsMi0yaDE3YzAuNiwwLDEtMC40LDEtMXMtMC40LTEtMS0xSDlDNi44LDIsNSwzLjgsNSw2djIwYzAsMi4yLDEuOCw0LDQsNGgyaDE1YzAuNiwwLDEtMC40LDEtMVY5QzI3LDguNCwyNi42LDgsMjYsOHpcIi8+PC9zdmc+JywnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4uc3Qwe2ZpbGw6I0ZGRkZGRjt9PC9zdHlsZT48cGF0aCBkPVwiTTI0LDE2Yy00LjQsMC04LDMuNi04LDhzMy42LDgsOCw4czgtMy42LDgtOFMyOC40LDE2LDI0LDE2eiBNMjcsMjVoLTJ2MmMwLDAuNi0wLjQsMS0xLDFzLTEtMC40LTEtMXYtMmgtMmMtMC42LDAtMS0wLjQtMS0xczAuNC0xLDEtMWgydi0yYzAtMC42LDAuNC0xLDEtMXMxLDAuNCwxLDF2MmgyYzAuNiwwLDEsMC40LDEsMVMyNy42LDI1LDI3LDI1elwiLz48cGF0aCBkPVwiTTE0LDI0YzAtNS41LDQuNS0xMCwxMC0xMGMxLDAsMi4xLDAuMiwzLDAuNVY5YzAtMC42LTAuNC0xLTEtMUgxMUg5QzcuOSw4LDcsNy4xLDcsNnMwLjktMiwyLTJoMTdjMC42LDAsMS0wLjQsMS0xcy0wLjQtMS0xLTFIOUM2LjgsMiw1LDMuOCw1LDZ2MjBjMCwyLjIsMS44LDQsNCw0aDJoNUMxNC44LDI4LjMsMTQsMjYuMywxNCwyNHpcIi8+PGc+PHBhdGggZD1cIk0yNiw3SDlDOC40LDcsOCw2LjYsOCw2czAuNC0xLDEtMWgxN2MwLjYsMCwxLDAuNCwxLDFTMjYuNiw3LDI2LDd6XCIvPjwvZz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMTQsMjRjMC01LjUsNC41LTEwLDEwLTEwYzEsMCwyLjEsMC4yLDMsMC41VjljMC0wLjYtMC40LTEtMS0xSDExSDlDNy45LDgsNyw3LjEsNyw2czAuOS0yLDItMmgxN2MwLjYsMCwxLTAuNCwxLTFzLTAuNC0xLTEtMUg5QzYuOCwyLDUsMy44LDUsNnYyMGMwLDIuMiwxLjgsNCw0LDRoMmg1QzE0LjgsMjguMywxNCwyNi4zLDE0LDI0elwiLz48Zz48cGF0aCBkPVwiTTI2LDdIOUM4LjQsNyw4LDYuNiw4LDZzMC40LTEsMS0xaDE3YzAuNiwwLDEsMC40LDEsMVMyNi42LDcsMjYsN3pcIi8+PC9nPjxwYXRoIGQ9XCJNMzEuNywyMS45Yy0wLjEtMC41LTAuNy0wLjgtMS4yLTAuN2MtMC43LDAuMi0xLjIsMC0xLjMtMC4yYy0wLjEtMC4yLDAtMC43LDAuNS0xLjNjMC40LTAuNCwwLjQtMSwwLTEuNGMtMS0xLTIuMi0xLjctMy42LTIuMWMtMC41LTAuMS0xLjEsMC4yLTEuMiwwLjdjLTAuMiwwLjctMC42LDEtMC45LDFzLTAuNi0wLjQtMC45LTFjLTAuMi0wLjUtMC43LTAuOC0xLjItMC43Yy0xLjQsMC40LTIuNiwxLjEtMy42LDIuMWMtMC40LDAuNC0wLjQsMSwwLDEuNGMwLjUsMC41LDAuNiwxLDAuNSwxLjNjLTAuMSwwLjItMC42LDAuNC0xLjMsMC4yYy0wLjUtMC4xLTEuMSwwLjItMS4yLDAuN0MxNi4xLDIyLjYsMTYsMjMuMywxNiwyNHMwLjEsMS40LDAuMywyLjFjMC4xLDAuNSwwLjcsMC44LDEuMiwwLjdjMC43LTAuMiwxLjIsMCwxLjMsMC4yYzAuMSwwLjIsMCwwLjctMC41LDEuM2MtMC40LDAuNC0wLjQsMSwwLDEuNGMxLDEsMi4yLDEuNywzLjYsMi4xYzAuNSwwLjEsMS4xLTAuMiwxLjItMC43YzAuMi0wLjcsMC42LTEsMC45LTFzMC42LDAuNCwwLjksMWMwLjEsMC40LDAuNSwwLjcsMSwwLjdjMC4xLDAsMC4yLDAsMC4zLDBjMS40LTAuNCwyLjYtMS4xLDMuNi0yLjFjMC40LTAuNCwwLjQtMSwwLTEuNGMtMC41LTAuNS0wLjYtMS0wLjUtMS4zYzAuMS0wLjIsMC42LTAuNCwxLjMtMC4yYzAuNSwwLjEsMS4xLTAuMiwxLjItMC43YzAuMi0wLjcsMC4zLTEuNCwwLjMtMi4xUzMxLjksMjIuNiwzMS43LDIxLjl6IE0yNCwyN2MtMS43LDAtMy0xLjMtMy0zczEuMy0zLDMtM3MzLDEuMywzLDNTMjUuNywyNywyNCwyN3pcIi8+PC9zdmc+JywnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4uc3Qwe2ZpbGw6I0ZGRkZGRjt9PC9zdHlsZT48Zz48cG9seWdvbiBwb2ludHM9XCI3LjEsMjMgOC45LDIzIDgsMjEuMlwiLz48cGF0aCBkPVwiTTEzLDE2SDNjLTEuMSwwLTIsMC45LTIsMnYxMGMwLDEuMSwwLjksMiwyLDJoMTBjMS4xLDAsMi0wLjksMi0yVjE4QzE1LDE2LjksMTQuMSwxNiwxMywxNnogTTEyLjQsMjcuOUMxMi4zLDI4LDEyLjIsMjgsMTIsMjhjLTAuNCwwLTAuNy0wLjItMC45LTAuNkw5LjksMjVINi4xbC0xLjIsMi40Yy0wLjIsMC41LTAuOCwwLjctMS4zLDAuNGMtMC41LTAuMi0wLjctMC44LTAuNC0xLjNsNC04YzAuMy0wLjcsMS41LTAuNywxLjgsMGw0LDhDMTMuMSwyNywxMi45LDI3LjYsMTIuNCwyNy45elwiLz48L2c+PHBhdGggZD1cIk0xNywxSDdDNS45LDEsNSwxLjksNSwzdjEwYzAsMS4xLDAuOSwyLDIsMmgxMGMxLjEsMCwyLTAuOSwyLTJWM0MxOSwxLjksMTguMSwxLDE3LDF6IE0xMiwxMWMwLjksMCwxLjctMC40LDIuMi0xYzAuNC0wLjQsMS0wLjUsMS40LTAuMWMwLjQsMC40LDAuNSwxLDAuMSwxLjRjLTEsMS4xLTIuMywxLjctMy44LDEuN2MtMi44LDAtNS0yLjItNS01czIuMi01LDUtNWMxLjQsMCwyLjgsMC42LDMuOCwxLjdjMC40LDAuNCwwLjMsMS0wLjEsMS40Yy0wLjQsMC40LTEsMC4zLTEuNC0wLjFjLTAuNi0wLjctMS40LTEtMi4yLTFjLTEuNywwLTMsMS4zLTMsM1MxMC4zLDExLDEyLDExelwiLz48Zz48cGF0aCBkPVwiTTI0LDI0aC0zdjJoM2MwLjYsMCwxLTAuNCwxLTFTMjQuNiwyNCwyNCwyNHpcIi8+PHBhdGggZD1cIk0yNSwyMWMwLTAuNi0wLjQtMS0xLTFoLTN2MmgzQzI0LjYsMjIsMjUsMjEuNiwyNSwyMXpcIi8+PHBhdGggZD1cIk0yOCwxNkgxOGMtMS4xLDAtMiwwLjktMiwydjEwYzAsMS4xLDAuOSwyLDIsMmgxMGMxLjEsMCwyLTAuOSwyLTJWMThDMzAsMTYuOSwyOS4xLDE2LDI4LDE2eiBNMjcsMjVjMCwxLjctMS4zLDMtMywzaC00Yy0wLjYsMC0xLTAuNC0xLTF2LTR2LTRjMC0wLjYsMC40LTEsMS0xaDRjMS43LDAsMywxLjMsMywzYzAsMC44LTAuMywxLjUtMC44LDJDMjYuNywyMy41LDI3LDI0LjIsMjcsMjV6XCIvPjwvZz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMjguOSw5LjRDMjguOSw5LjQsMjguOSw5LjQsMjguOSw5LjRDMjguOSw5LjMsMjksOS4yLDI5LDkuMWMwLDAsMCwwLDAtMC4xYzAsMCwwLDAsMC0wLjFjMC0wLjEsMC0wLjIsMC0wLjNjMCwwLDAsMCwwLTAuMWMwLTAuMS0wLjEtMC4yLTAuMS0wLjNjMCwwLDAsMCwwLDBjLTAuMS0wLjEtMC4xLTAuMS0wLjItMC4ybC0xMS03Yy0wLjMtMC4yLTAuOC0wLjItMS4xLDBsLTEzLDljMCwwLTAuMSwwLjEtMC4xLDAuMWMwLDAsMCwwLTAuMSwwYy0wLjEsMC4xLTAuMSwwLjItMC4yLDAuM2MwLDAsMCwwLDAsMC4xQzMsMTAuOCwzLDEwLjksMywxMWMwLDAsMCwwLDAsMHY2djZjMCwwLjMsMC4yLDAuNywwLjUsMC44bDExLDdjMC4yLDAuMSwwLjQsMC4yLDAuNSwwLjJjMC4yLDAsMC40LTAuMSwwLjYtMC4ybDEzLTljMC4yLTAuMiwwLjQtMC40LDAuNC0wLjdzLTAuMS0wLjYtMC4zLTAuOGMtMC45LTAuOS0xLjEtMi4yLTAuNS0zLjRsMC43LTEuNWMwLTAuMSwwLjEtMC4yLDAuMS0wLjNjMCwwLDAtMC4xLDAtMC4xYzAsMCwwLDAsMCwwYzAtMC4xLDAtMC4zLTAuMS0wLjRjMCwwLDAtMC4xLDAtMC4xYzAtMC4xLTAuMS0wLjItMC4yLTAuM2MwLDAsMCwwLDAsMGMtMC45LTAuOS0xLjEtMi4yLTAuNS0zLjRMMjguOSw5LjR6IE0yNi42LDE0LjhsLTExLjYsOEw1LDE2LjV2LTMuNmw5LjUsNmMwLjIsMC4xLDAuNCwwLjIsMC41LDAuMmMwLjIsMCwwLjQtMC4xLDAuNi0wLjJsMTAuMy03LjFDMjUuOCwxMi44LDI2LDEzLjgsMjYuNiwxNC44eiBNMTUsMjguOEw1LDIyLjV2LTMuNmw5LjUsNmMwLjIsMC4xLDAuNCwwLjIsMC41LDAuMmMwLjIsMCwwLjQtMC4xLDAuNi0wLjJsMTAuMy03LjFjLTAuMSwxLjEsMC4xLDIuMiwwLjcsMy4xTDE1LDI4Ljh6XCIvPjwvc3ZnPicsJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzIgMzI7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnN0MHtmaWxsOiNGRkZGRkY7fTwvc3R5bGU+PGc+PHBhdGggZD1cIk0xNiwyMWMtMS4zLDAtMi42LTAuNS0zLjUtMS41QzExLjUsMTguNiwxMSwxNy4zLDExLDE2czAuNS0yLjYsMS41LTMuNWMxLjktMS45LDUuMS0xLjksNy4xLDBjMC45LDAuOSwxLjUsMi4yLDEuNSwzLjVzLTAuNSwyLjYtMS41LDMuNWwwLDBsMCwwQzE4LjYsMjAuNSwxNy4zLDIxLDE2LDIxelwiLz48L2c+PHBhdGggZD1cIk0xMS4xLDIwLjljLTAuOS0wLjktMS42LTIuMS0xLjktMy40Yy0yLjcsMi40LTUuNiw0LjctOC42LDYuOGMtMC4yLDAuMi0wLjQsMC40LTAuNCwwLjdjMCwwLjMsMC4xLDAuNiwwLjMsMC44bDUuNyw1LjdjMC4yLDAuMiwwLjQsMC4zLDAuNywwLjNjMCwwLDAuMSwwLDAuMSwwYzAuMywwLDAuNi0wLjIsMC43LTAuNGMyLjEtMyw0LjQtNS45LDYuOC04LjZDMTMuMiwyMi41LDEyLDIxLjksMTEuMSwyMC45elwiLz48cGF0aCBkPVwiTTMxLjUsNi4xbC01LjctNS43Yy0wLjItMC4yLTAuNS0wLjMtMC44LTAuM2MtMC4zLDAtMC42LDAuMi0wLjcsMC40Yy0yLjEsMy00LjQsNS45LTYuOCw4LjZjMS4zLDAuMywyLjQsMC45LDMuNCwxLjljMC45LDAuOSwxLjYsMi4xLDEuOSwzLjRjMi43LTIuNCw1LjYtNC43LDguNi02LjhjMC4yLTAuMiwwLjQtMC40LDAuNC0wLjdDMzEuOSw2LjYsMzEuNyw2LjMsMzEuNSw2LjF6XCIvPjwvc3ZnPicsJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzIgMzI7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnN0MHtmaWxsOiNGRkZGRkY7fTwvc3R5bGU+PHBhdGggZD1cIk0yOSwySDNDMi40LDIsMiwyLjQsMiwzdjE4YzAsMC42LDAuNCwxLDEsMWg4LjZsLTIuNiw3LjdjLTAuMiwwLjUsMC4xLDEuMSwwLjYsMS4zYzAuNSwwLjIsMS4xLTAuMSwxLjMtMC42bDEuNC00LjNoNy4ybDEuNCw0LjNjMC4xLDAuNCwwLjUsMC43LDAuOSwwLjdjMC4xLDAsMC4yLDAsMC4zLTAuMWMwLjUtMC4yLDAuOC0wLjcsMC42LTEuM0wyMC40LDIySDI5YzAuNiwwLDEtMC40LDEtMVYzQzMwLDIuNCwyOS42LDIsMjksMnpNMTguOSwyNGgtNS45bDAuNy0yaDQuNkwxOC45LDI0elwiLz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNNiwxOXY4YzAsMS43LDEuMywzLDMsM2gxNGMxLjcsMCwzLTEuMywzLTN2LThINnogTTIxLDI0YzAsMS43LTEuMywzLTMsM2gtNGMtMS43LDAtMy0xLjMtMy0zdi0yYzAtMC42LDAuNC0xLDEtMWg4YzAuNiwwLDEsMC40LDEsMVYyNHpcIi8+PGc+PHBhdGggZD1cIk0yMiw3Li0zQzI2LDExLjEsMjQuNCw4LjUsMjIsNy4xelwiLz48cGF0aCBkPVwiTTEwLDcuMWMtMi40LDEuNC00LDQtNCw2Ljl2M2g0VjcuMXpcIi8+PC9nPjxnPjxwYXRoIGQ9XCJNMTksOGgtNmMtMC42LDAtMS0wLjQtMS0xVjVjMC0xLjcsMS4zLTMsMy0zaDJjMS43LDAsMywxLjMsMywzdjJDMjAsNy42LDE5LjYsOCwxOSw4eiBNMTQsNmg0VjVjMC0wLjYtMC40LTEtMS0xaC0yYy0wLjYsMC0xLDAuNC0xLDFWNnpcIi8+PC9nPjxwYXRoIGQ9XCJNMTgsNmgtNGMtMC43LDAtMS40LDAuMS0yLDAuM1Y3djF2OWg4VjhWN1Y2LjNDMTkuNCw2LjEsMTguNyw2LDE4LDZ6XCIvPjxnPjxwYXRoIGQ9XCJNNCwxOC4yYy0xLjIsMC40LTIsMS41LTIsMi44djRjMCwxLjMsMC44LDIuNCwyLDIuOFYxOC4yelwiLz48L2c+PGc+PHBhdGggZD1cIk0yOCwxOC4ydjkuNmMxLjItMC40LDItMS41LDItMi44di00QzMwLDE5LjcsMjkuMiwxOC42LDI4LDE4LjJ6XCIvPjwvZz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMjcsM0gxMUM5LjMsMyw4LDQuOCw4LDd2MTRIN2MtMS43LDAtMywxLjgtMyw0czEuMyw0LDMsNGgxNmMxLjcsMCwzLTEuOCwzLTRWOGgzYzAuNiwwLDEtMC40LDEtMUMzMCw0LjgsMjguNywzLDI3LDN6TTEyLDEwaDZjMC42LDAsMSwwLjQsMSwxcy0wLjQsMS0xLDFoLTZjLTAuNiwwLTEtMC40LTEtMVMxMS40LDEwLDEyLDEweiBNMTIsMTNoM2MwLjYsMCwxLDAuNCwxLDFzLTAuNCwxLTEsMWgtM2MtMC42LDAtMS0wLjQtMS0xUzExLjQsMTMsMTIsMTN6IE0yMC40LDI3SDdjLTAuNCwwLTEtMC44LTEtMnMwLjYtMiwxLTJoMTMuNGMtMC4zLDAuNi0wLjQsMS4zLTAuNCwyUzIwLjIsMjYuNCwyMC40LDI3eiBNMjYuMSw2YzAuMi0wLjYsMC42LTEsMC45LTFzMC42LDAuNCwwLjksMUgyNi4xelwiLz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMTEsMUg5QzcuMywxLDYsMi4zLDYsNHYxaDRjMC42LDAsMSwwLjQsMSwxcy0wLjQsMS0xLDFINnYzaDNjMC42LDAsMSwwLjQsMSwxcy0wLjQsMS0xLDFINnYzaDRjMC42LDAsMSwwLjQsMSwxcy0wLjQsMS0xLDFINnYzaDNjMC42LDAsMSwwLjQsMSwxcy0wLjQsMS0xLDFINnYzaDRjMC42LDAsMSwwLjQsMSwxcy0wLjQsMS0xLDFINnYxYzAsMS43LDEuMywzLDMsM2gyYzEuNywwLDMtMS4zLDMtM1Y0QzE0LDIuMywxMi43LDEsMTEsMXpcIi8+PGc+PHBhdGggZD1cIk0yNiw2VjRjMC0xLjctMS4zLTMtMy0zaC0yYy0xLjcsMC0zLDEuMy0zLDN2MkgyNnpcIi8+PHBhdGggZD1cIk0xOCw4djE4YzAsMC4yLDAuMSwwLjQsMC4yLDAuNmwzLDRjMC4yLDAuMywwLjUsMC40LDAuOCwwLjRzMC42LTAuMSwwLjgtMC40bDMtNGMwLjEtMC4yLDAuMi0wLjQsMC4yLTAuNlY4SDE4elwiLz48L2c+PC9zdmc+JywnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4uc3Qwe2ZpbGw6I0ZGRkZGRjt9PC9zdHlsZT48Zz48cGF0aCBkPVwiTTIzLDI4TDIzLDI4Yy0xLjEsMC0yLjEtMC43LTIuNS0xLjhjMC0wLjEsMC0wLjItMC4xLTAuMmgtOC45YzAsMC4xLDAsMC4yLTAuMSwwLjJDMTEuMSwyNy4zLDEwLjEsMjgsOSwyOGgwYy0wLjYsMC0xLDAuNC0xLDFzMC40LDEsMSwxaDE0YzAuNiwwLDEtMC40LDEtMVMyMy42LDI4LDIzLDI4elwiLz48cGF0aCBkPVwiTTI3LDNINUMzLjMsMywyLDQuMywyLDZ2MTVjMCwxLjcsMS4zLDMsMywzaDYuOWg4LjFIMjdjMS43LDAsMy0xLjMsMy0zVjZDMzAsNC4zLDI4LjcsMywyNywzelwiLz48L2c+PHBhdGggY2xhc3M9XCJzdDBcIiBkPVwiTTE1LDIwVjEwYzAtMS43LTEuMy0zLTMtM0g3QzYuNCw3LDYsNy40LDYsOHY4YzAsMC42LDAuNCwxLDEsMWg1QzEzLjcsMTcsMTUsMTguMywxNSwyMEwxNSwyMFwiLz48cGF0aCBjbGFzcz1cInN0MFwiIGQ9XCJNMTcsMjBWMTBjMC0xLjcsMS4zLTMsMy0zaDVjMC42LDAsMSwwLjQsMSwxdjhjMCwwLjYtMC40LDEtMSwxaC01QzE4LjMsMTcsMTcsMTguMywxNywyMEwxNywyMFwiLz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMTksMjJWMTJjMC0xLjctMS4zLTMtMy0zaC01Yy0wLjYsMC0xLDAuNC0xLDF2OGMwLDAuNiwwLjQsMSwxLDFoNUMxNy43LDE5LDE5LDIwLjMsMTksMjJMMTksMjJcIi8+PHBhdGggZD1cIk0yMCwyMlYxMmMwLTEuNywxLjMtMywzLTNoNWMwLjYsMCwxLDAuNCwxLDF2OGMwLDAuNi0wLjQsMS0xLDFoLTVDMjEuMywxOSwyMCwyMC4zLDIwLDIyTDIwLDIyXCIvPjxwYXRoIGQ9XCJNMTYsMjJINkg0VjhoMmgxMGgyVjVjMC0xLjctMS4zLTMtMy0zSDVDMy4zLDIsMiwzLjMsMiw1djIyYzAsMS43LDEuMywzLDMsM2gxMGMxLjcsMCwzLTEuMywzLTN2LTVIMTZ6IE0xMSwyN0g5Yy0wLjYsMC0xLTAuNC0xLTFzMC40LTEsMS0xaDJjMC42LDAsMSwwLjQsMSwxUzExLjYsMjcsMTEsMjd6XCIvPjwvc3ZnPicsJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzIgMzI7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnN0MHtmaWxsOiNGRkZGRkY7fTwvc3R5bGU+PHBhdGggZD1cIk0xOS4xLDExLjFjLTAuMS0wLjItMC4zLTAuMy0wLjQtMC4zYy0wLjksMC4yLTEuNywwLTItMC41Yy0wLjMtMC41LTAuMS0xLjMsMC42LTJjMC4xLTAuMSwwLjEtMC40LDAtMC41Yy0wLjktMC45LTItMS42LTMuMy0xLjljLTAuMi0wLjEtMC40LDAuMS0wLjUsMC4zQzEzLjIsNywxMi42LDcuNiwxMiw3LjZTMTAuOCw3LDEwLjUsNi4xYy0wLjEtMC4yLTAuMy0wLjMtMC41LTAuM2MtMS4zLDAuMy0yLjQsMS0zLjMsMS45Yy0wLjEsMC4xLTAuMSwwLjQsMCwwLjVjMC42LDAuNywwLjksMS41LDAuNiwyYy0wLjMsMC41LTEuMSwwLjctMiwwLjVjLTAuMiwwLTAuNCwwLjEtMC40LDAuM2MtMC4yLDAuNi0wLjMsMS4zLTAuMywxLjlzMC4xLDEuMywwLjMsMS45YzAuMSwwLjIsMC4zLDAuMywwLjQsMC4zYzAuOS0wLjIsMS43LDAsMiwwLjVjMC4zLDAuNSwwLjEsMS4zLTAuNiwyYy0wLjEsMC4xLTAuMSwwLjQsMCwwLjVjMC45LDAuOSwyLDEuNiwzLjMsMS45YzAsMCwwLjEsMCwwLjEsMGMwLjIsMCwwLjMtMC4xLDAuNC0wLjNjMC4zLTAuOSwwLjgtMS41LDEuNS0xLjVzMS4yLDAuNiwxLjUsMS41YzAuMSwwLjIsMC4zLDAuMywwLjUsMC4zYzEuMy0wLjMsMi40LTEsMy4zLTEuOWMwLjEtMC4xLDAuMS0wLjQsMC0wLjVjLTAuNi0wLjctMC45LTEuNS0wLjYtMmMwLjMtMC41LDEuMS0wLjcsMi0wLjVjMC4yLDAsMC40LTAuMSwwLjQtMC4zYzAuMi0wLjYsMC4zLTEuMywwLjMtMS45UzE5LjMsMTEuNywxOS4xLDExLjF6IE0xMi45LDEzLjRjLTAuMSwwLjEtMC4xLDAuMi0wLjIsMC4zQzEyLjUsMTMuOSwxMi4zLDE0LDEyLDE0Yy0wLjEsMC0wLjMsMC0wLjQtMC4xYy0wLjEtMC4xLTAuMi0wLjEtMC4zLTAuMmMtMC4xLTAuMS0wLjItMC4yLTAuMi0wLjNjMC0wLjEtMC4xLTAuMy0wLjEtMC40YzAtMC4xLDAtMC4zLDAuMS0wLjRjMC4xLTAuMSwwLjEtMC4yLDAuMi0wLjNjMC40LTAuNCwxLTAuNCwxLjQsMGMwLjEsMC4xLDAuMiwwLjIsMC4yLDAuM2MwLDAuMSwwLjEsMC4zLDAuMSwwLjRDMTMsMTMuMSwxMywxMy4zLDEyLjksMTMuNHpcIi8+PHBhdGggZD1cIk0yOC45LDE3LjZMMjYsMTEuOEMyNS45LDYuNCwyMS40LDIsMTYsMmMtMi40LDAtNC42LDAuOC02LjQsMi4zQzEwLjQsNC4xLDExLjIsNCwxMiw0YzUsMCw5LDQsOSw5YzAsNS00LDktOSw5Yy0xLjEsMC0yLjEtMC4yLTMtMC41VjI3YzAsMC41LDAuMywwLjksMC44LDFsMTAsMmMwLjEsMCwwLjEsMCwwLjIsMGMwLjIsMCwwLjUtMC4xLDAuNi0wLjJjMC4yLTAuMiwwLjQtMC41LDAuNC0wLjh2LTRoMmMxLjcsMCwzLTEuMywzLTN2LTNoMmMwLjMsMCwwLjctMC4yLDAuOS0wLjVTMjksMTcuOSwyOC45LDE3LjZ6XCIvPjwvc3ZnPicsJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzIgMzI7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnN0MHtmaWxsOiNGRkZGRkY7fTwvc3R5bGU+PGc+PHBhdGggZD1cIk02LDdIMC45QzAuNCw3LDAsNy40LDAsNy45djkuMUMwLDE3LjYsMC40LDE4LDAuOSwxOEg2YzEuNywwLDMsMS4zLDMsM1YxMEM5LDguMyw3LjcsNyw2LDd6XCIvPjxwYXRoIGQ9XCJNMTguMSw3SDEzYy0xLjcsMC0zLDEuMy0zLDN2MTFjMC0xLjcsMS4zLTMsMy0zaDUuMWMwLjUsMCwwLjktMC40LDAuOS0wLjlWNy45QzE5LDcuNCwxOC42LDcsMTguMSw3elwiLz48L2c+PHBhdGggZD1cIk0zMS45LDE3LjZMMjksMTEuOEMyOC45LDYuNCwyNC40LDIsMTksMmMtMi44LDAtNS40LDEuMi03LjMsMy4yQzEyLjEsNS4xLDEyLjUsNSwxMyw1aDUuMUMxOS43LDUsMjEsNi4zLDIxLDcuOXY5LjFjMCwxLjYtMS4zLDIuOS0yLjksMi45SDEzYy0wLjYsMC0xLDAuNC0xLDF2NmMwLDAuNSwwLjMsMC45LDAuOCwxbDEwLDJjMC4xLDAsMC4xLDAsMC4yLDBjMC4yLDAsMC41LTAuMSwwLjYtMC4yYzAuMi0wLjIsMC40LTAuNSwwLjQtMC44di00aDJjMS43LDAsMy0xLjMsMy0zdi0zaDJjMC4zLDAsMC43LTAuMiwwLjktMC41UzMyLDE3LjksMzEuOSwxNy42elwiLz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMzAuMywxNy40YzAtMC4xLDAtMC4yLDAtMC4zbC0zLjYtOS43QzI2LjIsNiwyNS4xLDUuMiwyMy43LDVjLTEuNC0wLjItMi43LDAuMy0zLjUsMS40Yy0wLjMsMC40LTAuMiwxLjEsMC4yLDEuNGMwLjQsMC4zLDEuMSwwLjIsMS40LTAuMmMwLjQtMC41LDEtMC44LDEuNi0wLjdDMjQuMSw3LDI0LjYsNy40LDI0LjgsOGwyLjQsNi42Yy0xLTAuNC0yLjEtMC43LTMuMi0wLjdjLTMuMSwwLTUuOCwxLjgtNi43LDQuMmMtMC45LTAuMi0xLjgtMC4yLTIuNywwQzEzLjgsMTUuOCwxMS4xLDE0LDgsMTRjLTEuMiwwLTIuMywwLjItMy4yLDAuN0w3LjIsOGMwLjItMC42LDAuNy0xLDEuNC0xLjFjMC42LTAuMSwxLjIsMC4yLDEuNiwwLjdjMC4zLDAuNCwxLDAuNSwxLjQsMC4yczAuNS0xLDAuMi0xLjRDMTEsNS4zLDkuNyw0LjgsOC4zLDVDNi45LDUuMiw1LjgsNiw1LjMsNy4zbC0zLjYsOS43YzAsMC4xLDAsMC4yLDAsMC4zQzEuMywxOC4yLDEsMTkuMSwxLDIwYzAsMy4zLDMuMSw2LDcsNmMzLjgsMCw2LjktMi42LDctNS44YzAuNy0wLjIsMS40LTAuMiwyLDBjMC4xLDMuMiwzLjIsNS44LDcsNS44YzMuOSwwLDctMi43LDctNkMzMSwxOS4xLDMwLjcsMTguMiwzMC4zLDE3LjR6XCIvPjwvc3ZnPicsJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzIgMzI7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnN0MHtmaWxsOiNGRkZGRkY7fTwvc3R5bGU+PHBhdGggZD1cIk0yNyw4VjdjMC0zLjQtNC44LTYtMTEtNlM1LDMuNiw1LDd2MWMtMS43LDAtMywxLjMtMywzdjNjMCwwLjYsMC40LDEsMSwxczEtMC40LDEtMXYtM2MwLTAuNiwwLjQtMSwxLTF2Ni4yYy0xLjIsMC40LTIsMS41LTIsMi44djZjMCwwLjYsMC40LDEsMSwxdjFjMCwxLjcsMS4zLDMsMywzaDFjMS43LDAsMy0xLjMsMy0zdi0xaDEwdjFjMCwxLjcsMS4zLDMsMywzaDFjMS43LDAsMy0xLjMsMy0zdi0xYzAuNiwwLDEtMC40LDEtMXYtNmMwLTEuMy0wLjgtMi40LTItMi44VjEwYzAuNiwwLDEsMC40LDEsMXYzYzAsMC42LDAuNCwxLDEsMXMxLTAuNCwxLTF2LTNDMzAsOS4zLDI4LjcsOCwyNyw4eiBNMjYsMjFjMCwwLjYtMC40LDEtMSwxaC0xYy0wLjYsMC0xLTAuNC0xLTFzMC40LTEsMS0xaDFDMjUuNiwyMCwyNiwyMC40LDI2LDIxeiBNMjUsMTZoLTNoLTMuNkgxN3YtNmg4VjE2eiBNMjEsNS44YzAtMC4xLDAtMC4xLDAuMS0wLjJjMC0wLjEsMC4xLTAuMSwwLjEtMC4yYzAsMCwwLjEtMC4xLDAuMS0wLjFjMC40LTAuNCwxLTAuNCwxLjQsMGMwLDAsMC4xLDAuMSwwLjEsMC4xYzAsMC4xLDAuMSwwLjEsMC4xLDAuMmMwLDAuMSwwLDAuMSwwLjEsMC4yYzAsMC4xLDAsMC4xLDAsMC4yYzAsMC4xLDAsMC4zLTAuMSwwLjRjLTAuMSwwLjEtMC4xLDAuMi0wLjIsMC4zYy0wLjEsMC4xLTAuMiwwLjItMC4zLDAuMlMyMi4xLDcsMjIsN2MtMC4xLDAtMC4zLDAtMC40LTAuMWMtMC4xLDAtMC4yLTAuMS0wLjMtMC4yQzIxLjEsNi41LDIxLDYuMywyMSw2QzIxLDUuOSwyMSw1LjksMjEsNS44eiBNMTMsNWg2YzAuNiwwLDEsMC40LDEsMXMtMC40LDEtMSwxaC02Yy0wLjYsMC0xLTAuNC0xLTFTMTIuNCw1LDEzLDV6IE05LDUuOGMwLTAuMSwwLTAuMSwwLjEtMC4yYzAtMC4xLDAuMS0wLjEsMC4xLTAuMmMwLDAsMC4xLTAuMSwwLjEtMC4xYzAuNC0wLjQsMS0wLjQsMS40LDBjMCwwLDAuMSwwLjEsMC4xLDAuMWMwLDAuMSwwLjEsMC4xLDAuMSwwLjJjMCwwLjEsMCwwLjEsMC4xLDAuMmMwLDAuMSwwLDAuMSwwLDAuMmMwLDAuMSwwLDAuMy0wLjEsMC40Yy0wLjEsMC4xLTAuMSwwLjItMC4yLDAuM2MtMC4xLDAuMS0wLjIsMC4yLTAuMywwLjJTMTAuMSw3LDEwLDdDOS45LDcsOS43LDcsOS42LDYuOWMtMC4xLDAtMC4yLTAuMS0wLjMtMC4yQzkuMSw2LjUsOSw2LjMsOSw2QzksNS45LDksNS45LDksNS44eiBNNywxMGg4djZoLTEuNEgxMEg3VjEweiBNNywyMGgxYzAuNiwwLDEsMC40LDEsMXMtMC40LDEtMSwxSDdjLTAuNiwwLTEtMC40LTEtMVM2LjQsMjAsNywyMHogTTE5LjMsMjRoLTYuNWMtMC43LDAtMS4zLTAuNy0xLjEtMS40bDAuOS0zLjZjMC4xLTAuNiwwLjUtMC45LDEtMC45aDQuOWMwLjQsMCwwLjgsMC40LDEsMWwwLjksMy42QzIwLjUsMjMuMywyMCwyNCwxOS4zLDI0elwiLz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxnPjxwYXRoIGQ9XCJNMTYsNmMtMi45LDAtNS0xLjMtNS0zczIuMS0zLDUtM3M1LDEuMyw1LDNTMTguOSw2LDE2LDZ6XCIvPjwvZz48Zz48cGF0aCBkPVwiTTE2LDI0LjZjMi4zLDAsNC4xLTAuNiw1LTEuM1Y2LjZDMTkuOCw3LjUsMTgsOCwxNiw4cy0zLjgtMC41LTUtMS40djE2LjdDMTEuOSwyNCwxMy43LDI0LjYsMTYsMjQuNnpcIi8+PHBhdGggZD1cIk0xNiwyNi45Yy0xLjcsMC0zLjItMC4zLTQuNS0wLjdsMy42LDUuNGMwLjIsMC4zLDAuNSwwLjQsMC44LDAuNHMwLjYtMC4yLDAuOC0wLjRsMy42LTUuNEMxOS4yLDI2LjYsMTcuNywyNi45LDE2LDI2Ljl6XCIvPjwvZz48L3N2Zz4nLCc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMyIDMyO1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5zdDB7ZmlsbDojRkZGRkZGO308L3N0eWxlPjxwYXRoIGQ9XCJNMjksOUgzYy0wLjYsMC0xLDAuNC0xLDF2MTZjMCwwLjYsMC40LDEsMSwxaDI2YzAuNiwwLDEtMC40LDEtMVYxMEMzMCw5LjQsMjkuNiw5LDI5LDl6IE0xNSwyM0g3Yy0wLjYsMC0xLTAuNC0xLTFjMC0xLjksMS0zLjUsMi41LTQuM0M4LjIsMTcuMiw4LDE2LjYsOCwxNmMwLTEuNywxLjMtMywzLTNzMywxLjMsMywzYzAsMC42LTAuMiwxLjItMC41LDEuN0MxNSwxOC41LDE2LDIwLjEsMTYsMjJDMTYsMjIuNiwxNS42LDIzLDE1LDIzeiBNMjUsMjFoLTNjLTAuNiwwLTEtMC40LTEtMXMwLjQtMSwxLTFoM2MwLjYsMCwxLDAuNCwxLDFTMjUuNiwyMSwyNSwyMXogTTI1LDE3aC02Yy0wLjYsMC0xLTAuNC0xLTFzMC40LTEsMS0xaDZjMC42LDAsMSwwLjQsMSwxUzI1LjYsMTcsMjUsMTd6XCIvPjxnPjxwYXRoIGQ9XCJNMjAsMTFoLThjLTAuNiwwLTEtMC40LTEtMVY5YzAtMi44LDIuMi01LDUtNXM1LDIuMiw1LDV2MUMyMSwxMC42LDIwLjYsMTEsMjAsMTF6IE0xMyw5aDZjMC0xLjctMS4zLTMtMy0zUzEzLDcuMywxMyw5elwiLz48L2c+PC9zdmc+JywnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4uc3Qwe2ZpbGw6I0ZGRkZGRjt9PC9zdHlsZT48cGF0aCBkPVwiTTMwLjQsNi41Yy0wLjItMS4xLTAuOC0yLjMtMS43LTMuMmMtMC45LTAuOS0yLTEuNS0zLjItMS43Yy0xLjItMC4yLTIuNCwwLjItMy4yLDFjMCwwLDAsMCwwLDBjMCwwLDAsMCwwLDBjLTIuOCwzLjMtNS44LDYuNS04LjksOS42Yy0wLjIsMC0wLjUsMC0wLjcsMC4xYy0wLjQsMC4yLTAuNSwwLjYtMC40LDFjLTMuMSwzLjEtNi4zLDYuMS05LjcsOWMtMC44LDAuOC0xLjEsMS45LTEsMy4yYzAuMiwxLjEsMC44LDIuMywxLjcsMy4yYzAuOSwwLjksMiwxLjUsMy4yLDEuN2MwLjIsMCwwLjQsMCwwLjYsMGMxLDAsMS45LTAuNCwyLjYtMS4xYzIuNC0yLjcsNC44LTUuMyw3LjMtNy45VjI1YzAsMC42LDAuNCwxLDEsMXMxLTAuNCwxLTF2LTQuOWMwLjcsMSwxLDIuNCwxLDQuNFYyOWMwLDAuNiwwLjQsMSwxLDFzMS0wLjQsMS0xdi00LjVjMC0xLjktMC4yLTQuNC0xLjktNi4yYzMtMyw2LjEtNS45LDkuMy04LjZjMCwwLDAsMCwwLDBjMCwwLDAsMCwwLDBDMzAuMiw4LjksMzAuNiw3LjcsMzAuNCw2LjV6IE0yNS41LDEwLjRjLTIuNCwyLjItNC44LDQuNC03LjEsNi43Yy0wLjEsMC0wLjItMC4xLTAuMy0wLjFjLTEuMS0wLjktMi41LTIuMi0zLjQtMy4zYzIuMy0yLjQsNC42LTQuOCw2LjgtNy4yYzAuMywwLjksMC44LDEuOCwxLjUsMi41QzIzLjgsOS42LDI0LjYsMTAuMiwyNS41LDEwLjR6IE04LjIsMjhjLTAuNSwwLjUtMS4xLDAuNC0xLjUsMC40Yy0wLjctMC4xLTEuNS0wLjUtMi4xLTEuMWMtMC42LTAuNi0xLTEuMy0xLjEtMi4xYy0wLjEtMC40LTAuMS0xLDAuMy0xLjRjMy4yLTIuOCw2LjQtNS43LDkuNC04LjdjMS4xLDEuMywyLjUsMi42LDMuNiwzLjVDMTMuOSwyMS43LDExLDI0LjgsOC4yLDI4elwiLz48L3N2Zz4nXTtmdW5jdGlvbiBIaShlKXtyZXR1cm4gbihSaSxlKX12YXIgRWk9W1wiQW1lcmljYS9MaW1hXCIsXCJBbWVyaWNhL0p1bmVhdVwiLFwiUGFjaWZpYy9BdWNrbGFuZFwiLFwiRXVyb3BlL1dhcnNhd1wiLFwiRXVyb3BlL0xvbmRvblwiLFwiQXNpYS9UYWlwZWlcIixcIkFzaWEvU2hhbmdoYWlcIixcIlBhY2lmaWMvTWFqdXJvXCIsXCJBc2lhL1Rhc2hrZW50XCIsXCJBbWVyaWNhL0NhcmFjYXNcIixcIkFmcmljYS9IYXJhcmVcIixcIkFtZXJpY2EvTGFfUGF6XCIsXCJFdXJvcGUvVmlsbml1c1wiLFwiQXNpYS9Ub2t5b1wiLFwiQXVzdHJhbGlhL0JyaXNiYW5lXCIsXCJBZnJpY2EvQ2FzYWJsYW5jYVwiLFwiQXRsYW50aWMvU291dGhfR2VvcmdpYVwiLFwiRXVyb3BlL1JpZ2FcIixcIkFzaWEvQmFrdVwiLFwiQW1lcmljYS9TdF9Kb2huc1wiLFwiQXNpYS9SaXlhZGhcIixcIkV1cm9wZS9CcmF0aXNsYXZhXCIsXCJFdXJvcGUvUm9tZVwiLFwiQXNpYS9EaGFrYVwiLFwiQXNpYS9Lb2xrYXRhXCIsXCJFdXJvcGUvQmVybGluXCIsXCJBbWVyaWNhL0NoaWNhZ29cIixcIkFtZXJpY2EvUGhvZW5peFwiLFwiQXNpYS9TZW91bFwiLFwiQXVzdHJhbGlhL01lbGJvdXJuZVwiLFwiQXNpYS9CYWdoZGFkXCIsXCJBc2lhL0thcmFjaGlcIixcIkFtZXJpY2EvTmV3X1lvcmtcIixcIkFzaWEvS3Jhc25veWFyc2tcIixcIkV1cm9wZS9QYXJpc1wiLFwiQW1lcmljYS9NZXhpY29fQ2l0eVwiLFwiRXVyb3BlL01vc2Nvd1wiLFwiRXVyb3BlL01hZHJpZFwiLFwiQWZyaWNhL0pvaGFubmVzYnVyZ1wiLFwiRXVyb3BlL0F0aGVuc1wiLFwiQXNpYS9UZWhyYW5cIixcIlBhY2lmaWMvUG9ydF9Nb3Jlc2J5XCIsXCJFdXJvcGUvQnVjaGFyZXN0XCIsXCJBc2lhL1NpbmdhcG9yZVwiLFwiQW1lcmljYS9EZW52ZXJcIixcIkV1cm9wZS9QcmFndWVcIixcIkFmcmljYS9DYWlyb1wiLFwiQXNpYS9LYW1jaGF0a2FcIixcIkV1cm9wZS9TdG9ja2hvbG1cIixcIkFtZXJpY2EvU2FudGlhZ29cIixcIkFmcmljYS9OYWlyb2JpXCIsXCJBc2lhL0t1YWxhX0x1bXB1clwiLFwiRXVyb3BlL0xpc2JvblwiLFwiQW1lcmljYS9Nb250ZXJyZXlcIixcIkV1cm9wZS9WaWVubmFcIixcIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc1wiLFwiRXVyb3BlL0R1YmxpblwiLFwiRXVyb3BlL0NvcGVuaGFnZW5cIixcIlBhY2lmaWMvQXBpYVwiLFwiRXVyb3BlL1phZ3JlYlwiLFwiQW1lcmljYS9NYXphdGxhblwiLFwiQW1lcmljYS9HdXlhbmFcIixcIkFtZXJpY2EvVGlqdWFuYVwiLFwiQWZyaWNhL01vbnJvdmlhXCIsXCJFdXJvcGUvTWluc2tcIixcIlBhY2lmaWMvSG9ub2x1bHVcIixcIkFtZXJpY2EvSW5kaWFuYS9JbmRpYW5hcG9saXNcIl07ZnVuY3Rpb24gV2koZSl7cmV0dXJuIG4oRWksZSl9ZnVuY3Rpb24gTmkoZSl7cmV0dXJuIG4oKCgpPT4oe2lkOkFvKCksdGl0bGU6cW8oe2NoYXJDb3VudDo0MH0pLGNvbXBsZXRlZDp2KCl9KSksZSl9dmFyIHppPVtcImRlcG9zaXRcIixcIndpdGhkcmF3YWxcIixcInBheW1lbnRcIixcImludm9pY2VcIl07ZnVuY3Rpb24gS2koZSl7cmV0dXJuIG4oemksZSl9ZnVuY3Rpb24gT2koZSl7cmV0dXJuIG4oKCgpPT5gJHtuKFtcImh0dHBcIixcImh0dHBzXCJdKX06Ly8ke21hKCl9LiR7ZGEoKX1gKSxlKX12YXIgSmk9W1wiTW96aWxsYS81LjAgKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQgNi4wKSBBcHBsZVdlYktpdC81MzguMi4wIChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzMyLjAuODYyLjAgU2FmYXJpLzUzOC4yLjBcIixcIk1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA1LjI7IFRyaWRlbnQvNC4xOyAuTkVUIENMUiAxLjMuNzg5MjEuNClcIixcIk1vemlsbGEvNS4wIChNYWNpbnRvc2g7IFU7IEludGVsIE1hYyBPUyBYIDEwXzlfOCBydjozLjA7IFJVKSBBcHBsZVdlYktpdC81MzcuMi4yIChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi83LjEuNiBTYWZhcmkvNTM3LjIuMlwiLFwiTW96aWxsYS81LjAgKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQgNi4xKSBBcHBsZVdlYktpdC81MzUuMS4xIChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzM4LjAuODgyLjAgU2FmYXJpLzUzNS4xLjFcIixcIk1vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMykgQXBwbGVXZWJLaXQvNTM2LjEuMSAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8zMC4wLjg5Ni4wIFNhZmFyaS81MzYuMS4xXCIsXCJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjM7IHJ2OjE1LjkpIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTUuOS4yXCIsXCJNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4wOyBUcmlkZW50LzYuMClcIixcIk1vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDYuMikgQXBwbGVXZWJLaXQvNTM3LjAuMSAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xNi4wLjg4NS4wIFNhZmFyaS81MzcuMC4xXCIsXCJNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA2LjIpIEFwcGxlV2ViS2l0LzUzMi4yLjEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMzQuMC44MTguMCBTYWZhcmkvNTMyLjIuMVwiLFwiTW96aWxsYS81LjAgKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQgNi4xKSBBcHBsZVdlYktpdC81MzYuMS4yIChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzE1LjAuODY3LjAgU2FmYXJpLzUzNi4xLjJcIixcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMzsgVHJpZGVudC83LjA7IHJ2OjExLjApIGxpa2UgR2Vja29cIixcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMjsgV2luNjQ7IHg2NDsgcnY6MTMuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMy4wLjBcIixcIk1vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMCkgQXBwbGVXZWJLaXQvNTM4LjAuMSAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xNC4wLjgxNC4wIFNhZmFyaS81MzguMC4xXCIsXCJNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA1LjMpIEFwcGxlV2ViS2l0LzUzMi4wLjIgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMzMuMC44NzEuMCBTYWZhcmkvNTMyLjAuMlwiLFwiTW96aWxsYS81LjAgKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQgNS4zKSBBcHBsZVdlYktpdC81MzcuMi4wIChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzM1LjAuODY0LjAgU2FmYXJpLzUzNy4yLjBcIixcIk1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjM7IFRyaWRlbnQvNi4xOyAuTkVUIENMUiA0LjguODI4NTUuOSlcIixcIk1vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDYuMCkgQXBwbGVXZWJLaXQvNTM3LjEuMSAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8yMS4wLjg2My4wIFNhZmFyaS81MzcuMS4xXCIsXCJNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4wOyBUcmlkZW50LzYuMTsgLk5FVCBDTFIgMi43Ljc3ODg0LjkpXCJdO2Z1bmN0aW9uIFZpKGUpe3JldHVybiBuKEppLGUpfXZhciBqaT1bXCJUb3lvdGEgVm9sdFwiLFwiUm9sbHMgUm95Y2UgWEM5MFwiLFwiTmlzc2FuIEZpZXN0YVwiLFwiTWVyY2VkZXMgQmVueiBBNFwiLFwiQnVnYXR0aSAxXCIsXCJNaW5pIEV4cGxvcmVyXCIsXCJOaXNzYW4gU3B5ZGVyXCIsXCJLaWEgU3B5ZGVyXCIsXCJGb3JkIENhbXJ5XCIsXCJCdWdhdHRpIENvcnZldHRlXCIsXCJUb3lvdGEgQTRcIixcIlRveW90YSBDaGFsbGVuZ2VyXCIsXCJTbWFydCBGb2N1c1wiLFwiTWF6ZGEgQ2hhbGxlbmdlclwiLFwiTGFtYm9yZ2hpbmkgRi0xNTBcIixcIkxhbWJvcmdoaW5pIFByaXVzXCIsXCJIeXVuZGFpIFJvYWRzdGVyXCIsXCJDaGV2cm9sZXQgTWFsaWJ1XCJdO2Z1bmN0aW9uIFVpKGUpe3JldHVybiBuKGppLGUpfXZhciBfaT1bXCJHYXNvbGluZVwiLFwiSHlicmlkXCIsXCJFbGVjdHJpY1wiLFwiRGllc2VsXCJdO2Z1bmN0aW9uIFlpKGUpe3JldHVybiBuKF9pLGUpfXZhciBRaT1bXCJBYmFydGhcIixcIkFjdXJhXCIsXCJBbHBpbmVcIixcIkFsZmEgUm9tZW9cIixcIkFzdG9uIE1hcnRpblwiLFwiQXVkaVwiLFwiQmVudGxleVwiLFwiQk1XXCIsXCJCdWdhdHRpXCIsXCJCdWlja1wiLFwiQ2FkaWxsYWNcIixcIkNhdGVyaGFtXCIsXCJDaHJ5c2xlclwiLFwiQ2l0cm/Dq25cIixcIkNoZXZyb2xldFwiLFwiRGFjaWFcIixcIkRvZGdlXCIsXCJGZXJyYXJpXCIsXCJGaWF0XCIsXCJGb3JkXCIsXCJHZW5lc2lzXCIsXCJHTUNcIixcIkhlbm5lc3NleVwiLFwiSG9uZGFcIixcIkh5dW5kYWlcIixcIkluZmluaXRpXCIsXCJJc3V6dVwiLFwiSmFndWFyXCIsXCJKZWVwXCIsXCJLaWFcIixcIktvZW5pZ3NlZ2dcIixcIkxhbWJvcmdoaW5pXCIsXCJMYW5jaWFcIixcIkxhbmQgUm92ZXJcIixcIkxleHVzXCIsXCJMaW5jb2xuXCIsXCJMb3R1c1wiLFwiTWFzZXJhdGlcIixcIk1heWJhY2hcIixcIk1hemRhXCIsXCJNY0xhcmVuXCIsXCJNZXJjZWRlcyBCZW56XCIsXCJNaW5pXCIsXCJNaXRzdWJpc2hpXCIsXCJNb3JnYW5cIixcIk5pc3NhblwiLFwiT3BlbFwiLFwiUGFnYW5pXCIsXCJQZXVnZW90XCIsXCJQbHltb3V0aFwiLFwiUG9sZXN0YXJcIixcIlBvbnRpYWNcIixcIlBvcnNjaGVcIixcIlJlbmF1bHRcIixcIlJpbWFjXCIsXCJSb2xscyBSb3ljZVwiLFwiU0VBVFwiLFwiU21hcnRcIixcIlN1YmFydVwiLFwiU3V6dWtpXCIsXCJUZXNsYVwiLFwiVG95b3RhXCIsXCJWb2xrc3dhZ2VuXCIsXCJWb2x2b1wiXTtmdW5jdGlvbiAkaShlKXtyZXR1cm4gbihRaSxlKX12YXIgWGk9W1wiMjk2IEdUQlwiLFwiNFJ1bm5lclwiLFwiNTAwXCIsXCI3MThcIixcIjkxMVwiLFwiQS1DbGFzc1wiLFwiQTJcIixcIkEzXCIsXCJBNFwiLFwiQTZcIixcIkE3XCIsXCJBOFwiLFwiQWNjb3JkXCIsXCJBbHBpbmVcIixcIkFydGVvblwiLFwiQXRsYXNcIixcIkF2YWxvblwiLFwiQXZlbnRhZG9yXCIsXCJBdmlhdG9yXCIsXCJCbGF6ZXJcIixcIkJyb25jb1wiLFwiQy1DbGFzc1wiLFwiQy1IUlwiLFwiQ2FtYXJvXCIsXCJDYW1yeVwiLFwiQ2F5ZW5uZVwiLFwiQ2hpcm9uXCIsXCJDaXZpY1wiLFwiQ2xhcml0eVwiLFwiQ2x1Ym1hblwiLFwiQ29sb3JhZG9cIixcIkNvcm9sbGFcIixcIkNvcnNhaXJcIixcIkNvcnZldHRlXCIsXCJDb3VudHJ5bWFuXCIsXCJDUi1WXCIsXCJDVC00XCIsXCJDVC01XCIsXCJDWC05XCIsXCJEdXN0ZXJcIixcImUtdHJvblwiLFwiRS1DbGFzc1wiLFwiRWRnZVwiLFwiRWxhbnRyYVwiLFwiRXNjYWxhZGVcIixcIkVRU1wiLFwiRVYtNlwiLFwiRXhwZWRpdGlvblwiLFwiRXhwbG9yZXJcIixcIkYtMTUwXCIsXCJGaWVzdGFcIixcIkZvcmVzdGVyXCIsXCJHaGlibGlcIixcIkdpdWxpYVwiLFwiR1I4NlwiLFwiR3JhbmQgQ2hlcm9rZWVcIixcIkdyZWNhbGVcIixcIkdvbGZcIixcIkhpZ2hsYW5kZXJcIixcIkhSLVZcIixcIkh1cmFjYW5cIixcIklELjRcIixcIkltcHJlemFcIixcIkluc2lnaHRcIixcIklvbmlxXCIsXCJKZXR0YVwiLFwiSm9obiBDb29wZXIgV29ya3NcIixcIktvbmFcIixcIkxhbmQgQ3J1aXNlclwiLFwiTGVnYWN5XCIsXCJMZXZhbnRlXCIsXCJMb2dhblwiLFwiTHlyaXFcIixcIk0zXCIsXCJNNFwiLFwiTTVcIixcIk1hY2FuXCIsXCJNYWxpYnVcIixcIk1hdmVyaWNrXCIsXCJNaXJhaVwiLFwiTW9kZWwgM1wiLFwiTW9kZWwgU1wiLFwiTW9kZWwgWFwiLFwiTW9kZWwgWVwiLFwiTXVzdGFuZ1wiLFwiTmF1dGlsdXNcIixcIk5hdmlnYXRvclwiLFwiTmlyb1wiLFwiT3V0YmFja1wiLFwiT2R5c3NleVwiLFwiUGFsaXNhZGVcIixcIlBhbmFtZXJhXCIsXCJQYXNzYXRcIixcIlBhc3Nwb3J0XCIsXCJQb3J0b2Zpbm9cIixcIlByaXVzXCIsXCJRM1wiLFwiUTRcIixcIlE1XCIsXCJRNlwiLFwiUTdcIixcIlE4XCIsXCJRdWF0dHJvcG9ydGVcIixcIlJhbmdlclwiLFwiUjhcIixcIlJBVjRcIixcIlJpb1wiLFwiUm9tYVwiLFwiUy1DbGFzc1wiLFwiU2FuZGVyb1wiLFwiU2FudGEgZmVcIixcIlNlcXVvaWFcIixcIlNlbnRyYVwiLFwiU2llbm5hXCIsXCJTaWx2ZXJhZG9cIixcIlNvbmF0YVwiLFwiU29yZW50b1wiLFwiU3BhcmtcIixcIlNwb3J0YWdlXCIsXCJTcHJpbmdcIixcIlN0ZWx2aW9cIixcIlN0aW5nZXJcIixcIlN1YnVyYmFuXCIsXCJTdXBlciBEdXR5XCIsXCJTdXByYVwiLFwiVGFjb21hXCIsXCJUYWhvZVwiLFwiVGFjb21hXCIsXCJUYW9zXCIsXCJUYXVydXNcIixcIlRheWNhblwiLFwiVGlndWFuXCIsXCJUb25hbGVcIixcIlRvdWFyZWdcIixcIlRyYWlsYmxhemVyXCIsXCJUVFwiLFwiVHVjc29uXCIsXCJUdW5kcmFcIixcIlVydXNcIixcIlZlbG9zdGVyXCIsXCJWZW56YVwiLFwiVmV5cm9uXCIsXCJXcmFuZ2xlclwiLFwiWDFcIixcIlgyXCIsXCJYM1wiLFwiWDRcIixcIlg1XCIsXCJYNlwiLFwiWDdcIixcIlhUNFwiLFwiWFQ1XCIsXCJZYXJpc1wiLFwiWjRcIl07ZnVuY3Rpb24gWmkoZSl7cmV0dXJuIG4oWGksZSl9dmFyIGVuPVtcIlNlZGFuXCIsXCJDcmV3IENhYiBQaWNrdXBcIixcIk1pbml2YW5cIixcIkV4dGVuZGVkIENhYiBQaWNrdXBcIixcIldhZ29uXCIsXCJTVVZcIixcIkNhcmdvIFZhblwiLFwiQ291cGVcIixcIkhhdGNoYmFja1wiLFwiQ29udmVydGlibGVcIixcIlBhc3NlbmdlciBWYW5cIl07ZnVuY3Rpb24gYW4oZSl7cmV0dXJuIG4oZW4sZSl9dmFyIHRuPVtcImJ5cGFzc1wiLFwiaW5kZXhcIixcInRyYW5zbWl0XCIsXCJwYXJzZVwiLFwic3ludGhlc2l6ZVwiLFwiY29tcHJlc3NcIixcInJlYm9vdFwiLFwicXVhbnRpZnlcIixcImhhY2tcIixcImJhY2sgdXBcIixcInByb2dyYW1cIixcImdlbmVyYXRlXCIsXCJvdmVycmlkZVwiLFwiaW5wdXRcIixcImNvbm5lY3RcIixcImNvcHlcIixcImNhbGN1bGF0ZVwiLFwibmF2aWdhdGVcIl07ZnVuY3Rpb24gb24oZSl7cmV0dXJuIG4odG4sZSl9dmFyIG5uPVtcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCIsXCJTdW5kYXlcIl07ZnVuY3Rpb24gcm4oZSl7cmV0dXJuIG4obm4sZSl9dmFyIHNuPVtcIk1hcnkgSi4gQmxpZ2VcIixcIlN0ZXZlbiBUeWxlclwiLFwiU3RldmllIE5pY2tzXCIsXCJKb2UgQ29ja2VyXCIsXCJCLkIuIEtpbmdcIixcIlBhdHRpIExhQmVsbGVcIixcIkthcmVuIENhcnBlbnRlclwiLFwiQW5uaWUgTGVubm94XCIsXCJNb3JyaXNzZXlcIixcIkxldm9uIEhlbG1cIixcIlRoZSBFdmVybHkgQnJvdGhlcnNcIixcIlNvbG9tb24gQnVya2VcIixcIldpbGxpZSBOZWxzb25cIixcIkRvbiBIZW5sZXlcIixcIkFydCBHYXJmdW5rZWxcIixcIlNhbSBNb29yZVwiLFwiRGFybGVuZSBMb3ZlXCIsXCJQYXR0aSBTbWl0aFwiLFwiVG9tIFdhaXRzXCIsXCJKb2huIExlZSBIb29rZXJcIixcIkZyYW5raWUgVmFsbGlcIixcIk1hcmlhaCBDYXJleVwiLFwiU2x5IFN0b25lXCIsXCJNZXJsZSBIYWdnYXJkXCIsXCJTdGV2ZSBQZXJyeVwiLFwiSWdneSBQb3BcIixcIkphbWVzIFRheWxvclwiLFwiRG9sbHkgUGFydG9uXCIsXCJKb2huIEZvZ2VydHlcIixcIlRvb3RzIEhpYmJlcnRcIixcIkdyZWdnIEFsbG1hblwiLFwiUm9ubmllIFNwZWN0b3JcIixcIldpbHNvbiBQaWNrZXR0XCIsXCJKZXJyeSBMZWUgTGV3aXNcIixcIlRob20gWW9ya2VcIixcIkRhdmlkIFJ1ZmZpblwiLFwiQXhsIFJvc2VcIixcIkRpb25cIixcIkxvdSBSZWVkXCIsXCJSb2dlciBEYWx0cmV5XCIsXCJCasO2cmtcIixcIlJvZCBTdGV3YXJ0XCIsXCJDaHJpc3RpbmEgQWd1aWxlcmFcIixcIkVyaWMgQnVyZG9uXCIsXCJNYXZpcyBTdGFwbGVzXCIsXCJQYXVsIFJvZGdlcnNcIixcIkx1dGhlciBWYW5kcm9zc1wiLFwiTXVkZHkgV2F0ZXJzXCIsXCJCcmlhbiBXaWxzb25cIixcIkdsYWR5cyBLbmlnaHRcIixcIkJvbm5pZSBSYWl0dFwiLFwiRG9ubnkgSGF0aGF3YXlcIixcIkJ1ZGR5IEhvbGx5XCIsXCJKaW0gTW9ycmlzb25cIixcIlBhdHN5IENsaW5lXCIsXCJLdXJ0IENvYmFpblwiLFwiQm9iYnkgQmx1ZSBCbGFuZFwiLFwiR2VvcmdlIEpvbmVzXCIsXCJKb25pIE1pdGNoZWxsXCIsXCJDaHVjayBCZXJyeVwiLFwiQ3VydGlzIE1heWZpZWxkXCIsXCJKZWZmIEJ1Y2tsZXlcIixcIkVsdG9uIEpvaG5cIixcIk5laWwgWW91bmdcIixcIkJydWNlIFNwcmluZ3N0ZWVuXCIsXCJEdXN0eSBTcHJpbmdmaWVsZFwiLFwiV2hpdG5leSBIb3VzdG9uXCIsXCJTdGV2ZSBXaW53b29kXCIsXCJCb25vXCIsXCJIb3dsaW4nIFdvbGZcIixcIlByaW5jZVwiLFwiTmluYSBTaW1vbmVcIixcIkphbmlzIEpvcGxpblwiLFwiSGFuayBXaWxsaWFtc1wiLFwiSmFja2llIFdpbHNvblwiLFwiTWljaGFlbCBKYWNrc29uXCIsXCJWYW4gTW9ycmlzb25cIixcIkRhdmlkIEJvd2llXCIsXCJFdHRhIEphbWVzXCIsXCJKb2hubnkgQ2FzaFwiLFwiU21va2V5IFJvYmluc29uXCIsXCJCb2IgTWFybGV5XCIsXCJGcmVkZGllIE1lcmN1cnlcIixcIlRpbmEgVHVybmVyXCIsXCJNaWNrIEphZ2dlclwiLFwiUm9iZXJ0IFBsYW50XCIsXCJBbCBHcmVlblwiLFwiUm95IE9yYmlzb25cIixcIkxpdHRsZSBSaWNoYXJkXCIsXCJQYXVsIE1jQ2FydG5leVwiLFwiSmFtZXMgQnJvd25cIixcIlN0ZXZpZSBXb25kZXJcIixcIk90aXMgUmVkZGluZ1wiLFwiQm9iIER5bGFuXCIsXCJNYXJ2aW4gR2F5ZVwiLFwiSm9obiBMZW5ub25cIixcIlNhbSBDb29rZVwiLFwiRWx2aXMgUHJlc2xleVwiLFwiUmF5IENoYXJsZXNcIixcIkFyZXRoYSBGcmFua2xpblwiXTtmdW5jdGlvbiBsbihlKXtyZXR1cm4gbihzbixlKX12YXIgdW49W1wiVGhlIHR3aXN0XCIsXCJTbW9vdGhcIixcIk1hY2sgdGhlIGtuaWZlXCIsXCJVcHRvd24gZnVuayFcIixcIkhvdyBkbyBpIGxpdmVcIixcIlBhcnR5IHJvY2sgYW50aGVtXCIsXCJJIGdvdHRhIGZlZWxpbmdcIixcIk1hY2FyZW5hIChiYXlzaWRlIGJveXMgbWl4KVwiLFwiU2hhcGUgb2YgeW91XCIsXCJQaHlzaWNhbFwiLFwiWW91IGxpZ2h0IHVwIG15IGxpZmVcIixcIkhleSBqdWRlXCIsXCJDbG9zZXJcIixcIldlIGJlbG9uZyB0b2dldGhlclwiLFwiVW4tYnJlYWsgbXkgaGVhcnRcIixcIlllYWghXCIsXCJCZXR0ZSBkYXZpcyBleWVzXCIsXCJFbmRsZXNzIGxvdmVcIixcIlRvbmlnaHTigJlzIHRoZSBuaWdodCAoZ29ubmEgYmUgYWxyaWdodClcIixcIllvdSB3ZXJlIG1lYW50IGZvciBtZS9mb29saXNoIGdhbWVzXCIsXCIoZXZlcnl0aGluZyBpIGRvKSBpIGRvIGl0IGZvciB5b3VcIixcIknigJlsbCBtYWtlIGxvdmUgdG8geW91XCIsXCJUaGUgdGhlbWUgZnJvbSDigJxhIHN1bW1lciBwbGFjZeKAnVwiLFwiTGUgZnJlYWtcIixcIkhvdyBkZWVwIGlzIHlvdXIgbG92ZVwiLFwiRXllIG9mIHRoZSB0aWdlclwiLFwiV2UgZm91bmQgbG92ZVwiLFwiTG93XCIsXCJKdXN0IHdhbnQgdG8gYmUgeW91ciBldmVyeXRoaW5nXCIsXCJUb28gY2xvc2VcIixcIkV2ZXJ5IGJyZWF0aCB5b3UgdGFrZVwiLFwiU29tZWJvZHkgdGhhdCBpIHVzZWQgdG8ga25vd1wiLFwiRGVzcGFjaXRvXCIsXCJGbGFzaGRhbmNl4oCmIHdoYXQgYSBmZWVsaW5nXCIsXCJSb2xsaW5nIGluIHRoZSBkZWVwXCIsXCJUb3NzaW7igJkgYW5kIHR1cm5pbuKAmVwiLFwiVGhlIGJhdHRsZSBvZiBuZXcgb3JsZWFuc1wiLFwiT25lIHN3ZWV0IGRheVwiLFwiVHJ1bHkgbWFkbHkgZGVlcGx5XCIsXCJTaWxseSBsb3ZlIHNvbmdzXCIsXCJMZXTigJlzIGdldCBpdCBvblwiLFwiTmlnaHQgZmV2ZXJcIixcIkFub3RoZXIgb25lIGJpdGVzIHRoZSBkdXN0XCIsXCJTYXkgc2F5IHNheVwiLFwiSG93IHlvdSByZW1pbmQgbWVcIixcIlRpZSBhIHllbGxvdyByaWJib24gcm91bmQgdGhlIG9sZSBvYWsgdHJlZVwiLFwiSXQncyBhbGwgaW4gdGhlIGdhbWVcIixcIkkgd2FudCB0byBob2xkIHlvdXIgaGFuZFwiLFwiU2hhZG93IGRhbmNpbmdcIixcIkNhbGwgbWUgbWF5YmVcIixcIkJsdXJyZWQgbGluZXNcIixcIkNhbmRsZSBpbiB0aGUgd2luZCDigJg5Ny9zb21ldGhpbmcgYWJvdXQgdGhlIHdheSB5b3UgbG9vayB0b25pZ2h0XCIsXCJObyBvbmVcIixcIkkgd2lsbCBhbHdheXMgbG92ZSB5b3VcIixcIkVuZCBvZiB0aGUgcm9hZFwiLFwiQm9vbSBib29tIHBvd1wiLFwiQ2FsbCBtZVwiLFwiTGV0IG1lIGxvdmUgeW91XCIsXCJTdGF5aW7igJkgYWxpdmVcIixcIkxhZHlcIixcIlRpayB0b2tcIixcIknigJltIGEgYmVsaWV2ZXJcIixcIkdvbGQgZGlnZ2VyXCIsXCJBcG9sb2dpemVcIixcIlRoZSBzaWduXCIsXCJDZW50ZXJmb2xkXCIsXCJBbGwgYWJvdXQgdGhhdCBiYXNzXCIsXCIoanVzdCBsaWtlKSBzdGFydGluZyBvdmVyXCIsXCJSb3lhbHNcIixcIlRoZSBib3kgaXMgbWluZVwiLFwiQmVjYXVzZSBpIGxvdmUgeW91ICh0aGUgcG9zdG1hbiBzb25nKVwiLFwiSSBsb3ZlIHJvY2sg4oCZbiByb2xsblwiLFwiQXF1YXJpdXMvbGV0IHRoZSBzdW5zaGluZSBpblwiLFwiV2hvb21wISAodGhlcmUgaXQgaXMpXCIsXCJNb3ZlcyBsaWtlIGphZ2dlclwiLFwiRWJvbnkgYW5kIGl2b3J5XCIsXCJSdXNoIHJ1c2hcIixcIlRoYXTigJlzIHdoYXQgZnJpZW5kcyBhcmUgZm9yXCIsXCJIYXBweVwiLFwiVXBzaWRlIGRvd25cIixcIlN1Z2FyLCBzdWdhclwiLFwiSnVzdCB0aGUgd2F5IHlvdSBhcmVcIixcIkRpbGVtbWFcIixcIkkgaGVhcmQgaXQgdGhyb3VnaCB0aGUgZ3JhcGV2aW5lXCIsXCJZb3XigJlyZSBzdGlsbCB0aGUgb25lXCIsXCJCaWxsaWUgamVhblwiLFwiSG90IHN0dWZmXCIsXCJSb2Nrc3RhclwiLFwiR2FuZ3N0YeKAmXMgcGFyYWRpc2VcIixcIkFicmFjYWRhYnJhXCIsXCJQZXJmZWN0XCIsXCJZb3XigJlyZSBzbyB2YWluXCIsXCJQbGF5IHRoYXQgZnVua3kgbXVzaWNcIixcIlNheSB5b3UsIHNheSBtZVwiLFwiTXkgc2hhcm9uYVwiLFwiQWxsIG5pZ2h0IGxvbmcgKGFsbCBuaWdodClcIixcIk5vdGhpbmcgY29tcGFyZXMgMiB1XCIsXCJJIHN3ZWFyXCIsXCJGYW1pbHkgYWZmYWlyXCIsXCJXYWl0aW5nIGZvciBhIGdpcmwgbGlrZSB5b3VcIl07ZnVuY3Rpb24gY24oZSl7cmV0dXJuIG4odW4sZSl9ZnVuY3Rpb24gZG4oZSl7dmFyIGEsdDtjb25zdCBvPW51bGw9PShhPW51bGw9PWU/dm9pZCAwOmUuaW5jbHVkZUNvdW50eSl8fGEsaT1udWxsPT0odD1udWxsPT1lP3ZvaWQgMDplLmluY2x1ZGVDb3VudHJ5KXx8dDtyZXR1cm4gbigoKCk9Pntjb25zdHtzdHJlZXQ6ZSxjaXR5OmEsY291bnR5OnQsY291bnRyeTpuLHppcENvZGU6cn09eG8oe2luY2x1ZGVDb3VudHk6byxpbmNsdWRlQ291bnRyeTppfSk7bGV0IHM9YCR7ZX0sICR7YX0sIGA7cmV0dXJuIG8mJihzKz1gJHt0fSwgYCksaSYmKHMrPWAke259LCBgKSxzK3J9KSxlKX12YXIgaG49W1wiQWVnZWFuIEFpcmxpbmVzXCIsXCJBZXIgTGluZ3VzXCIsXCJBZXJvZmxvdFwiLFwiQWVyb2xpbmVhcyBBcmdlbnRpbmFzXCIsXCJBZXJvbWV4aWNvXCIsXCJBaXIgQXJhYmlhXCIsXCJBaXIgQXN0YW5hXCIsXCJBaXIgQXVzdHJhbFwiLFwiQWlyIEJhbHRpY1wiLFwiQWlyIEJlbGdpdW1cIixcIkFpciBDYW5hZGFcIixcIkFpciBDYXJhaWJlc1wiLFwiQWlyIENoaW5hXCIsXCJBaXIgQ29yc2ljYVwiLFwiQWlyIERvbG9taXRpXCIsXCJBaXIgRXVyb3BhXCIsXCJBaXIgRnJhbmNlXCIsXCJBaXIgSW5kaWFcIixcIkFpciBJbmRpYSBFeHByZXNzXCIsXCJBaXIgTWFjYXVcIixcIkFpciBNYWx0YVwiLFwiQWlyIE1hdXJpdGl1c1wiLFwiQWlyIE5hbWliaWFcIixcIkFpciBOZXcgWmVhbGFuZFwiLFwiQWlyIE5vcnRoXCIsXCJBaXIgU2VvdWxcIixcIkFpciBTZXJiaWFcIixcIkFpciBUYWhpdGkgTnVpXCIsXCJBaXIgVHJhbnNhdFwiLFwiQWlyIFZhbnVhdHVcIixcIkFpckFzaWFcIixcIkFpckFzaWEgWFwiLFwiQWlyY2FsaW5cIixcIkFsYXNrYSBBaXJsaW5lc1wiLFwiQWxpdGFsaWFcIixcIkFsbGVnaWFudFwiLFwiQW1lcmljYW4gQWlybGluZXNcIixcIkFOQVwiLFwiQXNpYW5hXCIsXCJBdXN0cmlhblwiLFwiQXZpYW5jYVwiLFwiQXplcmJhaWphbiBIYXZhIFlvbGxhcnlcIixcIkF6b3JlcyBBaXJsaW5lc1wiLFwiQXp1bFwiLFwiQmFtYm9vIEFpcndheXNcIixcIkJhbmdrb2sgQWlyd2F5c1wiLFwiQnJpdGlzaCBBaXJ3YXlzXCIsXCJCcnVzc2VscyBBaXJsaW5lc1wiLFwiQ2FyaWJiZWFuIEFpcmxpbmVzXCIsXCJDYXRoYXkgRHJhZ29uXCIsXCJDYXRoYXkgUGFjaWZpY1wiLFwiQ2F5bWFuIEFpcndheXNcIixcIkNFQlUgUGFjaWZpYyBBaXJcIixcIkNoaW5hIEFpcmxpbmVzXCIsXCJDaGluYSBFYXN0ZXJuXCIsXCJDaGluYSBTb3V0aGVyblwiLFwiQ29uZG9yXCIsXCJDb3BhIEFpcmxpbmVzXCIsXCJDcm9hdGlhIEFpcmxpbmVzXCIsXCJDemVjaCBBaXJsaW5lc1wiLFwiRGVsdGFcIixcImVhc3lKZXRcIixcIkVkZWx3ZWlzcyBBaXJcIixcIkVneXB0YWlyXCIsXCJFTCBBTFwiLFwiRW1pcmF0ZXNcIixcIkV0aGlvcGlhbiBBaXJsaW5lc1wiLFwiRXRpaGFkXCIsXCJFdXJvd2luZ3NcIixcIkVWQSBBaXJcIixcIkZpamkgQWlyd2F5c1wiLFwiRmlubmFpclwiLFwiZmx5ZHViYWlcIixcIkZseU9uZVwiLFwiRnJlbmNoIGJlZVwiLFwiRnJvbnRpZXJcIixcIkdhcnVkYSBJbmRvbmVzaWFcIixcIkdvbFwiLFwiR3VsZiBBaXJcIixcIkhhaW5hbiBBaXJsaW5lc1wiLFwiSGF3YWlpYW4gQWlybGluZXNcIixcIkhlbHZldGljIEFpcndheXNcIixcIkhLIEV4cHJlc3NcIixcIkhvbmcgS29uZyBBaXJsaW5lc1wiLFwiSWJlcmlhXCIsXCJJY2VsYW5kYWlyXCIsXCJJbmRpR28gQWlybGluZXNcIixcIkludGVySmV0XCIsXCJKYXBhbiBBaXJsaW5lc1wiLFwiSmVqdSBBaXJcIixcIkpldDJcIixcIkpldEJsdWVcIixcIkpldHN0YXJcIixcIkppbiBBaXJcIixcIktlbnlhIEFpcndheXNcIixcIktMTVwiLFwiS29yZWFuIEFpclwiLFwiS3VsdWxhXCIsXCJMYSBDb21wYWduaWVcIixcIkxBVEFNXCIsXCJMaW9uIEFpcmxpbmVzXCIsXCJMT1QgUG9saXNoIEFpcmxpbmVzXCIsXCJMdWZ0aGFuc2FcIixcIkx1eGFpclwiLFwiTWFsYXlzaWEgQWlybGluZXNcIixcIk1hbmdvXCIsXCJNaWRkbGUgRWFzdCBBaXJsaW5lc1wiLFwiTm9rIEFpclwiLFwiTm9yZHdpbmQgQWlybGluZXNcIixcIk5vcndlZ2lhbiBBaXIgSW50ZXJuYXRpb25hbFwiLFwiTm9yd2VnaWFuIEFpciBTaHV0dGxlXCIsXCJOb3J3ZWdpYW4gQWlyIFN3ZWRlblwiLFwiTm9yd2VnaWFuIEFpciBVS1wiLFwiT21hbiBBaXJcIixcIlBha2lzdGFuIEludGVybmF0aW9uYWwgQWlybGluZXNcIixcIlBlYWNoXCIsXCJQZWdhc3VzIEFpcmxpbmVzXCIsXCJQaGlsaXBwaW5lIEFpcmxpbmVzXCIsXCJQb3J0ZXJcIixcIlFhbnRhc1wiLFwiUWF0YXIgQWlyd2F5c1wiLFwiUmVnaW9uYWwgRXhwcmVzc1wiLFwiUm9zc2l5YSAtIFJ1c3NpYW4gQWlybGluZXNcIixcIlJveWFsIEFpciBNYXJvY1wiLFwiUm95YWwgQnJ1bmVpXCIsXCJSb3lhbCBKb3JkYW5pYW5cIixcIlJ3YW5kQWlyXCIsXCJSeWFuYWlyXCIsXCJTNyBBaXJsaW5lc1wiLFwiU0FTXCIsXCJTYXVkaWFcIixcIlNjb290IEFpcmxpbmVzXCIsXCJTaGFuZ2hhaSBBaXJsaW5lc1wiLFwiU2lsa2FpclwiLFwiU2lsdmVyXCIsXCJTaW5nYXBvcmUgQWlybGluZXNcIixcIlNreWxhbmVzXCIsXCJTb3V0aCBBZnJpY2FuIEFpcndheXNcIixcIlNvdXRod2VzdFwiLFwiU3BpY2VKZXRcIixcIlNwaXJpdFwiLFwiU3ByaW5nIEFpcmxpbmVzXCIsXCJTcHJpbmcgSmFwYW5cIixcIlNyaUxhbmthbiBBaXJsaW5lc1wiLFwiU3VuIENvdW50cnlcIixcIlN1bmNsYXNzIEFpcmxpbmVzXCIsXCJTdW53aW5nXCIsXCJTV0lTU1wiLFwiU3dvb3BcIixcIlRBQUdcIixcIlRBQ0FcIixcIlRBUCBQb3J0dWdhbFwiLFwiVEhBSVwiLFwidGlnZXJhaXIgQXVzdHJhbGlhXCIsXCJUcmFuc2F2aWEgQWlybGluZXNcIixcIlRVSSBVS1wiLFwiVFVJZmx5XCIsXCJUdW5pcyBBaXJcIixcIlR1cmtpc2ggQWlybGluZXNcIixcIlVrcmFpbmUgSW50ZXJuYXRpb25hbFwiLFwiVW5pdGVkXCIsXCJVcmFsIEFpcmxpbmVzXCIsXCJVVGFpciBBdmlhdGlvblwiLFwiVXpiZWtpc3RhbiBBaXJ3YXlzXCIsXCJWaWV0bmFtIEFpcmxpbmVzXCIsXCJWaXJnaW4gQXRsYW50aWNcIixcIlZpcmdpbiBBdXN0cmFsaWFcIixcIlZpc3RhcmFcIixcIlZpdmEgQWVyb2J1c1wiLFwiVm9sYXJpc1wiLFwiVm9sb3RlYVwiLFwiVnVlbGluZyBBaXJsaW5lc1wiLFwiV2VzdEpldFwiLFwiV2l6emFpclwiLFwiWGlhbWVuIEFpcmxpbmVzXCJdO2Z1bmN0aW9uIG1uKGUpe3JldHVybiBuKGhuLGUpfWNvbnN0IHBuPXtSeWFuQWlyOntwcmVmaXg6XCJGUlwifSxcIkJyaXRpc2ggQWlyd2F5c1wiOntwcmVmaXg6XCJCQVwiLHN1ZmZpeE1pbjoxMDAsc3VmZml4TWF4Ojk5OX0sSWJlcmlhOntwcmVmaXg6XCJJQlwifSxKZXQyOntwcmVmaXg6XCJMU1wifSxFYXN5SmV0OntwcmVmaXg6XCJFWllcIixzdWZmaXhNaW46MTAwLHN1ZmZpeE1heDo5OTl9LEVtaXJhdGVzOntwcmVmaXg6XCJFS1wiLHN1ZmZpeE1pbjoxMCxzdWZmaXhNYXg6OTl9LFwiQW1lcmljYW4gQWlybGluZXNcIjp7cHJlZml4OlwiQUFcIn0sSmV0Qmx1ZTp7cHJlZml4OlwiQlwiLHN1ZmZpeE1pbjoxMDAsc3VmZml4TWF4Ojk5OX0sXCJBaXIgRXVyb3BhXCI6e3ByZWZpeDpcIlVYXCJ9LFwiRGVsdGEgQWlyIExpbmVzXCI6e3ByZWZpeDpcIkRMXCJ9LFwiVW5pdGVkIEFpcmxpbmVzXCI6e3ByZWZpeDpcIlVBXCJ9LFwiVmlyZ2luIEF0bGFudGljXCI6e3ByZWZpeDpcIlZTXCJ9LFwiVGhhaSBBaXJ3YXlzXCI6e3ByZWZpeDpcIlRHXCJ9LFwiUWF0YXIgQWlyd2F5c1wiOntwcmVmaXg6XCJRUlwifX07ZnVuY3Rpb24geW4oZSl7dmFyIGE7Y29uc3QgdD1udWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLmFpcmxpbmUpP2E6SGUoaG4pO3JldHVybiBuKCgoKT0+cG5bdF0/ZnVuY3Rpb24oe3ByZWZpeDplLHN1ZmZpeE1pbjphPTFlMyxzdWZmaXhNYXg6dD05OTk5fSl7cmV0dXJuYCR7ZX0ke3Moe21pbjphLG1heDp0fSl9YH0ocG5bdF0pOnMoe21pbjoxZTQsbWF4Ojk5OTk5fSkudG9TdHJpbmcoKSksZSl9ZnVuY3Rpb24gZ24oZSl7cmV0dXJuIG4oKCgpPT5gJHtzKHttaW46MSxtYXg6MzN9KX0ke0hlKFtcIkFcIixcIkJcIixcIkNcIixcIkRcIixcIkVcIixcIkZcIl0pfWApLGUpfXZhciBmbj1be25hbWU6XCJIYXJ0c2ZpZWxk4oCTSmFja3NvbiBBdGxhbnRhIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJBVExcIixjaXR5OlwiQXRsYW50YVwiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiTG9zIEFuZ2VsZXMgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkxBWFwiLGNpdHk6XCJMb3MgQW5nZWxlc1wiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiTydIYXJlIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJPUkRcIixjaXR5OlwiQ2hpY2Fnb1wiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiRGFsbGFzLUZvcnQgV29ydGggSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkRGV1wiLGNpdHk6XCJEYWxsYXNcIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIkRlbnZlciBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiREVOXCIsY2l0eTpcIkRlbnZlclwiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiSm9obiBGLiBLZW5uZWR5IEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJKRktcIixjaXR5OlwiTmV3IFlvcmtcIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIlNhbiBGcmFuY2lzY28gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlNGT1wiLGNpdHk6XCJTYW4gRnJhbmNpc2NvXCIsY291bnRyeTpcIlVuaXRlZCBTdGF0ZXNcIn0se25hbWU6XCJNY0NhcnJhbiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiTEFTXCIsY2l0eTpcIkxhcyBWZWdhc1wiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiVG9yb250byBQZWFyc29uIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJZWVpcIixjaXR5OlwiVG9yb250b1wiLGNvdW50cnk6XCJDYW5hZGFcIn0se25hbWU6XCJTZWF0dGxl4oCTVGFjb21hIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJTRUFcIixjaXR5OlwiU2VhdHRsZVwiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiQ2hhcmxvdHRlIERvdWdsYXMgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkNMVFwiLGNpdHk6XCJDaGFybG90dGVcIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIk9ybGFuZG8gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIk1DT1wiLGNpdHk6XCJPcmxhbmRvXCIsY291bnRyeTpcIlVuaXRlZCBTdGF0ZXNcIn0se25hbWU6XCJNaWFtaSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiTUlBXCIsY2l0eTpcIk1pYW1pXCIsY291bnRyeTpcIlVuaXRlZCBTdGF0ZXNcIn0se25hbWU6XCJQaG9lbml4IFNreSBIYXJib3IgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlBIWFwiLGNpdHk6XCJQaG9lbml4XCIsY291bnRyeTpcIlVuaXRlZCBTdGF0ZXNcIn0se25hbWU6XCJOZXdhcmsgTGliZXJ0eSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiRVdSXCIsY2l0eTpcIk5ld2Fya1wiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiR2VvcmdlIEJ1c2ggSW50ZXJjb250aW5lbnRhbCBIb3VzdG9uIEFpcnBvcnRcIixjb2RlOlwiSUFIXCIsY2l0eTpcIkhvdXN0b25cIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIk1pbm5lYXBvbGlzLVN0IFBhdWwgSW50ZXJuYXRpb25hbC9Xb2xkLUNoYW1iZXJsYWluIEFpcnBvcnRcIixjb2RlOlwiTVNQXCIsY2l0eTpcIk1pbm5lYXBvbGlzXCIsY291bnRyeTpcIlVuaXRlZCBTdGF0ZXNcIn0se25hbWU6XCJMb2dhbiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQk9TXCIsY2l0eTpcIkJvc3RvblwiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiRGV0cm9pdCBNZXRyb3BvbGl0YW4gV2F5bmUgQ291bnR5IEFpcnBvcnRcIixjb2RlOlwiRFRXXCIsY2l0eTpcIkRldHJvaXRcIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIkZvcnQgTGF1ZGVyZGFsZSBIb2xseXdvb2QgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkZMTFwiLGNpdHk6XCJGb3J0IExhdWRlcmRhbGVcIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIk9ybGFuZG8gRXhlY3V0aXZlIEFpcnBvcnRcIixjb2RlOlwiT1JMXCIsY2l0eTpcIk9ybGFuZG9cIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIkxhR3VhcmRpYSBBaXJwb3J0XCIsY29kZTpcIkxHQVwiLGNpdHk6XCJOZXcgWW9ya1wiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiUGhpbGFkZWxwaGlhIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJQSExcIixjaXR5OlwiUGhpbGFkZWxwaGlhXCIsY291bnRyeTpcIlVuaXRlZCBTdGF0ZXNcIn0se25hbWU6XCJCYWx0aW1vcmUvV2FzaGluZ3RvbiBJbnRlcm5hdGlvbmFsIFRodXJnb29kIE1hcnNoYWxsIEFpcnBvcnRcIixjb2RlOlwiQldJXCIsY2l0eTpcIkJhbHRpbW9yZVwiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiU2FsdCBMYWtlIENpdHkgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlNMQ1wiLGNpdHk6XCJTYWx0IExha2UgQ2l0eVwiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiVmFuY291dmVyIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJZVlJcIixjaXR5OlwiVmFuY291dmVyXCIsY291bnRyeTpcIkNhbmFkYVwifSx7bmFtZTpcIlJvbmFsZCBSZWFnYW4gV2FzaGluZ3RvbiBOYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkRDQVwiLGNpdHk6XCJXYXNoaW5ndG9uXCIsY291bnRyeTpcIlVuaXRlZCBTdGF0ZXNcIn0se25hbWU6XCJXYXNoaW5ndG9uIER1bGxlcyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiSUFEXCIsY2l0eTpcIldhc2hpbmd0b25cIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIk1pZHdheSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiTURXXCIsY2l0eTpcIkNoaWNhZ29cIixjb3VudHJ5OlwiVW5pdGVkIFN0YXRlc1wifSx7bmFtZTpcIlNhbiBEaWVnbyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiU0FOXCIsY2l0eTpcIlNhbiBEaWVnb1wiLGNvdW50cnk6XCJVbml0ZWQgU3RhdGVzXCJ9LHtuYW1lOlwiTy4gUi4gVGFtYm8gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkpOQlwiLGNpdHk6XCJKb2hhbm5lc2J1cmdcIixjb3VudHJ5OlwiU291dGggQWZyaWNhXCJ9LHtuYW1lOlwiQ2Fpcm8gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkNBSVwiLGNpdHk6XCJDYWlyb1wiLGNvdW50cnk6XCJFZ3lwdFwifSx7bmFtZTpcIkNhcGUgVG93biBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ1BUXCIsY2l0eTpcIkNhcGUgVG93blwiLGNvdW50cnk6XCJTb3V0aCBBZnJpY2FcIn0se25hbWU6XCJNb2hhbW1lZCBWIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJDTU5cIixjaXR5OlwiQ2FzYWJsYW5jYVwiLGNvdW50cnk6XCJNb3JvY2NvXCJ9LHtuYW1lOlwiQWRkaXMgQWJhYmEgQm9sZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQUREXCIsY2l0eTpcIkFkZGlzIEFiYWJhXCIsY291bnRyeTpcIkV0aGlvcGlhXCJ9LHtuYW1lOlwiSG91YXJpIEJvdW1lZGllbmUgQWlycG9ydFwiLGNvZGU6XCJBTEdcIixjaXR5OlwiQWxnaWVyXCIsY291bnRyeTpcIkFsZ2VyaWFcIn0se25hbWU6XCJKb21vIEtlbnlhdHRhIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJOQk9cIixjaXR5OlwiTmFpcm9iaVwiLGNvdW50cnk6XCJLZW55YVwifSx7bmFtZTpcIk11cnRhbGEgTXVoYW1tZWQgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkxPU1wiLGNpdHk6XCJMYWdvc1wiLGNvdW50cnk6XCJOaWdlcmlhXCJ9LHtuYW1lOlwiVHVuaXMgQ2FydGhhZ2UgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlRVTlwiLGNpdHk6XCJUdW5pc1wiLGNvdW50cnk6XCJUdW5pc2lhXCJ9LHtuYW1lOlwiS2luZyBTaGFrYSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiRFVSXCIsY2l0eTpcIkR1cmJhblwiLGNvdW50cnk6XCJTb3V0aCBBZnJpY2FcIn0se25hbWU6XCJNZW5hcmEgQWlycG9ydFwiLGNvZGU6XCJSQUtcIixjaXR5OlwiTWFycmFrZWNoXCIsY291bnRyeTpcIk1vcm9jY29cIn0se25hbWU6XCJIdXJnaGFkYSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiSFJHXCIsY2l0eTpcIkh1cmdoYWRhXCIsY291bnRyeTpcIkVneXB0XCJ9LHtuYW1lOlwiTW9uYXN0aXIgSGFiaWIgQm91cmd1aWJhIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJNSVJcIixjaXR5OlwiTW9uYXN0aXJcIixjb3VudHJ5OlwiVHVuaXNpYVwifSx7bmFtZTpcIlNpciBTZWV3b29zYWd1ciBSYW1nb29sYW0gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIk1SVVwiLGNpdHk6XCJQbGFpc2FuY2VcIixjb3VudHJ5OlwiTWF1cml0aXVzXCJ9LHtuYW1lOlwiTm5hbWRpIEF6aWtpd2UgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkFCVlwiLGNpdHk6XCJBYnVqYVwiLGNvdW50cnk6XCJOaWdlcmlhXCJ9LHtuYW1lOlwiS290b2thIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJBQ0NcIixjaXR5OlwiQWNjcmFcIixjb3VudHJ5OlwiR2hhbmFcIn0se25hbWU6XCJTaGFybSBFbCBTaGVpa2ggSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlNTSFwiLGNpdHk6XCJTaGFybSBFbCBTaGVpa2hcIixjb3VudHJ5OlwiRWd5cHRcIn0se25hbWU6XCJKdWxpdXMgTnllcmVyZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiREFSXCIsY2l0eTpcIkRhciBFcyBTYWxhYW1cIixjb3VudHJ5OlwiVGFuemFuaWFcIn0se25hbWU6XCJRdWF0cm8gZGUgRmV2ZXJlaXJvIEFpcnBvcnRcIixjb2RlOlwiTEFEXCIsY2l0eTpcIkx1YW5kYVwiLGNvdW50cnk6XCJBbmdvbGFcIn0se25hbWU6XCJSb2xhbmQgR2Fycm9zIEFpcnBvcnRcIixjb2RlOlwiUlVOXCIsY2l0eTpcIlN0Li1kZW5pc1wiLGNvdW50cnk6XCJSZXVuaW9uXCJ9LHtuYW1lOlwiS2hhcnRvdW0gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIktSVFwiLGNpdHk6XCJLaGFydG91bVwiLGNvdW50cnk6XCJTdWRhblwifSx7bmFtZTpcIkzDqW9wb2xkIFPDqWRhciBTZW5naG9yIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJES1JcIixjaXR5OlwiRGFrYXJcIixjb3VudHJ5OlwiU2VuZWdhbFwifSx7bmFtZTpcIkbDqWxpeC1Ib3VwaG91w6t0LUJvaWdueSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQUJKXCIsY2l0eTpcIkFiaWRqYW5cIixjb3VudHJ5OlwiQ290ZSBkJ0l2b2lyZVwifSx7bmFtZTpcIkVzIFNlbmlhIEFpcnBvcnRcIixjb2RlOlwiT1JOXCIsY2l0eTpcIk9yYW5cIixjb3VudHJ5OlwiQWxnZXJpYVwifSx7bmFtZTpcIkJvcmcgRWwgQXJhYiBBaXJwb3J0XCIsY29kZTpcIkhCRVwiLGNpdHk6XCJBbGV4YW5kcmlhXCIsY291bnRyeTpcIkVneXB0XCJ9LHtuYW1lOlwiUG9ydCBFbGl6YWJldGggSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlBMWlwiLGNpdHk6XCJQb3J0IEVsaXphYmV0aFwiLGNvdW50cnk6XCJTb3V0aCBBZnJpY2FcIn0se25hbWU6XCJBZ2FkaXLigJNBbCBNYXNzaXJhIEFpcnBvcnRcIixjb2RlOlwiQUdBXCIsY2l0eTpcIkFnYWRpclwiLGNvdW50cnk6XCJNb3JvY2NvXCJ9LHtuYW1lOlwiRW50ZWJiZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiRUJCXCIsY2l0eTpcIkVudGViYmVcIixjb3VudHJ5OlwiVWdhbmRhXCJ9LHtuYW1lOlwiRG91YWxhIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJETEFcIixjaXR5OlwiRG91YWxhXCIsY291bnRyeTpcIkNhbWVyb29uXCJ9LHtuYW1lOlwiRGplcmJh4oCTWmFyemlzIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJESkVcIixjaXR5OlwiRGplcmJhXCIsY291bnRyeTpcIlR1bmlzaWFcIn0se25hbWU6XCJCZWlqaW5nIENhcGl0YWwgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlBFS1wiLGNpdHk6XCJCZWlqaW5nXCIsY291bnRyeTpcIkNoaW5hXCJ9LHtuYW1lOlwiRHViYWkgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkRYQlwiLGNpdHk6XCJEdWJhaVwiLGNvdW50cnk6XCJVbml0ZWQgQXJhYiBFbWlyYXRlc1wifSx7bmFtZTpcIkhhbmVkYSBBaXJwb3J0XCIsY29kZTpcIkhORFwiLGNpdHk6XCJUb2t5b1wiLGNvdW50cnk6XCJKYXBhblwifSx7bmFtZTpcIkhvbmcgS29uZyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiSEtHXCIsY2l0eTpcIkhvbmcgS29uZ1wiLGNvdW50cnk6XCJIb25nIEtvbmdcIn0se25hbWU6XCJTaGFuZ2hhaSBQdWRvbmcgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlBWR1wiLGNpdHk6XCJTaGFuZ2hhaVwiLGNvdW50cnk6XCJDaGluYVwifSx7bmFtZTpcIkd1YW5nemhvdSBCYWl5dW4gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkNBTlwiLGNpdHk6XCJHdWFuZ3pob3VcIixjb3VudHJ5OlwiQ2hpbmFcIn0se25hbWU6XCJJbmRpcmEgR2FuZGhpIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJERUxcIixjaXR5OlwiRGVsaGlcIixjb3VudHJ5OlwiSW5kaWFcIn0se25hbWU6XCJTb2VrYXJuby1IYXR0YSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ0dLXCIsY2l0eTpcIkpha2FydGFcIixjb3VudHJ5OlwiSW5kb25lc2lhXCJ9LHtuYW1lOlwiU2luZ2Fwb3JlIENoYW5naSBBaXJwb3J0XCIsY29kZTpcIlNJTlwiLGNpdHk6XCJTaW5nYXBvcmVcIixjb3VudHJ5OlwiU2luZ2Fwb3JlXCJ9LHtuYW1lOlwiSW5jaGVvbiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiSUNOXCIsY2l0eTpcIlNlb3VsXCIsY291bnRyeTpcIlNvdXRoIEtvcmVhXCJ9LHtuYW1lOlwiU3V2YXJuYWJodW1pIEFpcnBvcnRcIixjb2RlOlwiQktLXCIsY2l0eTpcIkJhbmdrb2tcIixjb3VudHJ5OlwiVGhhaWxhbmRcIn0se25hbWU6XCJLdWFsYSBMdW1wdXIgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIktVTFwiLGNpdHk6XCJLdWFsYSBMdW1wdXJcIixjb3VudHJ5OlwiTWFsYXlzaWFcIn0se25hbWU6XCJDaGVuZ2R1IFNodWFuZ2xpdSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ1RVXCIsY2l0eTpcIkNoZW5nZHVcIixjb3VudHJ5OlwiQ2hpbmFcIn0se25hbWU6XCJDaGhhdHJhcGF0aSBTaGl2YWppIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJCT01cIixjaXR5OlwiTXVtYmFpXCIsY291bnRyeTpcIkluZGlhXCJ9LHtuYW1lOlwiU2hlbnpoZW4gQmFvJ2FuIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJTWlhcIixjaXR5OlwiU2hlbnpoZW5cIixjb3VudHJ5OlwiQ2hpbmFcIn0se25hbWU6XCJUYWl3YW4gVGFveXVhbiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiVFBFXCIsY2l0eTpcIlRhaXBlaVwiLGNvdW50cnk6XCJUYWl3YW5cIn0se25hbWU6XCJLdW5taW5nIENoYW5nc2h1aSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiS01HXCIsY2l0eTpcIkt1bm1pbmdcIixjb3VudHJ5OlwiQ2hpbmFcIn0se25hbWU6XCJOaW5veSBBcXVpbm8gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIk1OTFwiLGNpdHk6XCJNYW5pbGFcIixjb3VudHJ5OlwiUGhpbGlwcGluZXNcIn0se25hbWU6XCJTaGFuZ2hhaSBIb25ncWlhbyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiU0hBXCIsY2l0eTpcIlNoYW5naGFpXCIsY291bnRyeTpcIkNoaW5hXCJ9LHtuYW1lOlwiWGknYW4gWGlhbnlhbmcgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlhJWVwiLGNpdHk6XCJYaSdhblwiLGNvdW50cnk6XCJDaGluYVwifSx7bmFtZTpcIk5hcml0YSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiTlJUXCIsY2l0eTpcIlRva3lvXCIsY291bnRyeTpcIkphcGFuXCJ9LHtuYW1lOlwiQ2hvbmdxaW5nIEppYW5nYmVpIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJDS0dcIixjaXR5OlwiQ2hvbmdxaW5nXCIsY291bnRyeTpcIkNoaW5hXCJ9LHtuYW1lOlwiRG9uIE11ZWFuZyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiRE1LXCIsY2l0eTpcIkJhbmdrb2tcIixjb3VudHJ5OlwiVGhhaWxhbmRcIn0se25hbWU6XCJUYW4gU29uIE5oYXQgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlNHTlwiLGNpdHk6XCJIbyBDaGkgTWluaCBDaXR5XCIsY291bnRyeTpcIlZpZXRuYW1cIn0se25hbWU6XCJIYW1hZCBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiRE9IXCIsY2l0eTpcIkRvaGFcIixjb3VudHJ5OlwiUWF0YXJcIn0se25hbWU6XCJIYW5nemhvdSBYaWFvc2hhbiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiSEdIXCIsY2l0eTpcIkhhbmd6aG91XCIsY291bnRyeTpcIkNoaW5hXCJ9LHtuYW1lOlwiS2luZyBBYmR1bGF6aXogSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkpFRFwiLGNpdHk6XCJKZWRkYWhcIixjb3VudHJ5OlwiU2F1ZGkgQXJhYmlhXCJ9LHtuYW1lOlwiSmVqdSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ0pVXCIsY2l0eTpcIkNoZWp1XCIsY291bnRyeTpcIlNvdXRoIEtvcmVhXCJ9LHtuYW1lOlwiS2Fuc2FpIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJLSVhcIixjaXR5OlwiT3Nha2FcIixjb3VudHJ5OlwiSmFwYW5cIn0se25hbWU6XCJOYW5qaW5nIEx1a291IEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJOS0dcIixjaXR5OlwiTmFuamluZ1wiLGNvdW50cnk6XCJDaGluYVwifSx7bmFtZTpcIlN5ZG5leSBBaXJwb3J0XCIsY29kZTpcIlNZRFwiLGNpdHk6XCJTeWRuZXlcIixjb3VudHJ5OlwiQXVzdHJhbGlhXCJ9LHtuYW1lOlwiTWVsYm91cm5lIEFpcnBvcnRcIixjb2RlOlwiTUVMXCIsY2l0eTpcIk1lbGJvdXJuZVwiLGNvdW50cnk6XCJBdXN0cmFsaWFcIn0se25hbWU6XCJCcmlzYmFuZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQk5FXCIsY2l0eTpcIkJyaXNiYW5lXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIkF1Y2tsYW5kIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJBS0xcIixjaXR5OlwiQXVja2xhbmRcIixjb3VudHJ5OlwiTmV3IFplYWxhbmRcIn0se25hbWU6XCJQZXJ0aCBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiUEVSXCIsY2l0eTpcIlBlcnRoXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIkFkZWxhaWRlIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJBRExcIixjaXR5OlwiQWRlbGFpZGVcIixjb3VudHJ5OlwiQXVzdHJhbGlhXCJ9LHtuYW1lOlwiQ2hyaXN0Y2h1cmNoIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJDSENcIixjaXR5OlwiQ2hyaXN0Y2h1cmNoXCIsY291bnRyeTpcIk5ldyBaZWFsYW5kXCJ9LHtuYW1lOlwiR29sZCBDb2FzdCBBaXJwb3J0XCIsY29kZTpcIk9PTFwiLGNpdHk6XCJDb29sYW5nYXR0YVwiLGNvdW50cnk6XCJBdXN0cmFsaWFcIn0se25hbWU6XCJXZWxsaW5ndG9uIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJXTEdcIixjaXR5OlwiV2VsbGluZ3RvblwiLGNvdW50cnk6XCJOZXcgWmVhbGFuZFwifSx7bmFtZTpcIkNhaXJucyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ05TXCIsY2l0eTpcIkNhaXJuc1wiLGNvdW50cnk6XCJBdXN0cmFsaWFcIn0se25hbWU6XCJDYW5iZXJyYSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ0JSXCIsY2l0eTpcIkNhbmJlcnJhXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIkhvYmFydCBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiSEJBXCIsY2l0eTpcIkhvYmFydFwiLGNvdW50cnk6XCJBdXN0cmFsaWFcIn0se25hbWU6XCJEYXJ3aW4gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkRSV1wiLGNpdHk6XCJEYXJ3aW5cIixjb3VudHJ5OlwiQXVzdHJhbGlhXCJ9LHtuYW1lOlwiTmFkaSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiTkFOXCIsY2l0eTpcIk5hbmRpXCIsY291bnRyeTpcIkZpamlcIn0se25hbWU6XCJRdWVlbnN0b3duIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJaUU5cIixjaXR5OlwiUXVlZW5zdG93biBJbnRlcm5hdGlvbmFsXCIsY291bnRyeTpcIk5ldyBaZWFsYW5kXCJ9LHtuYW1lOlwiVG93bnN2aWxsZSBBaXJwb3J0XCIsY29kZTpcIlRTVlwiLGNpdHk6XCJUb3duc3ZpbGxlXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIkxhdW5jZXN0b24gQWlycG9ydFwiLGNvZGU6XCJMU1RcIixjaXR5OlwiTGF1bmNlc3RvblwiLGNvdW50cnk6XCJBdXN0cmFsaWFcIn0se25hbWU6XCJOZXdjYXN0bGUgQWlycG9ydFwiLGNvZGU6XCJOVExcIixjaXR5OlwiTmV3Y2FzdGxlXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIk5lbHNvbiBBaXJwb3J0XCIsY29kZTpcIk5TTlwiLGNpdHk6XCJOZWxzb25cIixjb3VudHJ5OlwiTmV3IFplYWxhbmRcIn0se25hbWU6XCJEdW5lZGluIEFpcnBvcnRcIixjb2RlOlwiRFVEXCIsY2l0eTpcIkR1bmVkaW5cIixjb3VudHJ5OlwiTmV3IFplYWxhbmRcIn0se25hbWU6XCJNYWNrYXkgQWlycG9ydFwiLGNvZGU6XCJNS1lcIixjaXR5OlwiTWFja2F5XCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIlBvcnQgTW9yZXNieSBKYWNrc29ucyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiUE9NXCIsY2l0eTpcIlBvcnQgTW9yZXNieVwiLGNvdW50cnk6XCJQYXB1YSBOZXcgR3VpbmVhXCJ9LHtuYW1lOlwiU3Vuc2hpbmUgQ29hc3QgQWlycG9ydFwiLGNvZGU6XCJNQ1lcIixjaXR5OlwiTWFyb29jaHlkb3JlXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIkthcnJhdGhhIEFpcnBvcnRcIixjb2RlOlwiS1RBXCIsY2l0eTpcIkthcnJhdGhhXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIkhhd2tlJ3MgQmF5IEFpcnBvcnRcIixjb2RlOlwiTlBFXCIsY2l0eTpcIk5BUElFUlwiLGNvdW50cnk6XCJOZXcgWmVhbGFuZFwifSx7bmFtZTpcIlJvY2toYW1wdG9uIEFpcnBvcnRcIixjb2RlOlwiUk9LXCIsY2l0eTpcIlJvY2toYW1wdG9uXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIlBhbG1lcnN0b24gTm9ydGggQWlycG9ydFwiLGNvZGU6XCJQTVJcIixjaXR5OlwiUGFsbWVyc3RvbiBOb3J0aFwiLGNvdW50cnk6XCJOZXcgWmVhbGFuZFwifSx7bmFtZTpcIkFsaWNlIFNwcmluZ3MgQWlycG9ydFwiLGNvZGU6XCJBU1BcIixjaXR5OlwiQWxpY2UgU3ByaW5nc1wiLGNvdW50cnk6XCJBdXN0cmFsaWFcIn0se25hbWU6XCJIYW1pbHRvbiBJc2xhbmQgQWlycG9ydFwiLGNvZGU6XCJIVElcIixjaXR5OlwiSGFtaWx0b24gSXNsYW5kXCIsY291bnRyeTpcIkF1c3RyYWxpYVwifSx7bmFtZTpcIlBvcnQgSGVkbGFuZCBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiUEhFXCIsY2l0eTpcIlBvcnQgSGVkbGFuZFwiLGNvdW50cnk6XCJBdXN0cmFsaWFcIn0se25hbWU6XCJIZWF0aHJvdyBBaXJwb3J0XCIsY29kZTpcIkxIUlwiLGNpdHk6XCJMb25kb25cIixjb3VudHJ5OlwiVW5pdGVkIEtpbmdkb21cIn0se25hbWU6XCJDaGFybGVzIGRlIEdhdWxsZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ0RHXCIsY2l0eTpcIlBhcmlzXCIsY291bnRyeTpcIkZyYW5jZVwifSx7bmFtZTpcIkFtc3RlcmRhbSBBaXJwb3J0IFNjaGlwaG9sXCIsY29kZTpcIkFNU1wiLGNpdHk6XCJBbXN0ZXJkYW1cIixjb3VudHJ5OlwiTmV0aGVybGFuZHNcIn0se25hbWU6XCJGcmFua2Z1cnQgYW0gTWFpbiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiRlJBXCIsY2l0eTpcIkZyYW5rZnVydFwiLGNvdW50cnk6XCJHZXJtYW55XCJ9LHtuYW1lOlwiSXN0YW5idWwgQXRhdMO8cmsgQWlycG9ydFwiLGNvZGU6XCJJU1RcIixjaXR5OlwiSXN0YW5idWxcIixjb3VudHJ5OlwiVHVya2V5XCJ9LHtuYW1lOlwiQWRvbGZvIFN1w6FyZXogTWFkcmlk4oCTQmFyYWphcyBBaXJwb3J0XCIsY29kZTpcIk1BRFwiLGNpdHk6XCJNYWRyaWRcIixjb3VudHJ5OlwiU3BhaW5cIn0se25hbWU6XCJCYXJjZWxvbmHigJNFbCBQcmF0IEFpcnBvcnRcIixjb2RlOlwiQkNOXCIsY2l0eTpcIkJhcmNlbG9uYVwiLGNvdW50cnk6XCJTcGFpblwifSx7bmFtZTpcIkdhdHdpY2sgQWlycG9ydFwiLGNvZGU6XCJMR1dcIixjaXR5OlwiTG9uZG9uXCIsY291bnRyeTpcIlVuaXRlZCBLaW5nZG9tXCJ9LHtuYW1lOlwiTXVuaWNoIEFpcnBvcnRcIixjb2RlOlwiTVVDXCIsY2l0eTpcIk11bmljaFwiLGNvdW50cnk6XCJHZXJtYW55XCJ9LHtuYW1lOlwiTGVvbmFyZG8gZGEgVmluY2nigJNGaXVtaWNpbm8gQWlycG9ydFwiLGNvZGU6XCJGQ09cIixjaXR5OlwiUm9tZVwiLGNvdW50cnk6XCJJdGFseVwifSx7bmFtZTpcIlNoZXJlbWV0eWV2byBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiU1ZPXCIsY2l0eTpcIk1vc2Nvd1wiLGNvdW50cnk6XCJSdXNzaWFcIn0se25hbWU6XCJTYWJpaGEgR8O2a8OnZW4gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlNBV1wiLGNpdHk6XCJJc3RhbmJ1bFwiLGNvdW50cnk6XCJUdXJrZXlcIn0se25hbWU6XCJNb3Njb3cgRG9tb2RlZG92byBBaXJwb3J0XCIsY29kZTpcIkRNRVwiLGNpdHk6XCJNb3Njb3dcIixjb3VudHJ5OlwiUnVzc2lhXCJ9LHtuYW1lOlwiRHVibGluIEFpcnBvcnRcIixjb2RlOlwiRFVCXCIsY2l0eTpcIkR1YmxpblwiLGNvdW50cnk6XCJJcmVsYW5kXCJ9LHtuYW1lOlwiWsO8cmljaCBBaXJwb3J0XCIsY29kZTpcIlpSSFwiLGNpdHk6XCJadXJpY2hcIixjb3VudHJ5OlwiU3dpdHplcmxhbmRcIn0se25hbWU6XCJDb3BlbmhhZ2VuIEFpcnBvcnRcIixjb2RlOlwiQ1BIXCIsY2l0eTpcIkNvcGVuaGFnZW5cIixjb3VudHJ5OlwiRGVubWFya1wifSx7bmFtZTpcIlBhbG1hIERlIE1hbGxvcmNhIEFpcnBvcnRcIixjb2RlOlwiUE1JXCIsY2l0eTpcIlBhbG1hIGRlIE1hbGxvcmNhXCIsY291bnRyeTpcIlNwYWluXCJ9LHtuYW1lOlwiTWFuY2hlc3RlciBBaXJwb3J0XCIsY29kZTpcIk1BTlwiLGNpdHk6XCJNYW5jaGVzdGVyXCIsY291bnRyeTpcIlVuaXRlZCBLaW5nZG9tXCJ9LHtuYW1lOlwiT3NsbyBBaXJwb3J0LCBHYXJkZXJtb2VuXCIsY29kZTpcIk9TTFwiLGNpdHk6XCJPc2xvXCIsY291bnRyeTpcIk5vcndheVwifSx7bmFtZTpcIkxpc2JvbiBQb3J0ZWxhIEFpcnBvcnRcIixjb2RlOlwiTElTXCIsY2l0eTpcIkxpc2JvblwiLGNvdW50cnk6XCJQb3J0dWdhbFwifSx7bmFtZTpcIlN0b2NraG9sbSBBcmxhbmRhIEFpcnBvcnRcIixjb2RlOlwiQVJOXCIsY2l0eTpcIlN0b2NraG9sbVwiLGNvdW50cnk6XCJTd2VkZW5cIn0se25hbWU6XCJBbnRhbHlhIEFpcnBvcnRcIixjb2RlOlwiQVlUXCIsY2l0eTpcIkFudGFseWFcIixjb3VudHJ5OlwiVHVya2V5XCJ9LHtuYW1lOlwiTG9uZG9uIFN0YW5zdGVkIEFpcnBvcnRcIixjb2RlOlwiU1ROXCIsY2l0eTpcIkxvbmRvblwiLGNvdW50cnk6XCJVbml0ZWQgS2luZ2RvbVwifSx7bmFtZTpcIkJydXNzZWxzIEFpcnBvcnRcIixjb2RlOlwiQlJVXCIsY2l0eTpcIkJydXNzZWxzXCIsY291bnRyeTpcIkJlbGdpdW1cIn0se25hbWU6XCJEw7xzc2VsZG9yZiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiRFVTXCIsY2l0eTpcIkR1ZXNzZWxkb3JmXCIsY291bnRyeTpcIkdlcm1hbnlcIn0se25hbWU6XCJWaWVubmEgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlZJRVwiLGNpdHk6XCJWaWVubmFcIixjb3VudHJ5OlwiQXVzdHJpYVwifSx7bmFtZTpcIk1pbGFu4oCTTWFscGVuc2EgQWlycG9ydFwiLGNvZGU6XCJNWFBcIixjaXR5OlwiTWlsYW5vXCIsY291bnRyeTpcIkl0YWx5XCJ9LHtuYW1lOlwiQXRoZW5zIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJBVEhcIixjaXR5OlwiQXRoZW5zXCIsY291bnRyeTpcIkdyZWVjZVwifSx7bmFtZTpcIkJlcmxpbi1UZWdlbCBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiVFhMXCIsY2l0eTpcIkJlcmxpblwiLGNvdW50cnk6XCJHZXJtYW55XCJ9LHtuYW1lOlwiSGVsc2lua2kgQWlycG9ydFwiLGNvZGU6XCJIRUxcIixjaXR5OlwiSGVsc2lua2lcIixjb3VudHJ5OlwiRmlubGFuZFwifSx7bmFtZTpcIk3DoWxhZ2EgQWlycG9ydFwiLGNvZGU6XCJBR1BcIixjaXR5OlwiTWFsYWdhXCIsY291bnRyeTpcIlNwYWluXCJ9LHtuYW1lOlwiTWV4aWNvIENpdHkgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIk1FWFwiLGNpdHk6XCJNZXhpY28gQ2l0eVwiLGNvdW50cnk6XCJNZXhpY29cIn0se25hbWU6XCJTw6NvIFBhdWxv4oCTR3VhcnVsaG9zIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJHUlVcIixjaXR5OlwiU2FvIFBhdWxvXCIsY291bnRyeTpcIkJyYXppbFwifSx7bmFtZTpcIkVsIERvcmFkbyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQk9HXCIsY2l0eTpcIkJvZ290YVwiLGNvdW50cnk6XCJDb2xvbWJpYVwifSx7bmFtZTpcIkNhbmPDum4gSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkNVTlwiLGNpdHk6XCJDYW5jdW5cIixjb3VudHJ5OlwiTWV4aWNvXCJ9LHtuYW1lOlwiQ29tb2Rvcm8gQXJ0dXJvIE1lcmlubyBCZW7DrXRleiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiU0NMXCIsY2l0eTpcIlNhbnRpYWdvXCIsY291bnRyeTpcIkNoaWxlXCJ9LHtuYW1lOlwiSm9yZ2UgQ2jDoXZleiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiTElNXCIsY2l0eTpcIkxpbWFcIixjb3VudHJ5OlwiUGVydVwifSx7bmFtZTpcIlPDo28gUGF1bG/igJNDb25nb25oYXMgQWlycG9ydFwiLGNvZGU6XCJDR0hcIixjaXR5OlwiU2FvIFBhdWxvXCIsY291bnRyeTpcIkJyYXppbFwifSx7bmFtZTpcIlByZXNpZGVudGUgSnVzY2VsaW5vIEt1YmlzdHNjaGVrIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJCU0JcIixjaXR5OlwiQnJhc2lsaWFcIixjb3VudHJ5OlwiQnJhemlsXCJ9LHtuYW1lOlwiUmlvIGRlIEphbmVpcm/igJNHYWxlw6NvIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJHSUdcIixjaXR5OlwiUmlvIERlIEphbmVpcm9cIixjb3VudHJ5OlwiQnJhemlsXCJ9LHtuYW1lOlwiVG9jdW1lbiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiUFRZXCIsY2l0eTpcIlBhbmFtYSBDaXR5XCIsY291bnRyeTpcIlBhbmFtYVwifSx7bmFtZTpcIkFlcm9wYXJxdWUgSm9yZ2UgTmV3YmVyeVwiLGNvZGU6XCJBRVBcIixjaXR5OlwiQnVlbm9zIEFpcmVzXCIsY291bnRyeTpcIkFyZ2VudGluYVwifSx7bmFtZTpcIkd1YWRhbGFqYXJhIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJHRExcIixjaXR5OlwiR3VhZGFsYWphcmFcIixjb3VudHJ5OlwiTWV4aWNvXCJ9LHtuYW1lOlwiTWluaXN0cm8gUGlzdGFyaW5pIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJFWkVcIixjaXR5OlwiQnVlbm9zIEFpcmVzXCIsY291bnRyeTpcIkFyZ2VudGluYVwifSx7bmFtZTpcIlRhbmNyZWRvIE5ldmVzIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJDTkZcIixjaXR5OlwiQmVsbyBIb3Jpem9udGVcIixjb3VudHJ5OlwiQnJhemlsXCJ9LHtuYW1lOlwiTW9udGVycmV5IEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJNVFlcIixjaXR5OlwiTW9udGVycmV5XCIsY291bnRyeTpcIk1leGljb1wifSx7bmFtZTpcIlZpcmFjb3BvcyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiVkNQXCIsY2l0eTpcIkNhbXBpbmFzXCIsY291bnRyeTpcIkJyYXppbFwifSx7bmFtZTpcIlNhbnRvcyBEdW1vbnQgQWlycG9ydFwiLGNvZGU6XCJTRFVcIixjaXR5OlwiUmlvIERlIEphbmVpcm9cIixjb3VudHJ5OlwiQnJhemlsXCJ9LHtuYW1lOlwiU2FsZ2FkbyBGaWxobyBBaXJwb3J0XCIsY29kZTpcIlBPQVwiLGNpdHk6XCJQb3J0byBBbGVncmVcIixjb3VudHJ5OlwiQnJhemlsXCJ9LHtuYW1lOlwiR3VhcmFyYXBlcyAtIEdpbGJlcnRvIEZyZXlyZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiUkVDXCIsY2l0eTpcIlJlY2lmZVwiLGNvdW50cnk6XCJCcmF6aWxcIn0se25hbWU6XCJEZXB1dGFkbyBMdcOtcyBFZHVhcmRvIE1hZ2FsaMOjZXMgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlNTQVwiLGNpdHk6XCJTYWx2YWRvclwiLGNvdW50cnk6XCJCcmF6aWxcIn0se25hbWU6XCJHZW5lcmFsIEFiZWxhcmRvIEwuIFJvZHLDrWd1ZXogSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlRJSlwiLGNpdHk6XCJUaWp1YW5hXCIsY291bnRyeTpcIk1leGljb1wifSx7bmFtZTpcIkFmb25zbyBQZW5hIEFpcnBvcnRcIixjb2RlOlwiQ1dCXCIsY2l0eTpcIkN1cml0aWJhXCIsY291bnRyeTpcIkJyYXppbFwifSx7bmFtZTpcIlBpbnRvIE1hcnRpbnMgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIkZPUlwiLGNpdHk6XCJGb3J0YWxlemFcIixjb3VudHJ5OlwiQnJhemlsXCJ9LHtuYW1lOlwiSm9zw6kgTWFydMOtIEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJIQVZcIixjaXR5OlwiSGF2YW5hXCIsY291bnRyeTpcIkN1YmFcIn0se25hbWU6XCJKdWFuIFNhbnRhbWFyaWEgSW50ZXJuYXRpb25hbCBBaXJwb3J0XCIsY29kZTpcIlNKT1wiLGNpdHk6XCJTYW4gSm9zZVwiLGNvdW50cnk6XCJDb3N0YSBSaWNhXCJ9LHtuYW1lOlwiTWF0dXLDrW4gQWlycG9ydFwiLGNvZGU6XCJNVU5cIixjaXR5OlwiTWF0dXJpblwiLGNvdW50cnk6XCJWZW5lenVlbGFcIn0se25hbWU6XCJIZXJjw61saW8gTHV6IEludGVybmF0aW9uYWwgQWlycG9ydFwiLGNvZGU6XCJGTE5cIixjaXR5OlwiRmxvcmlhbm9wb2xpc1wiLGNvdW50cnk6XCJCcmF6aWxcIn0se25hbWU6XCJWYWwgZGUgQ2FucyBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQkVMXCIsY2l0eTpcIkJlbGVtXCIsY291bnRyeTpcIkJyYXppbFwifSx7bmFtZTpcIkFsZWphbmRybyBWZWxhc2NvIEFzdGV0ZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixjb2RlOlwiQ1VaXCIsY2l0eTpcIkN1emNvXCIsY291bnRyeTpcIlBlcnVcIn0se25hbWU6XCJTYW50YSBHZW5vdmV2YSBBaXJwb3J0XCIsY29kZTpcIkdZTlwiLGNpdHk6XCJHb2lhbmlhXCIsY291bnRyeTpcIkJyYXppbFwifV07ZnVuY3Rpb24gYm4oZSl7cmV0dXJuIG4oZm4sZSl9ZnVuY3Rpb24gdm4oZSl7cmV0dXJuIG4oKCgpPT57dmFyIGEsdDtjb25zdCBvPW51bGwhPShhPW51bGw9PWU/dm9pZCAwOmUuYWlybGluZSk/YTptbigpLGk9bnVsbCE9KHQ9bnVsbD09ZT92b2lkIDA6ZS5wYXNzZW5nZXIpP3Q6X2EoKSxbbixyXT1ibih7bGVuZ3RoOjJ9KTtyZXR1cm57cGFzc2VuZ2VyOmksYWlybGluZTpvLGZsaWdodE51bWJlcjp5bih7YWlybGluZTpvfSksb3JpZ2luOm4sZGVzdGluYXRpb246cixkYXRlOllhKCkudG9JU09TdHJpbmcoKSxzZWF0OmduKCksZmxpZ2h0TGVuZ3RoOi4yNSpNYXRoLmNlaWwocyh7bWluOjEsbWF4OjksZnJhY3Rpb246Mn0pLy4yNSl9fSksZSl9ZnVuY3Rpb24gd24oZSl7cmV0dXJuIG4oKCgpPT57dmFyIGEsdDtjb25zdCBvPW51bGwhPShhPW51bGw9PWU/dm9pZCAwOmUuZnVsbE5hbWUpP2E6YCR7Ym8oKX0gJHtfYSh7d2l0aEFjY2VudHM6ITF9KX1gLGk9bnVsbCE9KHQ9bnVsbD09ZT92b2lkIDA6ZS5icmFuZCk/dDpSZSgpLG49e21vbnRoOlwibnVtZXJpY1wiLHllYXI6XCIyLWRpZ2l0XCJ9O3JldHVybntmdWxsTmFtZTpvLGJyYW5kOmksdmFsaWRGcm9tOnBvKHt5ZWFyczoxfSkudG9Mb2NhbGVEYXRlU3RyaW5nKFwiZW4tR0JcIixuKSx1bnRpbEVuZDpZYSh7eWVhcnM6Mn0pLnRvTG9jYWxlRGF0ZVN0cmluZyhcImVuLUdCXCIsbiksY2N2OkdlKCksbnVtYmVyOldlKHticmFuZDppfSksYWNjb3VudDpoKCksdHlwZTpIZShbXCJDcmVkaXRcIixcIkRlYml0XCJdKX19KSxlKX1jb25zdCBrbj0oKT0+e2NvbnN0IGU9W3YoKSxTKCksUyh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksbG4oKSxsbih7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksWnQoKSxadCh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksYW8oKSxhbyh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksbWEoKSxtYSh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksZ2koKSxnaSh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksRG8oKSxEbyh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSkseG8oKSx4byh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksS28oKSxLbyh7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksdm4oKSx2bih7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSksd24oKSx3bih7bGVuZ3RoOlMoe21pbjoxLG1heDoxMH0pfSldO3JldHVybiBlW1Moe21pbjowLG1heDplLmxlbmd0aC0xfSldfTtmdW5jdGlvbiBTbihlKXt2YXIgYTtjb25zdCB0PW51bGwhPShhPW51bGw9PWU/dm9pZCAwOmUudG90YWxLZXlzKT9hOlMoe21pbjoobnVsbD09ZT92b2lkIDA6ZS5taW5LZXlzKXx8MSxtYXg6KG51bGw9PWU/dm9pZCAwOmUubWF4S2V5cyl8fDk5fSk7cmV0dXJuIG4oKCgpPT57Y29uc3QgZT17fTtmb3IobGV0IGE9MDthPHQ7YSsrKWVbQW8oKS5yZXBsYWNlKC8tL2csXCJcIildPWtuKCk7cmV0dXJuIGV9KSxlKX12YXIgQ249e2Jhc2g6JyMhL2Jpbi9iYXNoXFxuXFxubW92ZSgpXFxue1xcbiAgbG9jYWwgbj1cIiQxXCJcXG4gIGxvY2FsIGZyb209XCIkMlwiXFxuICBsb2NhbCB0bz1cIiQzXCJcXG4gIGxvY2FsIHZpYT1cIiQ0XCJcXG5cXG4gIGlmIFtbIFwiJG5cIiA9PSBcIjFcIiBdXVxcbiAgdGhlblxcbiAgICBlY2hvIFwiTW92ZSBkaXNrIGZyb20gcG9sZSAkZnJvbSB0byBwb2xlICR0b1wiXFxuICBlbHNlXFxuICAgIG1vdmUgJCgoJG4gLSAxKSkgJGZyb20gJHZpYSAkdG9cXG4gICAgbW92ZSAxICRmcm9tICR0byAkdmlhXFxuICAgIG1vdmUgJCgoJG4gLSAxKSkgJHZpYSAkdG8gJGZyb21cXG4gIGZpXFxufVxcblxcbm1vdmUgJDEgJDIgJDMgJDQnLGM6JyNpbmNsdWRlIDxzdGRpby5oPlxcblxcbnZvaWQgbW92ZShpbnQgbiwgaW50IGZyb20sIGludCB2aWEsIGludCB0bykge1xcbiAgIGlmIChuID4gMSkge1xcbiAgICAgIG1vdmUobiAtIDEsIGZyb20sIHRvLCB2aWEpO1xcbiAgICAgIHByaW50ZihcIk1vdmUgZGlzayBmcm9tIHBvbGUgJWQgdG8gcG9sZSAlZFxcXFxuXCIsIGZyb20sIHRvKTtcXG4gICAgICBtb3ZlKG4gLSAxLCB2aWEsIGZyb20sIHRvKTtcXG4gICB9IGVsc2Uge1xcbiAgICAgIHByaW50ZihcIk1vdmUgZGlzayBmcm9tIHBvbGUgJWQgdG8gcG9sZSAlZFxcXFxuXCIsIGZyb20sIHRvKTtcXG4gICB9XFxufVxcbmludCBtYWluKCkge1xcbiAgIG1vdmUoNCwgMSwgMiwgMyk7XFxuICAgcmV0dXJuIDA7XFxufScsXCJjI1wiOidwdWJsaWMgdm9pZCBtb3ZlKGludCBuLCBpbnQgZnJvbSwgaW50IHRvLCBpbnQgdmlhKSB7XFxuICBpZiAobiA9PSAxKSB7XFxuICAgIFN5c3RlbS5Db25zb2xlLldyaXRlTGluZShcIk1vdmUgZGlzayBmcm9tIHBvbGUgXCIgKyBmcm9tICsgXCIgdG8gcG9sZSBcIiArIHRvKTtcXG4gIH0gZWxzZSB7XFxuICAgIG1vdmUobiAtIDEsIGZyb20sIHZpYSwgdG8pO1xcbiAgICBtb3ZlKDEsIGZyb20sIHRvLCB2aWEpO1xcbiAgICBtb3ZlKG4gLSAxLCB2aWEsIHRvLCBmcm9tKTtcXG4gIH1cXG59JyxcImMrK1wiOid2b2lkIG1vdmUoaW50IG4sIGludCBmcm9tLCBpbnQgdG8sIGludCB2aWEpIHtcXG4gIGlmIChuID09IDEpIHtcXG4gICAgc3RkOjpjb3V0IDw8IFwiTW92ZSBkaXNrIGZyb20gcG9sZSBcIiA8PCBmcm9tIDw8IFwiIHRvIHBvbGUgXCIgPDwgdG8gPDwgc3RkOjplbmRsO1xcbiAgfSBlbHNlIHtcXG4gICAgbW92ZShuIC0gMSwgZnJvbSwgdmlhLCB0byk7XFxuICAgIG1vdmUoMSwgZnJvbSwgdG8sIHZpYSk7XFxuICAgIG1vdmUobiAtIDEsIHZpYSwgdG8sIGZyb20pO1xcbiAgfVxcbn0nLGNzczpcIi5ob3Zlci1yb3RhdGUge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIG1hcmdpbjogOHB4O1xcbiAgbWluLXdpZHRoOiAyNDBweDtcXG4gIG1heC13aWR0aDogMzIwcHg7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmhvdmVyLXJvdGF0ZSBpbWcge1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3M7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uaG92ZXItcm90YXRlOmhvdmVyIGltZyB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMykgcm90YXRlKDVkZWcpO1xcbn1cIixnbzpcImZ1bmMgZmliKGEgaW50KSBpbnQge1xcbiAgaWYgYSA8IDIge1xcbiAgICAgIHJldHVybiBhXFxuICB9XFxuICByZXR1cm4gZmliKGEgLSAxKSArIGZpYihhIC0gMilcXG59XCIsaHRtbDonPGZvcm0gYWN0aW9uPVwiaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzXCIgbWV0aG9kPVwiZ2V0XCIgdGFyZ2V0PVwiX2JsYW5rXCI+XFxuICA8bGFiZWwgZm9yPVwic2FkZHJcIj5FbnRlciB5b3VyIGxvY2F0aW9uPC9sYWJlbD5cXG4gIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJzYWRkclwiIC8+XFxuICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJkYWRkclwiIHZhbHVlPVwiMzUwIDV0aCBBdmUgTmV3IFlvcmssIE5ZIDEwMDE4IChFbXBpcmUgU3RhdGUgQnVpbGRpbmcpXCIgLz5cXG4gIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJHZXQgZGlyZWN0aW9uc1wiIC8+XFxuPC9mb3JtPicsamF2YToncHVibGljIHZvaWQgbW92ZShpbnQgbiwgaW50IGZyb20sIGludCB0bywgaW50IHZpYSkge1xcbiAgaWYgKG4gPT0gMSkge1xcbiAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIk1vdmUgZGlzayBmcm9tIHBvbGUgXCIgKyBmcm9tICsgXCIgdG8gcG9sZSBcIiArIHRvKTtcXG4gIH0gZWxzZSB7XFxuICAgICAgbW92ZShuIC0gMSwgZnJvbSwgdmlhLCB0byk7XFxuICAgICAgbW92ZSgxLCBmcm9tLCB0bywgdmlhKTtcXG4gICAgICBtb3ZlKG4gLSAxLCB2aWEsIHRvLCBmcm9tKTtcXG4gIH1cXG59JyxqYXZhc2NyaXB0OidmdW5jdGlvbiBtb3ZlKG4sIGEsIGIsIGMpIHtcXG4gIGlmIChuID4gMCkge1xcbiAgICBtb3ZlKG4gLSAxLCBhLCBjLCBiKTtcXG4gICAgY29uc29sZS5sb2coXCJNb3ZlIGRpc2sgZnJvbSBcIiArIGEgKyBcIiB0byBcIiArIGMpO1xcbiAgICBtb3ZlKG4gLSAxLCBiLCBhLCBjKTtcXG4gIH1cXG59XFxubW92ZSg0LCBcIkFcIiwgXCJCXCIsIFwiQ1wiKTsnLHBocDonZnVuY3Rpb24gbW92ZSgkbiwkZnJvbSwkdG8sJHZpYSkge1xcbiAgaWYgKCRuID09PSAxKSB7XFxuICAgIHByaW50KFwiTW92ZSBkaXNrIGZyb20gcG9sZSAkZnJvbSB0byBwb2xlICR0b1wiKTtcXG4gIH0gZWxzZSB7XFxuICAgIG1vdmUoJG4tMSwkZnJvbSwkdmlhLCR0byk7XFxuICAgIG1vdmUoMSwkZnJvbSwkdG8sJHZpYSk7XFxuICAgIG1vdmUoJG4tMSwkdmlhLCR0bywkZnJvbSk7XFxuICB9XFxufScscHl0aG9uOidkZWYgaGFub2kobmRpc2tzLCBzdGFydFBlZz0xLCBlbmRQZWc9Myk6XFxuICBpZiBuZGlza3M6XFxuICAgIGhhbm9pKG5kaXNrcyAtIDEsIHN0YXJ0UGVnLCA2IC0gc3RhcnRQZWcgLSBlbmRQZWcpXFxuICAgIHByaW50IFwiTW92ZSBkaXNrICVkIGZyb20gcGVnICVkIHRvIHBlZyAlZFwiICUgKG5kaXNrcywgc3RhcnRQZWcsIGVuZFBlZylcXG4gICAgaGFub2kobmRpc2tzIC0gMSwgNiAtIHN0YXJ0UGVnIC0gZW5kUGVnLCBlbmRQZWcpXFxuXFxuaGFub2kobmRpc2tzPTQpJyxydXN0OidmbiBtb3ZlXyhuOiBpMzIsIGZyb206IGkzMiwgdG86IGkzMiwgdmlhOiBpMzIpIHtcXG4gIGlmIG4gPiAwIHtcXG4gICAgICBtb3ZlXyhuIC0gMSwgZnJvbSwgdmlhLCB0byk7XFxuICAgICAgcHJpbnRsbiEoXCJNb3ZlIGRpc2sgZnJvbSBwb2xlIHt9IHRvIHBvbGUge31cIiwgZnJvbSwgdG8pO1xcbiAgICAgIG1vdmVfKG4gLSAxLCB2aWEsIHRvLCBmcm9tKTtcXG4gIH1cXG59XFxuIFxcbmZuIG1haW4oKSB7XFxuICBtb3ZlXyg0LCAxLDIsMyk7XFxufScsc3FsOlwiU0VMRUNUICpcXG5GUk9NICAgY2FsbFxcbk9SREVSICBCWSBjYWxsLmVtcGxveWVlX2lkIEFTQyxcXG4gICAgICAgICAgY2FsbC5zdGFydF90aW1lIEFTQztcIixzd2lmdDonZnVuYyBoYW5vaShuOiBJbnQsIGE6IFN0cmluZywgYjogU3RyaW5nLCBjOiBTdHJpbmcpIHtcXG4gIGlmIG4gPiAwIHtcXG4gICAgaGFub2kobiAtIDEsIGE6IGEsIGI6IGMsIGM6IGIpXFxuICAgIHByaW50KFwiTW92ZSBkaXNrIGZyb20gXFxcXFxcXFwoYSkgdG8gXFxcXFxcXFwoYylcIilcXG4gICAgaGFub2kobiAtIDEsIGE6IGIsIGI6IGEsIGM6IGMpXFxuICB9XFxufVxcbiAgXFxuaGFub2koNCwgYTogXCJBXCIsIGI6IFwiQlwiLCBjOiBcIkNcIilcXCc7J307ZnVuY3Rpb24gQW4oZSl7dmFyIGE7Y29uc3QgdD1udWxsIT0oYT1udWxsPT1lP3ZvaWQgMDplLmxhbmcpP2E6XCJqYXZhc2NyaXB0XCI7cmV0dXJuIG4oKCgpPT5Dblt0XSksZSl9ZnVuY3Rpb24gTW4oZSl7Y29uc3QgYT1lLm1pbix0PWUubWF4O2lmKGE+PXQpdGhyb3cgbmV3IEVycm9yKFwiTWluIG11c3QgYmUgbGVzcyB0aGFuIG1heFwiKTtyZXR1cm4gbigoKCk9PnFvKHtjaGFyQ291bnQ6cyh7bWluOmEsbWF4OnR9KX0pKSxlKX1mdW5jdGlvbiBUbihlKXtyZXR1cm4gbigoKCk9PkhlKGZuLm1hcCgoKHtuYW1lOmV9KT0+ZSkpKSksZSl9ZnVuY3Rpb24gQm4oZSl7cmV0dXJuIG4oKCgpPT5IZShmbi5tYXAoKCh7Y29kZTplfSk9PmUpKSkpLGUpfWZ1bmN0aW9uIEluKGU9e2Zyb206MSxzdGVwOjF9KXtpZigwPT09ZS5zdGVwKXRocm93IG5ldyBFcnJvcihcImBzdGVwYCBzaG91bGQgYmUgYSBudW1iZXIgZGlmZmVyZW50IHRoYW4gMCwgZm9yIGV4YW1wbGU6IHtmcm9tOiAxLCBzdGVwOiAxfVwiKTtpZihlLmZyb208MCl0aHJvdyBuZXcgRXJyb3IoXCJgZnJvbWAgc2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAwXCIpO2lmKCF3KGUudG8pKXtpZihlLnRvPDApdGhyb3cgbmV3IEVycm9yKFwiYHRvYCBzaG91bGQgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIGZyb20gYW5kIGdyZWF0ZXIgdGhhbiAwXCIpO2lmKGUuZnJvbT5lLnRvJiZlLnN0ZXA+MCl0aHJvdyBuZXcgRXJyb3IoXCJgdG9gIHNob3VsZCBiZSBoaWdoZXIgb3IgZXF1YWwgdG8gYGZyb21gLCBmb3IgZXhhbXBsZToge2Zyb206IDEsIHRvOiAzfVwiKTtpZihlLmZyb208ZS50byYmZS5zdGVwPDApdGhyb3cgbmV3IEVycm9yKFwiYHRvYCBzaG91bGQgYmUgbG93ZXIgb3IgZXF1YWwgdG8gYGZyb21gLCBmb3IgZXhhbXBsZToge2Zyb206IDUsIHRvOiAxLCBzdGVwOiAtMX1cIil9bGV0IGE9ZS5mcm9tO3JldHVybigpPT57aWYoIXcoZS50bykpe2lmKGUuc3RlcD4wJiZhPmUudG8pcmV0dXJuO2lmKGUuc3RlcDwwJiZhPGUudG8pcmV0dXJufWNvbnN0IHQ9YTtyZXR1cm4gYSs9ZS5zdGVwLHR9fWZ1bmN0aW9uIFBuKGU9e2Zyb206bmV3IERhdGUsc3RlcDo4NjRlNX0pe2NvbnN0IGE9bmV3IERhdGUoZS5mcm9tKSx0PWUudG8/bmV3IERhdGUoZS50byk6dm9pZCAwO2lmKDA9PT1lLnN0ZXApdGhyb3cgbmV3IEVycm9yKFwiYHN0ZXBgIHNob3VsZCBiZSBhIG51bWJlciBkaWZmZXJlbnQgZnJvbSAwLCBmb3IgZXhhbXBsZToge2Zyb206IG5ldyBEYXRlKCksIHN0ZXA6IDEwfVwiKTtpZighdyh0KSl7aWYoYT50JiZlLnN0ZXA+MCl0aHJvdyBuZXcgRXJyb3IoXCJgdG9gIHNob3VsZCBiZSBhIGRhdGUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBmcm9tYFwiKTtpZihhPHQmJmUuc3RlcDwwKXRocm93IG5ldyBFcnJvcihcImB0b2Agc2hvdWxkIGJlIGEgZGF0ZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIGBmcm9tYFwiKX1jb25zdCBvPUluKHtmcm9tOmEuZ2V0VGltZSgpLHRvOm51bGw9PXQ/dm9pZCAwOnQuZ2V0VGltZSgpLHN0ZXA6ZS5zdGVwfSk7cmV0dXJuKCk9Pntjb25zdCBlPW8oKTtyZXR1cm4gZT9uZXcgRGF0ZShlKTp2b2lkIDB9fWZ1bmN0aW9uIHhuKGUpe3ZhciBhLHQsbztjb25zdCBpPW51bGwhPShhPW51bGw9PWU/dm9pZCAwOmUudmFsdWVzKT9hOjIscj1udWxsIT0odD1udWxsPT1lP3ZvaWQgMDplLnRvdGFsVmFsdWUpP3Q6MTAwLGw9bnVsbCE9KG89bnVsbD09ZT92b2lkIDA6ZS5ub1plcm9zKSYmbztpZihpPD0xKXRocm93IG5ldyBFcnJvcihcIlZhbHVlcyBtdXN0IGJlIGJpZ2dlciB0aGFuIDFcIik7aWYocjwwKXRocm93IG5ldyBFcnJvcihcIlRvdGFsVmFsdWUgbXVzdCBiZSBwb3NpdGl2ZVwiKTtpZihsJiZyPGkpdGhyb3cgbmV3IEVycm9yKFwiVmFsdWVzIG11c3QgYmUgbGFyZ2VyIG9yIGVxdWFsIHRvIHRvdGFsVmFsdWUgd2l0aCB0aGUgbm9aZXJvIG9wdGlvblwiKTtyZXR1cm4gbigoKCk9Pntjb25zdCBhPW5ldyBBcnJheShpKS5maWxsKGw/MTowKTtsZXQgdD1yO2wmJih0LT1pKTtmb3IobGV0IG89MDtvPGktMTtvKyspe2NvbnN0IGk9cyh7bWluOjAsbWF4OnMoe21pbjowLG1heDpNYXRoLm1heCh0LDApfSksZnJhY3Rpb246bnVsbD09ZT92b2lkIDA6ZS5mcmFjdGlvbn0pO3QtPWksYVtvXSs9aX1hW2EubGVuZ3RoLTFdKz1yLWEucmVkdWNlKCgoZSxhKT0+ZSthKSwwKTtjb25zdCBvPVtdO2Zvcig7MCE9PWEubGVuZ3RoOyl7Y29uc3QgZT1zKHttaW46MCxtYXg6YS5sZW5ndGgtMSxmcmFjdGlvbjowfSksW3RdPWEuc3BsaWNlKGUsMSk7by5wdXNoKHQpfXJldHVybiBvfSksZSl9ZnVuY3Rpb24gRG4oZSl7cmV0dXJuIG4oKCgpPT57aWYodm9pZCAwPT09KG51bGw9PWU/dm9pZCAwOmUuY2hhbmNlVHJ1ZSkmJnZvaWQgMD09PShudWxsPT1lP3ZvaWQgMDplLmNoYW5jZUZhbHNlKSl0aHJvdyBuZXcgRXJyb3IoXCJPbmUgb2YgY2hhbmNlVHJ1ZSBhbmQgY2hhbmNlRmFsc2UgbXVzdCBiZSBwcm92aWRlZFwiKTtpZih2b2lkIDAhPT0obnVsbD09ZT92b2lkIDA6ZS5jaGFuY2VUcnVlKSYmdm9pZCAwIT09KG51bGw9PWU/dm9pZCAwOmUuY2hhbmNlRmFsc2UpKXRocm93IG5ldyBFcnJvcihcImNoYW5jZVRydWUgYW5kIGNoYW5jZUZhbHNlIGNhbid0IGJvdGggYmUgcHJvdmlkZWRcIik7aWYodm9pZCAwIT09ZS5jaGFuY2VGYWxzZSlyZXR1cm4gUmEoe21pbjowLG1heDoxLGZyYWN0aW9uOjE1fSk+PWUuY2hhbmNlRmFsc2U7aWYodm9pZCAwIT09ZS5jaGFuY2VUcnVlKXJldHVybiBSYSh7bWluOjAsbWF4OjEsZnJhY3Rpb246MTV9KTw9ZS5jaGFuY2VUcnVlO3Rocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWRcIil9KSxlKX1mdW5jdGlvbiBxbihlLGEpe3JldHVybiBuKCgoKT0+ZShhKSksYSl9ZnVuY3Rpb24gRm4oZSl7cmV0dXJuIG4oKCgpPT57dmFyIGE7Y29uc3QgdD1udWxsPT0oYT1udWxsPT1lP3ZvaWQgMDplLm9ubHlWYWxpZCl8fGE7bGV0IG89XCJcIjtkb3tvPVMoe21pbjowLG1heDo5LGxlbmd0aDoxMX0pLm1hcCgoZT0+U3RyaW5nKGUpKSkuam9pbihcIlwiKX13aGlsZSghayhvKSYmdCk7cmV0dXJuIG99KSxlKX1leHBvcnR7UG4gYXMgaW5jcmVtZW50YWxEYXRlLEluIGFzIGluY3JlbWVudGFsTnVtYmVyLEhlIGFzIHJhbmQsdSBhcyByYW5kQWJicmV2aWF0aW9uLEZuIGFzIHJhbmRBYm4sZCBhcyByYW5kQWNjZXNzb3J5LGggYXMgcmFuZEFjY291bnQseG8gYXMgcmFuZEFkZHJlc3MseG4gYXMgcmFuZEFnZ3JlZ2F0aW9uLG1uIGFzIHJhbmRBaXJsaW5lLGJuIGFzIHJhbmRBaXJwb3J0LEJuIGFzIHJhbmRBaXJwb3J0Q29kZSxUbiBhcyByYW5kQWlycG9ydE5hbWUsYiBhcyByYW5kQWxwaGEsQyBhcyByYW5kQWxwaGFOdW1lcmljLE0gYXMgcmFuZEFtZXJpY2FuRm9vdGJhbGxUZWFtLFQgYXMgcmFuZEFtb3VudCx4IGFzIHJhbmRBbmltYWwsSSBhcyByYW5kQW5pbWFsVHlwZSxOIGFzIHJhbmRBcm4seiBhcyByYW5kQXZhdGFyLHEgYXMgcmFuZEF3c1JlZ2lvbixKIGFzIHJhbmRBd3NSZXF1ZXN0SWQsTyBhcyByYW5kQXdzU2VydmljZSxqIGFzIHJhbmRCYXNlYmFsbFRlYW0sXyBhcyByYW5kQmFza2V0YmFsbFRlYW0sUSBhcyByYW5kQmVhciwkIGFzIHJhbmRCZXR3ZWVuRGF0ZSxhZSBhcyByYW5kQmljLHRlIGFzIHJhbmRCaW5hcnksaWUgYXMgcmFuZEJpcmQsbmUgYXMgcmFuZEJpdGNvaW5BZGRyZXNzLHNlIGFzIHJhbmRCb29rLHYgYXMgcmFuZEJvb2xlYW4sdWUgYXMgcmFuZEJyYW5kLGRlIGFzIHJhbmRCcm93c2VyLG1lIGFzIHJhbmRDYXJkaW5hbERpcmVjdGlvbix5ZSBhcyByYW5kQ2F0LGZlIGFzIHJhbmRDYXRjaFBocmFzZSx2ZSBhcyByYW5kQ2V0YWNlYW4sRG4gYXMgcmFuZENoYW5jZUJvb2xlYW4sa2UgYXMgcmFuZENpdHksQ2UgYXMgcmFuZENsb3RoaW5nU2l6ZSxBbiBhcyByYW5kQ29kZVNuaXBwZXQsTWUgYXMgcmFuZENvbG9yLEJlIGFzIHJhbmRDb21wYW55TmFtZSxQZSBhcyByYW5kQ291bnRyeSxaIGFzIHJhbmRDb3VudHJ5Q29kZSxEZSBhcyByYW5kQ291bnR5LEZlIGFzIHJhbmRDb3csd24gYXMgcmFuZENyZWRpdENhcmQsUmUgYXMgcmFuZENyZWRpdENhcmRCcmFuZCxHZSBhcyByYW5kQ3JlZGl0Q2FyZENWVixXZSBhcyByYW5kQ3JlZGl0Q2FyZE51bWJlcix6ZSBhcyByYW5kQ3JvY29kaWxpYSxPZSBhcyByYW5kQ3VycmVuY3lDb2RlLFZlIGFzIHJhbmRDdXJyZW5jeU5hbWUsVWUgYXMgcmFuZEN1cnJlbmN5U3ltYm9sLG9hIGFzIHJhbmREYXRhYmFzZSxZZSBhcyByYW5kRGF0YWJhc2VDb2xsYXRpb24sJGUgYXMgcmFuZERhdGFiYXNlQ29sdW1uLFplIGFzIHJhbmREYXRhYmFzZUVuZ2luZSxhYSBhcyByYW5kRGF0YWJhc2VUeXBlLG5hIGFzIHJhbmREZXBhcnRtZW50LHNhIGFzIHJhbmREaXJlY3Rpb24sRyBhcyByYW5kRGlyZWN0b3J5UGF0aCx1YSBhcyByYW5kRG9nLHBhIGFzIHJhbmREb21haW5OYW1lLGRhIGFzIHJhbmREb21haW5TdWZmaXgsZ2EgYXMgcmFuZERyaW5rcyxDYSBhcyByYW5kRW1haWwsYmEgYXMgcmFuZEVtYWlsUHJvdmlkZXIsTWEgYXMgcmFuZEVtb2ppLEJhIGFzIHJhbmRFdGhlcmV1bUFkZHJlc3MsUGEgYXMgcmFuZEZpbGVFeHQsUiBhcyByYW5kRmlsZU5hbWUsRGEgYXMgcmFuZEZpbGVQYXRoLEZhIGFzIHJhbmRGaWxlVHlwZSx3YSBhcyByYW5kRmlyc3ROYW1lLExhIGFzIHJhbmRGaXNoLHZuIGFzIHJhbmRGbGlnaHREZXRhaWxzLHluIGFzIHJhbmRGbGlnaHROdW1iZXIsUmEgYXMgcmFuZEZsb2F0LEVhIGFzIHJhbmRGb250RmFtaWx5LFdhIGFzIHJhbmRGb250U2l6ZSxPYSBhcyByYW5kRm9vZCxWYSBhcyByYW5kRm9vdGJhbGxUZWFtLFVhIGFzIHJhbmRGcmVxdWVuY3ksZG4gYXMgcmFuZEZ1bGxBZGRyZXNzLF9hIGFzIHJhbmRGdWxsTmFtZSxZYSBhcyByYW5kRnV0dXJlRGF0ZSxYYSBhcyByYW5kR2VuZGVyLGV0IGFzIHJhbmRHaXRCcmFuY2gsbnQgYXMgcmFuZEdpdENvbW1pdEVudHJ5LGl0IGFzIHJhbmRHaXRDb21taXRNZXNzYWdlLG90IGFzIHJhbmRHaXRDb21taXRTaGEscnQgYXMgcmFuZEdpdFNob3J0U2hhLHN0IGFzIHJhbmRIZXgsdHQgYXMgcmFuZEhleGFEZWNpbWFsLHV0IGFzIHJhbmRIb3JzZSxjdCBhcyByYW5kSHNsLGh0IGFzIHJhbmRIdHRwTWV0aG9kLG10IGFzIHJhbmRJYmFuLHl0IGFzIHJhbmRJY2VIb2NrZXlUZWFtLGd0IGFzIHJhbmRJbWcsYnQgYXMgcmFuZEludGVncmF0aW9uLHd0IGFzIHJhbmRJcCxrdCBhcyByYW5kSXB2NixTbiBhcyByYW5kSlNPTixDdCBhcyByYW5kSm9iQXJlYSxNdCBhcyByYW5kSm9iRGVzY3JpcHRvcixCdCBhcyByYW5kSm9iVGl0bGUsUHQgYXMgcmFuZEpvYlR5cGUscXQgYXMgcmFuZExhbmd1YWdlLFNhIGFzIHJhbmRMYXN0TmFtZSxGdCBhcyByYW5kTGF0aXR1ZGUsUnQgYXMgcmFuZExpbmUsRXQgYXMgcmFuZExpbmVzLE50IGFzIHJhbmRMaW9uLEt0IGFzIHJhbmRMb2NhbGUsT3QgYXMgcmFuZExvbmdpdHVkZSxKdCBhcyByYW5kTWFjLFZ0IGFzIHJhbmRNYXNrLFV0IGFzIHJhbmRNaW1lVHlwZSxZdCBhcyByYW5kTW9udGgsJHQgYXMgcmFuZE1vdG9yY3lsY2VNYW51ZmFjdHVyZXIsWnQgYXMgcmFuZE1vdmllLGFvIGFzIHJhbmRNb3ZpZUNoYXJhY3RlcixvbyBhcyByYW5kTXVzaWNHZW5yZSxpbyBhcyByYW5kTmVhcmJ5R1BTQ29vcmRpbmF0ZSxTIGFzIHJhbmROdW1iZXIscm8gYXMgcmFuZE9BdXRoUHJvdmlkZXIsc28gYXMgcmFuZE9jdGFsLHVvIGFzIHJhbmRPcmRpbmFsRGlyZWN0aW9uLGhvIGFzIHJhbmRQYXJhZ3JhcGgsbW8gYXMgcmFuZFBhc3N3b3JkLHBvIGFzIHJhbmRQYXN0RGF0ZSxnbyBhcyByYW5kUGVybWlzc2lvbixibyBhcyByYW5kUGVyc29uVGl0bGUsd28gYXMgcmFuZFBob25lTnVtYmVyLFNvIGFzIHJhbmRQaHJhc2UsQ28gYXMgcmFuZFBvcnQsRm8gYXMgcmFuZFBvc3QsTG8gYXMgcmFuZFByaW9yaXR5LEtvIGFzIHJhbmRQcm9kdWN0LEpvIGFzIHJhbmRQcm9kdWN0QWRqZWN0aXZlLHpvIGFzIHJhbmRQcm9kdWN0Q2F0ZWdvcnksV28gYXMgcmFuZFByb2R1Y3REZXNjcmlwdGlvbixqbyBhcyByYW5kUHJvZHVjdE1hdGVyaWFsLEhvIGFzIHJhbmRQcm9kdWN0TmFtZSxfbyBhcyByYW5kUHJvZ3JhbW1pbmdMYW5ndWFnZSxRbyBhcyByYW5kUHJvbm91bixabyBhcyByYW5kUHJvdG9jb2wsYWkgYXMgcmFuZFF1b3RlLG9pIGFzIHJhbmRSYWJiaXQsaWkgYXMgcmFuZFJlY2VudERhdGUsbmkgYXMgcmFuZFJnYixzaSBhcyByYW5kUm9sZSxsaSBhcyByYW5kUm91dGluZ051bWJlcixnbiBhcyByYW5kU2VhdE51bWJlcix1aSBhcyByYW5kU2VtdmVyLEx0IGFzIHJhbmRTZW50ZW5jZSxmIGFzIHJhbmRTZXF1ZW5jZSxkaSBhcyByYW5kU2hhcGUsbG4gYXMgcmFuZFNpbmdlcixtaSBhcyByYW5kU2tpbGwscGkgYXMgcmFuZFNsdWcsZ2kgYXMgcmFuZFNuYWtlLGJpIGFzIHJhbmRTb2NpYWwsY24gYXMgcmFuZFNvbmcsdmkgYXMgcmFuZFNvb25EYXRlLENpIGFzIHJhbmRTcG9ydHMsQWkgYXMgcmFuZFNwb3J0c1RlYW0sVGkgYXMgcmFuZFN0YXRlLElpIGFzIHJhbmRTdGF0ZUFiYnIseGkgYXMgcmFuZFN0YXR1cyxJbyBhcyByYW5kU3RyZWV0QWRkcmVzcyxCbyBhcyByYW5kU3RyZWV0TmFtZSxxaSBhcyByYW5kU3Vic2NyaXB0aW9uUGxhbixHaSBhcyByYW5kU3VwZXJoZXJvLExpIGFzIHJhbmRTdXBlcmhlcm9OYW1lLEhpIGFzIHJhbmRTdmcsZWUgYXMgcmFuZFN3aWZ0LHFvIGFzIHJhbmRUZXh0LE1uIGFzIHJhbmRUZXh0UmFuZ2UsV2kgYXMgcmFuZFRpbWVab25lLE5pIGFzIHJhbmRUb2RvLEtpIGFzIHJhbmRUcmFuc2FjdGlvblR5cGUsT2kgYXMgcmFuZFVybCxEbyBhcyByYW5kVXNlcixWaSBhcyByYW5kVXNlckFnZW50LE1vIGFzIHJhbmRVc2VyTmFtZSxBbyBhcyByYW5kVXVpZCxVaSBhcyByYW5kVmVoaWNsZSxZaSBhcyByYW5kVmVoaWNsZUZ1ZWwsJGkgYXMgcmFuZFZlaGljbGVNYW51ZmFjdHVyZXIsWmkgYXMgcmFuZFZlaGljbGVNb2RlbCxhbiBhcyByYW5kVmVoaWNsZVR5cGUsb24gYXMgcmFuZFZlcmIscm4gYXMgcmFuZFdlZWtkYXksbWEgYXMgcmFuZFdvcmQsUG8gYXMgcmFuZFppcENvZGUsbyBhcyByYW5kb20saSBhcyBzZWVkLHFuIGFzIHRvQ29sbGVjdGlvbn07XG4iLCJpbXBvcnQge1xuICByYW5kQ2F0Y2hQaHJhc2UsXG4gIHJhbmRGdXR1cmVEYXRlLFxuICByYW5kTnVtYmVyLFxuICByYW5kUHJvZHVjdERlc2NyaXB0aW9uLFxuICByYW5kSm9iVGl0bGUsXG59IGZyb20gXCJAbmduZWF0L2ZhbHNvXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoe1xuICB0YWcgPSBcImRpdlwiLFxuICBjbGFzc05hbWVzID0gW10sXG4gIHRleHRDb250ZW50LFxuICBkYXRhc2V0ID0ge30sXG4gIGF0dHJpYnV0ZXMgPSB7fSxcbiAgZXZlbnRIYW5kbGVycyA9IHt9LFxuICBjaGlsZHJlbiA9IFtdLFxufSA9IHt9KSB7XG4gIC8vIENyZWF0ZSBlbG0gd2l0aCB0YWdcbiAgY29uc3QgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuXG4gIC8vIEFkZCBjbGFzc2VzXG4gIGNsYXNzTmFtZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG4gICAgaWYgKGNsYXNzTmFtZSA9PT0gXCJcIikgcmV0dXJuO1xuICAgIGVsbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0pO1xuXG4gIC8vIFNldCB0ZXh0Q29udGVudFxuICBpZiAodGV4dENvbnRlbnQpIHtcbiAgICBlbG0udGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbiAgfVxuXG4gIC8vIFNldCBkYXRhc2V0XG4gIGZvciAoY29uc3Qga2V5IGluIGRhdGFzZXQpIHtcbiAgICBlbG0uZGF0YXNldFtrZXldID0gZGF0YXNldFtrZXldO1xuICB9XG5cbiAgLy8gU2V0IEF0dHJpYnVpdGVzXG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfVxuXG4gIC8vIFNldCBIYW5kbGVyc1xuICBmb3IgKGNvbnN0IGtleSBpbiBldmVudEhhbmRsZXJzKSB7XG4gICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoa2V5LCBldmVudEhhbmRsZXJzW2tleV0pO1xuICB9XG5cbiAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgIGVsbS5hcHBlbmRDaGlsZChjaGlsZCk7XG4gIH1cblxuICByZXR1cm4gZWxtO1xufVxuXG4vLyBmdW5jdGlvbiB0byBjcmVhdGUgcmFuZG9tIHRvZG9zXG5mdW5jdGlvbiBjcmVhdGVGYWtlVG9kb3MobnVtYmVyKSB7XG4gIGNvbnN0IHRvZG9zID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyOyBpKyspIHtcbiAgICB0b2Rvcy5wdXNoKHtcbiAgICAgIHRpdGxlOiByYW5kQ2F0Y2hQaHJhc2UoKSxcbiAgICAgIGRlc2NyaXB0aW9uOiByYW5kUHJvZHVjdERlc2NyaXB0aW9uKCksXG4gICAgICBkdWVEYXRlOiByYW5kRnV0dXJlRGF0ZSgpLFxuICAgICAgcHJpb3JpdHk6IHJhbmROdW1iZXIoeyBtaW46IDEsIG1heDogNSB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0b2Rvcztcbn1cblxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIHJhbmRvbSBwcm9qZWN0c1xuZnVuY3Rpb24gY3JlYXRlRmFrZVByb2plY3RzKG51bWJlcikge1xuICBjb25zdCBwcm9qZWN0cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlcjsgaSsrKSB7XG4gICAgcHJvamVjdHMucHVzaCh7IG5hbWU6IHJhbmRKb2JUaXRsZSgpLCB0b2RvczogWy4uLmNyZWF0ZUZha2VUb2Rvcyg1KV0gfSk7XG4gIH1cblxuICByZXR1cm4gcHJvamVjdHM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUVsZW1lbnQsIGNyZWF0ZUZha2VQcm9qZWN0cyB9O1xuIiwiY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRFxufTsiLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbmxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgbmF0aXZlIGZyb20gJy4vbmF0aXZlLmpzJztcbmltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBpZiAobmF0aXZlLnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiLCJpbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IGNyZWF0ZUZha2VQcm9qZWN0cyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNsYXNzIFByb2plY3Qge1xuICBjb25zdHJ1Y3Rvcih7IG5hbWUgPSBcIlwiLCB0b2RvcyA9IFtdIH0pIHtcbiAgICB0aGlzLmlkID0gdXVpZCgpO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy50b2RvcyA9IHRvZG9zO1xuICB9XG59XG5cbmNsYXNzIFRvZG8ge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgdGl0bGUgPSBcIlwiLFxuICAgIGRlc2NyaXB0aW9uID0gXCJcIixcbiAgICBkdWVEYXRlID0gXCJcIixcbiAgICBwcmlvcml0eSA9IDAsXG4gICAgaXNDb21wbGV0ZSA9IGZhbHNlLFxuICB9KSB7XG4gICAgdGhpcy5pZCA9IHV1aWQoKTtcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIHRoaXMuZHVlRGF0ZSA9IG5ldyBEYXRlKGR1ZURhdGUpO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB0aGlzLmlzQ29tcGxldGUgPSBpc0NvbXBsZXRlO1xuICB9XG59XG5cbi8vIE1haW4gRGF0YVxubGV0IHByb2plY3RzID0gW107XG5cbi8vIExpc3RzIG9mIHN1YnNjcmliZXJzXG5sZXQgbmV3UHJvamVjdEFkZFN1YnMgPSBbXTtcbmxldCBuZXdUb2RvQWRkU3VicyA9IFtdO1xubGV0IGVkaXRQcm9qZWN0U3VicyA9IFtdO1xubGV0IGVkaXRUb2RvU3VicyA9IFtdO1xuXG4vLyBBZGRpbmcgbmV3IERhdGFcblxuZnVuY3Rpb24gYWRkTmV3UHJvamVjdCh7IG5hbWUgPSBcIlwiLCB0b2RvcyA9IFtdIH0pIHtcbiAgY29uc3QgbmV3UHJvamVjdCA9IG5ldyBQcm9qZWN0KHsgbmFtZSwgdG9kb3MgfSk7XG4gIHByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XG5cbiAgbmV3UHJvamVjdEFkZFN1YnMuZm9yRWFjaCgobGlzKSA9PiBsaXMoeyBwcm9qZWN0SWQ6IG5ld1Byb2plY3QuaWQgfSkpO1xufVxuXG5mdW5jdGlvbiBhZGROZXdUb2RvKFxuICB7XG4gICAgdGl0bGUgPSBcIlwiLFxuICAgIGRlc2NyaXB0aW9uID0gXCJcIixcbiAgICBkdWVEYXRlID0gXCJcIixcbiAgICBwcmlvcml0eSA9IDAsXG4gICAgaXNDb21wbGV0ZSA9IGZhbHNlLFxuICB9LFxuICBwcm9qZWN0SWRcbikge1xuICBjb25zdCBmb3VuZFByb2plY3QgPSBwcm9qZWN0cy5maW5kKChwKSA9PiBwLmlkID09PSBwcm9qZWN0SWQpO1xuICBpZiAoIWZvdW5kUHJvamVjdCkgcmV0dXJuO1xuXG4gIGNvbnN0IG5ld1RvZG8gPSBuZXcgVG9kbyh7XG4gICAgdGl0bGUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgZHVlRGF0ZSxcbiAgICBwcmlvcml0eSxcbiAgICBpc0NvbXBsZXRlLFxuICB9KTtcblxuICBmb3VuZFByb2plY3QudG9kb3MucHVzaChuZXdUb2RvKTtcbiAgbmV3VG9kb0FkZFN1YnMuZm9yRWFjaCgobGlzKSA9PiBsaXMoeyB0b2RvSWQ6IG5ld1RvZG8uaWQsIHByb2plY3RJZCB9KSk7XG4gIGVkaXRQcm9qZWN0U3Vicy5mb3JFYWNoKChsaXMpID0+IGxpcyh7IHRvZG9JZDogbmV3VG9kby5pZCwgcHJvamVjdElkIH0pKTtcbn1cblxuLy8gRWRpdGluZyBEYXRhXG5cbmZ1bmN0aW9uIGVkaXRQcm9qZWN0KHByb2plY3RJZCwgbmV3UHJvamVjdFN0YXRlID0ge30sIGlzRGVsZXRlID0gZmFsc2UpIHtcbiAgY29uc3QgZm91bmRQcm9qZWN0ID0gcHJvamVjdHMuZmluZCgocCkgPT4gcC5pZCA9PT0gcHJvamVjdElkKTtcbiAgaWYgKCFmb3VuZFByb2plY3QpIHJldHVybjtcblxuICBpZiAoaXNEZWxldGUpIHtcbiAgICBwcm9qZWN0cyA9IHByb2plY3RzLmZpbHRlcigocCkgPT4gcC5pZCAhPT0gZm91bmRQcm9qZWN0LmlkKTtcbiAgfSBlbHNlIHtcbiAgICBPYmplY3QuYXNzaWduKGZvdW5kUHJvamVjdCwgbmV3UHJvamVjdFN0YXRlKTtcbiAgfVxuXG4gIGVkaXRQcm9qZWN0U3Vicy5mb3JFYWNoKChsaXMpID0+XG4gICAgbGlzKHsgcHJvamVjdElkOiBmb3VuZFByb2plY3QuaWQsIGlzRGVsZXRlIH0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIGVkaXRUb2RvKHRvZG9JZCwgbmV3VG9kb1N0YXRlID0ge30sIGlzRGVsZXRlID0gZmFsc2UpIHtcbiAgY29uc3QgcmVzdWx0ID0gZmluZFRvZG9CeUlkKHRvZG9JZCk7XG4gIGlmICghcmVzdWx0LnRvZG8pIHJldHVybjtcblxuICBpZiAoaXNEZWxldGUpIHtcbiAgICByZXN1bHQucHJvamVjdC50b2RvcyA9IHJlc3VsdC5wcm9qZWN0LnRvZG9zLmZpbHRlcihcbiAgICAgICh0KSA9PiB0LmlkICE9PSByZXN1bHQudG9kby5pZFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmFzc2lnbihyZXN1bHQudG9kbywgbmV3VG9kb1N0YXRlKTtcbiAgfVxuXG4gIGVkaXRUb2RvU3Vicy5mb3JFYWNoKChsaXMpID0+IGxpcyh7IHRvZG9JZDogcmVzdWx0LnRvZG8uaWQgfSkpO1xuICBlZGl0UHJvamVjdFN1YnMuZm9yRWFjaCgobGlzKSA9PlxuICAgIGxpcyh7IHByb2plY3RJZDogcmVzdWx0LnByb2plY3QuaWQsIHRvZG9JZDogcmVzdWx0LnRvZG8uaWQsIGlzRGVsZXRlIH0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZVRvZG9Qcm9qZWN0KHRvZG9JZCwgbmV3UHJvamVjdElkKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGZpbmRUb2RvQnlJZCh0b2RvSWQpO1xuICBpZiAoIXJlc3VsdC50b2RvKSByZXR1cm47XG4gIGlmIChyZXN1bHQucHJvamVjdC5pZCA9PT0gbmV3UHJvamVjdElkKSByZXR1cm47XG5cbiAgZWRpdFRvZG8odG9kb0lkLCBudWxsLCB0cnVlKTtcblxuICBjb25zdCBmb3VuZFByb2plY3QgPSBwcm9qZWN0cy5maW5kKChwKSA9PiBwLmlkID09PSBuZXdQcm9qZWN0SWQpO1xuICBpZiAoIWZvdW5kUHJvamVjdCkgcmV0dXJuO1xuXG4gIGFkZE5ld1RvZG8ocmVzdWx0LnRvZG8sIGZvdW5kUHJvamVjdC5pZCk7XG59XG5cbi8vIEFkZC9SZW1vdmUgbGlzdGVuZXJzXG5cbmZ1bmN0aW9uIHN1YlRvUHJvamN0QWRkKGxpc3RlbmVyKSB7XG4gIG5ld1Byb2plY3RBZGRTdWJzLnB1c2gobGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiB1blN1YkZyb21Qcm9qZWN0QWRkKGxpc3RlbmVyKSB7XG4gIG5ld1Byb2plY3RBZGRTdWJzID0gbmV3UHJvamVjdEFkZFN1YnMuZmlsdGVyKChzKSA9PiBzICE9PSBsaXN0ZW5lcik7XG59XG5cbmZ1bmN0aW9uIHN1YlRvVG9kb0FkZChsaXN0ZW5lcikge1xuICBuZXdUb2RvQWRkU3Vicy5wdXNoKGxpc3RlbmVyKTtcbn1cblxuZnVuY3Rpb24gdW5TdWJGcm9tVG9kb0FkZChsaXN0ZW5lcikge1xuICBuZXdUb2RvQWRkU3VicyA9IG5ld1RvZG9BZGRTdWJzLmZpbHRlcigocykgPT4gcyAhPT0gbGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiBzdWJUb1Byb2pjdEVkaXQobGlzdGVuZXIpIHtcbiAgZWRpdFByb2plY3RTdWJzLnB1c2gobGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiB1blN1YkZyb21Qcm9qZWN0RWRpdChsaXN0ZW5lcikge1xuICBlZGl0UHJvamVjdFN1YnMgPSBlZGl0UHJvamVjdFN1YnMuZmlsdGVyKChzKSA9PiBzICE9PSBsaXN0ZW5lcik7XG59XG5cbmZ1bmN0aW9uIHN1YlRvVG9kb0VkaXQobGlzdGVuZXIpIHtcbiAgZWRpdFRvZG9TdWJzLnB1c2gobGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiB1blN1YkZyb21Ub2RvRWRpdChsaXN0ZW5lcikge1xuICBlZGl0VG9kb1N1YnMgPSBlZGl0VG9kb1N1YnMuZmlsdGVyKChzKSA9PiBzICE9PSBsaXN0ZW5lcik7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbnNcblxuZnVuY3Rpb24gZmluZFRvZG9CeUlkKHRvZG9JZCkge1xuICBsZXQgZm91bmRUb2RvID0gbnVsbDtcbiAgbGV0IGZvdW5kUHJvamVjdCA9IHByb2plY3RzLmZpbmQoKHApID0+IHtcbiAgICByZXR1cm4gcC50b2Rvcy5maW5kKCh0KSA9PiB7XG4gICAgICBpZiAodC5pZCA9PT0gdG9kb0lkKSB7XG4gICAgICAgIGZvdW5kVG9kbyA9IHQ7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4geyB0b2RvOiBmb3VuZFRvZG8sIHByb2plY3Q6IGZvdW5kUHJvamVjdCB9O1xufVxuXG5mdW5jdGlvbiBnZXRQcm9qZWN0cygpIHtcbiAgcmV0dXJuIHByb2plY3RzLm1hcCgocCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogcC5pZCxcbiAgICAgIG5hbWU6IHAubmFtZSxcbiAgICAgIHRvZG9zOiBnZXRQcm9qZWN0VG9kb3MocC5pZCksXG4gICAgfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFByb2plY3RUb2Rvcyhwcm9qZWN0SWQpIHtcbiAgY29uc3QgZm91bmRQcm9qZWN0ID0gcHJvamVjdHMuZmluZCgocCkgPT4gcC5pZCA9PT0gcHJvamVjdElkKTtcbiAgaWYgKCFmb3VuZFByb2plY3QpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiBmb3VuZFByb2plY3QudG9kb3MubWFwKCh0KSA9PiB7XG4gICAgcmV0dXJuIHsgLi4udCB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9kb0J5SWQodG9kb0lkKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGZpbmRUb2RvQnlJZCh0b2RvSWQpO1xuICBpZiAoIXJlc3VsdC50b2RvKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4geyAuLi5yZXN1bHQudG9kbyB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvamVjdHNMaXN0KCkge1xuICBsZXQgcHJvamVjdHNKc29uT2JqZWNzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInByb2plY3RzXCIpKTtcbiAgaWYgKCFwcm9qZWN0c0pzb25PYmplY3MpIHtcbiAgICBwcm9qZWN0c0pzb25PYmplY3MgPSBjcmVhdGVGYWtlUHJvamVjdHMoNSk7XG4gIH1cblxuICBwcm9qZWN0cyA9IHByb2plY3RzSnNvbk9iamVjcy5tYXAoKHBPYmopID0+IHtcbiAgICBjb25zdCBwID0gbmV3IFByb2plY3Qoe1xuICAgICAgbmFtZTogcE9iai5uYW1lLFxuICAgICAgdG9kb3M6IHBPYmoudG9kb3MubWFwKCh0T2JqKSA9PiB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgVG9kbyh7IC4uLnRPYmogfSk7XG4gICAgICAgIGlmICh0T2JqLmlkKSB0LmlkID0gdE9iai5pZDtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgICB9KSxcbiAgICB9KTtcbiAgICBpZiAocE9iai5pZCkgcC5pZCA9IHBPYmouaWQ7XG4gICAgcmV0dXJuIHA7XG4gIH0pO1xufVxuXG4vLyBTdG9yZSBwcm9qZWN0cyBpbiBsb2NhbCBzdG9yYWdlXG5mdW5jdGlvbiBzdG9yZVByb2plY3RzKCkge1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzXCIsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzKSk7XG59XG5cbi8vIGxvZ2ljXG5cbmluaXRQcm9qZWN0c0xpc3QoKTtcblxuc3ViVG9Qcm9qY3RBZGQoc3RvcmVQcm9qZWN0cyk7XG5zdWJUb1Byb2pjdEVkaXQoc3RvcmVQcm9qZWN0cyk7XG5cbi8vIEV4cG9ydHNcblxuZXhwb3J0IHtcbiAgVG9kbyxcbiAgUHJvamVjdCxcbiAgYWRkTmV3UHJvamVjdCxcbiAgYWRkTmV3VG9kbyxcbiAgZWRpdFByb2plY3QsXG4gIGVkaXRUb2RvLFxuICBzdWJUb1Byb2pjdEFkZCxcbiAgc3ViVG9Ub2RvQWRkLFxuICB1blN1YkZyb21Qcm9qZWN0QWRkLFxuICB1blN1YkZyb21Ub2RvQWRkLFxuICBzdWJUb1Byb2pjdEVkaXQsXG4gIHN1YlRvVG9kb0VkaXQsXG4gIHVuU3ViRnJvbVByb2plY3RFZGl0LFxuICB1blN1YkZyb21Ub2RvRWRpdCxcbiAgZ2V0UHJvamVjdHMsXG4gIGdldFByb2plY3RUb2RvcyxcbiAgZ2V0VG9kb0J5SWQsXG4gIGNoYW5nZVRvZG9Qcm9qZWN0LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvZG9Gb3JtQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdmlldyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBtb2R1bGUgPSB7fTtcbiAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG8tZm9ybVwiKTtcbiAgICAgIGNvbnN0IHRpdGxlSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjdG9kb19fdGl0bGVcIik7XG4gICAgICBjb25zdCBkZXNjcmlwdGlvbklucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3RvZG9fX2Rlc2NyaXB0aW9uXCIpO1xuICAgICAgY29uc3QgZHVlRGF0ZUlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3RvZG9fX2R1ZURhdGVcIik7XG4gICAgICBjb25zdCBwcmlvcml0eUlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3RvZG9fX3ByaW9yaXR5XCIpO1xuICAgICAgY29uc3QgcHJvamVjdElucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3RvZG9fX3Byb2plY3RcIik7XG4gICAgICBjb25zdCBpc0NvbXBsZXRlQ2hlY2tCb3ggPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjdG9kb19faXNDb21wbGV0ZVwiKTtcbiAgICAgIGNvbnN0IHN1Ym1pdEJ0biA9IGZvcm0ucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKTtcblxuICAgICAgbW9kdWxlLmZvcm0gPSBmb3JtO1xuXG4gICAgICBsZXQgc3VibWl0TGlzdGVuZXJzID0gW107XG5cbiAgICAgIG1vZHVsZS5hZGRTdWJtaXRMaXN0ZW5lciA9IChsaXN0ZW5lcikgPT4ge1xuICAgICAgICBzdWJtaXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICB9O1xuICAgICAgbW9kdWxlLnJlbW92ZVN1Ym1pdExpc3RlbmVyID0gKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIHN1Ym1pdExpc3RlbmVycyA9IHN1Ym1pdExpc3RlbmVycy5maWx0ZXIoKGxpcykgPT4gbGlzICE9PSBsaXN0ZW5lcik7XG4gICAgICB9O1xuXG4gICAgICBtb2R1bGUucmVuZGVyQWRkaW5nRm9ybSA9IChwcm9qZWN0c0xpc3QsIGN1cnJlbnRQcm9qZWN0SWQpID0+IHtcbiAgICAgICAgZm9ybS5kYXRhc2V0LnRvZG9JZCA9IFwiXCI7XG4gICAgICAgIGZvcm0uZGF0YXNldC5lZGl0ID0gXCJmYWxzZVwiO1xuICAgICAgICB0aXRsZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgZGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIGR1ZURhdGVJbnB1dC52YWx1ZUFzRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHByaW9yaXR5SW5wdXQuaW5uZXJIVE1MID0gWzEsIDIsIDMsIDQsIDVdLm1hcCgobnVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGA8b3B0aW9uIHZhbHVlPVwiJHtudW19XCI+JHtudW19PC9vcHRpb24+YDtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IFwiQWRkIFRvZG9cIjtcbiAgICAgICAgcHJvamVjdElucHV0LmlubmVySFRNTCA9IHByb2plY3RzTGlzdC5tYXAoKHByb2plY3QpID0+IHtcbiAgICAgICAgICByZXR1cm4gYDxvcHRpb24gdmFsdWU9XCIke3Byb2plY3QuaWR9XCIgJHtcbiAgICAgICAgICAgIGN1cnJlbnRQcm9qZWN0SWQgPT0gcHJvamVjdC5pZCA/IFwic2VsZWN0ZWRcIiA6IFwiXCJcbiAgICAgICAgICB9PiR7cHJvamVjdC5uYW1lfTwvb3B0aW9uPmA7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgbW9kdWxlLnJlbmRlckVkaXRpbmdGb3JtID0gKHRvZG8sIHRvZG9Qcm9qZWN0SWQsIHByb2plY3RzTGlzdCkgPT4ge1xuICAgICAgICBmb3JtLmRhdGFzZXQuZWRpdCA9IFwidHJ1ZVwiO1xuICAgICAgICBmb3JtLmRhdGFzZXQudG9kb0lkID0gdG9kby5pZDtcbiAgICAgICAgdGl0bGVJbnB1dC52YWx1ZSA9IHRvZG8udGl0bGU7XG4gICAgICAgIGRlc2NyaXB0aW9uSW5wdXQudmFsdWUgPSB0b2RvLmRlc2NyaXB0aW9uO1xuICAgICAgICBkdWVEYXRlSW5wdXQudmFsdWVBc0RhdGUgPSB0b2RvLmR1ZURhdGU7XG4gICAgICAgIHByaW9yaXR5SW5wdXQuaW5uZXJIVE1MID0gWzEsIDIsIDMsIDQsIDVdLm1hcCgobnVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGA8b3B0aW9uIHZhbHVlPVwiJHtudW19XCIgJHtcbiAgICAgICAgICAgIG51bSA9PSB0b2RvLnByaW9yaXR5ID8gXCJzZWxlY3RlZFwiIDogXCJcIlxuICAgICAgICAgIH0+JHtudW19PC9vcHRpb24+YDtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IFwiRWRpdCBUb2RvXCI7XG4gICAgICAgIHByb2plY3RJbnB1dC5pbm5lckhUTUwgPSBwcm9qZWN0c0xpc3QubWFwKChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGA8b3B0aW9uIHZhbHVlPVwiJHtwcm9qZWN0LmlkfVwiICR7XG4gICAgICAgICAgICB0b2RvUHJvamVjdElkID09PSBwcm9qZWN0LmlkID8gXCJzZWxlY3RlZFwiIDogXCJcIlxuICAgICAgICAgIH0+JHtwcm9qZWN0Lm5hbWV9PC9vcHRpb24+YDtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBtb2R1bGUuZ2V0SW5wdXRWYWx1ZXMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGl0bGU6IHRpdGxlSW5wdXQudmFsdWUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uSW5wdXQudmFsdWUsXG4gICAgICAgICAgZHVlRGF0ZTogZHVlRGF0ZUlucHV0LnZhbHVlQXNEYXRlLFxuICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eUlucHV0LnZhbHVlLFxuICAgICAgICAgIGlzQ29tcGxldGU6IGlzQ29tcGxldGVDaGVja0JveC5jaGVja2VkLFxuICAgICAgICAgIHByb2plY3RJZDogcHJvamVjdElucHV0LnZhbHVlLFxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGhhbmRsZVN1Ym1pdEV2ZW50KTtcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHN1Ym1pdExpc3RlbmVycy5mb3JFYWNoKChsaXMpID0+IGxpcyhldmVudCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kdWxlO1xuICAgIH0pKCk7XG5cbiAgICB0aGlzLm5ld1RvZG9FdmVudExpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuZWRpdFRvZG9FdmVudExpc3RlbmVycyA9IFtdO1xuXG4gICAgdGhpcy5mb3JtU3VibWl0TGlzdGVuZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBsZXQgZGF0YSA9IHRoaXMuX3ZpZXcuZ2V0SW5wdXRWYWx1ZXMoKTtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEsIGV2ZW50LnRhcmdldC5kYXRhc2V0LmVkaXQpO1xuXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmRhdGFzZXQuZWRpdCA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJIZXJlXCIpO1xuICAgICAgICBjb25zdCB0b2RvSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC50b2RvSWQ7XG4gICAgICAgIHRoaXMuZWRpdFRvZG9FdmVudExpc3RlbmVycy5mb3JFYWNoKChsaXN0KSA9PiBsaXN0KHRvZG9JZCwgZGF0YSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0aGVyZVwiKTtcbiAgICAgICAgdGhpcy5uZXdUb2RvRXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdCkgPT4gbGlzdChkYXRhKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuX3ZpZXcuYWRkU3VibWl0TGlzdGVuZXIodGhpcy5mb3JtU3VibWl0TGlzdGVuZXIpO1xuICB9XG5cbiAgc3ViVG9OZXdUb2RvRXZlbnQoaGFuZGxlcikge1xuICAgIHRoaXMubmV3VG9kb0V2ZW50TGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XG4gIH1cblxuICBzdWJUb0VkaXRUb2RvRXZlbnQoaGFuZGxlcikge1xuICAgIHRoaXMuZWRpdFRvZG9FdmVudExpc3RlbmVycy5wdXNoKGhhbmRsZXIpO1xuICB9XG5cbiAgc2V0Rm9ybUFzTmV3VG9kbyhwcm9qZWN0SWQsIHByb2plY3RzTGlzdCkge1xuICAgIHRoaXMuX3ZpZXcucmVuZGVyQWRkaW5nRm9ybShwcm9qZWN0c0xpc3QsIHByb2plY3RJZCk7XG4gIH1cblxuICBzZXRGb3JtQXNFZGl0VG9kbyh0b2RvLCB0b2RvUHJvamVjdElkLCBwcm9qZWN0c0xpc3QpIHtcbiAgICB0aGlzLl92aWV3LnJlbmRlckVkaXRpbmdGb3JtKHRvZG8sIHRvZG9Qcm9qZWN0SWQsIHByb2plY3RzTGlzdCk7XG4gIH1cbn1cbiIsImNvbnN0IFByb2plY3RGb3JtID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgbW9kdWxlID0ge307XG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3QtZm9ybVwiKTtcbiAgY29uc3QgbmFtZUlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3RfX25hbWVcIik7XG4gIGNvbnN0IHN1Ym1pdEJ0biA9IGZvcm0ucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKTtcblxuICBsZXQgbmV3UHJvamVjdEV2ZW50TGlzdGVuZXJzID0gW107XG4gIGxldCBlZGl0UHJvamVjdEV2ZW50TGlzdGVuZXJzID0gW107XG5cbiAgbW9kdWxlLmFkZE5ld1Byb2plY3RMaXN0ZW5lciA9IChsaXN0ZW5lcikgPT4ge1xuICAgIG5ld1Byb2plY3RFdmVudExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfTtcbiAgbW9kdWxlLnJlbW92ZU5ld1Byb2plY3RMaXN0ZW5lciA9IChsaXN0ZW5lcikgPT4ge1xuICAgIG5ld1Byb2plY3RFdmVudExpc3RlbmVycyA9IG5ld1Byb2plY3RFdmVudExpc3RlbmVycy5maWx0ZXIoXG4gICAgICAobGlzKSA9PiBsaXMgIT09IGxpc3RlbmVyXG4gICAgKTtcbiAgfTtcblxuICBtb2R1bGUuYWRkRWRpdFByb2plY3RMaXN0ZW5lciA9IChsaXN0ZW5lcikgPT4ge1xuICAgIGVkaXRQcm9qZWN0RXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH07XG4gIG1vZHVsZS5yZW1vdmVFZGl0UHJvamVjdExpc3RlbmVyID0gKGxpc3RlbmVyKSA9PiB7XG4gICAgZWRpdFByb2plY3RFdmVudExpc3RlbmVycyA9IGVkaXRQcm9qZWN0RXZlbnRMaXN0ZW5lcnMuZmlsdGVyKFxuICAgICAgKGxpcykgPT4gbGlzICE9PSBsaXN0ZW5lclxuICAgICk7XG4gIH07XG5cbiAgbW9kdWxlLnJlbmRlckFkZGluZ0Zvcm0gPSAoKSA9PiB7XG4gICAgZm9ybS5kYXRhc2V0LmVkaXQgPSBcImZhbHNlXCI7XG4gICAgZm9ybS5kYXRhc2V0LnByb2plY3RJZCA9IFwiXCI7XG4gICAgbmFtZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICBzdWJtaXRCdG4udGV4dCA9IFwiQWRkIE5ldyBQcm9qZWN0XCI7XG4gIH07XG5cbiAgbW9kdWxlLnJlbmRlckVkaXRpbmdGb3JtID0gKHByb2plY3QpID0+IHtcbiAgICBmb3JtLmRhdGFzZXQuZWRpdCA9IFwidHJ1ZVwiO1xuICAgIGZvcm0uZGF0YXNldC5wcm9qZWN0SWQgPSBwcm9qZWN0LmlkO1xuICAgIG5hbWVJbnB1dC52YWx1ZSA9IHByb2plY3QubmFtZTtcbiAgICBzdWJtaXRCdG4udGV4dENvbnRlbnQgPSBcIkVkaXQgUHJvamVjdFwiO1xuICB9O1xuXG4gIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChldmVudC50YXJnZXQuZGF0YXNldC5lZGl0ID09PSBcInRydWVcIikge1xuICAgICAgY29uc3QgcHJvamVjdElkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQucHJvamVjdElkO1xuICAgICAgZWRpdFByb2plY3RFdmVudExpc3RlbmVycy5mb3JFYWNoKChsaXN0KSA9PlxuICAgICAgICBsaXN0KHByb2plY3RJZCwgbmFtZUlucHV0LnZhbHVlKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3UHJvamVjdEV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3QpID0+IGxpc3QobmFtZUlucHV0LnZhbHVlKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbW9kdWxlO1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdEZvcm07XG4iLCJpbXBvcnQgVG9kb0xpc3RDb21wb25lbnQgZnJvbSBcIi4vVG9kb0xpc3RDb21wb25lbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgTW9kZWwgZnJvbSBcIi4vTW9kZWxcIjtcbmltcG9ydCBUb2RvRm9ybUNvbXBvbmVudCBmcm9tIFwiLi9Ub2RvRm9ybUNvbXBvbmVudFwiO1xuaW1wb3J0IFByb2plY3RGb3JtIGZyb20gXCIuL1Byb2plY3RGb3JtXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc3BsYXlDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5uZXdUb2RvQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdG9kby1idG5cIik7XG4gICAgdGhpcy5uZXdQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctcHJvamVjdC1idG5cIik7XG4gICAgdGhpcy5wcm9qZWN0c1VMID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0cy1saXN0XCIpO1xuICAgIHRoaXMucHJvamVjdEZvcm1Nb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdC1tb2RhbFwiKTtcbiAgICB0aGlzLnRvZG9Gb3JtTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG8tbW9kYWxcIik7XG5cbiAgICB0aGlzLmN1cnJlbnRQcm9qZWN0SWQgPSBNb2RlbC5nZXRQcm9qZWN0cygpWzBdLmlkO1xuXG4gICAgLy8gQWRkIG5ldyBQcm9qZWN0XG4gICAgdGhpcy5uZXdQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBQcm9qZWN0Rm9ybS5yZW5kZXJBZGRpbmdGb3JtKCk7XG4gICAgICB0aGlzLnByb2plY3RGb3JtTW9kYWwuY2xhc3NMaXN0LmFkZChcInNob3dcIik7XG4gICAgfSk7XG4gICAgUHJvamVjdEZvcm0uYWRkTmV3UHJvamVjdExpc3RlbmVyKChuYW1lKSA9PiB7XG4gICAgICBNb2RlbC5hZGROZXdQcm9qZWN0KHsgbmFtZSB9KTtcbiAgICAgIHRoaXMucHJvamVjdEZvcm1Nb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcbiAgICB9KTtcblxuICAgIC8vIEVkaXQgUHJvamVjdFxuICAgIFByb2plY3RGb3JtLmFkZEVkaXRQcm9qZWN0TGlzdGVuZXIoKHByb2plY3RJZCwgbmFtZSkgPT4ge1xuICAgICAgTW9kZWwuZWRpdFByb2plY3QocHJvamVjdElkLCB7IG5hbWUgfSwgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIG5ldyBUb2RvXG4gICAgdGhpcy50b2RvRm9ybUNvbXBvbmVudCA9IG5ldyBUb2RvRm9ybUNvbXBvbmVudCgpO1xuICAgIHRoaXMubmV3VG9kb0J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy50b2RvRm9ybUNvbXBvbmVudC5zZXRGb3JtQXNOZXdUb2RvKFxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9qZWN0SWQsXG4gICAgICAgIE1vZGVsLmdldFByb2plY3RzKClcbiAgICAgICk7XG4gICAgICB0aGlzLnRvZG9Gb3JtTW9kYWwuY2xhc3NMaXN0LmFkZChcInNob3dcIik7XG4gICAgfSk7XG4gICAgdGhpcy50b2RvRm9ybUNvbXBvbmVudC5zdWJUb05ld1RvZG9FdmVudCgoZGF0YSkgPT4ge1xuICAgICAgTW9kZWwuYWRkTmV3VG9kbyhcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGR1ZURhdGU6IGRhdGEuZHVlRGF0ZSxcbiAgICAgICAgICBwcmlvcml0eTogZGF0YS5wcmlvcml0eSxcbiAgICAgICAgICBpc0NvbXBsZXRlOiBkYXRhLmlzQ29tcGxldGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEucHJvamVjdElkXG4gICAgICApO1xuICAgICAgdGhpcy50b2RvRm9ybU1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpO1xuICAgIH0pO1xuXG4gICAgLy8gIEVkaXQgVG9kb1xuICAgIHRoaXMudG9kb0Zvcm1Db21wb25lbnQuc3ViVG9FZGl0VG9kb0V2ZW50KCh0b2RvSWQsIGRhdGEpID0+IHtcbiAgICAgIE1vZGVsLmVkaXRUb2RvKFxuICAgICAgICB0b2RvSWQsXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbixcbiAgICAgICAgICBkdWVEYXRlOiBkYXRhLmR1ZURhdGUsXG4gICAgICAgICAgcHJpb3JpdHk6IGRhdGEucHJpb3JpdHksXG4gICAgICAgICAgaXNDb21wbGV0ZTogZGF0YS5pc0NvbXBsZXRlLFxuICAgICAgICB9LFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICAgIGlmIChkYXRhLnByb2plY3RJZCAhPT0gdGhpcy5jdXJyZW50UHJvamVjdElkKSB7XG4gICAgICAgIE1vZGVsLmNoYW5nZVRvZG9Qcm9qZWN0KHRvZG9JZCwgZGF0YS5wcm9qZWN0SWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy50b2RvTGlzdENvbXBvbmVudCA9IG5ldyBUb2RvTGlzdENvbXBvbmVudCgpO1xuICAgIHRoaXMudG9kb0xpc3RDb21wb25lbnQuc2V0VG9kb3MoXG4gICAgICBNb2RlbC5nZXRQcm9qZWN0VG9kb3ModGhpcy5jdXJyZW50UHJvamVjdElkKVxuICAgICk7XG4gICAgdGhpcy50b2RvTGlzdENvbXBvbmVudC5hZGRUb2RvQ2xpY2tMaXNldG5lcigodG9kb0lkKSA9PiB7XG4gICAgICB0aGlzLnRvZG9Gb3JtQ29tcG9uZW50LnNldEZvcm1Bc0VkaXRUb2RvKFxuICAgICAgICBNb2RlbC5nZXRUb2RvQnlJZCh0b2RvSWQpLFxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9qZWN0SWQsXG4gICAgICAgIE1vZGVsLmdldFByb2plY3RzKClcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgVG9kbyBkZWxldGUgaGFuZGxlclxuICAgIHRoaXMudG9kb0xpc3RDb21wb25lbnQuYWRkVG9kb0RlbGV0ZUNsaWNrTGlzdGVuZXIoKHRvZG9JZCkgPT4ge1xuICAgICAgTW9kZWwuZWRpdFRvZG8odG9kb0lkLCBudWxsLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIC8vIFJlcmVuZGVyIFRvZG9zIGxpc3Qgb24gY3VycmVudCBwcm9qZWN0J3MgdG9kb3MgY2hhbmdlXG4gICAgTW9kZWwuc3ViVG9Qcm9qY3RFZGl0KChkYXRhKSA9PiB7XG4gICAgICBpZiAoZGF0YS5wcm9qZWN0SWQgIT09IHRoaXMuY3VycmVudFByb2plY3RJZCkgcmV0dXJuO1xuXG4gICAgICB0aGlzLnRvZG9MaXN0Q29tcG9uZW50LnNldFRvZG9zKFxuICAgICAgICBNb2RlbC5nZXRQcm9qZWN0VG9kb3ModGhpcy5jdXJyZW50UHJvamVjdElkKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIC8vIFJlcmVuZGVyIHByb2plY3RzIGxpc3Qgb24gUHJvamVjdCBhZGRcbiAgICBNb2RlbC5zdWJUb1Byb2pjdEFkZCgoKSA9PiB7XG4gICAgICB0aGlzLnJlbmRlclByb2plY3RzTGlzdChNb2RlbC5nZXRQcm9qZWN0cygpKTtcbiAgICB9KTtcblxuICAgIC8vIFJlcmVtZGVyIHByb2plY3RzIGxpc3Qgb24gcHJvamVjdCBlZGl0XG4gICAgTW9kZWwuc3ViVG9Qcm9qY3RFZGl0KCgpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyUHJvamVjdHNMaXN0KE1vZGVsLmdldFByb2plY3RzKCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5oYW5kbGVQcm9qZWN0SXRlbUNsaWNrID0gdGhpcy5oYW5kbGVQcm9qZWN0SXRlbUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcm9qZWN0c1VMLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZVByb2plY3RJdGVtQ2xpY2spO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT0gdGhpcy5wcm9qZWN0Rm9ybU1vZGFsKSB7XG4gICAgICAgIHRoaXMucHJvamVjdEZvcm1Nb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09IHRoaXMudG9kb0Zvcm1Nb2RhbCkge1xuICAgICAgICB0aGlzLnRvZG9Gb3JtTW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVQcm9qZWN0SXRlbUNsaWNrKGV2ZW50KSB7XG4gICAgY29uc3QgcHJvamVjdElkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuaWQ7XG4gICAgaWYgKCFwcm9qZWN0SWQpIHJldHVybjtcblxuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicHJvamVjdC1lZGl0LWJ0blwiKSkge1xuICAgICAgY29uc3QgcHJvamVjdCA9IE1vZGVsLmdldFByb2plY3RzKCkuZmluZCgocCkgPT4gcC5pZCA9PT0gcHJvamVjdElkKTtcbiAgICAgIGlmICghcHJvamVjdCkgcmV0dXJuO1xuXG4gICAgICBQcm9qZWN0Rm9ybS5yZW5kZXJFZGl0aW5nRm9ybShwcm9qZWN0KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwcm9qZWN0LWRlbGV0ZS1idG5cIikpIHtcbiAgICAgIGNvbnN0IHByb2plY3QgPSBNb2RlbC5nZXRQcm9qZWN0cygpLmZpbmQoKHApID0+IHAuaWQgPT09IHByb2plY3RJZCk7XG4gICAgICBNb2RlbC5lZGl0UHJvamVjdChwcm9qZWN0LmlkLCBudWxsLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJvamVjdFRvZG9zID0gTW9kZWwuZ2V0UHJvamVjdFRvZG9zKHByb2plY3RJZCk7XG4gICAgICBpZiAoIXByb2plY3RUb2RvcykgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMuY3VycmVudFByb2plY3RJZCA9PT0gcHJvamVjdElkKSByZXR1cm47XG5cbiAgICAgIHRoaXMuY3VycmVudFByb2plY3RJZCA9IHByb2plY3RJZDtcbiAgICAgIHRoaXMucmVuZGVyUHJvamVjdHNMaXN0KE1vZGVsLmdldFByb2plY3RzKCkpO1xuICAgICAgdGhpcy50b2RvTGlzdENvbXBvbmVudC5zZXRUb2Rvcyhwcm9qZWN0VG9kb3MpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclByb2plY3RzTGlzdChwcm9qZWN0cyA9IFtdKSB7XG4gICAgY29uc3QgbGlzdEl0ZW1zID0gcHJvamVjdHMubWFwKChwKSA9PiB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCh7XG4gICAgICAgIHRhZzogXCJsaVwiLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoe1xuICAgICAgICAgICAgdGFnOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgY2xhc3NOYW1lczogW1xuICAgICAgICAgICAgICBcInByb2plY3QtaXRlbVwiLFxuICAgICAgICAgICAgICBcImJ0blwiLFxuICAgICAgICAgICAgICBgJHtwLmlkID09PSB0aGlzLmN1cnJlbnRQcm9qZWN0SWQgPyBcImN1cnJlbnQtcHJvamVjdFwiIDogXCJcIn1gLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRleHRDb250ZW50OiBgJHtwLm5hbWV9YCxcbiAgICAgICAgICAgIGRhdGFzZXQ6IHtcbiAgICAgICAgICAgICAgaWQ6IGAke3AuaWR9YCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCh7XG4gICAgICAgICAgICB0YWc6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBjbGFzc05hbWVzOiBbXCJidG5cIiwgXCJwcm9qZWN0LWVkaXQtYnRuXCJdLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6IGBFZGl0YCxcbiAgICAgICAgICAgIGRhdGFzZXQ6IHtcbiAgICAgICAgICAgICAgaWQ6IGAke3AuaWR9YCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgY3JlYXRlRWxlbWVudCh7XG4gICAgICAgICAgICB0YWc6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBjbGFzc05hbWVzOiBbXCJidG5cIiwgXCJwcm9qZWN0LWRlbGV0ZS1idG5cIl0sXG4gICAgICAgICAgICB0ZXh0Q29udGVudDogYERlbGV0ZWAsXG4gICAgICAgICAgICBkYXRhc2V0OiB7XG4gICAgICAgICAgICAgIGlkOiBgJHtwLmlkfWAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5wcm9qZWN0c1VMLmlubmVySFRNTCA9IFwiXCI7XG4gICAgdGhpcy5wcm9qZWN0c1VMLmFwcGVuZCguLi5saXN0SXRlbXMpO1xuICB9XG59XG4iLCJpbXBvcnQgXCJ0aGUtbmV3LWNzcy1yZXNldC9jc3MvcmVzZXQuY3NzXCI7XG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5pbXBvcnQgRGlzcGxheUNvbnRyb2xsZXIgZnJvbSBcIi4vbW9kdWxlcy9EaXNwbGF5Q29udHJvbGxlclwiO1xuaW1wb3J0ICogYXMgTW9kZWwgZnJvbSBcIi4vbW9kdWxlcy9Nb2RlbFwiO1xuXG5jb25zdCBwcm9qZWN0cyA9IE1vZGVsLmdldFByb2plY3RzKCk7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gIGNvbnN0IERDID0gbmV3IERpc3BsYXlDb250cm9sbGVyKCk7XG5cbiAgREMucmVuZGVyUHJvamVjdHNMaXN0KHByb2plY3RzKTtcbn0pO1xuXG5nbG9iYWxUaGlzLk1vZGVsID0gTW9kZWw7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiYWxlYSIsInhvcjEyOCIsInhvcndvdyIsInhvcnNoaWZ0NyIsInhvcjQwOTYiLCJ0eWNoZWkiLCJzciIsImdsb2JhbCIsImRlZmluZSIsIkFsZWEiLCJzZWVkIiwibiIsIm1lIiwibWFzaCIsImgiLCJjaGFyQ29kZUF0IiwibmV4dCIsInQiLCJzMCIsImMiLCJzMSIsInMyIiwiY29weSIsImYiLCJpbXBsIiwib3B0cyIsInhnIiwic3RhdGUiLCJwcm5nIiwiaW50MzIiLCJkb3VibGUiLCJxdWljayIsIlhvckdlbiIsInN0cnNlZWQiLCJiIiwiZCIsImEiLCJNYXRoIiwiZmxvb3IiLCJyZXN1bHQiLCJ4IiwieSIsInoiLCJ3IiwidiIsIlgiLCJqIiwibGltaXQiLCJtYXgiLCJpbml0IiwiRGF0ZSIsInBvb2wiLCJtYXRoIiwibm9kZWNyeXB0byIsIndpZHRoIiwiY2h1bmtzIiwicm5nbmFtZSIsInN0YXJ0ZGVub20iLCJwb3ciLCJzaWduaWZpY2FuY2UiLCJvdmVyZmxvdyIsIm1hc2siLCJzZWVkcmFuZG9tIiwiY2FsbGJhY2siLCJrZXkiLCJzaG9ydHNlZWQiLCJtaXhrZXkiLCJmbGF0dGVuIiwiZW50cm9weSIsInRvc3RyaW5nIiwib3V0IiwicmFuZG9tQnl0ZXMiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJlIiwiYnJvd3NlciIsIm5hdmlnYXRvciIsInBsdWdpbnMiLCJzY3JlZW4iLCJhdXRvc2VlZCIsImFyYzQiLCJBUkM0IiwiZyIsIlMiLCJwYXNzIiwiaXNfbWF0aF9jYWxsIiwia2V5bGVuIiwicyIsImNvdW50IiwiciIsIm9iaiIsImRlcHRoIiwicHJvcCIsInR5cCIsInNtZWFyIiwic3RyaW5nc2VlZCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwicmFuZG9tIiwiZXgiLCJzZWxmIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm0iLCJhbWREIiwiYW1kTyIsImdldHRlciIsImRlZmluaXRpb24iLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwibm1kIiwicGF0aHMiLCJjaGlsZHJlbiIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYmFzZVVSSSIsImhyZWYiLCJUb2RvTGlzdENvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiX3ZpZXciLCJ0b2RvQ2xpY2tMaXN0ZW5lcnMiLCJ0b2RvRGVsZXRlQnRuTGlzdGVuZXJzIiwidG9kb0xpc3RDb3RuYWluZXIiLCJ0b2RvTGlzdFVMIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvZG9JZCIsImRhdGFzZXQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImZvckVhY2giLCJsaXN0ZW5lciIsInJlbmRlciIsInRvZG9zIiwibGlzdEl0ZW1zIiwic29ydCIsInQxIiwidDIiLCJwcmlvcml0eSIsInJlZHVjZSIsImh0bWwiLCJ0b2RvIiwidG9kb1RlbXBsYXRlIiwiaW5uZXJIVE1MIiwiaXNDb21wbGV0ZSIsInRpdGxlIiwiZHVlRGF0ZSIsImFkZFRvZG9DbGlja0xpc3RlbmVyIiwiaGFuZGxlciIsImFkZFRvZG9EZWxldGVDbGlja0xpc3RlbmVyIiwiX21vZGVsIiwiY2hhbmdlTGlzdGVuZXJzIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJyZW1vdmVDaGFuZ2VMaXN0ZW5lciIsImZpbHRlciIsImwiLCJ0cmlnZ2VyQ2hhbmdlIiwiZ2V0VG9kb3MiLCJzZXRUb2RvcyIsIm1vZGVsQ2hhbmdlSGFuZGxlciIsImJpbmQiLCJhZGRUb2RvQ2xpY2tMaXNldG5lciIsIkFycmF5IiwiaXNBcnJheSIsImZyb20iLCJtaW4iLCJwcmVjaXNpb24iLCJmcmFjdGlvbiIsIk51bWJlciIsInRvRml4ZWQiLCJ0b1VwcGVyQ2FzZSIsImdlIiwiemEiLCJZYSIsInllYXJzIiwiZ2V0VGltZSIsInRvIiwiJCIsImtleXMiLCJjaGluYSIsIml0YWx5IiwiaW5kaWEiLCJtZXhpY28iLCJqYXBhbiIsImZyYW5jZSIsImxlYmFub24iLCJ0aGFpbGFuZCIsImdyZWVjZSIsInR1cmtleSIsInNwYWluIiwidmVuZXp1ZWxhIiwiY2hpbGUiLCJhcmdlbnRpbmEiLCJjb2xvbWJpYSIsImVjdWFkb3IiLCJwZXJ1Iiwicm9tYW5pYSIsIlR0IiwiRW8iLCJXbyIsIndpIiwidGFnIiwiY2xhc3NOYW1lcyIsInRleHRDb250ZW50IiwiZXZlbnRIYW5kbGVycyIsImVsbSIsImNsYXNzTmFtZSIsImFkZCIsImNoaWxkIiwiY3JlYXRlRmFrZVRvZG9zIiwibnVtYmVyIiwiZGVzY3JpcHRpb24iLCJvbHltcGljIiwid2ludGVyT2x5bXBpYyIsIm91dGRvb3IiLCJyYW5kb21VVUlEIiwicm5kczgiLCJybmciLCJieXRlVG9IZXgiLCJidWYiLCJvZmZzZXQiLCJybmRzIiwiYXJyIiwidG9Mb3dlckNhc2UiLCJ1bnNhZmVTdHJpbmdpZnkiLCJQcm9qZWN0IiwibmFtZSIsIlRvZG8iLCJwcm9qZWN0cyIsIm5ld1Byb2plY3RBZGRTdWJzIiwibmV3VG9kb0FkZFN1YnMiLCJlZGl0UHJvamVjdFN1YnMiLCJlZGl0VG9kb1N1YnMiLCJhZGROZXdQcm9qZWN0IiwibmV3UHJvamVjdCIsImxpcyIsInByb2plY3RJZCIsImFkZE5ld1RvZG8iLCJmb3VuZFByb2plY3QiLCJmaW5kIiwibmV3VG9kbyIsImVkaXRQcm9qZWN0IiwibmV3UHJvamVjdFN0YXRlIiwiaXNEZWxldGUiLCJhc3NpZ24iLCJlZGl0VG9kbyIsIm5ld1RvZG9TdGF0ZSIsImZpbmRUb2RvQnlJZCIsInByb2plY3QiLCJjaGFuZ2VUb2RvUHJvamVjdCIsIm5ld1Byb2plY3RJZCIsInN1YlRvUHJvamN0QWRkIiwidW5TdWJGcm9tUHJvamVjdEFkZCIsInN1YlRvVG9kb0FkZCIsInVuU3ViRnJvbVRvZG9BZGQiLCJzdWJUb1Byb2pjdEVkaXQiLCJ1blN1YkZyb21Qcm9qZWN0RWRpdCIsInN1YlRvVG9kb0VkaXQiLCJ1blN1YkZyb21Ub2RvRWRpdCIsImZvdW5kVG9kbyIsImdldFByb2plY3RzIiwiZ2V0UHJvamVjdFRvZG9zIiwiZ2V0VG9kb0J5SWQiLCJzdG9yZVByb2plY3RzIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInByb2plY3RzSnNvbk9iamVjcyIsInBhcnNlIiwiZ2V0SXRlbSIsImNyZWF0ZUZha2VQcm9qZWN0cyIsInBPYmoiLCJ0T2JqIiwiaW5pdFByb2plY3RzTGlzdCIsIlRvZG9Gb3JtQ29tcG9uZW50IiwiZm9ybSIsInRpdGxlSW5wdXQiLCJkZXNjcmlwdGlvbklucHV0IiwiZHVlRGF0ZUlucHV0IiwicHJpb3JpdHlJbnB1dCIsInByb2plY3RJbnB1dCIsImlzQ29tcGxldGVDaGVja0JveCIsInN1Ym1pdEJ0biIsInN1Ym1pdExpc3RlbmVycyIsImFkZFN1Ym1pdExpc3RlbmVyIiwicmVtb3ZlU3VibWl0TGlzdGVuZXIiLCJyZW5kZXJBZGRpbmdGb3JtIiwicHJvamVjdHNMaXN0IiwiY3VycmVudFByb2plY3RJZCIsImVkaXQiLCJ2YWx1ZUFzRGF0ZSIsIm51bSIsInJlbmRlckVkaXRpbmdGb3JtIiwidG9kb1Byb2plY3RJZCIsImdldElucHV0VmFsdWVzIiwiY2hlY2tlZCIsImV2ZW50IiwibmV3VG9kb0V2ZW50TGlzdGVuZXJzIiwiZWRpdFRvZG9FdmVudExpc3RlbmVycyIsImZvcm1TdWJtaXRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwiY29uc29sZSIsImxvZyIsInN1YlRvTmV3VG9kb0V2ZW50Iiwic3ViVG9FZGl0VG9kb0V2ZW50Iiwic2V0Rm9ybUFzTmV3VG9kbyIsInNldEZvcm1Bc0VkaXRUb2RvIiwibmFtZUlucHV0IiwibmV3UHJvamVjdEV2ZW50TGlzdGVuZXJzIiwiZWRpdFByb2plY3RFdmVudExpc3RlbmVycyIsImFkZE5ld1Byb2plY3RMaXN0ZW5lciIsInJlbW92ZU5ld1Byb2plY3RMaXN0ZW5lciIsImFkZEVkaXRQcm9qZWN0TGlzdGVuZXIiLCJyZW1vdmVFZGl0UHJvamVjdExpc3RlbmVyIiwidGV4dCIsIkRpc3BsYXlDb250cm9sbGVyIiwibmV3VG9kb0J0biIsIm5ld1Byb2plY3RCdG4iLCJwcm9qZWN0c1VMIiwicHJvamVjdEZvcm1Nb2RhbCIsInRvZG9Gb3JtTW9kYWwiLCJ0b2RvRm9ybUNvbXBvbmVudCIsInRvZG9MaXN0Q29tcG9uZW50IiwicmVuZGVyUHJvamVjdHNMaXN0IiwiaGFuZGxlUHJvamVjdEl0ZW1DbGljayIsInByb2plY3RUb2RvcyIsImFwcGVuZCIsIk1vZGVsIl0sInNvdXJjZVJvb3QiOiIifQ==